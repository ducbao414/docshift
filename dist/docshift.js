var docshift = (() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x)(function(x) {
    if (typeof require !== "undefined") return require.apply(this, arguments);
    throw Error('Dynamic require of "' + x + '" is not supported');
  });
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // node_modules/docx/build/index.js
  var require_build = __commonJS({
    "node_modules/docx/build/index.js"(exports2, module2) {
      !function(e, t) {
        "object" == typeof exports2 && "object" == typeof module2 ? module2.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == typeof exports2 ? exports2.docx = t() : e.docx = t();
      }(globalThis, () => (() => {
        var e = { 9742: (e2, t2) => {
          "use strict";
          t2.byteLength = function(e3) {
            var t3 = c(e3), r3 = t3[0], n3 = t3[1];
            return 3 * (r3 + n3) / 4 - n3;
          }, t2.toByteArray = function(e3) {
            var t3, r3, i2 = c(e3), o2 = i2[0], a2 = i2[1], u2 = new s(function(e4, t4, r4) {
              return 3 * (t4 + r4) / 4 - r4;
            }(0, o2, a2)), l2 = 0, h = a2 > 0 ? o2 - 4 : o2;
            for (r3 = 0; r3 < h; r3 += 4) t3 = n2[e3.charCodeAt(r3)] << 18 | n2[e3.charCodeAt(r3 + 1)] << 12 | n2[e3.charCodeAt(r3 + 2)] << 6 | n2[e3.charCodeAt(r3 + 3)], u2[l2++] = t3 >> 16 & 255, u2[l2++] = t3 >> 8 & 255, u2[l2++] = 255 & t3;
            return 2 === a2 && (t3 = n2[e3.charCodeAt(r3)] << 2 | n2[e3.charCodeAt(r3 + 1)] >> 4, u2[l2++] = 255 & t3), 1 === a2 && (t3 = n2[e3.charCodeAt(r3)] << 10 | n2[e3.charCodeAt(r3 + 1)] << 4 | n2[e3.charCodeAt(r3 + 2)] >> 2, u2[l2++] = t3 >> 8 & 255, u2[l2++] = 255 & t3), u2;
          }, t2.fromByteArray = function(e3) {
            for (var t3, n3 = e3.length, s2 = n3 % 3, i2 = [], o2 = 16383, a2 = 0, c2 = n3 - s2; a2 < c2; a2 += o2) i2.push(u(e3, a2, a2 + o2 > c2 ? c2 : a2 + o2));
            return 1 === s2 ? (t3 = e3[n3 - 1], i2.push(r2[t3 >> 2] + r2[t3 << 4 & 63] + "==")) : 2 === s2 && (t3 = (e3[n3 - 2] << 8) + e3[n3 - 1], i2.push(r2[t3 >> 10] + r2[t3 >> 4 & 63] + r2[t3 << 2 & 63] + "=")), i2.join("");
          };
          for (var r2 = [], n2 = [], s = "undefined" != typeof Uint8Array ? Uint8Array : Array, i = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", o = 0, a = i.length; o < a; ++o) r2[o] = i[o], n2[i.charCodeAt(o)] = o;
          function c(e3) {
            var t3 = e3.length;
            if (t3 % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
            var r3 = e3.indexOf("=");
            return -1 === r3 && (r3 = t3), [r3, r3 === t3 ? 0 : 4 - r3 % 4];
          }
          function u(e3, t3, n3) {
            for (var s2, i2, o2 = [], a2 = t3; a2 < n3; a2 += 3) s2 = (e3[a2] << 16 & 16711680) + (e3[a2 + 1] << 8 & 65280) + (255 & e3[a2 + 2]), o2.push(r2[(i2 = s2) >> 18 & 63] + r2[i2 >> 12 & 63] + r2[i2 >> 6 & 63] + r2[63 & i2]);
            return o2.join("");
          }
          n2["-".charCodeAt(0)] = 62, n2["_".charCodeAt(0)] = 63;
        }, 8764: (e2, t2, r2) => {
          "use strict";
          const n2 = r2(9742), s = r2(645), i = "function" == typeof Symbol && "function" == typeof Symbol.for ? Symbol.for("nodejs.util.inspect.custom") : null;
          t2.Buffer = c, t2.SlowBuffer = function(e3) {
            return +e3 != e3 && (e3 = 0), c.alloc(+e3);
          }, t2.INSPECT_MAX_BYTES = 50;
          const o = 2147483647;
          function a(e3) {
            if (e3 > o) throw new RangeError('The value "' + e3 + '" is invalid for option "size"');
            const t3 = new Uint8Array(e3);
            return Object.setPrototypeOf(t3, c.prototype), t3;
          }
          function c(e3, t3, r3) {
            if ("number" == typeof e3) {
              if ("string" == typeof t3) throw new TypeError('The "string" argument must be of type string. Received type number');
              return h(e3);
            }
            return u(e3, t3, r3);
          }
          function u(e3, t3, r3) {
            if ("string" == typeof e3) return function(e4, t4) {
              if ("string" == typeof t4 && "" !== t4 || (t4 = "utf8"), !c.isEncoding(t4)) throw new TypeError("Unknown encoding: " + t4);
              const r4 = 0 | m(e4, t4);
              let n4 = a(r4);
              const s3 = n4.write(e4, t4);
              return s3 !== r4 && (n4 = n4.slice(0, s3)), n4;
            }(e3, t3);
            if (ArrayBuffer.isView(e3)) return function(e4) {
              if (q(e4, Uint8Array)) {
                const t4 = new Uint8Array(e4);
                return d(t4.buffer, t4.byteOffset, t4.byteLength);
              }
              return p(e4);
            }(e3);
            if (null == e3) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e3);
            if (q(e3, ArrayBuffer) || e3 && q(e3.buffer, ArrayBuffer)) return d(e3, t3, r3);
            if ("undefined" != typeof SharedArrayBuffer && (q(e3, SharedArrayBuffer) || e3 && q(e3.buffer, SharedArrayBuffer))) return d(e3, t3, r3);
            if ("number" == typeof e3) throw new TypeError('The "value" argument must not be of type number. Received type number');
            const n3 = e3.valueOf && e3.valueOf();
            if (null != n3 && n3 !== e3) return c.from(n3, t3, r3);
            const s2 = function(e4) {
              if (c.isBuffer(e4)) {
                const t4 = 0 | f(e4.length), r4 = a(t4);
                return 0 === r4.length || e4.copy(r4, 0, 0, t4), r4;
              }
              return void 0 !== e4.length ? "number" != typeof e4.length || Z(e4.length) ? a(0) : p(e4) : "Buffer" === e4.type && Array.isArray(e4.data) ? p(e4.data) : void 0;
            }(e3);
            if (s2) return s2;
            if ("undefined" != typeof Symbol && null != Symbol.toPrimitive && "function" == typeof e3[Symbol.toPrimitive]) return c.from(e3[Symbol.toPrimitive]("string"), t3, r3);
            throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e3);
          }
          function l2(e3) {
            if ("number" != typeof e3) throw new TypeError('"size" argument must be of type number');
            if (e3 < 0) throw new RangeError('The value "' + e3 + '" is invalid for option "size"');
          }
          function h(e3) {
            return l2(e3), a(e3 < 0 ? 0 : 0 | f(e3));
          }
          function p(e3) {
            const t3 = e3.length < 0 ? 0 : 0 | f(e3.length), r3 = a(t3);
            for (let n3 = 0; n3 < t3; n3 += 1) r3[n3] = 255 & e3[n3];
            return r3;
          }
          function d(e3, t3, r3) {
            if (t3 < 0 || e3.byteLength < t3) throw new RangeError('"offset" is outside of buffer bounds');
            if (e3.byteLength < t3 + (r3 || 0)) throw new RangeError('"length" is outside of buffer bounds');
            let n3;
            return n3 = void 0 === t3 && void 0 === r3 ? new Uint8Array(e3) : void 0 === r3 ? new Uint8Array(e3, t3) : new Uint8Array(e3, t3, r3), Object.setPrototypeOf(n3, c.prototype), n3;
          }
          function f(e3) {
            if (e3 >= o) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + o.toString(16) + " bytes");
            return 0 | e3;
          }
          function m(e3, t3) {
            if (c.isBuffer(e3)) return e3.length;
            if (ArrayBuffer.isView(e3) || q(e3, ArrayBuffer)) return e3.byteLength;
            if ("string" != typeof e3) throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof e3);
            const r3 = e3.length, n3 = arguments.length > 2 && true === arguments[2];
            if (!n3 && 0 === r3) return 0;
            let s2 = false;
            for (; ; ) switch (t3) {
              case "ascii":
              case "latin1":
              case "binary":
                return r3;
              case "utf8":
              case "utf-8":
                return V(e3).length;
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return 2 * r3;
              case "hex":
                return r3 >>> 1;
              case "base64":
                return $(e3).length;
              default:
                if (s2) return n3 ? -1 : V(e3).length;
                t3 = ("" + t3).toLowerCase(), s2 = true;
            }
          }
          function w(e3, t3, r3) {
            let n3 = false;
            if ((void 0 === t3 || t3 < 0) && (t3 = 0), t3 > this.length) return "";
            if ((void 0 === r3 || r3 > this.length) && (r3 = this.length), r3 <= 0) return "";
            if ((r3 >>>= 0) <= (t3 >>>= 0)) return "";
            for (e3 || (e3 = "utf8"); ; ) switch (e3) {
              case "hex":
                return C(this, t3, r3);
              case "utf8":
              case "utf-8":
                return S(this, t3, r3);
              case "ascii":
                return R(this, t3, r3);
              case "latin1":
              case "binary":
                return N(this, t3, r3);
              case "base64":
                return A(this, t3, r3);
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return O(this, t3, r3);
              default:
                if (n3) throw new TypeError("Unknown encoding: " + e3);
                e3 = (e3 + "").toLowerCase(), n3 = true;
            }
          }
          function g(e3, t3, r3) {
            const n3 = e3[t3];
            e3[t3] = e3[r3], e3[r3] = n3;
          }
          function y(e3, t3, r3, n3, s2) {
            if (0 === e3.length) return -1;
            if ("string" == typeof r3 ? (n3 = r3, r3 = 0) : r3 > 2147483647 ? r3 = 2147483647 : r3 < -2147483648 && (r3 = -2147483648), Z(r3 = +r3) && (r3 = s2 ? 0 : e3.length - 1), r3 < 0 && (r3 = e3.length + r3), r3 >= e3.length) {
              if (s2) return -1;
              r3 = e3.length - 1;
            } else if (r3 < 0) {
              if (!s2) return -1;
              r3 = 0;
            }
            if ("string" == typeof t3 && (t3 = c.from(t3, n3)), c.isBuffer(t3)) return 0 === t3.length ? -1 : b(e3, t3, r3, n3, s2);
            if ("number" == typeof t3) return t3 &= 255, "function" == typeof Uint8Array.prototype.indexOf ? s2 ? Uint8Array.prototype.indexOf.call(e3, t3, r3) : Uint8Array.prototype.lastIndexOf.call(e3, t3, r3) : b(e3, [t3], r3, n3, s2);
            throw new TypeError("val must be string, number or Buffer");
          }
          function b(e3, t3, r3, n3, s2) {
            let i2, o2 = 1, a2 = e3.length, c2 = t3.length;
            if (void 0 !== n3 && ("ucs2" === (n3 = String(n3).toLowerCase()) || "ucs-2" === n3 || "utf16le" === n3 || "utf-16le" === n3)) {
              if (e3.length < 2 || t3.length < 2) return -1;
              o2 = 2, a2 /= 2, c2 /= 2, r3 /= 2;
            }
            function u2(e4, t4) {
              return 1 === o2 ? e4[t4] : e4.readUInt16BE(t4 * o2);
            }
            if (s2) {
              let n4 = -1;
              for (i2 = r3; i2 < a2; i2++) if (u2(e3, i2) === u2(t3, -1 === n4 ? 0 : i2 - n4)) {
                if (-1 === n4 && (n4 = i2), i2 - n4 + 1 === c2) return n4 * o2;
              } else -1 !== n4 && (i2 -= i2 - n4), n4 = -1;
            } else for (r3 + c2 > a2 && (r3 = a2 - c2), i2 = r3; i2 >= 0; i2--) {
              let r4 = true;
              for (let n4 = 0; n4 < c2; n4++) if (u2(e3, i2 + n4) !== u2(t3, n4)) {
                r4 = false;
                break;
              }
              if (r4) return i2;
            }
            return -1;
          }
          function x(e3, t3, r3, n3) {
            r3 = Number(r3) || 0;
            const s2 = e3.length - r3;
            n3 ? (n3 = Number(n3)) > s2 && (n3 = s2) : n3 = s2;
            const i2 = t3.length;
            let o2;
            for (n3 > i2 / 2 && (n3 = i2 / 2), o2 = 0; o2 < n3; ++o2) {
              const n4 = parseInt(t3.substr(2 * o2, 2), 16);
              if (Z(n4)) return o2;
              e3[r3 + o2] = n4;
            }
            return o2;
          }
          function v(e3, t3, r3, n3) {
            return X(V(t3, e3.length - r3), e3, r3, n3);
          }
          function _(e3, t3, r3, n3) {
            return X(function(e4) {
              const t4 = [];
              for (let r4 = 0; r4 < e4.length; ++r4) t4.push(255 & e4.charCodeAt(r4));
              return t4;
            }(t3), e3, r3, n3);
          }
          function E(e3, t3, r3, n3) {
            return X($(t3), e3, r3, n3);
          }
          function T(e3, t3, r3, n3) {
            return X(function(e4, t4) {
              let r4, n4, s2;
              const i2 = [];
              for (let o2 = 0; o2 < e4.length && !((t4 -= 2) < 0); ++o2) r4 = e4.charCodeAt(o2), n4 = r4 >> 8, s2 = r4 % 256, i2.push(s2), i2.push(n4);
              return i2;
            }(t3, e3.length - r3), e3, r3, n3);
          }
          function A(e3, t3, r3) {
            return 0 === t3 && r3 === e3.length ? n2.fromByteArray(e3) : n2.fromByteArray(e3.slice(t3, r3));
          }
          function S(e3, t3, r3) {
            r3 = Math.min(e3.length, r3);
            const n3 = [];
            let s2 = t3;
            for (; s2 < r3; ) {
              const t4 = e3[s2];
              let i2 = null, o2 = t4 > 239 ? 4 : t4 > 223 ? 3 : t4 > 191 ? 2 : 1;
              if (s2 + o2 <= r3) {
                let r4, n4, a2, c2;
                switch (o2) {
                  case 1:
                    t4 < 128 && (i2 = t4);
                    break;
                  case 2:
                    r4 = e3[s2 + 1], 128 == (192 & r4) && (c2 = (31 & t4) << 6 | 63 & r4, c2 > 127 && (i2 = c2));
                    break;
                  case 3:
                    r4 = e3[s2 + 1], n4 = e3[s2 + 2], 128 == (192 & r4) && 128 == (192 & n4) && (c2 = (15 & t4) << 12 | (63 & r4) << 6 | 63 & n4, c2 > 2047 && (c2 < 55296 || c2 > 57343) && (i2 = c2));
                    break;
                  case 4:
                    r4 = e3[s2 + 1], n4 = e3[s2 + 2], a2 = e3[s2 + 3], 128 == (192 & r4) && 128 == (192 & n4) && 128 == (192 & a2) && (c2 = (15 & t4) << 18 | (63 & r4) << 12 | (63 & n4) << 6 | 63 & a2, c2 > 65535 && c2 < 1114112 && (i2 = c2));
                }
              }
              null === i2 ? (i2 = 65533, o2 = 1) : i2 > 65535 && (i2 -= 65536, n3.push(i2 >>> 10 & 1023 | 55296), i2 = 56320 | 1023 & i2), n3.push(i2), s2 += o2;
            }
            return function(e4) {
              const t4 = e4.length;
              if (t4 <= I) return String.fromCharCode.apply(String, e4);
              let r4 = "", n4 = 0;
              for (; n4 < t4; ) r4 += String.fromCharCode.apply(String, e4.slice(n4, n4 += I));
              return r4;
            }(n3);
          }
          t2.kMaxLength = o, c.TYPED_ARRAY_SUPPORT = function() {
            try {
              const e3 = new Uint8Array(1), t3 = { foo: function() {
                return 42;
              } };
              return Object.setPrototypeOf(t3, Uint8Array.prototype), Object.setPrototypeOf(e3, t3), 42 === e3.foo();
            } catch (e3) {
              return false;
            }
          }(), c.TYPED_ARRAY_SUPPORT || "undefined" == typeof console || "function" != typeof console.error || console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."), Object.defineProperty(c.prototype, "parent", { enumerable: true, get: function() {
            if (c.isBuffer(this)) return this.buffer;
          } }), Object.defineProperty(c.prototype, "offset", { enumerable: true, get: function() {
            if (c.isBuffer(this)) return this.byteOffset;
          } }), c.poolSize = 8192, c.from = function(e3, t3, r3) {
            return u(e3, t3, r3);
          }, Object.setPrototypeOf(c.prototype, Uint8Array.prototype), Object.setPrototypeOf(c, Uint8Array), c.alloc = function(e3, t3, r3) {
            return function(e4, t4, r4) {
              return l2(e4), e4 <= 0 ? a(e4) : void 0 !== t4 ? "string" == typeof r4 ? a(e4).fill(t4, r4) : a(e4).fill(t4) : a(e4);
            }(e3, t3, r3);
          }, c.allocUnsafe = function(e3) {
            return h(e3);
          }, c.allocUnsafeSlow = function(e3) {
            return h(e3);
          }, c.isBuffer = function(e3) {
            return null != e3 && true === e3._isBuffer && e3 !== c.prototype;
          }, c.compare = function(e3, t3) {
            if (q(e3, Uint8Array) && (e3 = c.from(e3, e3.offset, e3.byteLength)), q(t3, Uint8Array) && (t3 = c.from(t3, t3.offset, t3.byteLength)), !c.isBuffer(e3) || !c.isBuffer(t3)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
            if (e3 === t3) return 0;
            let r3 = e3.length, n3 = t3.length;
            for (let s2 = 0, i2 = Math.min(r3, n3); s2 < i2; ++s2) if (e3[s2] !== t3[s2]) {
              r3 = e3[s2], n3 = t3[s2];
              break;
            }
            return r3 < n3 ? -1 : n3 < r3 ? 1 : 0;
          }, c.isEncoding = function(e3) {
            switch (String(e3).toLowerCase()) {
              case "hex":
              case "utf8":
              case "utf-8":
              case "ascii":
              case "latin1":
              case "binary":
              case "base64":
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return true;
              default:
                return false;
            }
          }, c.concat = function(e3, t3) {
            if (!Array.isArray(e3)) throw new TypeError('"list" argument must be an Array of Buffers');
            if (0 === e3.length) return c.alloc(0);
            let r3;
            if (void 0 === t3) for (t3 = 0, r3 = 0; r3 < e3.length; ++r3) t3 += e3[r3].length;
            const n3 = c.allocUnsafe(t3);
            let s2 = 0;
            for (r3 = 0; r3 < e3.length; ++r3) {
              let t4 = e3[r3];
              if (q(t4, Uint8Array)) s2 + t4.length > n3.length ? (c.isBuffer(t4) || (t4 = c.from(t4)), t4.copy(n3, s2)) : Uint8Array.prototype.set.call(n3, t4, s2);
              else {
                if (!c.isBuffer(t4)) throw new TypeError('"list" argument must be an Array of Buffers');
                t4.copy(n3, s2);
              }
              s2 += t4.length;
            }
            return n3;
          }, c.byteLength = m, c.prototype._isBuffer = true, c.prototype.swap16 = function() {
            const e3 = this.length;
            if (e3 % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
            for (let t3 = 0; t3 < e3; t3 += 2) g(this, t3, t3 + 1);
            return this;
          }, c.prototype.swap32 = function() {
            const e3 = this.length;
            if (e3 % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
            for (let t3 = 0; t3 < e3; t3 += 4) g(this, t3, t3 + 3), g(this, t3 + 1, t3 + 2);
            return this;
          }, c.prototype.swap64 = function() {
            const e3 = this.length;
            if (e3 % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
            for (let t3 = 0; t3 < e3; t3 += 8) g(this, t3, t3 + 7), g(this, t3 + 1, t3 + 6), g(this, t3 + 2, t3 + 5), g(this, t3 + 3, t3 + 4);
            return this;
          }, c.prototype.toString = function() {
            const e3 = this.length;
            return 0 === e3 ? "" : 0 === arguments.length ? S(this, 0, e3) : w.apply(this, arguments);
          }, c.prototype.toLocaleString = c.prototype.toString, c.prototype.equals = function(e3) {
            if (!c.isBuffer(e3)) throw new TypeError("Argument must be a Buffer");
            return this === e3 || 0 === c.compare(this, e3);
          }, c.prototype.inspect = function() {
            let e3 = "";
            const r3 = t2.INSPECT_MAX_BYTES;
            return e3 = this.toString("hex", 0, r3).replace(/(.{2})/g, "$1 ").trim(), this.length > r3 && (e3 += " ... "), "<Buffer " + e3 + ">";
          }, i && (c.prototype[i] = c.prototype.inspect), c.prototype.compare = function(e3, t3, r3, n3, s2) {
            if (q(e3, Uint8Array) && (e3 = c.from(e3, e3.offset, e3.byteLength)), !c.isBuffer(e3)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof e3);
            if (void 0 === t3 && (t3 = 0), void 0 === r3 && (r3 = e3 ? e3.length : 0), void 0 === n3 && (n3 = 0), void 0 === s2 && (s2 = this.length), t3 < 0 || r3 > e3.length || n3 < 0 || s2 > this.length) throw new RangeError("out of range index");
            if (n3 >= s2 && t3 >= r3) return 0;
            if (n3 >= s2) return -1;
            if (t3 >= r3) return 1;
            if (this === e3) return 0;
            let i2 = (s2 >>>= 0) - (n3 >>>= 0), o2 = (r3 >>>= 0) - (t3 >>>= 0);
            const a2 = Math.min(i2, o2), u2 = this.slice(n3, s2), l3 = e3.slice(t3, r3);
            for (let e4 = 0; e4 < a2; ++e4) if (u2[e4] !== l3[e4]) {
              i2 = u2[e4], o2 = l3[e4];
              break;
            }
            return i2 < o2 ? -1 : o2 < i2 ? 1 : 0;
          }, c.prototype.includes = function(e3, t3, r3) {
            return -1 !== this.indexOf(e3, t3, r3);
          }, c.prototype.indexOf = function(e3, t3, r3) {
            return y(this, e3, t3, r3, true);
          }, c.prototype.lastIndexOf = function(e3, t3, r3) {
            return y(this, e3, t3, r3, false);
          }, c.prototype.write = function(e3, t3, r3, n3) {
            if (void 0 === t3) n3 = "utf8", r3 = this.length, t3 = 0;
            else if (void 0 === r3 && "string" == typeof t3) n3 = t3, r3 = this.length, t3 = 0;
            else {
              if (!isFinite(t3)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
              t3 >>>= 0, isFinite(r3) ? (r3 >>>= 0, void 0 === n3 && (n3 = "utf8")) : (n3 = r3, r3 = void 0);
            }
            const s2 = this.length - t3;
            if ((void 0 === r3 || r3 > s2) && (r3 = s2), e3.length > 0 && (r3 < 0 || t3 < 0) || t3 > this.length) throw new RangeError("Attempt to write outside buffer bounds");
            n3 || (n3 = "utf8");
            let i2 = false;
            for (; ; ) switch (n3) {
              case "hex":
                return x(this, e3, t3, r3);
              case "utf8":
              case "utf-8":
                return v(this, e3, t3, r3);
              case "ascii":
              case "latin1":
              case "binary":
                return _(this, e3, t3, r3);
              case "base64":
                return E(this, e3, t3, r3);
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return T(this, e3, t3, r3);
              default:
                if (i2) throw new TypeError("Unknown encoding: " + n3);
                n3 = ("" + n3).toLowerCase(), i2 = true;
            }
          }, c.prototype.toJSON = function() {
            return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
          };
          const I = 4096;
          function R(e3, t3, r3) {
            let n3 = "";
            r3 = Math.min(e3.length, r3);
            for (let s2 = t3; s2 < r3; ++s2) n3 += String.fromCharCode(127 & e3[s2]);
            return n3;
          }
          function N(e3, t3, r3) {
            let n3 = "";
            r3 = Math.min(e3.length, r3);
            for (let s2 = t3; s2 < r3; ++s2) n3 += String.fromCharCode(e3[s2]);
            return n3;
          }
          function C(e3, t3, r3) {
            const n3 = e3.length;
            (!t3 || t3 < 0) && (t3 = 0), (!r3 || r3 < 0 || r3 > n3) && (r3 = n3);
            let s2 = "";
            for (let n4 = t3; n4 < r3; ++n4) s2 += Y[e3[n4]];
            return s2;
          }
          function O(e3, t3, r3) {
            const n3 = e3.slice(t3, r3);
            let s2 = "";
            for (let e4 = 0; e4 < n3.length - 1; e4 += 2) s2 += String.fromCharCode(n3[e4] + 256 * n3[e4 + 1]);
            return s2;
          }
          function k(e3, t3, r3) {
            if (e3 % 1 != 0 || e3 < 0) throw new RangeError("offset is not uint");
            if (e3 + t3 > r3) throw new RangeError("Trying to access beyond buffer length");
          }
          function L(e3, t3, r3, n3, s2, i2) {
            if (!c.isBuffer(e3)) throw new TypeError('"buffer" argument must be a Buffer instance');
            if (t3 > s2 || t3 < i2) throw new RangeError('"value" argument is out of bounds');
            if (r3 + n3 > e3.length) throw new RangeError("Index out of range");
          }
          function D(e3, t3, r3, n3, s2) {
            j(t3, n3, s2, e3, r3, 7);
            let i2 = Number(t3 & BigInt(4294967295));
            e3[r3++] = i2, i2 >>= 8, e3[r3++] = i2, i2 >>= 8, e3[r3++] = i2, i2 >>= 8, e3[r3++] = i2;
            let o2 = Number(t3 >> BigInt(32) & BigInt(4294967295));
            return e3[r3++] = o2, o2 >>= 8, e3[r3++] = o2, o2 >>= 8, e3[r3++] = o2, o2 >>= 8, e3[r3++] = o2, r3;
          }
          function P(e3, t3, r3, n3, s2) {
            j(t3, n3, s2, e3, r3, 7);
            let i2 = Number(t3 & BigInt(4294967295));
            e3[r3 + 7] = i2, i2 >>= 8, e3[r3 + 6] = i2, i2 >>= 8, e3[r3 + 5] = i2, i2 >>= 8, e3[r3 + 4] = i2;
            let o2 = Number(t3 >> BigInt(32) & BigInt(4294967295));
            return e3[r3 + 3] = o2, o2 >>= 8, e3[r3 + 2] = o2, o2 >>= 8, e3[r3 + 1] = o2, o2 >>= 8, e3[r3] = o2, r3 + 8;
          }
          function F(e3, t3, r3, n3, s2, i2) {
            if (r3 + n3 > e3.length) throw new RangeError("Index out of range");
            if (r3 < 0) throw new RangeError("Index out of range");
          }
          function B(e3, t3, r3, n3, i2) {
            return t3 = +t3, r3 >>>= 0, i2 || F(e3, 0, r3, 4), s.write(e3, t3, r3, n3, 23, 4), r3 + 4;
          }
          function M(e3, t3, r3, n3, i2) {
            return t3 = +t3, r3 >>>= 0, i2 || F(e3, 0, r3, 8), s.write(e3, t3, r3, n3, 52, 8), r3 + 8;
          }
          c.prototype.slice = function(e3, t3) {
            const r3 = this.length;
            (e3 = ~~e3) < 0 ? (e3 += r3) < 0 && (e3 = 0) : e3 > r3 && (e3 = r3), (t3 = void 0 === t3 ? r3 : ~~t3) < 0 ? (t3 += r3) < 0 && (t3 = 0) : t3 > r3 && (t3 = r3), t3 < e3 && (t3 = e3);
            const n3 = this.subarray(e3, t3);
            return Object.setPrototypeOf(n3, c.prototype), n3;
          }, c.prototype.readUintLE = c.prototype.readUIntLE = function(e3, t3, r3) {
            e3 >>>= 0, t3 >>>= 0, r3 || k(e3, t3, this.length);
            let n3 = this[e3], s2 = 1, i2 = 0;
            for (; ++i2 < t3 && (s2 *= 256); ) n3 += this[e3 + i2] * s2;
            return n3;
          }, c.prototype.readUintBE = c.prototype.readUIntBE = function(e3, t3, r3) {
            e3 >>>= 0, t3 >>>= 0, r3 || k(e3, t3, this.length);
            let n3 = this[e3 + --t3], s2 = 1;
            for (; t3 > 0 && (s2 *= 256); ) n3 += this[e3 + --t3] * s2;
            return n3;
          }, c.prototype.readUint8 = c.prototype.readUInt8 = function(e3, t3) {
            return e3 >>>= 0, t3 || k(e3, 1, this.length), this[e3];
          }, c.prototype.readUint16LE = c.prototype.readUInt16LE = function(e3, t3) {
            return e3 >>>= 0, t3 || k(e3, 2, this.length), this[e3] | this[e3 + 1] << 8;
          }, c.prototype.readUint16BE = c.prototype.readUInt16BE = function(e3, t3) {
            return e3 >>>= 0, t3 || k(e3, 2, this.length), this[e3] << 8 | this[e3 + 1];
          }, c.prototype.readUint32LE = c.prototype.readUInt32LE = function(e3, t3) {
            return e3 >>>= 0, t3 || k(e3, 4, this.length), (this[e3] | this[e3 + 1] << 8 | this[e3 + 2] << 16) + 16777216 * this[e3 + 3];
          }, c.prototype.readUint32BE = c.prototype.readUInt32BE = function(e3, t3) {
            return e3 >>>= 0, t3 || k(e3, 4, this.length), 16777216 * this[e3] + (this[e3 + 1] << 16 | this[e3 + 2] << 8 | this[e3 + 3]);
          }, c.prototype.readBigUInt64LE = J(function(e3) {
            W(e3 >>>= 0, "offset");
            const t3 = this[e3], r3 = this[e3 + 7];
            void 0 !== t3 && void 0 !== r3 || K(e3, this.length - 8);
            const n3 = t3 + 256 * this[++e3] + 65536 * this[++e3] + this[++e3] * 2 ** 24, s2 = this[++e3] + 256 * this[++e3] + 65536 * this[++e3] + r3 * 2 ** 24;
            return BigInt(n3) + (BigInt(s2) << BigInt(32));
          }), c.prototype.readBigUInt64BE = J(function(e3) {
            W(e3 >>>= 0, "offset");
            const t3 = this[e3], r3 = this[e3 + 7];
            void 0 !== t3 && void 0 !== r3 || K(e3, this.length - 8);
            const n3 = t3 * 2 ** 24 + 65536 * this[++e3] + 256 * this[++e3] + this[++e3], s2 = this[++e3] * 2 ** 24 + 65536 * this[++e3] + 256 * this[++e3] + r3;
            return (BigInt(n3) << BigInt(32)) + BigInt(s2);
          }), c.prototype.readIntLE = function(e3, t3, r3) {
            e3 >>>= 0, t3 >>>= 0, r3 || k(e3, t3, this.length);
            let n3 = this[e3], s2 = 1, i2 = 0;
            for (; ++i2 < t3 && (s2 *= 256); ) n3 += this[e3 + i2] * s2;
            return s2 *= 128, n3 >= s2 && (n3 -= Math.pow(2, 8 * t3)), n3;
          }, c.prototype.readIntBE = function(e3, t3, r3) {
            e3 >>>= 0, t3 >>>= 0, r3 || k(e3, t3, this.length);
            let n3 = t3, s2 = 1, i2 = this[e3 + --n3];
            for (; n3 > 0 && (s2 *= 256); ) i2 += this[e3 + --n3] * s2;
            return s2 *= 128, i2 >= s2 && (i2 -= Math.pow(2, 8 * t3)), i2;
          }, c.prototype.readInt8 = function(e3, t3) {
            return e3 >>>= 0, t3 || k(e3, 1, this.length), 128 & this[e3] ? -1 * (255 - this[e3] + 1) : this[e3];
          }, c.prototype.readInt16LE = function(e3, t3) {
            e3 >>>= 0, t3 || k(e3, 2, this.length);
            const r3 = this[e3] | this[e3 + 1] << 8;
            return 32768 & r3 ? 4294901760 | r3 : r3;
          }, c.prototype.readInt16BE = function(e3, t3) {
            e3 >>>= 0, t3 || k(e3, 2, this.length);
            const r3 = this[e3 + 1] | this[e3] << 8;
            return 32768 & r3 ? 4294901760 | r3 : r3;
          }, c.prototype.readInt32LE = function(e3, t3) {
            return e3 >>>= 0, t3 || k(e3, 4, this.length), this[e3] | this[e3 + 1] << 8 | this[e3 + 2] << 16 | this[e3 + 3] << 24;
          }, c.prototype.readInt32BE = function(e3, t3) {
            return e3 >>>= 0, t3 || k(e3, 4, this.length), this[e3] << 24 | this[e3 + 1] << 16 | this[e3 + 2] << 8 | this[e3 + 3];
          }, c.prototype.readBigInt64LE = J(function(e3) {
            W(e3 >>>= 0, "offset");
            const t3 = this[e3], r3 = this[e3 + 7];
            void 0 !== t3 && void 0 !== r3 || K(e3, this.length - 8);
            const n3 = this[e3 + 4] + 256 * this[e3 + 5] + 65536 * this[e3 + 6] + (r3 << 24);
            return (BigInt(n3) << BigInt(32)) + BigInt(t3 + 256 * this[++e3] + 65536 * this[++e3] + this[++e3] * 2 ** 24);
          }), c.prototype.readBigInt64BE = J(function(e3) {
            W(e3 >>>= 0, "offset");
            const t3 = this[e3], r3 = this[e3 + 7];
            void 0 !== t3 && void 0 !== r3 || K(e3, this.length - 8);
            const n3 = (t3 << 24) + 65536 * this[++e3] + 256 * this[++e3] + this[++e3];
            return (BigInt(n3) << BigInt(32)) + BigInt(this[++e3] * 2 ** 24 + 65536 * this[++e3] + 256 * this[++e3] + r3);
          }), c.prototype.readFloatLE = function(e3, t3) {
            return e3 >>>= 0, t3 || k(e3, 4, this.length), s.read(this, e3, true, 23, 4);
          }, c.prototype.readFloatBE = function(e3, t3) {
            return e3 >>>= 0, t3 || k(e3, 4, this.length), s.read(this, e3, false, 23, 4);
          }, c.prototype.readDoubleLE = function(e3, t3) {
            return e3 >>>= 0, t3 || k(e3, 8, this.length), s.read(this, e3, true, 52, 8);
          }, c.prototype.readDoubleBE = function(e3, t3) {
            return e3 >>>= 0, t3 || k(e3, 8, this.length), s.read(this, e3, false, 52, 8);
          }, c.prototype.writeUintLE = c.prototype.writeUIntLE = function(e3, t3, r3, n3) {
            e3 = +e3, t3 >>>= 0, r3 >>>= 0, n3 || L(this, e3, t3, r3, Math.pow(2, 8 * r3) - 1, 0);
            let s2 = 1, i2 = 0;
            for (this[t3] = 255 & e3; ++i2 < r3 && (s2 *= 256); ) this[t3 + i2] = e3 / s2 & 255;
            return t3 + r3;
          }, c.prototype.writeUintBE = c.prototype.writeUIntBE = function(e3, t3, r3, n3) {
            e3 = +e3, t3 >>>= 0, r3 >>>= 0, n3 || L(this, e3, t3, r3, Math.pow(2, 8 * r3) - 1, 0);
            let s2 = r3 - 1, i2 = 1;
            for (this[t3 + s2] = 255 & e3; --s2 >= 0 && (i2 *= 256); ) this[t3 + s2] = e3 / i2 & 255;
            return t3 + r3;
          }, c.prototype.writeUint8 = c.prototype.writeUInt8 = function(e3, t3, r3) {
            return e3 = +e3, t3 >>>= 0, r3 || L(this, e3, t3, 1, 255, 0), this[t3] = 255 & e3, t3 + 1;
          }, c.prototype.writeUint16LE = c.prototype.writeUInt16LE = function(e3, t3, r3) {
            return e3 = +e3, t3 >>>= 0, r3 || L(this, e3, t3, 2, 65535, 0), this[t3] = 255 & e3, this[t3 + 1] = e3 >>> 8, t3 + 2;
          }, c.prototype.writeUint16BE = c.prototype.writeUInt16BE = function(e3, t3, r3) {
            return e3 = +e3, t3 >>>= 0, r3 || L(this, e3, t3, 2, 65535, 0), this[t3] = e3 >>> 8, this[t3 + 1] = 255 & e3, t3 + 2;
          }, c.prototype.writeUint32LE = c.prototype.writeUInt32LE = function(e3, t3, r3) {
            return e3 = +e3, t3 >>>= 0, r3 || L(this, e3, t3, 4, 4294967295, 0), this[t3 + 3] = e3 >>> 24, this[t3 + 2] = e3 >>> 16, this[t3 + 1] = e3 >>> 8, this[t3] = 255 & e3, t3 + 4;
          }, c.prototype.writeUint32BE = c.prototype.writeUInt32BE = function(e3, t3, r3) {
            return e3 = +e3, t3 >>>= 0, r3 || L(this, e3, t3, 4, 4294967295, 0), this[t3] = e3 >>> 24, this[t3 + 1] = e3 >>> 16, this[t3 + 2] = e3 >>> 8, this[t3 + 3] = 255 & e3, t3 + 4;
          }, c.prototype.writeBigUInt64LE = J(function(e3, t3 = 0) {
            return D(this, e3, t3, BigInt(0), BigInt("0xffffffffffffffff"));
          }), c.prototype.writeBigUInt64BE = J(function(e3, t3 = 0) {
            return P(this, e3, t3, BigInt(0), BigInt("0xffffffffffffffff"));
          }), c.prototype.writeIntLE = function(e3, t3, r3, n3) {
            if (e3 = +e3, t3 >>>= 0, !n3) {
              const n4 = Math.pow(2, 8 * r3 - 1);
              L(this, e3, t3, r3, n4 - 1, -n4);
            }
            let s2 = 0, i2 = 1, o2 = 0;
            for (this[t3] = 255 & e3; ++s2 < r3 && (i2 *= 256); ) e3 < 0 && 0 === o2 && 0 !== this[t3 + s2 - 1] && (o2 = 1), this[t3 + s2] = (e3 / i2 >> 0) - o2 & 255;
            return t3 + r3;
          }, c.prototype.writeIntBE = function(e3, t3, r3, n3) {
            if (e3 = +e3, t3 >>>= 0, !n3) {
              const n4 = Math.pow(2, 8 * r3 - 1);
              L(this, e3, t3, r3, n4 - 1, -n4);
            }
            let s2 = r3 - 1, i2 = 1, o2 = 0;
            for (this[t3 + s2] = 255 & e3; --s2 >= 0 && (i2 *= 256); ) e3 < 0 && 0 === o2 && 0 !== this[t3 + s2 + 1] && (o2 = 1), this[t3 + s2] = (e3 / i2 >> 0) - o2 & 255;
            return t3 + r3;
          }, c.prototype.writeInt8 = function(e3, t3, r3) {
            return e3 = +e3, t3 >>>= 0, r3 || L(this, e3, t3, 1, 127, -128), e3 < 0 && (e3 = 255 + e3 + 1), this[t3] = 255 & e3, t3 + 1;
          }, c.prototype.writeInt16LE = function(e3, t3, r3) {
            return e3 = +e3, t3 >>>= 0, r3 || L(this, e3, t3, 2, 32767, -32768), this[t3] = 255 & e3, this[t3 + 1] = e3 >>> 8, t3 + 2;
          }, c.prototype.writeInt16BE = function(e3, t3, r3) {
            return e3 = +e3, t3 >>>= 0, r3 || L(this, e3, t3, 2, 32767, -32768), this[t3] = e3 >>> 8, this[t3 + 1] = 255 & e3, t3 + 2;
          }, c.prototype.writeInt32LE = function(e3, t3, r3) {
            return e3 = +e3, t3 >>>= 0, r3 || L(this, e3, t3, 4, 2147483647, -2147483648), this[t3] = 255 & e3, this[t3 + 1] = e3 >>> 8, this[t3 + 2] = e3 >>> 16, this[t3 + 3] = e3 >>> 24, t3 + 4;
          }, c.prototype.writeInt32BE = function(e3, t3, r3) {
            return e3 = +e3, t3 >>>= 0, r3 || L(this, e3, t3, 4, 2147483647, -2147483648), e3 < 0 && (e3 = 4294967295 + e3 + 1), this[t3] = e3 >>> 24, this[t3 + 1] = e3 >>> 16, this[t3 + 2] = e3 >>> 8, this[t3 + 3] = 255 & e3, t3 + 4;
          }, c.prototype.writeBigInt64LE = J(function(e3, t3 = 0) {
            return D(this, e3, t3, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
          }), c.prototype.writeBigInt64BE = J(function(e3, t3 = 0) {
            return P(this, e3, t3, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
          }), c.prototype.writeFloatLE = function(e3, t3, r3) {
            return B(this, e3, t3, true, r3);
          }, c.prototype.writeFloatBE = function(e3, t3, r3) {
            return B(this, e3, t3, false, r3);
          }, c.prototype.writeDoubleLE = function(e3, t3, r3) {
            return M(this, e3, t3, true, r3);
          }, c.prototype.writeDoubleBE = function(e3, t3, r3) {
            return M(this, e3, t3, false, r3);
          }, c.prototype.copy = function(e3, t3, r3, n3) {
            if (!c.isBuffer(e3)) throw new TypeError("argument should be a Buffer");
            if (r3 || (r3 = 0), n3 || 0 === n3 || (n3 = this.length), t3 >= e3.length && (t3 = e3.length), t3 || (t3 = 0), n3 > 0 && n3 < r3 && (n3 = r3), n3 === r3) return 0;
            if (0 === e3.length || 0 === this.length) return 0;
            if (t3 < 0) throw new RangeError("targetStart out of bounds");
            if (r3 < 0 || r3 >= this.length) throw new RangeError("Index out of range");
            if (n3 < 0) throw new RangeError("sourceEnd out of bounds");
            n3 > this.length && (n3 = this.length), e3.length - t3 < n3 - r3 && (n3 = e3.length - t3 + r3);
            const s2 = n3 - r3;
            return this === e3 && "function" == typeof Uint8Array.prototype.copyWithin ? this.copyWithin(t3, r3, n3) : Uint8Array.prototype.set.call(e3, this.subarray(r3, n3), t3), s2;
          }, c.prototype.fill = function(e3, t3, r3, n3) {
            if ("string" == typeof e3) {
              if ("string" == typeof t3 ? (n3 = t3, t3 = 0, r3 = this.length) : "string" == typeof r3 && (n3 = r3, r3 = this.length), void 0 !== n3 && "string" != typeof n3) throw new TypeError("encoding must be a string");
              if ("string" == typeof n3 && !c.isEncoding(n3)) throw new TypeError("Unknown encoding: " + n3);
              if (1 === e3.length) {
                const t4 = e3.charCodeAt(0);
                ("utf8" === n3 && t4 < 128 || "latin1" === n3) && (e3 = t4);
              }
            } else "number" == typeof e3 ? e3 &= 255 : "boolean" == typeof e3 && (e3 = Number(e3));
            if (t3 < 0 || this.length < t3 || this.length < r3) throw new RangeError("Out of range index");
            if (r3 <= t3) return this;
            let s2;
            if (t3 >>>= 0, r3 = void 0 === r3 ? this.length : r3 >>> 0, e3 || (e3 = 0), "number" == typeof e3) for (s2 = t3; s2 < r3; ++s2) this[s2] = e3;
            else {
              const i2 = c.isBuffer(e3) ? e3 : c.from(e3, n3), o2 = i2.length;
              if (0 === o2) throw new TypeError('The value "' + e3 + '" is invalid for argument "value"');
              for (s2 = 0; s2 < r3 - t3; ++s2) this[s2 + t3] = i2[s2 % o2];
            }
            return this;
          };
          const U = {};
          function H(e3, t3, r3) {
            U[e3] = class extends r3 {
              constructor() {
                super(), Object.defineProperty(this, "message", { value: t3.apply(this, arguments), writable: true, configurable: true }), this.name = `${this.name} [${e3}]`, this.stack, delete this.name;
              }
              get code() {
                return e3;
              }
              set code(e4) {
                Object.defineProperty(this, "code", { configurable: true, enumerable: true, value: e4, writable: true });
              }
              toString() {
                return `${this.name} [${e3}]: ${this.message}`;
              }
            };
          }
          function z(e3) {
            let t3 = "", r3 = e3.length;
            const n3 = "-" === e3[0] ? 1 : 0;
            for (; r3 >= n3 + 4; r3 -= 3) t3 = `_${e3.slice(r3 - 3, r3)}${t3}`;
            return `${e3.slice(0, r3)}${t3}`;
          }
          function j(e3, t3, r3, n3, s2, i2) {
            if (e3 > r3 || e3 < t3) {
              const n4 = "bigint" == typeof t3 ? "n" : "";
              let s3;
              throw s3 = i2 > 3 ? 0 === t3 || t3 === BigInt(0) ? `>= 0${n4} and < 2${n4} ** ${8 * (i2 + 1)}${n4}` : `>= -(2${n4} ** ${8 * (i2 + 1) - 1}${n4}) and < 2 ** ${8 * (i2 + 1) - 1}${n4}` : `>= ${t3}${n4} and <= ${r3}${n4}`, new U.ERR_OUT_OF_RANGE("value", s3, e3);
            }
            !function(e4, t4, r4) {
              W(t4, "offset"), void 0 !== e4[t4] && void 0 !== e4[t4 + r4] || K(t4, e4.length - (r4 + 1));
            }(n3, s2, i2);
          }
          function W(e3, t3) {
            if ("number" != typeof e3) throw new U.ERR_INVALID_ARG_TYPE(t3, "number", e3);
          }
          function K(e3, t3, r3) {
            if (Math.floor(e3) !== e3) throw W(e3, r3), new U.ERR_OUT_OF_RANGE(r3 || "offset", "an integer", e3);
            if (t3 < 0) throw new U.ERR_BUFFER_OUT_OF_BOUNDS();
            throw new U.ERR_OUT_OF_RANGE(r3 || "offset", `>= ${r3 ? 1 : 0} and <= ${t3}`, e3);
          }
          H("ERR_BUFFER_OUT_OF_BOUNDS", function(e3) {
            return e3 ? `${e3} is outside of buffer bounds` : "Attempt to access memory outside buffer bounds";
          }, RangeError), H("ERR_INVALID_ARG_TYPE", function(e3, t3) {
            return `The "${e3}" argument must be of type number. Received type ${typeof t3}`;
          }, TypeError), H("ERR_OUT_OF_RANGE", function(e3, t3, r3) {
            let n3 = `The value of "${e3}" is out of range.`, s2 = r3;
            return Number.isInteger(r3) && Math.abs(r3) > 2 ** 32 ? s2 = z(String(r3)) : "bigint" == typeof r3 && (s2 = String(r3), (r3 > BigInt(2) ** BigInt(32) || r3 < -(BigInt(2) ** BigInt(32))) && (s2 = z(s2)), s2 += "n"), n3 += ` It must be ${t3}. Received ${s2}`, n3;
          }, RangeError);
          const G = /[^+/0-9A-Za-z-_]/g;
          function V(e3, t3) {
            let r3;
            t3 = t3 || 1 / 0;
            const n3 = e3.length;
            let s2 = null;
            const i2 = [];
            for (let o2 = 0; o2 < n3; ++o2) {
              if (r3 = e3.charCodeAt(o2), r3 > 55295 && r3 < 57344) {
                if (!s2) {
                  if (r3 > 56319) {
                    (t3 -= 3) > -1 && i2.push(239, 191, 189);
                    continue;
                  }
                  if (o2 + 1 === n3) {
                    (t3 -= 3) > -1 && i2.push(239, 191, 189);
                    continue;
                  }
                  s2 = r3;
                  continue;
                }
                if (r3 < 56320) {
                  (t3 -= 3) > -1 && i2.push(239, 191, 189), s2 = r3;
                  continue;
                }
                r3 = 65536 + (s2 - 55296 << 10 | r3 - 56320);
              } else s2 && (t3 -= 3) > -1 && i2.push(239, 191, 189);
              if (s2 = null, r3 < 128) {
                if ((t3 -= 1) < 0) break;
                i2.push(r3);
              } else if (r3 < 2048) {
                if ((t3 -= 2) < 0) break;
                i2.push(r3 >> 6 | 192, 63 & r3 | 128);
              } else if (r3 < 65536) {
                if ((t3 -= 3) < 0) break;
                i2.push(r3 >> 12 | 224, r3 >> 6 & 63 | 128, 63 & r3 | 128);
              } else {
                if (!(r3 < 1114112)) throw new Error("Invalid code point");
                if ((t3 -= 4) < 0) break;
                i2.push(r3 >> 18 | 240, r3 >> 12 & 63 | 128, r3 >> 6 & 63 | 128, 63 & r3 | 128);
              }
            }
            return i2;
          }
          function $(e3) {
            return n2.toByteArray(function(e4) {
              if ((e4 = (e4 = e4.split("=")[0]).trim().replace(G, "")).length < 2) return "";
              for (; e4.length % 4 != 0; ) e4 += "=";
              return e4;
            }(e3));
          }
          function X(e3, t3, r3, n3) {
            let s2;
            for (s2 = 0; s2 < n3 && !(s2 + r3 >= t3.length || s2 >= e3.length); ++s2) t3[s2 + r3] = e3[s2];
            return s2;
          }
          function q(e3, t3) {
            return e3 instanceof t3 || null != e3 && null != e3.constructor && null != e3.constructor.name && e3.constructor.name === t3.name;
          }
          function Z(e3) {
            return e3 != e3;
          }
          const Y = function() {
            const e3 = "0123456789abcdef", t3 = new Array(256);
            for (let r3 = 0; r3 < 16; ++r3) {
              const n3 = 16 * r3;
              for (let s2 = 0; s2 < 16; ++s2) t3[n3 + s2] = e3[r3] + e3[s2];
            }
            return t3;
          }();
          function J(e3) {
            return "undefined" == typeof BigInt ? Q : e3;
          }
          function Q() {
            throw new Error("BigInt not supported");
          }
        }, 7187: (e2) => {
          "use strict";
          var t2, r2 = "object" == typeof Reflect ? Reflect : null, n2 = r2 && "function" == typeof r2.apply ? r2.apply : function(e3, t3, r3) {
            return Function.prototype.apply.call(e3, t3, r3);
          };
          t2 = r2 && "function" == typeof r2.ownKeys ? r2.ownKeys : Object.getOwnPropertySymbols ? function(e3) {
            return Object.getOwnPropertyNames(e3).concat(Object.getOwnPropertySymbols(e3));
          } : function(e3) {
            return Object.getOwnPropertyNames(e3);
          };
          var s = Number.isNaN || function(e3) {
            return e3 != e3;
          };
          function i() {
            i.init.call(this);
          }
          e2.exports = i, e2.exports.once = function(e3, t3) {
            return new Promise(function(r3, n3) {
              function s2(r4) {
                e3.removeListener(t3, i2), n3(r4);
              }
              function i2() {
                "function" == typeof e3.removeListener && e3.removeListener("error", s2), r3([].slice.call(arguments));
              }
              m(e3, t3, i2, { once: true }), "error" !== t3 && function(e4, t4, r4) {
                "function" == typeof e4.on && m(e4, "error", t4, { once: true });
              }(e3, s2);
            });
          }, i.EventEmitter = i, i.prototype._events = void 0, i.prototype._eventsCount = 0, i.prototype._maxListeners = void 0;
          var o = 10;
          function a(e3) {
            if ("function" != typeof e3) throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e3);
          }
          function c(e3) {
            return void 0 === e3._maxListeners ? i.defaultMaxListeners : e3._maxListeners;
          }
          function u(e3, t3, r3, n3) {
            var s2, i2, o2, u2;
            if (a(r3), void 0 === (i2 = e3._events) ? (i2 = e3._events = /* @__PURE__ */ Object.create(null), e3._eventsCount = 0) : (void 0 !== i2.newListener && (e3.emit("newListener", t3, r3.listener ? r3.listener : r3), i2 = e3._events), o2 = i2[t3]), void 0 === o2) o2 = i2[t3] = r3, ++e3._eventsCount;
            else if ("function" == typeof o2 ? o2 = i2[t3] = n3 ? [r3, o2] : [o2, r3] : n3 ? o2.unshift(r3) : o2.push(r3), (s2 = c(e3)) > 0 && o2.length > s2 && !o2.warned) {
              o2.warned = true;
              var l3 = new Error("Possible EventEmitter memory leak detected. " + o2.length + " " + String(t3) + " listeners added. Use emitter.setMaxListeners() to increase limit");
              l3.name = "MaxListenersExceededWarning", l3.emitter = e3, l3.type = t3, l3.count = o2.length, u2 = l3, console && console.warn && console.warn(u2);
            }
            return e3;
          }
          function l2() {
            if (!this.fired) return this.target.removeListener(this.type, this.wrapFn), this.fired = true, 0 === arguments.length ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
          }
          function h(e3, t3, r3) {
            var n3 = { fired: false, wrapFn: void 0, target: e3, type: t3, listener: r3 }, s2 = l2.bind(n3);
            return s2.listener = r3, n3.wrapFn = s2, s2;
          }
          function p(e3, t3, r3) {
            var n3 = e3._events;
            if (void 0 === n3) return [];
            var s2 = n3[t3];
            return void 0 === s2 ? [] : "function" == typeof s2 ? r3 ? [s2.listener || s2] : [s2] : r3 ? function(e4) {
              for (var t4 = new Array(e4.length), r4 = 0; r4 < t4.length; ++r4) t4[r4] = e4[r4].listener || e4[r4];
              return t4;
            }(s2) : f(s2, s2.length);
          }
          function d(e3) {
            var t3 = this._events;
            if (void 0 !== t3) {
              var r3 = t3[e3];
              if ("function" == typeof r3) return 1;
              if (void 0 !== r3) return r3.length;
            }
            return 0;
          }
          function f(e3, t3) {
            for (var r3 = new Array(t3), n3 = 0; n3 < t3; ++n3) r3[n3] = e3[n3];
            return r3;
          }
          function m(e3, t3, r3, n3) {
            if ("function" == typeof e3.on) n3.once ? e3.once(t3, r3) : e3.on(t3, r3);
            else {
              if ("function" != typeof e3.addEventListener) throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof e3);
              e3.addEventListener(t3, function s2(i2) {
                n3.once && e3.removeEventListener(t3, s2), r3(i2);
              });
            }
          }
          Object.defineProperty(i, "defaultMaxListeners", { enumerable: true, get: function() {
            return o;
          }, set: function(e3) {
            if ("number" != typeof e3 || e3 < 0 || s(e3)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + e3 + ".");
            o = e3;
          } }), i.init = function() {
            void 0 !== this._events && this._events !== Object.getPrototypeOf(this)._events || (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
          }, i.prototype.setMaxListeners = function(e3) {
            if ("number" != typeof e3 || e3 < 0 || s(e3)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e3 + ".");
            return this._maxListeners = e3, this;
          }, i.prototype.getMaxListeners = function() {
            return c(this);
          }, i.prototype.emit = function(e3) {
            for (var t3 = [], r3 = 1; r3 < arguments.length; r3++) t3.push(arguments[r3]);
            var s2 = "error" === e3, i2 = this._events;
            if (void 0 !== i2) s2 = s2 && void 0 === i2.error;
            else if (!s2) return false;
            if (s2) {
              var o2;
              if (t3.length > 0 && (o2 = t3[0]), o2 instanceof Error) throw o2;
              var a2 = new Error("Unhandled error." + (o2 ? " (" + o2.message + ")" : ""));
              throw a2.context = o2, a2;
            }
            var c2 = i2[e3];
            if (void 0 === c2) return false;
            if ("function" == typeof c2) n2(c2, this, t3);
            else {
              var u2 = c2.length, l3 = f(c2, u2);
              for (r3 = 0; r3 < u2; ++r3) n2(l3[r3], this, t3);
            }
            return true;
          }, i.prototype.addListener = function(e3, t3) {
            return u(this, e3, t3, false);
          }, i.prototype.on = i.prototype.addListener, i.prototype.prependListener = function(e3, t3) {
            return u(this, e3, t3, true);
          }, i.prototype.once = function(e3, t3) {
            return a(t3), this.on(e3, h(this, e3, t3)), this;
          }, i.prototype.prependOnceListener = function(e3, t3) {
            return a(t3), this.prependListener(e3, h(this, e3, t3)), this;
          }, i.prototype.removeListener = function(e3, t3) {
            var r3, n3, s2, i2, o2;
            if (a(t3), void 0 === (n3 = this._events)) return this;
            if (void 0 === (r3 = n3[e3])) return this;
            if (r3 === t3 || r3.listener === t3) 0 == --this._eventsCount ? this._events = /* @__PURE__ */ Object.create(null) : (delete n3[e3], n3.removeListener && this.emit("removeListener", e3, r3.listener || t3));
            else if ("function" != typeof r3) {
              for (s2 = -1, i2 = r3.length - 1; i2 >= 0; i2--) if (r3[i2] === t3 || r3[i2].listener === t3) {
                o2 = r3[i2].listener, s2 = i2;
                break;
              }
              if (s2 < 0) return this;
              0 === s2 ? r3.shift() : function(e4, t4) {
                for (; t4 + 1 < e4.length; t4++) e4[t4] = e4[t4 + 1];
                e4.pop();
              }(r3, s2), 1 === r3.length && (n3[e3] = r3[0]), void 0 !== n3.removeListener && this.emit("removeListener", e3, o2 || t3);
            }
            return this;
          }, i.prototype.off = i.prototype.removeListener, i.prototype.removeAllListeners = function(e3) {
            var t3, r3, n3;
            if (void 0 === (r3 = this._events)) return this;
            if (void 0 === r3.removeListener) return 0 === arguments.length ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : void 0 !== r3[e3] && (0 == --this._eventsCount ? this._events = /* @__PURE__ */ Object.create(null) : delete r3[e3]), this;
            if (0 === arguments.length) {
              var s2, i2 = Object.keys(r3);
              for (n3 = 0; n3 < i2.length; ++n3) "removeListener" !== (s2 = i2[n3]) && this.removeAllListeners(s2);
              return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
            }
            if ("function" == typeof (t3 = r3[e3])) this.removeListener(e3, t3);
            else if (void 0 !== t3) for (n3 = t3.length - 1; n3 >= 0; n3--) this.removeListener(e3, t3[n3]);
            return this;
          }, i.prototype.listeners = function(e3) {
            return p(this, e3, true);
          }, i.prototype.rawListeners = function(e3) {
            return p(this, e3, false);
          }, i.listenerCount = function(e3, t3) {
            return "function" == typeof e3.listenerCount ? e3.listenerCount(t3) : d.call(e3, t3);
          }, i.prototype.listenerCount = d, i.prototype.eventNames = function() {
            return this._eventsCount > 0 ? t2(this._events) : [];
          };
        }, 645: (e2, t2) => {
          t2.read = function(e3, t3, r2, n2, s) {
            var i, o, a = 8 * s - n2 - 1, c = (1 << a) - 1, u = c >> 1, l2 = -7, h = r2 ? s - 1 : 0, p = r2 ? -1 : 1, d = e3[t3 + h];
            for (h += p, i = d & (1 << -l2) - 1, d >>= -l2, l2 += a; l2 > 0; i = 256 * i + e3[t3 + h], h += p, l2 -= 8) ;
            for (o = i & (1 << -l2) - 1, i >>= -l2, l2 += n2; l2 > 0; o = 256 * o + e3[t3 + h], h += p, l2 -= 8) ;
            if (0 === i) i = 1 - u;
            else {
              if (i === c) return o ? NaN : 1 / 0 * (d ? -1 : 1);
              o += Math.pow(2, n2), i -= u;
            }
            return (d ? -1 : 1) * o * Math.pow(2, i - n2);
          }, t2.write = function(e3, t3, r2, n2, s, i) {
            var o, a, c, u = 8 * i - s - 1, l2 = (1 << u) - 1, h = l2 >> 1, p = 23 === s ? Math.pow(2, -24) - Math.pow(2, -77) : 0, d = n2 ? 0 : i - 1, f = n2 ? 1 : -1, m = t3 < 0 || 0 === t3 && 1 / t3 < 0 ? 1 : 0;
            for (t3 = Math.abs(t3), isNaN(t3) || t3 === 1 / 0 ? (a = isNaN(t3) ? 1 : 0, o = l2) : (o = Math.floor(Math.log(t3) / Math.LN2), t3 * (c = Math.pow(2, -o)) < 1 && (o--, c *= 2), (t3 += o + h >= 1 ? p / c : p * Math.pow(2, 1 - h)) * c >= 2 && (o++, c /= 2), o + h >= l2 ? (a = 0, o = l2) : o + h >= 1 ? (a = (t3 * c - 1) * Math.pow(2, s), o += h) : (a = t3 * Math.pow(2, h - 1) * Math.pow(2, s), o = 0)); s >= 8; e3[r2 + d] = 255 & a, d += f, a /= 256, s -= 8) ;
            for (o = o << s | a, u += s; u > 0; e3[r2 + d] = 255 & o, d += f, o /= 256, u -= 8) ;
            e3[r2 + d - f] |= 128 * m;
          };
        }, 5705: (e2, t2, r2) => {
          "use strict";
          var n2, s, i = r2.g.MutationObserver || r2.g.WebKitMutationObserver;
          if (i) {
            var o = 0, a = new i(h), c = r2.g.document.createTextNode("");
            a.observe(c, { characterData: true }), n2 = function() {
              c.data = o = ++o % 2;
            };
          } else if (r2.g.setImmediate || void 0 === r2.g.MessageChannel) n2 = "document" in r2.g && "onreadystatechange" in r2.g.document.createElement("script") ? function() {
            var e3 = r2.g.document.createElement("script");
            e3.onreadystatechange = function() {
              h(), e3.onreadystatechange = null, e3.parentNode.removeChild(e3), e3 = null;
            }, r2.g.document.documentElement.appendChild(e3);
          } : function() {
            setTimeout(h, 0);
          };
          else {
            var u = new r2.g.MessageChannel();
            u.port1.onmessage = h, n2 = function() {
              u.port2.postMessage(0);
            };
          }
          var l2 = [];
          function h() {
            var e3, t3;
            s = true;
            for (var r3 = l2.length; r3; ) {
              for (t3 = l2, l2 = [], e3 = -1; ++e3 < r3; ) t3[e3]();
              r3 = l2.length;
            }
            s = false;
          }
          e2.exports = function(e3) {
            1 !== l2.push(e3) || s || n2();
          };
        }, 5717: (e2) => {
          "function" == typeof Object.create ? e2.exports = function(e3, t2) {
            t2 && (e3.super_ = t2, e3.prototype = Object.create(t2.prototype, { constructor: { value: e3, enumerable: false, writable: true, configurable: true } }));
          } : e2.exports = function(e3, t2) {
            if (t2) {
              e3.super_ = t2;
              var r2 = function() {
              };
              r2.prototype = t2.prototype, e3.prototype = new r2(), e3.prototype.constructor = e3;
            }
          };
        }, 8458: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(8910), s = r2(3790), i = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
          t2.encode = function(e3) {
            for (var t3, r3, s2, o, a, c, u, l2 = [], h = 0, p = e3.length, d = p, f = "string" !== n2.getTypeOf(e3); h < e3.length; ) d = p - h, f ? (t3 = e3[h++], r3 = h < p ? e3[h++] : 0, s2 = h < p ? e3[h++] : 0) : (t3 = e3.charCodeAt(h++), r3 = h < p ? e3.charCodeAt(h++) : 0, s2 = h < p ? e3.charCodeAt(h++) : 0), o = t3 >> 2, a = (3 & t3) << 4 | r3 >> 4, c = d > 1 ? (15 & r3) << 2 | s2 >> 6 : 64, u = d > 2 ? 63 & s2 : 64, l2.push(i.charAt(o) + i.charAt(a) + i.charAt(c) + i.charAt(u));
            return l2.join("");
          }, t2.decode = function(e3) {
            var t3, r3, n3, o, a, c, u = 0, l2 = 0, h = "data:";
            if (e3.substr(0, h.length) === h) throw new Error("Invalid base64 input, it looks like a data url.");
            var p, d = 3 * (e3 = e3.replace(/[^A-Za-z0-9+/=]/g, "")).length / 4;
            if (e3.charAt(e3.length - 1) === i.charAt(64) && d--, e3.charAt(e3.length - 2) === i.charAt(64) && d--, d % 1 != 0) throw new Error("Invalid base64 input, bad content length.");
            for (p = s.uint8array ? new Uint8Array(0 | d) : new Array(0 | d); u < e3.length; ) t3 = i.indexOf(e3.charAt(u++)) << 2 | (o = i.indexOf(e3.charAt(u++))) >> 4, r3 = (15 & o) << 4 | (a = i.indexOf(e3.charAt(u++))) >> 2, n3 = (3 & a) << 6 | (c = i.indexOf(e3.charAt(u++))), p[l2++] = t3, 64 !== a && (p[l2++] = r3), 64 !== c && (p[l2++] = n3);
            return p;
          };
        }, 7326: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(8565), s = r2(5301), i = r2(2541), o = r2(5977);
          function a(e3, t3, r3, n3, s2) {
            this.compressedSize = e3, this.uncompressedSize = t3, this.crc32 = r3, this.compression = n3, this.compressedContent = s2;
          }
          a.prototype = { getContentWorker: function() {
            var e3 = new s(n2.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new o("data_length")), t3 = this;
            return e3.on("end", function() {
              if (this.streamInfo.data_length !== t3.uncompressedSize) throw new Error("Bug : uncompressed data size mismatch");
            }), e3;
          }, getCompressedWorker: function() {
            return new s(n2.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize", this.compressedSize).withStreamInfo("uncompressedSize", this.uncompressedSize).withStreamInfo("crc32", this.crc32).withStreamInfo("compression", this.compression);
          } }, a.createWorkerFrom = function(e3, t3, r3) {
            return e3.pipe(new i()).pipe(new o("uncompressedSize")).pipe(t3.compressWorker(r3)).pipe(new o("compressedSize")).withStreamInfo("compression", t3);
          }, e2.exports = a;
        }, 1678: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(3718);
          t2.STORE = { magic: "\0\0", compressWorker: function() {
            return new n2("STORE compression");
          }, uncompressWorker: function() {
            return new n2("STORE decompression");
          } }, t2.DEFLATE = r2(1033);
        }, 6988: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(8910), s = function() {
            for (var e3, t3 = [], r3 = 0; r3 < 256; r3++) {
              e3 = r3;
              for (var n3 = 0; n3 < 8; n3++) e3 = 1 & e3 ? 3988292384 ^ e3 >>> 1 : e3 >>> 1;
              t3[r3] = e3;
            }
            return t3;
          }();
          e2.exports = function(e3, t3) {
            return void 0 !== e3 && e3.length ? "string" !== n2.getTypeOf(e3) ? function(e4, t4, r3, n3) {
              var i = s, o = 0 + r3;
              e4 ^= -1;
              for (var a = 0; a < o; a++) e4 = e4 >>> 8 ^ i[255 & (e4 ^ t4[a])];
              return -1 ^ e4;
            }(0 | t3, e3, e3.length) : function(e4, t4, r3, n3) {
              var i = s, o = 0 + r3;
              e4 ^= -1;
              for (var a = 0; a < o; a++) e4 = e4 >>> 8 ^ i[255 & (e4 ^ t4.charCodeAt(a))];
              return -1 ^ e4;
            }(0 | t3, e3, e3.length) : 0;
          };
        }, 6032: (e2, t2) => {
          "use strict";
          t2.base64 = false, t2.binary = false, t2.dir = false, t2.createFolders = true, t2.date = null, t2.compression = null, t2.compressionOptions = null, t2.comment = null, t2.unixPermissions = null, t2.dosPermissions = null;
        }, 8565: (e2, t2, r2) => {
          "use strict";
          var n2;
          n2 = "undefined" != typeof Promise ? Promise : r2(3389), e2.exports = { Promise: n2 };
        }, 1033: (e2, t2, r2) => {
          "use strict";
          var n2 = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Uint32Array, s = r2(9591), i = r2(8910), o = r2(3718), a = n2 ? "uint8array" : "array";
          function c(e3, t3) {
            o.call(this, "FlateWorker/" + e3), this._pako = null, this._pakoAction = e3, this._pakoOptions = t3, this.meta = {};
          }
          t2.magic = "\b\0", i.inherits(c, o), c.prototype.processChunk = function(e3) {
            this.meta = e3.meta, null === this._pako && this._createPako(), this._pako.push(i.transformTo(a, e3.data), false);
          }, c.prototype.flush = function() {
            o.prototype.flush.call(this), null === this._pako && this._createPako(), this._pako.push([], true);
          }, c.prototype.cleanUp = function() {
            o.prototype.cleanUp.call(this), this._pako = null;
          }, c.prototype._createPako = function() {
            this._pako = new s[this._pakoAction]({ raw: true, level: this._pakoOptions.level || -1 });
            var e3 = this;
            this._pako.onData = function(t3) {
              e3.push({ data: t3, meta: e3.meta });
            };
          }, t2.compressWorker = function(e3) {
            return new c("Deflate", e3);
          }, t2.uncompressWorker = function() {
            return new c("Inflate", {});
          };
        }, 4979: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(8910), s = r2(3718), i = r2(3600), o = r2(6988), a = r2(1141), c = function(e3, t3) {
            var r3, n3 = "";
            for (r3 = 0; r3 < t3; r3++) n3 += String.fromCharCode(255 & e3), e3 >>>= 8;
            return n3;
          }, u = function(e3, t3, r3, s2, u2, l3) {
            var h2, p, d = e3.file, f = e3.compression, m = l3 !== i.utf8encode, w = n2.transformTo("string", l3(d.name)), g = n2.transformTo("string", i.utf8encode(d.name)), y = d.comment, b = n2.transformTo("string", l3(y)), x = n2.transformTo("string", i.utf8encode(y)), v = g.length !== d.name.length, _ = x.length !== y.length, E = "", T = "", A = "", S = d.dir, I = d.date, R = { crc32: 0, compressedSize: 0, uncompressedSize: 0 };
            t3 && !r3 || (R.crc32 = e3.crc32, R.compressedSize = e3.compressedSize, R.uncompressedSize = e3.uncompressedSize);
            var N = 0;
            t3 && (N |= 8), m || !v && !_ || (N |= 2048);
            var C, O, k = 0, L = 0;
            S && (k |= 16), "UNIX" === u2 ? (L = 798, k |= (O = C = d.unixPermissions, C || (O = S ? 16893 : 33204), (65535 & O) << 16)) : (L = 20, k |= 63 & (d.dosPermissions || 0)), h2 = I.getUTCHours(), h2 <<= 6, h2 |= I.getUTCMinutes(), h2 <<= 5, h2 |= I.getUTCSeconds() / 2, p = I.getUTCFullYear() - 1980, p <<= 4, p |= I.getUTCMonth() + 1, p <<= 5, p |= I.getUTCDate(), v && (T = c(1, 1) + c(o(w), 4) + g, E += "up" + c(T.length, 2) + T), _ && (A = c(1, 1) + c(o(b), 4) + x, E += "uc" + c(A.length, 2) + A);
            var D = "";
            return D += "\n\0", D += c(N, 2), D += f.magic, D += c(h2, 2), D += c(p, 2), D += c(R.crc32, 4), D += c(R.compressedSize, 4), D += c(R.uncompressedSize, 4), D += c(w.length, 2), D += c(E.length, 2), { fileRecord: a.LOCAL_FILE_HEADER + D + w + E, dirRecord: a.CENTRAL_FILE_HEADER + c(L, 2) + D + c(b.length, 2) + "\0\0\0\0" + c(k, 4) + c(s2, 4) + w + E + b };
          }, l2 = function(e3) {
            return a.DATA_DESCRIPTOR + c(e3.crc32, 4) + c(e3.compressedSize, 4) + c(e3.uncompressedSize, 4);
          };
          function h(e3, t3, r3, n3) {
            s.call(this, "ZipFileWorker"), this.bytesWritten = 0, this.zipComment = t3, this.zipPlatform = r3, this.encodeFileName = n3, this.streamFiles = e3, this.accumulate = false, this.contentBuffer = [], this.dirRecords = [], this.currentSourceOffset = 0, this.entriesCount = 0, this.currentFile = null, this._sources = [];
          }
          n2.inherits(h, s), h.prototype.push = function(e3) {
            var t3 = e3.meta.percent || 0, r3 = this.entriesCount, n3 = this._sources.length;
            this.accumulate ? this.contentBuffer.push(e3) : (this.bytesWritten += e3.data.length, s.prototype.push.call(this, { data: e3.data, meta: { currentFile: this.currentFile, percent: r3 ? (t3 + 100 * (r3 - n3 - 1)) / r3 : 100 } }));
          }, h.prototype.openedSource = function(e3) {
            this.currentSourceOffset = this.bytesWritten, this.currentFile = e3.file.name;
            var t3 = this.streamFiles && !e3.file.dir;
            if (t3) {
              var r3 = u(e3, t3, false, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);
              this.push({ data: r3.fileRecord, meta: { percent: 0 } });
            } else this.accumulate = true;
          }, h.prototype.closedSource = function(e3) {
            this.accumulate = false;
            var t3 = this.streamFiles && !e3.file.dir, r3 = u(e3, t3, true, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);
            if (this.dirRecords.push(r3.dirRecord), t3) this.push({ data: l2(e3), meta: { percent: 100 } });
            else for (this.push({ data: r3.fileRecord, meta: { percent: 0 } }); this.contentBuffer.length; ) this.push(this.contentBuffer.shift());
            this.currentFile = null;
          }, h.prototype.flush = function() {
            for (var e3 = this.bytesWritten, t3 = 0; t3 < this.dirRecords.length; t3++) this.push({ data: this.dirRecords[t3], meta: { percent: 100 } });
            var r3 = this.bytesWritten - e3, s2 = function(e4, t4, r4, s3, i2) {
              var o2 = n2.transformTo("string", i2(s3));
              return a.CENTRAL_DIRECTORY_END + "\0\0\0\0" + c(e4, 2) + c(e4, 2) + c(t4, 4) + c(r4, 4) + c(o2.length, 2) + o2;
            }(this.dirRecords.length, r3, e3, this.zipComment, this.encodeFileName);
            this.push({ data: s2, meta: { percent: 100 } });
          }, h.prototype.prepareNextSource = function() {
            this.previous = this._sources.shift(), this.openedSource(this.previous.streamInfo), this.isPaused ? this.previous.pause() : this.previous.resume();
          }, h.prototype.registerPrevious = function(e3) {
            this._sources.push(e3);
            var t3 = this;
            return e3.on("data", function(e4) {
              t3.processChunk(e4);
            }), e3.on("end", function() {
              t3.closedSource(t3.previous.streamInfo), t3._sources.length ? t3.prepareNextSource() : t3.end();
            }), e3.on("error", function(e4) {
              t3.error(e4);
            }), this;
          }, h.prototype.resume = function() {
            return !!s.prototype.resume.call(this) && (!this.previous && this._sources.length ? (this.prepareNextSource(), true) : this.previous || this._sources.length || this.generatedError ? void 0 : (this.end(), true));
          }, h.prototype.error = function(e3) {
            var t3 = this._sources;
            if (!s.prototype.error.call(this, e3)) return false;
            for (var r3 = 0; r3 < t3.length; r3++) try {
              t3[r3].error(e3);
            } catch (e4) {
            }
            return true;
          }, h.prototype.lock = function() {
            s.prototype.lock.call(this);
            for (var e3 = this._sources, t3 = 0; t3 < e3.length; t3++) e3[t3].lock();
          }, e2.exports = h;
        }, 7834: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(1678), s = r2(4979);
          t2.generateWorker = function(e3, t3, r3) {
            var i = new s(t3.streamFiles, r3, t3.platform, t3.encodeFileName), o = 0;
            try {
              e3.forEach(function(e4, r4) {
                o++;
                var s2 = function(e5, t4) {
                  var r5 = e5 || t4, s3 = n2[r5];
                  if (!s3) throw new Error(r5 + " is not a valid compression method !");
                  return s3;
                }(r4.options.compression, t3.compression), a = r4.options.compressionOptions || t3.compressionOptions || {}, c = r4.dir, u = r4.date;
                r4._compressWorker(s2, a).withStreamInfo("file", { name: e4, dir: c, date: u, comment: r4.comment || "", unixPermissions: r4.unixPermissions, dosPermissions: r4.dosPermissions }).pipe(i);
              }), i.entriesCount = o;
            } catch (e4) {
              i.error(e4);
            }
            return i;
          };
        }, 6085: (e2, t2, r2) => {
          "use strict";
          function n2() {
            if (!(this instanceof n2)) return new n2();
            if (arguments.length) throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");
            this.files = /* @__PURE__ */ Object.create(null), this.comment = null, this.root = "", this.clone = function() {
              var e3 = new n2();
              for (var t3 in this) "function" != typeof this[t3] && (e3[t3] = this[t3]);
              return e3;
            };
          }
          n2.prototype = r2(7132), n2.prototype.loadAsync = r2(1062), n2.support = r2(3790), n2.defaults = r2(6032), n2.version = "3.10.1", n2.loadAsync = function(e3, t3) {
            return new n2().loadAsync(e3, t3);
          }, n2.external = r2(8565), e2.exports = n2;
        }, 1062: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(8910), s = r2(8565), i = r2(3600), o = r2(6624), a = r2(2541), c = r2(2182);
          function u(e3) {
            return new s.Promise(function(t3, r3) {
              var n3 = e3.decompressed.getContentWorker().pipe(new a());
              n3.on("error", function(e4) {
                r3(e4);
              }).on("end", function() {
                n3.streamInfo.crc32 !== e3.decompressed.crc32 ? r3(new Error("Corrupted zip : CRC32 mismatch")) : t3();
              }).resume();
            });
          }
          e2.exports = function(e3, t3) {
            var r3 = this;
            return t3 = n2.extend(t3 || {}, { base64: false, checkCRC32: false, optimizedBinaryString: false, createFolders: false, decodeFileName: i.utf8decode }), c.isNode && c.isStream(e3) ? s.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")) : n2.prepareContent("the loaded zip file", e3, true, t3.optimizedBinaryString, t3.base64).then(function(e4) {
              var r4 = new o(t3);
              return r4.load(e4), r4;
            }).then(function(e4) {
              var r4 = [s.Promise.resolve(e4)], n3 = e4.files;
              if (t3.checkCRC32) for (var i2 = 0; i2 < n3.length; i2++) r4.push(u(n3[i2]));
              return s.Promise.all(r4);
            }).then(function(e4) {
              for (var s2 = e4.shift(), i2 = s2.files, o2 = 0; o2 < i2.length; o2++) {
                var a2 = i2[o2], c2 = a2.fileNameStr, u2 = n2.resolve(a2.fileNameStr);
                r3.file(u2, a2.decompressed, { binary: true, optimizedBinaryString: true, date: a2.date, dir: a2.dir, comment: a2.fileCommentStr.length ? a2.fileCommentStr : null, unixPermissions: a2.unixPermissions, dosPermissions: a2.dosPermissions, createFolders: t3.createFolders }), a2.dir || (r3.file(u2).unsafeOriginalName = c2);
              }
              return s2.zipComment.length && (r3.comment = s2.zipComment), r3;
            });
          };
        }, 2182: (e2) => {
          "use strict";
          e2.exports = { isNode: "undefined" != typeof Buffer, newBufferFrom: function(e3, t2) {
            if (Buffer.from && Buffer.from !== Uint8Array.from) return Buffer.from(e3, t2);
            if ("number" == typeof e3) throw new Error('The "data" argument must not be a number');
            return new Buffer(e3, t2);
          }, allocBuffer: function(e3) {
            if (Buffer.alloc) return Buffer.alloc(e3);
            var t2 = new Buffer(e3);
            return t2.fill(0), t2;
          }, isBuffer: function(e3) {
            return Buffer.isBuffer(e3);
          }, isStream: function(e3) {
            return e3 && "function" == typeof e3.on && "function" == typeof e3.pause && "function" == typeof e3.resume;
          } };
        }, 660: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(8910), s = r2(3718);
          function i(e3, t3) {
            s.call(this, "Nodejs stream input adapter for " + e3), this._upstreamEnded = false, this._bindStream(t3);
          }
          n2.inherits(i, s), i.prototype._bindStream = function(e3) {
            var t3 = this;
            this._stream = e3, e3.pause(), e3.on("data", function(e4) {
              t3.push({ data: e4, meta: { percent: 0 } });
            }).on("error", function(e4) {
              t3.isPaused ? this.generatedError = e4 : t3.error(e4);
            }).on("end", function() {
              t3.isPaused ? t3._upstreamEnded = true : t3.end();
            });
          }, i.prototype.pause = function() {
            return !!s.prototype.pause.call(this) && (this._stream.pause(), true);
          }, i.prototype.resume = function() {
            return !!s.prototype.resume.call(this) && (this._upstreamEnded ? this.end() : this._stream.resume(), true);
          }, e2.exports = i;
        }, 1220: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(749).Readable;
          function s(e3, t3, r3) {
            n2.call(this, t3), this._helper = e3;
            var s2 = this;
            e3.on("data", function(e4, t4) {
              s2.push(e4) || s2._helper.pause(), r3 && r3(t4);
            }).on("error", function(e4) {
              s2.emit("error", e4);
            }).on("end", function() {
              s2.push(null);
            });
          }
          r2(8910).inherits(s, n2), s.prototype._read = function() {
            this._helper.resume();
          }, e2.exports = s;
        }, 7132: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(3600), s = r2(8910), i = r2(3718), o = r2(1285), a = r2(6032), c = r2(7326), u = r2(6859), l2 = r2(7834), h = r2(2182), p = r2(660), d = function(e3, t3, r3) {
            var n3, o2 = s.getTypeOf(t3), l3 = s.extend(r3 || {}, a);
            l3.date = l3.date || /* @__PURE__ */ new Date(), null !== l3.compression && (l3.compression = l3.compression.toUpperCase()), "string" == typeof l3.unixPermissions && (l3.unixPermissions = parseInt(l3.unixPermissions, 8)), l3.unixPermissions && 16384 & l3.unixPermissions && (l3.dir = true), l3.dosPermissions && 16 & l3.dosPermissions && (l3.dir = true), l3.dir && (e3 = m(e3)), l3.createFolders && (n3 = f(e3)) && w.call(this, n3, true);
            var d2 = "string" === o2 && false === l3.binary && false === l3.base64;
            r3 && void 0 !== r3.binary || (l3.binary = !d2), (t3 instanceof c && 0 === t3.uncompressedSize || l3.dir || !t3 || 0 === t3.length) && (l3.base64 = false, l3.binary = true, t3 = "", l3.compression = "STORE", o2 = "string");
            var g2;
            g2 = t3 instanceof c || t3 instanceof i ? t3 : h.isNode && h.isStream(t3) ? new p(e3, t3) : s.prepareContent(e3, t3, l3.binary, l3.optimizedBinaryString, l3.base64);
            var y2 = new u(e3, g2, l3);
            this.files[e3] = y2;
          }, f = function(e3) {
            "/" === e3.slice(-1) && (e3 = e3.substring(0, e3.length - 1));
            var t3 = e3.lastIndexOf("/");
            return t3 > 0 ? e3.substring(0, t3) : "";
          }, m = function(e3) {
            return "/" !== e3.slice(-1) && (e3 += "/"), e3;
          }, w = function(e3, t3) {
            return t3 = void 0 !== t3 ? t3 : a.createFolders, e3 = m(e3), this.files[e3] || d.call(this, e3, null, { dir: true, createFolders: t3 }), this.files[e3];
          };
          function g(e3) {
            return "[object RegExp]" === Object.prototype.toString.call(e3);
          }
          var y = { load: function() {
            throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
          }, forEach: function(e3) {
            var t3, r3, n3;
            for (t3 in this.files) n3 = this.files[t3], (r3 = t3.slice(this.root.length, t3.length)) && t3.slice(0, this.root.length) === this.root && e3(r3, n3);
          }, filter: function(e3) {
            var t3 = [];
            return this.forEach(function(r3, n3) {
              e3(r3, n3) && t3.push(n3);
            }), t3;
          }, file: function(e3, t3, r3) {
            if (1 === arguments.length) {
              if (g(e3)) {
                var n3 = e3;
                return this.filter(function(e4, t4) {
                  return !t4.dir && n3.test(e4);
                });
              }
              var s2 = this.files[this.root + e3];
              return s2 && !s2.dir ? s2 : null;
            }
            return e3 = this.root + e3, d.call(this, e3, t3, r3), this;
          }, folder: function(e3) {
            if (!e3) return this;
            if (g(e3)) return this.filter(function(t4, r4) {
              return r4.dir && e3.test(t4);
            });
            var t3 = this.root + e3, r3 = w.call(this, t3), n3 = this.clone();
            return n3.root = r3.name, n3;
          }, remove: function(e3) {
            e3 = this.root + e3;
            var t3 = this.files[e3];
            if (t3 || ("/" !== e3.slice(-1) && (e3 += "/"), t3 = this.files[e3]), t3 && !t3.dir) delete this.files[e3];
            else for (var r3 = this.filter(function(t4, r4) {
              return r4.name.slice(0, e3.length) === e3;
            }), n3 = 0; n3 < r3.length; n3++) delete this.files[r3[n3].name];
            return this;
          }, generate: function() {
            throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
          }, generateInternalStream: function(e3) {
            var t3, r3 = {};
            try {
              if ((r3 = s.extend(e3 || {}, { streamFiles: false, compression: "STORE", compressionOptions: null, type: "", platform: "DOS", comment: null, mimeType: "application/zip", encodeFileName: n2.utf8encode })).type = r3.type.toLowerCase(), r3.compression = r3.compression.toUpperCase(), "binarystring" === r3.type && (r3.type = "string"), !r3.type) throw new Error("No output type specified.");
              s.checkSupport(r3.type), "darwin" !== r3.platform && "freebsd" !== r3.platform && "linux" !== r3.platform && "sunos" !== r3.platform || (r3.platform = "UNIX"), "win32" === r3.platform && (r3.platform = "DOS");
              var a2 = r3.comment || this.comment || "";
              t3 = l2.generateWorker(this, r3, a2);
            } catch (e4) {
              (t3 = new i("error")).error(e4);
            }
            return new o(t3, r3.type || "string", r3.mimeType);
          }, generateAsync: function(e3, t3) {
            return this.generateInternalStream(e3).accumulate(t3);
          }, generateNodeStream: function(e3, t3) {
            return (e3 = e3 || {}).type || (e3.type = "nodebuffer"), this.generateInternalStream(e3).toNodejsStream(t3);
          } };
          e2.exports = y;
        }, 749: (e2, t2, r2) => {
          "use strict";
          e2.exports = r2(2830);
        }, 2370: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(8542);
          function s(e3) {
            n2.call(this, e3);
            for (var t3 = 0; t3 < this.data.length; t3++) e3[t3] = 255 & e3[t3];
          }
          r2(8910).inherits(s, n2), s.prototype.byteAt = function(e3) {
            return this.data[this.zero + e3];
          }, s.prototype.lastIndexOfSignature = function(e3) {
            for (var t3 = e3.charCodeAt(0), r3 = e3.charCodeAt(1), n3 = e3.charCodeAt(2), s2 = e3.charCodeAt(3), i = this.length - 4; i >= 0; --i) if (this.data[i] === t3 && this.data[i + 1] === r3 && this.data[i + 2] === n3 && this.data[i + 3] === s2) return i - this.zero;
            return -1;
          }, s.prototype.readAndCheckSignature = function(e3) {
            var t3 = e3.charCodeAt(0), r3 = e3.charCodeAt(1), n3 = e3.charCodeAt(2), s2 = e3.charCodeAt(3), i = this.readData(4);
            return t3 === i[0] && r3 === i[1] && n3 === i[2] && s2 === i[3];
          }, s.prototype.readData = function(e3) {
            if (this.checkOffset(e3), 0 === e3) return [];
            var t3 = this.data.slice(this.zero + this.index, this.zero + this.index + e3);
            return this.index += e3, t3;
          }, e2.exports = s;
        }, 8542: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(8910);
          function s(e3) {
            this.data = e3, this.length = e3.length, this.index = 0, this.zero = 0;
          }
          s.prototype = { checkOffset: function(e3) {
            this.checkIndex(this.index + e3);
          }, checkIndex: function(e3) {
            if (this.length < this.zero + e3 || e3 < 0) throw new Error("End of data reached (data length = " + this.length + ", asked index = " + e3 + "). Corrupted zip ?");
          }, setIndex: function(e3) {
            this.checkIndex(e3), this.index = e3;
          }, skip: function(e3) {
            this.setIndex(this.index + e3);
          }, byteAt: function() {
          }, readInt: function(e3) {
            var t3, r3 = 0;
            for (this.checkOffset(e3), t3 = this.index + e3 - 1; t3 >= this.index; t3--) r3 = (r3 << 8) + this.byteAt(t3);
            return this.index += e3, r3;
          }, readString: function(e3) {
            return n2.transformTo("string", this.readData(e3));
          }, readData: function() {
          }, lastIndexOfSignature: function() {
          }, readAndCheckSignature: function() {
          }, readDate: function() {
            var e3 = this.readInt(4);
            return new Date(Date.UTC(1980 + (e3 >> 25 & 127), (e3 >> 21 & 15) - 1, e3 >> 16 & 31, e3 >> 11 & 31, e3 >> 5 & 63, (31 & e3) << 1));
          } }, e2.exports = s;
        }, 9583: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(414);
          function s(e3) {
            n2.call(this, e3);
          }
          r2(8910).inherits(s, n2), s.prototype.readData = function(e3) {
            this.checkOffset(e3);
            var t3 = this.data.slice(this.zero + this.index, this.zero + this.index + e3);
            return this.index += e3, t3;
          }, e2.exports = s;
        }, 9226: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(8542);
          function s(e3) {
            n2.call(this, e3);
          }
          r2(8910).inherits(s, n2), s.prototype.byteAt = function(e3) {
            return this.data.charCodeAt(this.zero + e3);
          }, s.prototype.lastIndexOfSignature = function(e3) {
            return this.data.lastIndexOf(e3) - this.zero;
          }, s.prototype.readAndCheckSignature = function(e3) {
            return e3 === this.readData(4);
          }, s.prototype.readData = function(e3) {
            this.checkOffset(e3);
            var t3 = this.data.slice(this.zero + this.index, this.zero + this.index + e3);
            return this.index += e3, t3;
          }, e2.exports = s;
        }, 414: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(2370);
          function s(e3) {
            n2.call(this, e3);
          }
          r2(8910).inherits(s, n2), s.prototype.readData = function(e3) {
            if (this.checkOffset(e3), 0 === e3) return new Uint8Array(0);
            var t3 = this.data.subarray(this.zero + this.index, this.zero + this.index + e3);
            return this.index += e3, t3;
          }, e2.exports = s;
        }, 8435: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(8910), s = r2(3790), i = r2(2370), o = r2(9226), a = r2(9583), c = r2(414);
          e2.exports = function(e3) {
            var t3 = n2.getTypeOf(e3);
            return n2.checkSupport(t3), "string" !== t3 || s.uint8array ? "nodebuffer" === t3 ? new a(e3) : s.uint8array ? new c(n2.transformTo("uint8array", e3)) : new i(n2.transformTo("array", e3)) : new o(e3);
          };
        }, 1141: (e2, t2) => {
          "use strict";
          t2.LOCAL_FILE_HEADER = "PK", t2.CENTRAL_FILE_HEADER = "PK", t2.CENTRAL_DIRECTORY_END = "PK", t2.ZIP64_CENTRAL_DIRECTORY_LOCATOR = "PK\x07", t2.ZIP64_CENTRAL_DIRECTORY_END = "PK", t2.DATA_DESCRIPTOR = "PK\x07\b";
        }, 4293: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(3718), s = r2(8910);
          function i(e3) {
            n2.call(this, "ConvertWorker to " + e3), this.destType = e3;
          }
          s.inherits(i, n2), i.prototype.processChunk = function(e3) {
            this.push({ data: s.transformTo(this.destType, e3.data), meta: e3.meta });
          }, e2.exports = i;
        }, 2541: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(3718), s = r2(6988);
          function i() {
            n2.call(this, "Crc32Probe"), this.withStreamInfo("crc32", 0);
          }
          r2(8910).inherits(i, n2), i.prototype.processChunk = function(e3) {
            this.streamInfo.crc32 = s(e3.data, this.streamInfo.crc32 || 0), this.push(e3);
          }, e2.exports = i;
        }, 5977: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(8910), s = r2(3718);
          function i(e3) {
            s.call(this, "DataLengthProbe for " + e3), this.propName = e3, this.withStreamInfo(e3, 0);
          }
          n2.inherits(i, s), i.prototype.processChunk = function(e3) {
            if (e3) {
              var t3 = this.streamInfo[this.propName] || 0;
              this.streamInfo[this.propName] = t3 + e3.data.length;
            }
            s.prototype.processChunk.call(this, e3);
          }, e2.exports = i;
        }, 5301: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(8910), s = r2(3718);
          function i(e3) {
            s.call(this, "DataWorker");
            var t3 = this;
            this.dataIsReady = false, this.index = 0, this.max = 0, this.data = null, this.type = "", this._tickScheduled = false, e3.then(function(e4) {
              t3.dataIsReady = true, t3.data = e4, t3.max = e4 && e4.length || 0, t3.type = n2.getTypeOf(e4), t3.isPaused || t3._tickAndRepeat();
            }, function(e4) {
              t3.error(e4);
            });
          }
          n2.inherits(i, s), i.prototype.cleanUp = function() {
            s.prototype.cleanUp.call(this), this.data = null;
          }, i.prototype.resume = function() {
            return !!s.prototype.resume.call(this) && (!this._tickScheduled && this.dataIsReady && (this._tickScheduled = true, n2.delay(this._tickAndRepeat, [], this)), true);
          }, i.prototype._tickAndRepeat = function() {
            this._tickScheduled = false, this.isPaused || this.isFinished || (this._tick(), this.isFinished || (n2.delay(this._tickAndRepeat, [], this), this._tickScheduled = true));
          }, i.prototype._tick = function() {
            if (this.isPaused || this.isFinished) return false;
            var e3 = null, t3 = Math.min(this.max, this.index + 16384);
            if (this.index >= this.max) return this.end();
            switch (this.type) {
              case "string":
                e3 = this.data.substring(this.index, t3);
                break;
              case "uint8array":
                e3 = this.data.subarray(this.index, t3);
                break;
              case "array":
              case "nodebuffer":
                e3 = this.data.slice(this.index, t3);
            }
            return this.index = t3, this.push({ data: e3, meta: { percent: this.max ? this.index / this.max * 100 : 0 } });
          }, e2.exports = i;
        }, 3718: (e2) => {
          "use strict";
          function t2(e3) {
            this.name = e3 || "default", this.streamInfo = {}, this.generatedError = null, this.extraStreamInfo = {}, this.isPaused = true, this.isFinished = false, this.isLocked = false, this._listeners = { data: [], end: [], error: [] }, this.previous = null;
          }
          t2.prototype = { push: function(e3) {
            this.emit("data", e3);
          }, end: function() {
            if (this.isFinished) return false;
            this.flush();
            try {
              this.emit("end"), this.cleanUp(), this.isFinished = true;
            } catch (e3) {
              this.emit("error", e3);
            }
            return true;
          }, error: function(e3) {
            return !this.isFinished && (this.isPaused ? this.generatedError = e3 : (this.isFinished = true, this.emit("error", e3), this.previous && this.previous.error(e3), this.cleanUp()), true);
          }, on: function(e3, t3) {
            return this._listeners[e3].push(t3), this;
          }, cleanUp: function() {
            this.streamInfo = this.generatedError = this.extraStreamInfo = null, this._listeners = [];
          }, emit: function(e3, t3) {
            if (this._listeners[e3]) for (var r2 = 0; r2 < this._listeners[e3].length; r2++) this._listeners[e3][r2].call(this, t3);
          }, pipe: function(e3) {
            return e3.registerPrevious(this);
          }, registerPrevious: function(e3) {
            if (this.isLocked) throw new Error("The stream '" + this + "' has already been used.");
            this.streamInfo = e3.streamInfo, this.mergeStreamInfo(), this.previous = e3;
            var t3 = this;
            return e3.on("data", function(e4) {
              t3.processChunk(e4);
            }), e3.on("end", function() {
              t3.end();
            }), e3.on("error", function(e4) {
              t3.error(e4);
            }), this;
          }, pause: function() {
            return !this.isPaused && !this.isFinished && (this.isPaused = true, this.previous && this.previous.pause(), true);
          }, resume: function() {
            if (!this.isPaused || this.isFinished) return false;
            this.isPaused = false;
            var e3 = false;
            return this.generatedError && (this.error(this.generatedError), e3 = true), this.previous && this.previous.resume(), !e3;
          }, flush: function() {
          }, processChunk: function(e3) {
            this.push(e3);
          }, withStreamInfo: function(e3, t3) {
            return this.extraStreamInfo[e3] = t3, this.mergeStreamInfo(), this;
          }, mergeStreamInfo: function() {
            for (var e3 in this.extraStreamInfo) Object.prototype.hasOwnProperty.call(this.extraStreamInfo, e3) && (this.streamInfo[e3] = this.extraStreamInfo[e3]);
          }, lock: function() {
            if (this.isLocked) throw new Error("The stream '" + this + "' has already been used.");
            this.isLocked = true, this.previous && this.previous.lock();
          }, toString: function() {
            var e3 = "Worker " + this.name;
            return this.previous ? this.previous + " -> " + e3 : e3;
          } }, e2.exports = t2;
        }, 1285: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(8910), s = r2(4293), i = r2(3718), o = r2(8458), a = r2(3790), c = r2(8565), u = null;
          if (a.nodestream) try {
            u = r2(1220);
          } catch (e3) {
          }
          function l2(e3, t3, r3) {
            var o2 = t3;
            switch (t3) {
              case "blob":
              case "arraybuffer":
                o2 = "uint8array";
                break;
              case "base64":
                o2 = "string";
            }
            try {
              this._internalType = o2, this._outputType = t3, this._mimeType = r3, n2.checkSupport(o2), this._worker = e3.pipe(new s(o2)), e3.lock();
            } catch (e4) {
              this._worker = new i("error"), this._worker.error(e4);
            }
          }
          l2.prototype = { accumulate: function(e3) {
            return t3 = this, r3 = e3, new c.Promise(function(e4, s2) {
              var i2 = [], a2 = t3._internalType, c2 = t3._outputType, u2 = t3._mimeType;
              t3.on("data", function(e5, t4) {
                i2.push(e5), r3 && r3(t4);
              }).on("error", function(e5) {
                i2 = [], s2(e5);
              }).on("end", function() {
                try {
                  var t4 = function(e5, t5, r4) {
                    switch (e5) {
                      case "blob":
                        return n2.newBlob(n2.transformTo("arraybuffer", t5), r4);
                      case "base64":
                        return o.encode(t5);
                      default:
                        return n2.transformTo(e5, t5);
                    }
                  }(c2, function(e5, t5) {
                    var r4, n3 = 0, s3 = null, i3 = 0;
                    for (r4 = 0; r4 < t5.length; r4++) i3 += t5[r4].length;
                    switch (e5) {
                      case "string":
                        return t5.join("");
                      case "array":
                        return Array.prototype.concat.apply([], t5);
                      case "uint8array":
                        for (s3 = new Uint8Array(i3), r4 = 0; r4 < t5.length; r4++) s3.set(t5[r4], n3), n3 += t5[r4].length;
                        return s3;
                      case "nodebuffer":
                        return Buffer.concat(t5);
                      default:
                        throw new Error("concat : unsupported type '" + e5 + "'");
                    }
                  }(a2, i2), u2);
                  e4(t4);
                } catch (e5) {
                  s2(e5);
                }
                i2 = [];
              }).resume();
            });
            var t3, r3;
          }, on: function(e3, t3) {
            var r3 = this;
            return "data" === e3 ? this._worker.on(e3, function(e4) {
              t3.call(r3, e4.data, e4.meta);
            }) : this._worker.on(e3, function() {
              n2.delay(t3, arguments, r3);
            }), this;
          }, resume: function() {
            return n2.delay(this._worker.resume, [], this._worker), this;
          }, pause: function() {
            return this._worker.pause(), this;
          }, toNodejsStream: function(e3) {
            if (n2.checkSupport("nodestream"), "nodebuffer" !== this._outputType) throw new Error(this._outputType + " is not supported by this method");
            return new u(this, { objectMode: "nodebuffer" !== this._outputType }, e3);
          } }, e2.exports = l2;
        }, 3790: (e2, t2, r2) => {
          "use strict";
          if (t2.base64 = true, t2.array = true, t2.string = true, t2.arraybuffer = "undefined" != typeof ArrayBuffer && "undefined" != typeof Uint8Array, t2.nodebuffer = "undefined" != typeof Buffer, t2.uint8array = "undefined" != typeof Uint8Array, "undefined" == typeof ArrayBuffer) t2.blob = false;
          else {
            var n2 = new ArrayBuffer(0);
            try {
              t2.blob = 0 === new Blob([n2], { type: "application/zip" }).size;
            } catch (e3) {
              try {
                var s = new (self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder)();
                s.append(n2), t2.blob = 0 === s.getBlob("application/zip").size;
              } catch (e4) {
                t2.blob = false;
              }
            }
          }
          try {
            t2.nodestream = !!r2(749).Readable;
          } catch (e3) {
            t2.nodestream = false;
          }
        }, 3600: (e2, t2, r2) => {
          "use strict";
          for (var n2 = r2(8910), s = r2(3790), i = r2(2182), o = r2(3718), a = new Array(256), c = 0; c < 256; c++) a[c] = c >= 252 ? 6 : c >= 248 ? 5 : c >= 240 ? 4 : c >= 224 ? 3 : c >= 192 ? 2 : 1;
          function u() {
            o.call(this, "utf-8 decode"), this.leftOver = null;
          }
          function l2() {
            o.call(this, "utf-8 encode");
          }
          a[254] = a[254] = 1, t2.utf8encode = function(e3) {
            return s.nodebuffer ? i.newBufferFrom(e3, "utf-8") : function(e4) {
              var t3, r3, n3, i2, o2, a2 = e4.length, c2 = 0;
              for (i2 = 0; i2 < a2; i2++) 55296 == (64512 & (r3 = e4.charCodeAt(i2))) && i2 + 1 < a2 && 56320 == (64512 & (n3 = e4.charCodeAt(i2 + 1))) && (r3 = 65536 + (r3 - 55296 << 10) + (n3 - 56320), i2++), c2 += r3 < 128 ? 1 : r3 < 2048 ? 2 : r3 < 65536 ? 3 : 4;
              for (t3 = s.uint8array ? new Uint8Array(c2) : new Array(c2), o2 = 0, i2 = 0; o2 < c2; i2++) 55296 == (64512 & (r3 = e4.charCodeAt(i2))) && i2 + 1 < a2 && 56320 == (64512 & (n3 = e4.charCodeAt(i2 + 1))) && (r3 = 65536 + (r3 - 55296 << 10) + (n3 - 56320), i2++), r3 < 128 ? t3[o2++] = r3 : r3 < 2048 ? (t3[o2++] = 192 | r3 >>> 6, t3[o2++] = 128 | 63 & r3) : r3 < 65536 ? (t3[o2++] = 224 | r3 >>> 12, t3[o2++] = 128 | r3 >>> 6 & 63, t3[o2++] = 128 | 63 & r3) : (t3[o2++] = 240 | r3 >>> 18, t3[o2++] = 128 | r3 >>> 12 & 63, t3[o2++] = 128 | r3 >>> 6 & 63, t3[o2++] = 128 | 63 & r3);
              return t3;
            }(e3);
          }, t2.utf8decode = function(e3) {
            return s.nodebuffer ? n2.transformTo("nodebuffer", e3).toString("utf-8") : function(e4) {
              var t3, r3, s2, i2, o2 = e4.length, c2 = new Array(2 * o2);
              for (r3 = 0, t3 = 0; t3 < o2; ) if ((s2 = e4[t3++]) < 128) c2[r3++] = s2;
              else if ((i2 = a[s2]) > 4) c2[r3++] = 65533, t3 += i2 - 1;
              else {
                for (s2 &= 2 === i2 ? 31 : 3 === i2 ? 15 : 7; i2 > 1 && t3 < o2; ) s2 = s2 << 6 | 63 & e4[t3++], i2--;
                i2 > 1 ? c2[r3++] = 65533 : s2 < 65536 ? c2[r3++] = s2 : (s2 -= 65536, c2[r3++] = 55296 | s2 >> 10 & 1023, c2[r3++] = 56320 | 1023 & s2);
              }
              return c2.length !== r3 && (c2.subarray ? c2 = c2.subarray(0, r3) : c2.length = r3), n2.applyFromCharCode(c2);
            }(e3 = n2.transformTo(s.uint8array ? "uint8array" : "array", e3));
          }, n2.inherits(u, o), u.prototype.processChunk = function(e3) {
            var r3 = n2.transformTo(s.uint8array ? "uint8array" : "array", e3.data);
            if (this.leftOver && this.leftOver.length) {
              if (s.uint8array) {
                var i2 = r3;
                (r3 = new Uint8Array(i2.length + this.leftOver.length)).set(this.leftOver, 0), r3.set(i2, this.leftOver.length);
              } else r3 = this.leftOver.concat(r3);
              this.leftOver = null;
            }
            var o2 = function(e4, t3) {
              var r4;
              for ((t3 = t3 || e4.length) > e4.length && (t3 = e4.length), r4 = t3 - 1; r4 >= 0 && 128 == (192 & e4[r4]); ) r4--;
              return r4 < 0 || 0 === r4 ? t3 : r4 + a[e4[r4]] > t3 ? r4 : t3;
            }(r3), c2 = r3;
            o2 !== r3.length && (s.uint8array ? (c2 = r3.subarray(0, o2), this.leftOver = r3.subarray(o2, r3.length)) : (c2 = r3.slice(0, o2), this.leftOver = r3.slice(o2, r3.length))), this.push({ data: t2.utf8decode(c2), meta: e3.meta });
          }, u.prototype.flush = function() {
            this.leftOver && this.leftOver.length && (this.push({ data: t2.utf8decode(this.leftOver), meta: {} }), this.leftOver = null);
          }, t2.Utf8DecodeWorker = u, n2.inherits(l2, o), l2.prototype.processChunk = function(e3) {
            this.push({ data: t2.utf8encode(e3.data), meta: e3.meta });
          }, t2.Utf8EncodeWorker = l2;
        }, 8910: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(3790), s = r2(8458), i = r2(2182), o = r2(8565);
          function a(e3) {
            return e3;
          }
          function c(e3, t3) {
            for (var r3 = 0; r3 < e3.length; ++r3) t3[r3] = 255 & e3.charCodeAt(r3);
            return t3;
          }
          r2(4889), t2.newBlob = function(e3, r3) {
            t2.checkSupport("blob");
            try {
              return new Blob([e3], { type: r3 });
            } catch (t3) {
              try {
                var n3 = new (self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder)();
                return n3.append(e3), n3.getBlob(r3);
              } catch (e4) {
                throw new Error("Bug : can't construct the Blob.");
              }
            }
          };
          var u = { stringifyByChunk: function(e3, t3, r3) {
            var n3 = [], s2 = 0, i2 = e3.length;
            if (i2 <= r3) return String.fromCharCode.apply(null, e3);
            for (; s2 < i2; ) "array" === t3 || "nodebuffer" === t3 ? n3.push(String.fromCharCode.apply(null, e3.slice(s2, Math.min(s2 + r3, i2)))) : n3.push(String.fromCharCode.apply(null, e3.subarray(s2, Math.min(s2 + r3, i2)))), s2 += r3;
            return n3.join("");
          }, stringifyByChar: function(e3) {
            for (var t3 = "", r3 = 0; r3 < e3.length; r3++) t3 += String.fromCharCode(e3[r3]);
            return t3;
          }, applyCanBeUsed: { uint8array: function() {
            try {
              return n2.uint8array && 1 === String.fromCharCode.apply(null, new Uint8Array(1)).length;
            } catch (e3) {
              return false;
            }
          }(), nodebuffer: function() {
            try {
              return n2.nodebuffer && 1 === String.fromCharCode.apply(null, i.allocBuffer(1)).length;
            } catch (e3) {
              return false;
            }
          }() } };
          function l2(e3) {
            var r3 = 65536, n3 = t2.getTypeOf(e3), s2 = true;
            if ("uint8array" === n3 ? s2 = u.applyCanBeUsed.uint8array : "nodebuffer" === n3 && (s2 = u.applyCanBeUsed.nodebuffer), s2) for (; r3 > 1; ) try {
              return u.stringifyByChunk(e3, n3, r3);
            } catch (e4) {
              r3 = Math.floor(r3 / 2);
            }
            return u.stringifyByChar(e3);
          }
          function h(e3, t3) {
            for (var r3 = 0; r3 < e3.length; r3++) t3[r3] = e3[r3];
            return t3;
          }
          t2.applyFromCharCode = l2;
          var p = {};
          p.string = { string: a, array: function(e3) {
            return c(e3, new Array(e3.length));
          }, arraybuffer: function(e3) {
            return p.string.uint8array(e3).buffer;
          }, uint8array: function(e3) {
            return c(e3, new Uint8Array(e3.length));
          }, nodebuffer: function(e3) {
            return c(e3, i.allocBuffer(e3.length));
          } }, p.array = { string: l2, array: a, arraybuffer: function(e3) {
            return new Uint8Array(e3).buffer;
          }, uint8array: function(e3) {
            return new Uint8Array(e3);
          }, nodebuffer: function(e3) {
            return i.newBufferFrom(e3);
          } }, p.arraybuffer = { string: function(e3) {
            return l2(new Uint8Array(e3));
          }, array: function(e3) {
            return h(new Uint8Array(e3), new Array(e3.byteLength));
          }, arraybuffer: a, uint8array: function(e3) {
            return new Uint8Array(e3);
          }, nodebuffer: function(e3) {
            return i.newBufferFrom(new Uint8Array(e3));
          } }, p.uint8array = { string: l2, array: function(e3) {
            return h(e3, new Array(e3.length));
          }, arraybuffer: function(e3) {
            return e3.buffer;
          }, uint8array: a, nodebuffer: function(e3) {
            return i.newBufferFrom(e3);
          } }, p.nodebuffer = { string: l2, array: function(e3) {
            return h(e3, new Array(e3.length));
          }, arraybuffer: function(e3) {
            return p.nodebuffer.uint8array(e3).buffer;
          }, uint8array: function(e3) {
            return h(e3, new Uint8Array(e3.length));
          }, nodebuffer: a }, t2.transformTo = function(e3, r3) {
            if (r3 || (r3 = ""), !e3) return r3;
            t2.checkSupport(e3);
            var n3 = t2.getTypeOf(r3);
            return p[n3][e3](r3);
          }, t2.resolve = function(e3) {
            for (var t3 = e3.split("/"), r3 = [], n3 = 0; n3 < t3.length; n3++) {
              var s2 = t3[n3];
              "." === s2 || "" === s2 && 0 !== n3 && n3 !== t3.length - 1 || (".." === s2 ? r3.pop() : r3.push(s2));
            }
            return r3.join("/");
          }, t2.getTypeOf = function(e3) {
            return "string" == typeof e3 ? "string" : "[object Array]" === Object.prototype.toString.call(e3) ? "array" : n2.nodebuffer && i.isBuffer(e3) ? "nodebuffer" : n2.uint8array && e3 instanceof Uint8Array ? "uint8array" : n2.arraybuffer && e3 instanceof ArrayBuffer ? "arraybuffer" : void 0;
          }, t2.checkSupport = function(e3) {
            if (!n2[e3.toLowerCase()]) throw new Error(e3 + " is not supported by this platform");
          }, t2.MAX_VALUE_16BITS = 65535, t2.MAX_VALUE_32BITS = -1, t2.pretty = function(e3) {
            var t3, r3, n3 = "";
            for (r3 = 0; r3 < (e3 || "").length; r3++) n3 += "\\x" + ((t3 = e3.charCodeAt(r3)) < 16 ? "0" : "") + t3.toString(16).toUpperCase();
            return n3;
          }, t2.delay = function(e3, t3, r3) {
            setImmediate(function() {
              e3.apply(r3 || null, t3 || []);
            });
          }, t2.inherits = function(e3, t3) {
            var r3 = function() {
            };
            r3.prototype = t3.prototype, e3.prototype = new r3();
          }, t2.extend = function() {
            var e3, t3, r3 = {};
            for (e3 = 0; e3 < arguments.length; e3++) for (t3 in arguments[e3]) Object.prototype.hasOwnProperty.call(arguments[e3], t3) && void 0 === r3[t3] && (r3[t3] = arguments[e3][t3]);
            return r3;
          }, t2.prepareContent = function(e3, r3, i2, a2, u2) {
            return o.Promise.resolve(r3).then(function(e4) {
              return n2.blob && (e4 instanceof Blob || -1 !== ["[object File]", "[object Blob]"].indexOf(Object.prototype.toString.call(e4))) && "undefined" != typeof FileReader ? new o.Promise(function(t3, r4) {
                var n3 = new FileReader();
                n3.onload = function(e5) {
                  t3(e5.target.result);
                }, n3.onerror = function(e5) {
                  r4(e5.target.error);
                }, n3.readAsArrayBuffer(e4);
              }) : e4;
            }).then(function(r4) {
              var l3, h2 = t2.getTypeOf(r4);
              return h2 ? ("arraybuffer" === h2 ? r4 = t2.transformTo("uint8array", r4) : "string" === h2 && (u2 ? r4 = s.decode(r4) : i2 && true !== a2 && (r4 = c(l3 = r4, n2.uint8array ? new Uint8Array(l3.length) : new Array(l3.length)))), r4) : o.Promise.reject(new Error("Can't read the data of '" + e3 + "'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"));
            });
          };
        }, 6624: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(8435), s = r2(8910), i = r2(1141), o = r2(9392), a = r2(3790);
          function c(e3) {
            this.files = [], this.loadOptions = e3;
          }
          c.prototype = { checkSignature: function(e3) {
            if (!this.reader.readAndCheckSignature(e3)) {
              this.reader.index -= 4;
              var t3 = this.reader.readString(4);
              throw new Error("Corrupted zip or bug: unexpected signature (" + s.pretty(t3) + ", expected " + s.pretty(e3) + ")");
            }
          }, isSignature: function(e3, t3) {
            var r3 = this.reader.index;
            this.reader.setIndex(e3);
            var n3 = this.reader.readString(4) === t3;
            return this.reader.setIndex(r3), n3;
          }, readBlockEndOfCentral: function() {
            this.diskNumber = this.reader.readInt(2), this.diskWithCentralDirStart = this.reader.readInt(2), this.centralDirRecordsOnThisDisk = this.reader.readInt(2), this.centralDirRecords = this.reader.readInt(2), this.centralDirSize = this.reader.readInt(4), this.centralDirOffset = this.reader.readInt(4), this.zipCommentLength = this.reader.readInt(2);
            var e3 = this.reader.readData(this.zipCommentLength), t3 = a.uint8array ? "uint8array" : "array", r3 = s.transformTo(t3, e3);
            this.zipComment = this.loadOptions.decodeFileName(r3);
          }, readBlockZip64EndOfCentral: function() {
            this.zip64EndOfCentralSize = this.reader.readInt(8), this.reader.skip(4), this.diskNumber = this.reader.readInt(4), this.diskWithCentralDirStart = this.reader.readInt(4), this.centralDirRecordsOnThisDisk = this.reader.readInt(8), this.centralDirRecords = this.reader.readInt(8), this.centralDirSize = this.reader.readInt(8), this.centralDirOffset = this.reader.readInt(8), this.zip64ExtensibleData = {};
            for (var e3, t3, r3, n3 = this.zip64EndOfCentralSize - 44; 0 < n3; ) e3 = this.reader.readInt(2), t3 = this.reader.readInt(4), r3 = this.reader.readData(t3), this.zip64ExtensibleData[e3] = { id: e3, length: t3, value: r3 };
          }, readBlockZip64EndOfCentralLocator: function() {
            if (this.diskWithZip64CentralDirStart = this.reader.readInt(4), this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8), this.disksCount = this.reader.readInt(4), this.disksCount > 1) throw new Error("Multi-volumes zip are not supported");
          }, readLocalFiles: function() {
            var e3, t3;
            for (e3 = 0; e3 < this.files.length; e3++) t3 = this.files[e3], this.reader.setIndex(t3.localHeaderOffset), this.checkSignature(i.LOCAL_FILE_HEADER), t3.readLocalPart(this.reader), t3.handleUTF8(), t3.processAttributes();
          }, readCentralDir: function() {
            var e3;
            for (this.reader.setIndex(this.centralDirOffset); this.reader.readAndCheckSignature(i.CENTRAL_FILE_HEADER); ) (e3 = new o({ zip64: this.zip64 }, this.loadOptions)).readCentralPart(this.reader), this.files.push(e3);
            if (this.centralDirRecords !== this.files.length && 0 !== this.centralDirRecords && 0 === this.files.length) throw new Error("Corrupted zip or bug: expected " + this.centralDirRecords + " records in central dir, got " + this.files.length);
          }, readEndOfCentral: function() {
            var e3 = this.reader.lastIndexOfSignature(i.CENTRAL_DIRECTORY_END);
            if (e3 < 0) throw this.isSignature(0, i.LOCAL_FILE_HEADER) ? new Error("Corrupted zip: can't find end of central directory") : new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");
            this.reader.setIndex(e3);
            var t3 = e3;
            if (this.checkSignature(i.CENTRAL_DIRECTORY_END), this.readBlockEndOfCentral(), this.diskNumber === s.MAX_VALUE_16BITS || this.diskWithCentralDirStart === s.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === s.MAX_VALUE_16BITS || this.centralDirRecords === s.MAX_VALUE_16BITS || this.centralDirSize === s.MAX_VALUE_32BITS || this.centralDirOffset === s.MAX_VALUE_32BITS) {
              if (this.zip64 = true, (e3 = this.reader.lastIndexOfSignature(i.ZIP64_CENTRAL_DIRECTORY_LOCATOR)) < 0) throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");
              if (this.reader.setIndex(e3), this.checkSignature(i.ZIP64_CENTRAL_DIRECTORY_LOCATOR), this.readBlockZip64EndOfCentralLocator(), !this.isSignature(this.relativeOffsetEndOfZip64CentralDir, i.ZIP64_CENTRAL_DIRECTORY_END) && (this.relativeOffsetEndOfZip64CentralDir = this.reader.lastIndexOfSignature(i.ZIP64_CENTRAL_DIRECTORY_END), this.relativeOffsetEndOfZip64CentralDir < 0)) throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");
              this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir), this.checkSignature(i.ZIP64_CENTRAL_DIRECTORY_END), this.readBlockZip64EndOfCentral();
            }
            var r3 = this.centralDirOffset + this.centralDirSize;
            this.zip64 && (r3 += 20, r3 += 12 + this.zip64EndOfCentralSize);
            var n3 = t3 - r3;
            if (n3 > 0) this.isSignature(t3, i.CENTRAL_FILE_HEADER) || (this.reader.zero = n3);
            else if (n3 < 0) throw new Error("Corrupted zip: missing " + Math.abs(n3) + " bytes.");
          }, prepareReader: function(e3) {
            this.reader = n2(e3);
          }, load: function(e3) {
            this.prepareReader(e3), this.readEndOfCentral(), this.readCentralDir(), this.readLocalFiles();
          } }, e2.exports = c;
        }, 9392: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(8435), s = r2(8910), i = r2(7326), o = r2(6988), a = r2(3600), c = r2(1678), u = r2(3790);
          function l2(e3, t3) {
            this.options = e3, this.loadOptions = t3;
          }
          l2.prototype = { isEncrypted: function() {
            return 1 == (1 & this.bitFlag);
          }, useUTF8: function() {
            return 2048 == (2048 & this.bitFlag);
          }, readLocalPart: function(e3) {
            var t3, r3;
            if (e3.skip(22), this.fileNameLength = e3.readInt(2), r3 = e3.readInt(2), this.fileName = e3.readData(this.fileNameLength), e3.skip(r3), -1 === this.compressedSize || -1 === this.uncompressedSize) throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");
            if (null === (t3 = function(e4) {
              for (var t4 in c) if (Object.prototype.hasOwnProperty.call(c, t4) && c[t4].magic === e4) return c[t4];
              return null;
            }(this.compressionMethod))) throw new Error("Corrupted zip : compression " + s.pretty(this.compressionMethod) + " unknown (inner file : " + s.transformTo("string", this.fileName) + ")");
            this.decompressed = new i(this.compressedSize, this.uncompressedSize, this.crc32, t3, e3.readData(this.compressedSize));
          }, readCentralPart: function(e3) {
            this.versionMadeBy = e3.readInt(2), e3.skip(2), this.bitFlag = e3.readInt(2), this.compressionMethod = e3.readString(2), this.date = e3.readDate(), this.crc32 = e3.readInt(4), this.compressedSize = e3.readInt(4), this.uncompressedSize = e3.readInt(4);
            var t3 = e3.readInt(2);
            if (this.extraFieldsLength = e3.readInt(2), this.fileCommentLength = e3.readInt(2), this.diskNumberStart = e3.readInt(2), this.internalFileAttributes = e3.readInt(2), this.externalFileAttributes = e3.readInt(4), this.localHeaderOffset = e3.readInt(4), this.isEncrypted()) throw new Error("Encrypted zip are not supported");
            e3.skip(t3), this.readExtraFields(e3), this.parseZIP64ExtraField(e3), this.fileComment = e3.readData(this.fileCommentLength);
          }, processAttributes: function() {
            this.unixPermissions = null, this.dosPermissions = null;
            var e3 = this.versionMadeBy >> 8;
            this.dir = !!(16 & this.externalFileAttributes), 0 === e3 && (this.dosPermissions = 63 & this.externalFileAttributes), 3 === e3 && (this.unixPermissions = this.externalFileAttributes >> 16 & 65535), this.dir || "/" !== this.fileNameStr.slice(-1) || (this.dir = true);
          }, parseZIP64ExtraField: function() {
            if (this.extraFields[1]) {
              var e3 = n2(this.extraFields[1].value);
              this.uncompressedSize === s.MAX_VALUE_32BITS && (this.uncompressedSize = e3.readInt(8)), this.compressedSize === s.MAX_VALUE_32BITS && (this.compressedSize = e3.readInt(8)), this.localHeaderOffset === s.MAX_VALUE_32BITS && (this.localHeaderOffset = e3.readInt(8)), this.diskNumberStart === s.MAX_VALUE_32BITS && (this.diskNumberStart = e3.readInt(4));
            }
          }, readExtraFields: function(e3) {
            var t3, r3, n3, s2 = e3.index + this.extraFieldsLength;
            for (this.extraFields || (this.extraFields = {}); e3.index + 4 < s2; ) t3 = e3.readInt(2), r3 = e3.readInt(2), n3 = e3.readData(r3), this.extraFields[t3] = { id: t3, length: r3, value: n3 };
            e3.setIndex(s2);
          }, handleUTF8: function() {
            var e3 = u.uint8array ? "uint8array" : "array";
            if (this.useUTF8()) this.fileNameStr = a.utf8decode(this.fileName), this.fileCommentStr = a.utf8decode(this.fileComment);
            else {
              var t3 = this.findExtraFieldUnicodePath();
              if (null !== t3) this.fileNameStr = t3;
              else {
                var r3 = s.transformTo(e3, this.fileName);
                this.fileNameStr = this.loadOptions.decodeFileName(r3);
              }
              var n3 = this.findExtraFieldUnicodeComment();
              if (null !== n3) this.fileCommentStr = n3;
              else {
                var i2 = s.transformTo(e3, this.fileComment);
                this.fileCommentStr = this.loadOptions.decodeFileName(i2);
              }
            }
          }, findExtraFieldUnicodePath: function() {
            var e3 = this.extraFields[28789];
            if (e3) {
              var t3 = n2(e3.value);
              return 1 !== t3.readInt(1) || o(this.fileName) !== t3.readInt(4) ? null : a.utf8decode(t3.readData(e3.length - 5));
            }
            return null;
          }, findExtraFieldUnicodeComment: function() {
            var e3 = this.extraFields[25461];
            if (e3) {
              var t3 = n2(e3.value);
              return 1 !== t3.readInt(1) || o(this.fileComment) !== t3.readInt(4) ? null : a.utf8decode(t3.readData(e3.length - 5));
            }
            return null;
          } }, e2.exports = l2;
        }, 6859: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(1285), s = r2(5301), i = r2(3600), o = r2(7326), a = r2(3718), c = function(e3, t3, r3) {
            this.name = e3, this.dir = r3.dir, this.date = r3.date, this.comment = r3.comment, this.unixPermissions = r3.unixPermissions, this.dosPermissions = r3.dosPermissions, this._data = t3, this._dataBinary = r3.binary, this.options = { compression: r3.compression, compressionOptions: r3.compressionOptions };
          };
          c.prototype = { internalStream: function(e3) {
            var t3 = null, r3 = "string";
            try {
              if (!e3) throw new Error("No output type specified.");
              var s2 = "string" === (r3 = e3.toLowerCase()) || "text" === r3;
              "binarystring" !== r3 && "text" !== r3 || (r3 = "string"), t3 = this._decompressWorker();
              var o2 = !this._dataBinary;
              o2 && !s2 && (t3 = t3.pipe(new i.Utf8EncodeWorker())), !o2 && s2 && (t3 = t3.pipe(new i.Utf8DecodeWorker()));
            } catch (e4) {
              (t3 = new a("error")).error(e4);
            }
            return new n2(t3, r3, "");
          }, async: function(e3, t3) {
            return this.internalStream(e3).accumulate(t3);
          }, nodeStream: function(e3, t3) {
            return this.internalStream(e3 || "nodebuffer").toNodejsStream(t3);
          }, _compressWorker: function(e3, t3) {
            if (this._data instanceof o && this._data.compression.magic === e3.magic) return this._data.getCompressedWorker();
            var r3 = this._decompressWorker();
            return this._dataBinary || (r3 = r3.pipe(new i.Utf8EncodeWorker())), o.createWorkerFrom(r3, e3, t3);
          }, _decompressWorker: function() {
            return this._data instanceof o ? this._data.getContentWorker() : this._data instanceof a ? this._data : new s(this._data);
          } };
          for (var u = ["asText", "asBinary", "asNodeBuffer", "asUint8Array", "asArrayBuffer"], l2 = function() {
            throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
          }, h = 0; h < u.length; h++) c.prototype[u[h]] = l2;
          e2.exports = c;
        }, 3389: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(5705);
          function s() {
          }
          var i = {}, o = ["REJECTED"], a = ["FULFILLED"], c = ["PENDING"];
          function u(e3) {
            if ("function" != typeof e3) throw new TypeError("resolver must be a function");
            this.state = c, this.queue = [], this.outcome = void 0, e3 !== s && d(this, e3);
          }
          function l2(e3, t3, r3) {
            this.promise = e3, "function" == typeof t3 && (this.onFulfilled = t3, this.callFulfilled = this.otherCallFulfilled), "function" == typeof r3 && (this.onRejected = r3, this.callRejected = this.otherCallRejected);
          }
          function h(e3, t3, r3) {
            n2(function() {
              var n3;
              try {
                n3 = t3(r3);
              } catch (t4) {
                return i.reject(e3, t4);
              }
              n3 === e3 ? i.reject(e3, new TypeError("Cannot resolve promise with itself")) : i.resolve(e3, n3);
            });
          }
          function p(e3) {
            var t3 = e3 && e3.then;
            if (e3 && ("object" == typeof e3 || "function" == typeof e3) && "function" == typeof t3) return function() {
              t3.apply(e3, arguments);
            };
          }
          function d(e3, t3) {
            var r3 = false;
            function n3(t4) {
              r3 || (r3 = true, i.reject(e3, t4));
            }
            function s2(t4) {
              r3 || (r3 = true, i.resolve(e3, t4));
            }
            var o2 = f(function() {
              t3(s2, n3);
            });
            "error" === o2.status && n3(o2.value);
          }
          function f(e3, t3) {
            var r3 = {};
            try {
              r3.value = e3(t3), r3.status = "success";
            } catch (e4) {
              r3.status = "error", r3.value = e4;
            }
            return r3;
          }
          e2.exports = u, u.prototype.finally = function(e3) {
            if ("function" != typeof e3) return this;
            var t3 = this.constructor;
            return this.then(function(r3) {
              return t3.resolve(e3()).then(function() {
                return r3;
              });
            }, function(r3) {
              return t3.resolve(e3()).then(function() {
                throw r3;
              });
            });
          }, u.prototype.catch = function(e3) {
            return this.then(null, e3);
          }, u.prototype.then = function(e3, t3) {
            if ("function" != typeof e3 && this.state === a || "function" != typeof t3 && this.state === o) return this;
            var r3 = new this.constructor(s);
            return this.state !== c ? h(r3, this.state === a ? e3 : t3, this.outcome) : this.queue.push(new l2(r3, e3, t3)), r3;
          }, l2.prototype.callFulfilled = function(e3) {
            i.resolve(this.promise, e3);
          }, l2.prototype.otherCallFulfilled = function(e3) {
            h(this.promise, this.onFulfilled, e3);
          }, l2.prototype.callRejected = function(e3) {
            i.reject(this.promise, e3);
          }, l2.prototype.otherCallRejected = function(e3) {
            h(this.promise, this.onRejected, e3);
          }, i.resolve = function(e3, t3) {
            var r3 = f(p, t3);
            if ("error" === r3.status) return i.reject(e3, r3.value);
            var n3 = r3.value;
            if (n3) d(e3, n3);
            else {
              e3.state = a, e3.outcome = t3;
              for (var s2 = -1, o2 = e3.queue.length; ++s2 < o2; ) e3.queue[s2].callFulfilled(t3);
            }
            return e3;
          }, i.reject = function(e3, t3) {
            e3.state = o, e3.outcome = t3;
            for (var r3 = -1, n3 = e3.queue.length; ++r3 < n3; ) e3.queue[r3].callRejected(t3);
            return e3;
          }, u.resolve = function(e3) {
            return e3 instanceof this ? e3 : i.resolve(new this(s), e3);
          }, u.reject = function(e3) {
            var t3 = new this(s);
            return i.reject(t3, e3);
          }, u.all = function(e3) {
            var t3 = this;
            if ("[object Array]" !== Object.prototype.toString.call(e3)) return this.reject(new TypeError("must be an array"));
            var r3 = e3.length, n3 = false;
            if (!r3) return this.resolve([]);
            for (var o2 = new Array(r3), a2 = 0, c2 = -1, u2 = new this(s); ++c2 < r3; ) l3(e3[c2], c2);
            return u2;
            function l3(e4, s2) {
              t3.resolve(e4).then(function(e5) {
                o2[s2] = e5, ++a2 !== r3 || n3 || (n3 = true, i.resolve(u2, o2));
              }, function(e5) {
                n3 || (n3 = true, i.reject(u2, e5));
              });
            }
          }, u.race = function(e3) {
            if ("[object Array]" !== Object.prototype.toString.call(e3)) return this.reject(new TypeError("must be an array"));
            var t3 = e3.length, r3 = false;
            if (!t3) return this.resolve([]);
            for (var n3, o2 = -1, a2 = new this(s); ++o2 < t3; ) n3 = e3[o2], this.resolve(n3).then(function(e4) {
              r3 || (r3 = true, i.resolve(a2, e4));
            }, function(e4) {
              r3 || (r3 = true, i.reject(a2, e4));
            });
            return a2;
          };
        }, 9591: (e2, t2, r2) => {
          "use strict";
          var n2 = {};
          (0, r2(4236).assign)(n2, r2(4555), r2(8843), r2(1619)), e2.exports = n2;
        }, 4555: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(405), s = r2(4236), i = r2(9373), o = r2(8898), a = r2(2292), c = Object.prototype.toString;
          function u(e3) {
            if (!(this instanceof u)) return new u(e3);
            this.options = s.assign({ level: -1, method: 8, chunkSize: 16384, windowBits: 15, memLevel: 8, strategy: 0, to: "" }, e3 || {});
            var t3 = this.options;
            t3.raw && t3.windowBits > 0 ? t3.windowBits = -t3.windowBits : t3.gzip && t3.windowBits > 0 && t3.windowBits < 16 && (t3.windowBits += 16), this.err = 0, this.msg = "", this.ended = false, this.chunks = [], this.strm = new a(), this.strm.avail_out = 0;
            var r3 = n2.deflateInit2(this.strm, t3.level, t3.method, t3.windowBits, t3.memLevel, t3.strategy);
            if (0 !== r3) throw new Error(o[r3]);
            if (t3.header && n2.deflateSetHeader(this.strm, t3.header), t3.dictionary) {
              var l3;
              if (l3 = "string" == typeof t3.dictionary ? i.string2buf(t3.dictionary) : "[object ArrayBuffer]" === c.call(t3.dictionary) ? new Uint8Array(t3.dictionary) : t3.dictionary, 0 !== (r3 = n2.deflateSetDictionary(this.strm, l3))) throw new Error(o[r3]);
              this._dict_set = true;
            }
          }
          function l2(e3, t3) {
            var r3 = new u(t3);
            if (r3.push(e3, true), r3.err) throw r3.msg || o[r3.err];
            return r3.result;
          }
          u.prototype.push = function(e3, t3) {
            var r3, o2, a2 = this.strm, u2 = this.options.chunkSize;
            if (this.ended) return false;
            o2 = t3 === ~~t3 ? t3 : true === t3 ? 4 : 0, "string" == typeof e3 ? a2.input = i.string2buf(e3) : "[object ArrayBuffer]" === c.call(e3) ? a2.input = new Uint8Array(e3) : a2.input = e3, a2.next_in = 0, a2.avail_in = a2.input.length;
            do {
              if (0 === a2.avail_out && (a2.output = new s.Buf8(u2), a2.next_out = 0, a2.avail_out = u2), 1 !== (r3 = n2.deflate(a2, o2)) && 0 !== r3) return this.onEnd(r3), this.ended = true, false;
              0 !== a2.avail_out && (0 !== a2.avail_in || 4 !== o2 && 2 !== o2) || ("string" === this.options.to ? this.onData(i.buf2binstring(s.shrinkBuf(a2.output, a2.next_out))) : this.onData(s.shrinkBuf(a2.output, a2.next_out)));
            } while ((a2.avail_in > 0 || 0 === a2.avail_out) && 1 !== r3);
            return 4 === o2 ? (r3 = n2.deflateEnd(this.strm), this.onEnd(r3), this.ended = true, 0 === r3) : 2 !== o2 || (this.onEnd(0), a2.avail_out = 0, true);
          }, u.prototype.onData = function(e3) {
            this.chunks.push(e3);
          }, u.prototype.onEnd = function(e3) {
            0 === e3 && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = s.flattenChunks(this.chunks)), this.chunks = [], this.err = e3, this.msg = this.strm.msg;
          }, t2.Deflate = u, t2.deflate = l2, t2.deflateRaw = function(e3, t3) {
            return (t3 = t3 || {}).raw = true, l2(e3, t3);
          }, t2.gzip = function(e3, t3) {
            return (t3 = t3 || {}).gzip = true, l2(e3, t3);
          };
        }, 8843: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(7948), s = r2(4236), i = r2(9373), o = r2(1619), a = r2(8898), c = r2(2292), u = r2(2401), l2 = Object.prototype.toString;
          function h(e3) {
            if (!(this instanceof h)) return new h(e3);
            this.options = s.assign({ chunkSize: 16384, windowBits: 0, to: "" }, e3 || {});
            var t3 = this.options;
            t3.raw && t3.windowBits >= 0 && t3.windowBits < 16 && (t3.windowBits = -t3.windowBits, 0 === t3.windowBits && (t3.windowBits = -15)), !(t3.windowBits >= 0 && t3.windowBits < 16) || e3 && e3.windowBits || (t3.windowBits += 32), t3.windowBits > 15 && t3.windowBits < 48 && 0 == (15 & t3.windowBits) && (t3.windowBits |= 15), this.err = 0, this.msg = "", this.ended = false, this.chunks = [], this.strm = new c(), this.strm.avail_out = 0;
            var r3 = n2.inflateInit2(this.strm, t3.windowBits);
            if (r3 !== o.Z_OK) throw new Error(a[r3]);
            if (this.header = new u(), n2.inflateGetHeader(this.strm, this.header), t3.dictionary && ("string" == typeof t3.dictionary ? t3.dictionary = i.string2buf(t3.dictionary) : "[object ArrayBuffer]" === l2.call(t3.dictionary) && (t3.dictionary = new Uint8Array(t3.dictionary)), t3.raw && (r3 = n2.inflateSetDictionary(this.strm, t3.dictionary)) !== o.Z_OK)) throw new Error(a[r3]);
          }
          function p(e3, t3) {
            var r3 = new h(t3);
            if (r3.push(e3, true), r3.err) throw r3.msg || a[r3.err];
            return r3.result;
          }
          h.prototype.push = function(e3, t3) {
            var r3, a2, c2, u2, h2, p2 = this.strm, d = this.options.chunkSize, f = this.options.dictionary, m = false;
            if (this.ended) return false;
            a2 = t3 === ~~t3 ? t3 : true === t3 ? o.Z_FINISH : o.Z_NO_FLUSH, "string" == typeof e3 ? p2.input = i.binstring2buf(e3) : "[object ArrayBuffer]" === l2.call(e3) ? p2.input = new Uint8Array(e3) : p2.input = e3, p2.next_in = 0, p2.avail_in = p2.input.length;
            do {
              if (0 === p2.avail_out && (p2.output = new s.Buf8(d), p2.next_out = 0, p2.avail_out = d), (r3 = n2.inflate(p2, o.Z_NO_FLUSH)) === o.Z_NEED_DICT && f && (r3 = n2.inflateSetDictionary(this.strm, f)), r3 === o.Z_BUF_ERROR && true === m && (r3 = o.Z_OK, m = false), r3 !== o.Z_STREAM_END && r3 !== o.Z_OK) return this.onEnd(r3), this.ended = true, false;
              p2.next_out && (0 !== p2.avail_out && r3 !== o.Z_STREAM_END && (0 !== p2.avail_in || a2 !== o.Z_FINISH && a2 !== o.Z_SYNC_FLUSH) || ("string" === this.options.to ? (c2 = i.utf8border(p2.output, p2.next_out), u2 = p2.next_out - c2, h2 = i.buf2string(p2.output, c2), p2.next_out = u2, p2.avail_out = d - u2, u2 && s.arraySet(p2.output, p2.output, c2, u2, 0), this.onData(h2)) : this.onData(s.shrinkBuf(p2.output, p2.next_out)))), 0 === p2.avail_in && 0 === p2.avail_out && (m = true);
            } while ((p2.avail_in > 0 || 0 === p2.avail_out) && r3 !== o.Z_STREAM_END);
            return r3 === o.Z_STREAM_END && (a2 = o.Z_FINISH), a2 === o.Z_FINISH ? (r3 = n2.inflateEnd(this.strm), this.onEnd(r3), this.ended = true, r3 === o.Z_OK) : a2 !== o.Z_SYNC_FLUSH || (this.onEnd(o.Z_OK), p2.avail_out = 0, true);
          }, h.prototype.onData = function(e3) {
            this.chunks.push(e3);
          }, h.prototype.onEnd = function(e3) {
            e3 === o.Z_OK && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = s.flattenChunks(this.chunks)), this.chunks = [], this.err = e3, this.msg = this.strm.msg;
          }, t2.Inflate = h, t2.inflate = p, t2.inflateRaw = function(e3, t3) {
            return (t3 = t3 || {}).raw = true, p(e3, t3);
          }, t2.ungzip = p;
        }, 4236: (e2, t2) => {
          "use strict";
          var r2 = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Int32Array;
          function n2(e3, t3) {
            return Object.prototype.hasOwnProperty.call(e3, t3);
          }
          t2.assign = function(e3) {
            for (var t3 = Array.prototype.slice.call(arguments, 1); t3.length; ) {
              var r3 = t3.shift();
              if (r3) {
                if ("object" != typeof r3) throw new TypeError(r3 + "must be non-object");
                for (var s2 in r3) n2(r3, s2) && (e3[s2] = r3[s2]);
              }
            }
            return e3;
          }, t2.shrinkBuf = function(e3, t3) {
            return e3.length === t3 ? e3 : e3.subarray ? e3.subarray(0, t3) : (e3.length = t3, e3);
          };
          var s = { arraySet: function(e3, t3, r3, n3, s2) {
            if (t3.subarray && e3.subarray) e3.set(t3.subarray(r3, r3 + n3), s2);
            else for (var i2 = 0; i2 < n3; i2++) e3[s2 + i2] = t3[r3 + i2];
          }, flattenChunks: function(e3) {
            var t3, r3, n3, s2, i2, o;
            for (n3 = 0, t3 = 0, r3 = e3.length; t3 < r3; t3++) n3 += e3[t3].length;
            for (o = new Uint8Array(n3), s2 = 0, t3 = 0, r3 = e3.length; t3 < r3; t3++) i2 = e3[t3], o.set(i2, s2), s2 += i2.length;
            return o;
          } }, i = { arraySet: function(e3, t3, r3, n3, s2) {
            for (var i2 = 0; i2 < n3; i2++) e3[s2 + i2] = t3[r3 + i2];
          }, flattenChunks: function(e3) {
            return [].concat.apply([], e3);
          } };
          t2.setTyped = function(e3) {
            e3 ? (t2.Buf8 = Uint8Array, t2.Buf16 = Uint16Array, t2.Buf32 = Int32Array, t2.assign(t2, s)) : (t2.Buf8 = Array, t2.Buf16 = Array, t2.Buf32 = Array, t2.assign(t2, i));
          }, t2.setTyped(r2);
        }, 9373: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(4236), s = true, i = true;
          try {
            String.fromCharCode.apply(null, [0]);
          } catch (e3) {
            s = false;
          }
          try {
            String.fromCharCode.apply(null, new Uint8Array(1));
          } catch (e3) {
            i = false;
          }
          for (var o = new n2.Buf8(256), a = 0; a < 256; a++) o[a] = a >= 252 ? 6 : a >= 248 ? 5 : a >= 240 ? 4 : a >= 224 ? 3 : a >= 192 ? 2 : 1;
          function c(e3, t3) {
            if (t3 < 65534 && (e3.subarray && i || !e3.subarray && s)) return String.fromCharCode.apply(null, n2.shrinkBuf(e3, t3));
            for (var r3 = "", o2 = 0; o2 < t3; o2++) r3 += String.fromCharCode(e3[o2]);
            return r3;
          }
          o[254] = o[254] = 1, t2.string2buf = function(e3) {
            var t3, r3, s2, i2, o2, a2 = e3.length, c2 = 0;
            for (i2 = 0; i2 < a2; i2++) 55296 == (64512 & (r3 = e3.charCodeAt(i2))) && i2 + 1 < a2 && 56320 == (64512 & (s2 = e3.charCodeAt(i2 + 1))) && (r3 = 65536 + (r3 - 55296 << 10) + (s2 - 56320), i2++), c2 += r3 < 128 ? 1 : r3 < 2048 ? 2 : r3 < 65536 ? 3 : 4;
            for (t3 = new n2.Buf8(c2), o2 = 0, i2 = 0; o2 < c2; i2++) 55296 == (64512 & (r3 = e3.charCodeAt(i2))) && i2 + 1 < a2 && 56320 == (64512 & (s2 = e3.charCodeAt(i2 + 1))) && (r3 = 65536 + (r3 - 55296 << 10) + (s2 - 56320), i2++), r3 < 128 ? t3[o2++] = r3 : r3 < 2048 ? (t3[o2++] = 192 | r3 >>> 6, t3[o2++] = 128 | 63 & r3) : r3 < 65536 ? (t3[o2++] = 224 | r3 >>> 12, t3[o2++] = 128 | r3 >>> 6 & 63, t3[o2++] = 128 | 63 & r3) : (t3[o2++] = 240 | r3 >>> 18, t3[o2++] = 128 | r3 >>> 12 & 63, t3[o2++] = 128 | r3 >>> 6 & 63, t3[o2++] = 128 | 63 & r3);
            return t3;
          }, t2.buf2binstring = function(e3) {
            return c(e3, e3.length);
          }, t2.binstring2buf = function(e3) {
            for (var t3 = new n2.Buf8(e3.length), r3 = 0, s2 = t3.length; r3 < s2; r3++) t3[r3] = e3.charCodeAt(r3);
            return t3;
          }, t2.buf2string = function(e3, t3) {
            var r3, n3, s2, i2, a2 = t3 || e3.length, u = new Array(2 * a2);
            for (n3 = 0, r3 = 0; r3 < a2; ) if ((s2 = e3[r3++]) < 128) u[n3++] = s2;
            else if ((i2 = o[s2]) > 4) u[n3++] = 65533, r3 += i2 - 1;
            else {
              for (s2 &= 2 === i2 ? 31 : 3 === i2 ? 15 : 7; i2 > 1 && r3 < a2; ) s2 = s2 << 6 | 63 & e3[r3++], i2--;
              i2 > 1 ? u[n3++] = 65533 : s2 < 65536 ? u[n3++] = s2 : (s2 -= 65536, u[n3++] = 55296 | s2 >> 10 & 1023, u[n3++] = 56320 | 1023 & s2);
            }
            return c(u, n3);
          }, t2.utf8border = function(e3, t3) {
            var r3;
            for ((t3 = t3 || e3.length) > e3.length && (t3 = e3.length), r3 = t3 - 1; r3 >= 0 && 128 == (192 & e3[r3]); ) r3--;
            return r3 < 0 || 0 === r3 ? t3 : r3 + o[e3[r3]] > t3 ? r3 : t3;
          };
        }, 6069: (e2) => {
          "use strict";
          e2.exports = function(e3, t2, r2, n2) {
            for (var s = 65535 & e3 | 0, i = e3 >>> 16 & 65535 | 0, o = 0; 0 !== r2; ) {
              r2 -= o = r2 > 2e3 ? 2e3 : r2;
              do {
                i = i + (s = s + t2[n2++] | 0) | 0;
              } while (--o);
              s %= 65521, i %= 65521;
            }
            return s | i << 16 | 0;
          };
        }, 1619: (e2) => {
          "use strict";
          e2.exports = { Z_NO_FLUSH: 0, Z_PARTIAL_FLUSH: 1, Z_SYNC_FLUSH: 2, Z_FULL_FLUSH: 3, Z_FINISH: 4, Z_BLOCK: 5, Z_TREES: 6, Z_OK: 0, Z_STREAM_END: 1, Z_NEED_DICT: 2, Z_ERRNO: -1, Z_STREAM_ERROR: -2, Z_DATA_ERROR: -3, Z_BUF_ERROR: -5, Z_NO_COMPRESSION: 0, Z_BEST_SPEED: 1, Z_BEST_COMPRESSION: 9, Z_DEFAULT_COMPRESSION: -1, Z_FILTERED: 1, Z_HUFFMAN_ONLY: 2, Z_RLE: 3, Z_FIXED: 4, Z_DEFAULT_STRATEGY: 0, Z_BINARY: 0, Z_TEXT: 1, Z_UNKNOWN: 2, Z_DEFLATED: 8 };
        }, 2869: (e2) => {
          "use strict";
          var t2 = function() {
            for (var e3, t3 = [], r2 = 0; r2 < 256; r2++) {
              e3 = r2;
              for (var n2 = 0; n2 < 8; n2++) e3 = 1 & e3 ? 3988292384 ^ e3 >>> 1 : e3 >>> 1;
              t3[r2] = e3;
            }
            return t3;
          }();
          e2.exports = function(e3, r2, n2, s) {
            var i = t2, o = s + n2;
            e3 ^= -1;
            for (var a = s; a < o; a++) e3 = e3 >>> 8 ^ i[255 & (e3 ^ r2[a])];
            return -1 ^ e3;
          };
        }, 405: (e2, t2, r2) => {
          "use strict";
          var n2, s = r2(4236), i = r2(342), o = r2(6069), a = r2(2869), c = r2(8898), u = -2, l2 = 258, h = 262, p = 103, d = 113, f = 666;
          function m(e3, t3) {
            return e3.msg = c[t3], t3;
          }
          function w(e3) {
            return (e3 << 1) - (e3 > 4 ? 9 : 0);
          }
          function g(e3) {
            for (var t3 = e3.length; --t3 >= 0; ) e3[t3] = 0;
          }
          function y(e3) {
            var t3 = e3.state, r3 = t3.pending;
            r3 > e3.avail_out && (r3 = e3.avail_out), 0 !== r3 && (s.arraySet(e3.output, t3.pending_buf, t3.pending_out, r3, e3.next_out), e3.next_out += r3, t3.pending_out += r3, e3.total_out += r3, e3.avail_out -= r3, t3.pending -= r3, 0 === t3.pending && (t3.pending_out = 0));
          }
          function b(e3, t3) {
            i._tr_flush_block(e3, e3.block_start >= 0 ? e3.block_start : -1, e3.strstart - e3.block_start, t3), e3.block_start = e3.strstart, y(e3.strm);
          }
          function x(e3, t3) {
            e3.pending_buf[e3.pending++] = t3;
          }
          function v(e3, t3) {
            e3.pending_buf[e3.pending++] = t3 >>> 8 & 255, e3.pending_buf[e3.pending++] = 255 & t3;
          }
          function _(e3, t3) {
            var r3, n3, s2 = e3.max_chain_length, i2 = e3.strstart, o2 = e3.prev_length, a2 = e3.nice_match, c2 = e3.strstart > e3.w_size - h ? e3.strstart - (e3.w_size - h) : 0, u2 = e3.window, p2 = e3.w_mask, d2 = e3.prev, f2 = e3.strstart + l2, m2 = u2[i2 + o2 - 1], w2 = u2[i2 + o2];
            e3.prev_length >= e3.good_match && (s2 >>= 2), a2 > e3.lookahead && (a2 = e3.lookahead);
            do {
              if (u2[(r3 = t3) + o2] === w2 && u2[r3 + o2 - 1] === m2 && u2[r3] === u2[i2] && u2[++r3] === u2[i2 + 1]) {
                i2 += 2, r3++;
                do {
                } while (u2[++i2] === u2[++r3] && u2[++i2] === u2[++r3] && u2[++i2] === u2[++r3] && u2[++i2] === u2[++r3] && u2[++i2] === u2[++r3] && u2[++i2] === u2[++r3] && u2[++i2] === u2[++r3] && u2[++i2] === u2[++r3] && i2 < f2);
                if (n3 = l2 - (f2 - i2), i2 = f2 - l2, n3 > o2) {
                  if (e3.match_start = t3, o2 = n3, n3 >= a2) break;
                  m2 = u2[i2 + o2 - 1], w2 = u2[i2 + o2];
                }
              }
            } while ((t3 = d2[t3 & p2]) > c2 && 0 != --s2);
            return o2 <= e3.lookahead ? o2 : e3.lookahead;
          }
          function E(e3) {
            var t3, r3, n3, i2, c2, u2, l3, p2, d2, f2, m2 = e3.w_size;
            do {
              if (i2 = e3.window_size - e3.lookahead - e3.strstart, e3.strstart >= m2 + (m2 - h)) {
                s.arraySet(e3.window, e3.window, m2, m2, 0), e3.match_start -= m2, e3.strstart -= m2, e3.block_start -= m2, t3 = r3 = e3.hash_size;
                do {
                  n3 = e3.head[--t3], e3.head[t3] = n3 >= m2 ? n3 - m2 : 0;
                } while (--r3);
                t3 = r3 = m2;
                do {
                  n3 = e3.prev[--t3], e3.prev[t3] = n3 >= m2 ? n3 - m2 : 0;
                } while (--r3);
                i2 += m2;
              }
              if (0 === e3.strm.avail_in) break;
              if (u2 = e3.strm, l3 = e3.window, p2 = e3.strstart + e3.lookahead, d2 = i2, f2 = void 0, (f2 = u2.avail_in) > d2 && (f2 = d2), r3 = 0 === f2 ? 0 : (u2.avail_in -= f2, s.arraySet(l3, u2.input, u2.next_in, f2, p2), 1 === u2.state.wrap ? u2.adler = o(u2.adler, l3, f2, p2) : 2 === u2.state.wrap && (u2.adler = a(u2.adler, l3, f2, p2)), u2.next_in += f2, u2.total_in += f2, f2), e3.lookahead += r3, e3.lookahead + e3.insert >= 3) for (c2 = e3.strstart - e3.insert, e3.ins_h = e3.window[c2], e3.ins_h = (e3.ins_h << e3.hash_shift ^ e3.window[c2 + 1]) & e3.hash_mask; e3.insert && (e3.ins_h = (e3.ins_h << e3.hash_shift ^ e3.window[c2 + 3 - 1]) & e3.hash_mask, e3.prev[c2 & e3.w_mask] = e3.head[e3.ins_h], e3.head[e3.ins_h] = c2, c2++, e3.insert--, !(e3.lookahead + e3.insert < 3)); ) ;
            } while (e3.lookahead < h && 0 !== e3.strm.avail_in);
          }
          function T(e3, t3) {
            for (var r3, n3; ; ) {
              if (e3.lookahead < h) {
                if (E(e3), e3.lookahead < h && 0 === t3) return 1;
                if (0 === e3.lookahead) break;
              }
              if (r3 = 0, e3.lookahead >= 3 && (e3.ins_h = (e3.ins_h << e3.hash_shift ^ e3.window[e3.strstart + 3 - 1]) & e3.hash_mask, r3 = e3.prev[e3.strstart & e3.w_mask] = e3.head[e3.ins_h], e3.head[e3.ins_h] = e3.strstart), 0 !== r3 && e3.strstart - r3 <= e3.w_size - h && (e3.match_length = _(e3, r3)), e3.match_length >= 3) if (n3 = i._tr_tally(e3, e3.strstart - e3.match_start, e3.match_length - 3), e3.lookahead -= e3.match_length, e3.match_length <= e3.max_lazy_match && e3.lookahead >= 3) {
                e3.match_length--;
                do {
                  e3.strstart++, e3.ins_h = (e3.ins_h << e3.hash_shift ^ e3.window[e3.strstart + 3 - 1]) & e3.hash_mask, r3 = e3.prev[e3.strstart & e3.w_mask] = e3.head[e3.ins_h], e3.head[e3.ins_h] = e3.strstart;
                } while (0 != --e3.match_length);
                e3.strstart++;
              } else e3.strstart += e3.match_length, e3.match_length = 0, e3.ins_h = e3.window[e3.strstart], e3.ins_h = (e3.ins_h << e3.hash_shift ^ e3.window[e3.strstart + 1]) & e3.hash_mask;
              else n3 = i._tr_tally(e3, 0, e3.window[e3.strstart]), e3.lookahead--, e3.strstart++;
              if (n3 && (b(e3, false), 0 === e3.strm.avail_out)) return 1;
            }
            return e3.insert = e3.strstart < 2 ? e3.strstart : 2, 4 === t3 ? (b(e3, true), 0 === e3.strm.avail_out ? 3 : 4) : e3.last_lit && (b(e3, false), 0 === e3.strm.avail_out) ? 1 : 2;
          }
          function A(e3, t3) {
            for (var r3, n3, s2; ; ) {
              if (e3.lookahead < h) {
                if (E(e3), e3.lookahead < h && 0 === t3) return 1;
                if (0 === e3.lookahead) break;
              }
              if (r3 = 0, e3.lookahead >= 3 && (e3.ins_h = (e3.ins_h << e3.hash_shift ^ e3.window[e3.strstart + 3 - 1]) & e3.hash_mask, r3 = e3.prev[e3.strstart & e3.w_mask] = e3.head[e3.ins_h], e3.head[e3.ins_h] = e3.strstart), e3.prev_length = e3.match_length, e3.prev_match = e3.match_start, e3.match_length = 2, 0 !== r3 && e3.prev_length < e3.max_lazy_match && e3.strstart - r3 <= e3.w_size - h && (e3.match_length = _(e3, r3), e3.match_length <= 5 && (1 === e3.strategy || 3 === e3.match_length && e3.strstart - e3.match_start > 4096) && (e3.match_length = 2)), e3.prev_length >= 3 && e3.match_length <= e3.prev_length) {
                s2 = e3.strstart + e3.lookahead - 3, n3 = i._tr_tally(e3, e3.strstart - 1 - e3.prev_match, e3.prev_length - 3), e3.lookahead -= e3.prev_length - 1, e3.prev_length -= 2;
                do {
                  ++e3.strstart <= s2 && (e3.ins_h = (e3.ins_h << e3.hash_shift ^ e3.window[e3.strstart + 3 - 1]) & e3.hash_mask, r3 = e3.prev[e3.strstart & e3.w_mask] = e3.head[e3.ins_h], e3.head[e3.ins_h] = e3.strstart);
                } while (0 != --e3.prev_length);
                if (e3.match_available = 0, e3.match_length = 2, e3.strstart++, n3 && (b(e3, false), 0 === e3.strm.avail_out)) return 1;
              } else if (e3.match_available) {
                if ((n3 = i._tr_tally(e3, 0, e3.window[e3.strstart - 1])) && b(e3, false), e3.strstart++, e3.lookahead--, 0 === e3.strm.avail_out) return 1;
              } else e3.match_available = 1, e3.strstart++, e3.lookahead--;
            }
            return e3.match_available && (n3 = i._tr_tally(e3, 0, e3.window[e3.strstart - 1]), e3.match_available = 0), e3.insert = e3.strstart < 2 ? e3.strstart : 2, 4 === t3 ? (b(e3, true), 0 === e3.strm.avail_out ? 3 : 4) : e3.last_lit && (b(e3, false), 0 === e3.strm.avail_out) ? 1 : 2;
          }
          function S(e3, t3, r3, n3, s2) {
            this.good_length = e3, this.max_lazy = t3, this.nice_length = r3, this.max_chain = n3, this.func = s2;
          }
          function I() {
            this.strm = null, this.status = 0, this.pending_buf = null, this.pending_buf_size = 0, this.pending_out = 0, this.pending = 0, this.wrap = 0, this.gzhead = null, this.gzindex = 0, this.method = 8, this.last_flush = -1, this.w_size = 0, this.w_bits = 0, this.w_mask = 0, this.window = null, this.window_size = 0, this.prev = null, this.head = null, this.ins_h = 0, this.hash_size = 0, this.hash_bits = 0, this.hash_mask = 0, this.hash_shift = 0, this.block_start = 0, this.match_length = 0, this.prev_match = 0, this.match_available = 0, this.strstart = 0, this.match_start = 0, this.lookahead = 0, this.prev_length = 0, this.max_chain_length = 0, this.max_lazy_match = 0, this.level = 0, this.strategy = 0, this.good_match = 0, this.nice_match = 0, this.dyn_ltree = new s.Buf16(1146), this.dyn_dtree = new s.Buf16(122), this.bl_tree = new s.Buf16(78), g(this.dyn_ltree), g(this.dyn_dtree), g(this.bl_tree), this.l_desc = null, this.d_desc = null, this.bl_desc = null, this.bl_count = new s.Buf16(16), this.heap = new s.Buf16(573), g(this.heap), this.heap_len = 0, this.heap_max = 0, this.depth = new s.Buf16(573), g(this.depth), this.l_buf = 0, this.lit_bufsize = 0, this.last_lit = 0, this.d_buf = 0, this.opt_len = 0, this.static_len = 0, this.matches = 0, this.insert = 0, this.bi_buf = 0, this.bi_valid = 0;
          }
          function R(e3) {
            var t3;
            return e3 && e3.state ? (e3.total_in = e3.total_out = 0, e3.data_type = 2, (t3 = e3.state).pending = 0, t3.pending_out = 0, t3.wrap < 0 && (t3.wrap = -t3.wrap), t3.status = t3.wrap ? 42 : d, e3.adler = 2 === t3.wrap ? 0 : 1, t3.last_flush = 0, i._tr_init(t3), 0) : m(e3, u);
          }
          function N(e3) {
            var t3, r3 = R(e3);
            return 0 === r3 && ((t3 = e3.state).window_size = 2 * t3.w_size, g(t3.head), t3.max_lazy_match = n2[t3.level].max_lazy, t3.good_match = n2[t3.level].good_length, t3.nice_match = n2[t3.level].nice_length, t3.max_chain_length = n2[t3.level].max_chain, t3.strstart = 0, t3.block_start = 0, t3.lookahead = 0, t3.insert = 0, t3.match_length = t3.prev_length = 2, t3.match_available = 0, t3.ins_h = 0), r3;
          }
          function C(e3, t3, r3, n3, i2, o2) {
            if (!e3) return u;
            var a2 = 1;
            if (-1 === t3 && (t3 = 6), n3 < 0 ? (a2 = 0, n3 = -n3) : n3 > 15 && (a2 = 2, n3 -= 16), i2 < 1 || i2 > 9 || 8 !== r3 || n3 < 8 || n3 > 15 || t3 < 0 || t3 > 9 || o2 < 0 || o2 > 4) return m(e3, u);
            8 === n3 && (n3 = 9);
            var c2 = new I();
            return e3.state = c2, c2.strm = e3, c2.wrap = a2, c2.gzhead = null, c2.w_bits = n3, c2.w_size = 1 << c2.w_bits, c2.w_mask = c2.w_size - 1, c2.hash_bits = i2 + 7, c2.hash_size = 1 << c2.hash_bits, c2.hash_mask = c2.hash_size - 1, c2.hash_shift = ~~((c2.hash_bits + 3 - 1) / 3), c2.window = new s.Buf8(2 * c2.w_size), c2.head = new s.Buf16(c2.hash_size), c2.prev = new s.Buf16(c2.w_size), c2.lit_bufsize = 1 << i2 + 6, c2.pending_buf_size = 4 * c2.lit_bufsize, c2.pending_buf = new s.Buf8(c2.pending_buf_size), c2.d_buf = 1 * c2.lit_bufsize, c2.l_buf = 3 * c2.lit_bufsize, c2.level = t3, c2.strategy = o2, c2.method = r3, N(e3);
          }
          n2 = [new S(0, 0, 0, 0, function(e3, t3) {
            var r3 = 65535;
            for (r3 > e3.pending_buf_size - 5 && (r3 = e3.pending_buf_size - 5); ; ) {
              if (e3.lookahead <= 1) {
                if (E(e3), 0 === e3.lookahead && 0 === t3) return 1;
                if (0 === e3.lookahead) break;
              }
              e3.strstart += e3.lookahead, e3.lookahead = 0;
              var n3 = e3.block_start + r3;
              if ((0 === e3.strstart || e3.strstart >= n3) && (e3.lookahead = e3.strstart - n3, e3.strstart = n3, b(e3, false), 0 === e3.strm.avail_out)) return 1;
              if (e3.strstart - e3.block_start >= e3.w_size - h && (b(e3, false), 0 === e3.strm.avail_out)) return 1;
            }
            return e3.insert = 0, 4 === t3 ? (b(e3, true), 0 === e3.strm.avail_out ? 3 : 4) : (e3.strstart > e3.block_start && (b(e3, false), e3.strm.avail_out), 1);
          }), new S(4, 4, 8, 4, T), new S(4, 5, 16, 8, T), new S(4, 6, 32, 32, T), new S(4, 4, 16, 16, A), new S(8, 16, 32, 32, A), new S(8, 16, 128, 128, A), new S(8, 32, 128, 256, A), new S(32, 128, 258, 1024, A), new S(32, 258, 258, 4096, A)], t2.deflateInit = function(e3, t3) {
            return C(e3, t3, 8, 15, 8, 0);
          }, t2.deflateInit2 = C, t2.deflateReset = N, t2.deflateResetKeep = R, t2.deflateSetHeader = function(e3, t3) {
            return e3 && e3.state ? 2 !== e3.state.wrap ? u : (e3.state.gzhead = t3, 0) : u;
          }, t2.deflate = function(e3, t3) {
            var r3, s2, o2, c2;
            if (!e3 || !e3.state || t3 > 5 || t3 < 0) return e3 ? m(e3, u) : u;
            if (s2 = e3.state, !e3.output || !e3.input && 0 !== e3.avail_in || s2.status === f && 4 !== t3) return m(e3, 0 === e3.avail_out ? -5 : u);
            if (s2.strm = e3, r3 = s2.last_flush, s2.last_flush = t3, 42 === s2.status) if (2 === s2.wrap) e3.adler = 0, x(s2, 31), x(s2, 139), x(s2, 8), s2.gzhead ? (x(s2, (s2.gzhead.text ? 1 : 0) + (s2.gzhead.hcrc ? 2 : 0) + (s2.gzhead.extra ? 4 : 0) + (s2.gzhead.name ? 8 : 0) + (s2.gzhead.comment ? 16 : 0)), x(s2, 255 & s2.gzhead.time), x(s2, s2.gzhead.time >> 8 & 255), x(s2, s2.gzhead.time >> 16 & 255), x(s2, s2.gzhead.time >> 24 & 255), x(s2, 9 === s2.level ? 2 : s2.strategy >= 2 || s2.level < 2 ? 4 : 0), x(s2, 255 & s2.gzhead.os), s2.gzhead.extra && s2.gzhead.extra.length && (x(s2, 255 & s2.gzhead.extra.length), x(s2, s2.gzhead.extra.length >> 8 & 255)), s2.gzhead.hcrc && (e3.adler = a(e3.adler, s2.pending_buf, s2.pending, 0)), s2.gzindex = 0, s2.status = 69) : (x(s2, 0), x(s2, 0), x(s2, 0), x(s2, 0), x(s2, 0), x(s2, 9 === s2.level ? 2 : s2.strategy >= 2 || s2.level < 2 ? 4 : 0), x(s2, 3), s2.status = d);
            else {
              var h2 = 8 + (s2.w_bits - 8 << 4) << 8;
              h2 |= (s2.strategy >= 2 || s2.level < 2 ? 0 : s2.level < 6 ? 1 : 6 === s2.level ? 2 : 3) << 6, 0 !== s2.strstart && (h2 |= 32), h2 += 31 - h2 % 31, s2.status = d, v(s2, h2), 0 !== s2.strstart && (v(s2, e3.adler >>> 16), v(s2, 65535 & e3.adler)), e3.adler = 1;
            }
            if (69 === s2.status) if (s2.gzhead.extra) {
              for (o2 = s2.pending; s2.gzindex < (65535 & s2.gzhead.extra.length) && (s2.pending !== s2.pending_buf_size || (s2.gzhead.hcrc && s2.pending > o2 && (e3.adler = a(e3.adler, s2.pending_buf, s2.pending - o2, o2)), y(e3), o2 = s2.pending, s2.pending !== s2.pending_buf_size)); ) x(s2, 255 & s2.gzhead.extra[s2.gzindex]), s2.gzindex++;
              s2.gzhead.hcrc && s2.pending > o2 && (e3.adler = a(e3.adler, s2.pending_buf, s2.pending - o2, o2)), s2.gzindex === s2.gzhead.extra.length && (s2.gzindex = 0, s2.status = 73);
            } else s2.status = 73;
            if (73 === s2.status) if (s2.gzhead.name) {
              o2 = s2.pending;
              do {
                if (s2.pending === s2.pending_buf_size && (s2.gzhead.hcrc && s2.pending > o2 && (e3.adler = a(e3.adler, s2.pending_buf, s2.pending - o2, o2)), y(e3), o2 = s2.pending, s2.pending === s2.pending_buf_size)) {
                  c2 = 1;
                  break;
                }
                c2 = s2.gzindex < s2.gzhead.name.length ? 255 & s2.gzhead.name.charCodeAt(s2.gzindex++) : 0, x(s2, c2);
              } while (0 !== c2);
              s2.gzhead.hcrc && s2.pending > o2 && (e3.adler = a(e3.adler, s2.pending_buf, s2.pending - o2, o2)), 0 === c2 && (s2.gzindex = 0, s2.status = 91);
            } else s2.status = 91;
            if (91 === s2.status) if (s2.gzhead.comment) {
              o2 = s2.pending;
              do {
                if (s2.pending === s2.pending_buf_size && (s2.gzhead.hcrc && s2.pending > o2 && (e3.adler = a(e3.adler, s2.pending_buf, s2.pending - o2, o2)), y(e3), o2 = s2.pending, s2.pending === s2.pending_buf_size)) {
                  c2 = 1;
                  break;
                }
                c2 = s2.gzindex < s2.gzhead.comment.length ? 255 & s2.gzhead.comment.charCodeAt(s2.gzindex++) : 0, x(s2, c2);
              } while (0 !== c2);
              s2.gzhead.hcrc && s2.pending > o2 && (e3.adler = a(e3.adler, s2.pending_buf, s2.pending - o2, o2)), 0 === c2 && (s2.status = p);
            } else s2.status = p;
            if (s2.status === p && (s2.gzhead.hcrc ? (s2.pending + 2 > s2.pending_buf_size && y(e3), s2.pending + 2 <= s2.pending_buf_size && (x(s2, 255 & e3.adler), x(s2, e3.adler >> 8 & 255), e3.adler = 0, s2.status = d)) : s2.status = d), 0 !== s2.pending) {
              if (y(e3), 0 === e3.avail_out) return s2.last_flush = -1, 0;
            } else if (0 === e3.avail_in && w(t3) <= w(r3) && 4 !== t3) return m(e3, -5);
            if (s2.status === f && 0 !== e3.avail_in) return m(e3, -5);
            if (0 !== e3.avail_in || 0 !== s2.lookahead || 0 !== t3 && s2.status !== f) {
              var _2 = 2 === s2.strategy ? function(e4, t4) {
                for (var r4; ; ) {
                  if (0 === e4.lookahead && (E(e4), 0 === e4.lookahead)) {
                    if (0 === t4) return 1;
                    break;
                  }
                  if (e4.match_length = 0, r4 = i._tr_tally(e4, 0, e4.window[e4.strstart]), e4.lookahead--, e4.strstart++, r4 && (b(e4, false), 0 === e4.strm.avail_out)) return 1;
                }
                return e4.insert = 0, 4 === t4 ? (b(e4, true), 0 === e4.strm.avail_out ? 3 : 4) : e4.last_lit && (b(e4, false), 0 === e4.strm.avail_out) ? 1 : 2;
              }(s2, t3) : 3 === s2.strategy ? function(e4, t4) {
                for (var r4, n3, s3, o3, a2 = e4.window; ; ) {
                  if (e4.lookahead <= l2) {
                    if (E(e4), e4.lookahead <= l2 && 0 === t4) return 1;
                    if (0 === e4.lookahead) break;
                  }
                  if (e4.match_length = 0, e4.lookahead >= 3 && e4.strstart > 0 && (n3 = a2[s3 = e4.strstart - 1]) === a2[++s3] && n3 === a2[++s3] && n3 === a2[++s3]) {
                    o3 = e4.strstart + l2;
                    do {
                    } while (n3 === a2[++s3] && n3 === a2[++s3] && n3 === a2[++s3] && n3 === a2[++s3] && n3 === a2[++s3] && n3 === a2[++s3] && n3 === a2[++s3] && n3 === a2[++s3] && s3 < o3);
                    e4.match_length = l2 - (o3 - s3), e4.match_length > e4.lookahead && (e4.match_length = e4.lookahead);
                  }
                  if (e4.match_length >= 3 ? (r4 = i._tr_tally(e4, 1, e4.match_length - 3), e4.lookahead -= e4.match_length, e4.strstart += e4.match_length, e4.match_length = 0) : (r4 = i._tr_tally(e4, 0, e4.window[e4.strstart]), e4.lookahead--, e4.strstart++), r4 && (b(e4, false), 0 === e4.strm.avail_out)) return 1;
                }
                return e4.insert = 0, 4 === t4 ? (b(e4, true), 0 === e4.strm.avail_out ? 3 : 4) : e4.last_lit && (b(e4, false), 0 === e4.strm.avail_out) ? 1 : 2;
              }(s2, t3) : n2[s2.level].func(s2, t3);
              if (3 !== _2 && 4 !== _2 || (s2.status = f), 1 === _2 || 3 === _2) return 0 === e3.avail_out && (s2.last_flush = -1), 0;
              if (2 === _2 && (1 === t3 ? i._tr_align(s2) : 5 !== t3 && (i._tr_stored_block(s2, 0, 0, false), 3 === t3 && (g(s2.head), 0 === s2.lookahead && (s2.strstart = 0, s2.block_start = 0, s2.insert = 0))), y(e3), 0 === e3.avail_out)) return s2.last_flush = -1, 0;
            }
            return 4 !== t3 ? 0 : s2.wrap <= 0 ? 1 : (2 === s2.wrap ? (x(s2, 255 & e3.adler), x(s2, e3.adler >> 8 & 255), x(s2, e3.adler >> 16 & 255), x(s2, e3.adler >> 24 & 255), x(s2, 255 & e3.total_in), x(s2, e3.total_in >> 8 & 255), x(s2, e3.total_in >> 16 & 255), x(s2, e3.total_in >> 24 & 255)) : (v(s2, e3.adler >>> 16), v(s2, 65535 & e3.adler)), y(e3), s2.wrap > 0 && (s2.wrap = -s2.wrap), 0 !== s2.pending ? 0 : 1);
          }, t2.deflateEnd = function(e3) {
            var t3;
            return e3 && e3.state ? 42 !== (t3 = e3.state.status) && 69 !== t3 && 73 !== t3 && 91 !== t3 && t3 !== p && t3 !== d && t3 !== f ? m(e3, u) : (e3.state = null, t3 === d ? m(e3, -3) : 0) : u;
          }, t2.deflateSetDictionary = function(e3, t3) {
            var r3, n3, i2, a2, c2, l3, h2, p2, d2 = t3.length;
            if (!e3 || !e3.state) return u;
            if (2 === (a2 = (r3 = e3.state).wrap) || 1 === a2 && 42 !== r3.status || r3.lookahead) return u;
            for (1 === a2 && (e3.adler = o(e3.adler, t3, d2, 0)), r3.wrap = 0, d2 >= r3.w_size && (0 === a2 && (g(r3.head), r3.strstart = 0, r3.block_start = 0, r3.insert = 0), p2 = new s.Buf8(r3.w_size), s.arraySet(p2, t3, d2 - r3.w_size, r3.w_size, 0), t3 = p2, d2 = r3.w_size), c2 = e3.avail_in, l3 = e3.next_in, h2 = e3.input, e3.avail_in = d2, e3.next_in = 0, e3.input = t3, E(r3); r3.lookahead >= 3; ) {
              n3 = r3.strstart, i2 = r3.lookahead - 2;
              do {
                r3.ins_h = (r3.ins_h << r3.hash_shift ^ r3.window[n3 + 3 - 1]) & r3.hash_mask, r3.prev[n3 & r3.w_mask] = r3.head[r3.ins_h], r3.head[r3.ins_h] = n3, n3++;
              } while (--i2);
              r3.strstart = n3, r3.lookahead = 2, E(r3);
            }
            return r3.strstart += r3.lookahead, r3.block_start = r3.strstart, r3.insert = r3.lookahead, r3.lookahead = 0, r3.match_length = r3.prev_length = 2, r3.match_available = 0, e3.next_in = l3, e3.input = h2, e3.avail_in = c2, r3.wrap = a2, 0;
          }, t2.deflateInfo = "pako deflate (from Nodeca project)";
        }, 2401: (e2) => {
          "use strict";
          e2.exports = function() {
            this.text = 0, this.time = 0, this.xflags = 0, this.os = 0, this.extra = null, this.extra_len = 0, this.name = "", this.comment = "", this.hcrc = 0, this.done = false;
          };
        }, 4264: (e2) => {
          "use strict";
          e2.exports = function(e3, t2) {
            var r2, n2, s, i, o, a, c, u, l2, h, p, d, f, m, w, g, y, b, x, v, _, E, T, A, S;
            r2 = e3.state, n2 = e3.next_in, A = e3.input, s = n2 + (e3.avail_in - 5), i = e3.next_out, S = e3.output, o = i - (t2 - e3.avail_out), a = i + (e3.avail_out - 257), c = r2.dmax, u = r2.wsize, l2 = r2.whave, h = r2.wnext, p = r2.window, d = r2.hold, f = r2.bits, m = r2.lencode, w = r2.distcode, g = (1 << r2.lenbits) - 1, y = (1 << r2.distbits) - 1;
            e: do {
              f < 15 && (d += A[n2++] << f, f += 8, d += A[n2++] << f, f += 8), b = m[d & g];
              t: for (; ; ) {
                if (d >>>= x = b >>> 24, f -= x, 0 == (x = b >>> 16 & 255)) S[i++] = 65535 & b;
                else {
                  if (!(16 & x)) {
                    if (0 == (64 & x)) {
                      b = m[(65535 & b) + (d & (1 << x) - 1)];
                      continue t;
                    }
                    if (32 & x) {
                      r2.mode = 12;
                      break e;
                    }
                    e3.msg = "invalid literal/length code", r2.mode = 30;
                    break e;
                  }
                  v = 65535 & b, (x &= 15) && (f < x && (d += A[n2++] << f, f += 8), v += d & (1 << x) - 1, d >>>= x, f -= x), f < 15 && (d += A[n2++] << f, f += 8, d += A[n2++] << f, f += 8), b = w[d & y];
                  r: for (; ; ) {
                    if (d >>>= x = b >>> 24, f -= x, !(16 & (x = b >>> 16 & 255))) {
                      if (0 == (64 & x)) {
                        b = w[(65535 & b) + (d & (1 << x) - 1)];
                        continue r;
                      }
                      e3.msg = "invalid distance code", r2.mode = 30;
                      break e;
                    }
                    if (_ = 65535 & b, f < (x &= 15) && (d += A[n2++] << f, (f += 8) < x && (d += A[n2++] << f, f += 8)), (_ += d & (1 << x) - 1) > c) {
                      e3.msg = "invalid distance too far back", r2.mode = 30;
                      break e;
                    }
                    if (d >>>= x, f -= x, _ > (x = i - o)) {
                      if ((x = _ - x) > l2 && r2.sane) {
                        e3.msg = "invalid distance too far back", r2.mode = 30;
                        break e;
                      }
                      if (E = 0, T = p, 0 === h) {
                        if (E += u - x, x < v) {
                          v -= x;
                          do {
                            S[i++] = p[E++];
                          } while (--x);
                          E = i - _, T = S;
                        }
                      } else if (h < x) {
                        if (E += u + h - x, (x -= h) < v) {
                          v -= x;
                          do {
                            S[i++] = p[E++];
                          } while (--x);
                          if (E = 0, h < v) {
                            v -= x = h;
                            do {
                              S[i++] = p[E++];
                            } while (--x);
                            E = i - _, T = S;
                          }
                        }
                      } else if (E += h - x, x < v) {
                        v -= x;
                        do {
                          S[i++] = p[E++];
                        } while (--x);
                        E = i - _, T = S;
                      }
                      for (; v > 2; ) S[i++] = T[E++], S[i++] = T[E++], S[i++] = T[E++], v -= 3;
                      v && (S[i++] = T[E++], v > 1 && (S[i++] = T[E++]));
                    } else {
                      E = i - _;
                      do {
                        S[i++] = S[E++], S[i++] = S[E++], S[i++] = S[E++], v -= 3;
                      } while (v > 2);
                      v && (S[i++] = S[E++], v > 1 && (S[i++] = S[E++]));
                    }
                    break;
                  }
                }
                break;
              }
            } while (n2 < s && i < a);
            n2 -= v = f >> 3, d &= (1 << (f -= v << 3)) - 1, e3.next_in = n2, e3.next_out = i, e3.avail_in = n2 < s ? s - n2 + 5 : 5 - (n2 - s), e3.avail_out = i < a ? a - i + 257 : 257 - (i - a), r2.hold = d, r2.bits = f;
          };
        }, 7948: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(4236), s = r2(6069), i = r2(2869), o = r2(4264), a = r2(9241), c = -2, u = 12, l2 = 30;
          function h(e3) {
            return (e3 >>> 24 & 255) + (e3 >>> 8 & 65280) + ((65280 & e3) << 8) + ((255 & e3) << 24);
          }
          function p() {
            this.mode = 0, this.last = false, this.wrap = 0, this.havedict = false, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new n2.Buf16(320), this.work = new n2.Buf16(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0;
          }
          function d(e3) {
            var t3;
            return e3 && e3.state ? (t3 = e3.state, e3.total_in = e3.total_out = t3.total = 0, e3.msg = "", t3.wrap && (e3.adler = 1 & t3.wrap), t3.mode = 1, t3.last = 0, t3.havedict = 0, t3.dmax = 32768, t3.head = null, t3.hold = 0, t3.bits = 0, t3.lencode = t3.lendyn = new n2.Buf32(852), t3.distcode = t3.distdyn = new n2.Buf32(592), t3.sane = 1, t3.back = -1, 0) : c;
          }
          function f(e3) {
            var t3;
            return e3 && e3.state ? ((t3 = e3.state).wsize = 0, t3.whave = 0, t3.wnext = 0, d(e3)) : c;
          }
          function m(e3, t3) {
            var r3, n3;
            return e3 && e3.state ? (n3 = e3.state, t3 < 0 ? (r3 = 0, t3 = -t3) : (r3 = 1 + (t3 >> 4), t3 < 48 && (t3 &= 15)), t3 && (t3 < 8 || t3 > 15) ? c : (null !== n3.window && n3.wbits !== t3 && (n3.window = null), n3.wrap = r3, n3.wbits = t3, f(e3))) : c;
          }
          function w(e3, t3) {
            var r3, n3;
            return e3 ? (n3 = new p(), e3.state = n3, n3.window = null, 0 !== (r3 = m(e3, t3)) && (e3.state = null), r3) : c;
          }
          var g, y, b = true;
          function x(e3) {
            if (b) {
              var t3;
              for (g = new n2.Buf32(512), y = new n2.Buf32(32), t3 = 0; t3 < 144; ) e3.lens[t3++] = 8;
              for (; t3 < 256; ) e3.lens[t3++] = 9;
              for (; t3 < 280; ) e3.lens[t3++] = 7;
              for (; t3 < 288; ) e3.lens[t3++] = 8;
              for (a(1, e3.lens, 0, 288, g, 0, e3.work, { bits: 9 }), t3 = 0; t3 < 32; ) e3.lens[t3++] = 5;
              a(2, e3.lens, 0, 32, y, 0, e3.work, { bits: 5 }), b = false;
            }
            e3.lencode = g, e3.lenbits = 9, e3.distcode = y, e3.distbits = 5;
          }
          function v(e3, t3, r3, s2) {
            var i2, o2 = e3.state;
            return null === o2.window && (o2.wsize = 1 << o2.wbits, o2.wnext = 0, o2.whave = 0, o2.window = new n2.Buf8(o2.wsize)), s2 >= o2.wsize ? (n2.arraySet(o2.window, t3, r3 - o2.wsize, o2.wsize, 0), o2.wnext = 0, o2.whave = o2.wsize) : ((i2 = o2.wsize - o2.wnext) > s2 && (i2 = s2), n2.arraySet(o2.window, t3, r3 - s2, i2, o2.wnext), (s2 -= i2) ? (n2.arraySet(o2.window, t3, r3 - s2, s2, 0), o2.wnext = s2, o2.whave = o2.wsize) : (o2.wnext += i2, o2.wnext === o2.wsize && (o2.wnext = 0), o2.whave < o2.wsize && (o2.whave += i2))), 0;
          }
          t2.inflateReset = f, t2.inflateReset2 = m, t2.inflateResetKeep = d, t2.inflateInit = function(e3) {
            return w(e3, 15);
          }, t2.inflateInit2 = w, t2.inflate = function(e3, t3) {
            var r3, p2, d2, f2, m2, w2, g2, y2, b2, _, E, T, A, S, I, R, N, C, O, k, L, D, P, F, B = 0, M = new n2.Buf8(4), U = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
            if (!e3 || !e3.state || !e3.output || !e3.input && 0 !== e3.avail_in) return c;
            (r3 = e3.state).mode === u && (r3.mode = 13), m2 = e3.next_out, d2 = e3.output, g2 = e3.avail_out, f2 = e3.next_in, p2 = e3.input, w2 = e3.avail_in, y2 = r3.hold, b2 = r3.bits, _ = w2, E = g2, D = 0;
            e: for (; ; ) switch (r3.mode) {
              case 1:
                if (0 === r3.wrap) {
                  r3.mode = 13;
                  break;
                }
                for (; b2 < 16; ) {
                  if (0 === w2) break e;
                  w2--, y2 += p2[f2++] << b2, b2 += 8;
                }
                if (2 & r3.wrap && 35615 === y2) {
                  r3.check = 0, M[0] = 255 & y2, M[1] = y2 >>> 8 & 255, r3.check = i(r3.check, M, 2, 0), y2 = 0, b2 = 0, r3.mode = 2;
                  break;
                }
                if (r3.flags = 0, r3.head && (r3.head.done = false), !(1 & r3.wrap) || (((255 & y2) << 8) + (y2 >> 8)) % 31) {
                  e3.msg = "incorrect header check", r3.mode = l2;
                  break;
                }
                if (8 != (15 & y2)) {
                  e3.msg = "unknown compression method", r3.mode = l2;
                  break;
                }
                if (b2 -= 4, L = 8 + (15 & (y2 >>>= 4)), 0 === r3.wbits) r3.wbits = L;
                else if (L > r3.wbits) {
                  e3.msg = "invalid window size", r3.mode = l2;
                  break;
                }
                r3.dmax = 1 << L, e3.adler = r3.check = 1, r3.mode = 512 & y2 ? 10 : u, y2 = 0, b2 = 0;
                break;
              case 2:
                for (; b2 < 16; ) {
                  if (0 === w2) break e;
                  w2--, y2 += p2[f2++] << b2, b2 += 8;
                }
                if (r3.flags = y2, 8 != (255 & r3.flags)) {
                  e3.msg = "unknown compression method", r3.mode = l2;
                  break;
                }
                if (57344 & r3.flags) {
                  e3.msg = "unknown header flags set", r3.mode = l2;
                  break;
                }
                r3.head && (r3.head.text = y2 >> 8 & 1), 512 & r3.flags && (M[0] = 255 & y2, M[1] = y2 >>> 8 & 255, r3.check = i(r3.check, M, 2, 0)), y2 = 0, b2 = 0, r3.mode = 3;
              case 3:
                for (; b2 < 32; ) {
                  if (0 === w2) break e;
                  w2--, y2 += p2[f2++] << b2, b2 += 8;
                }
                r3.head && (r3.head.time = y2), 512 & r3.flags && (M[0] = 255 & y2, M[1] = y2 >>> 8 & 255, M[2] = y2 >>> 16 & 255, M[3] = y2 >>> 24 & 255, r3.check = i(r3.check, M, 4, 0)), y2 = 0, b2 = 0, r3.mode = 4;
              case 4:
                for (; b2 < 16; ) {
                  if (0 === w2) break e;
                  w2--, y2 += p2[f2++] << b2, b2 += 8;
                }
                r3.head && (r3.head.xflags = 255 & y2, r3.head.os = y2 >> 8), 512 & r3.flags && (M[0] = 255 & y2, M[1] = y2 >>> 8 & 255, r3.check = i(r3.check, M, 2, 0)), y2 = 0, b2 = 0, r3.mode = 5;
              case 5:
                if (1024 & r3.flags) {
                  for (; b2 < 16; ) {
                    if (0 === w2) break e;
                    w2--, y2 += p2[f2++] << b2, b2 += 8;
                  }
                  r3.length = y2, r3.head && (r3.head.extra_len = y2), 512 & r3.flags && (M[0] = 255 & y2, M[1] = y2 >>> 8 & 255, r3.check = i(r3.check, M, 2, 0)), y2 = 0, b2 = 0;
                } else r3.head && (r3.head.extra = null);
                r3.mode = 6;
              case 6:
                if (1024 & r3.flags && ((T = r3.length) > w2 && (T = w2), T && (r3.head && (L = r3.head.extra_len - r3.length, r3.head.extra || (r3.head.extra = new Array(r3.head.extra_len)), n2.arraySet(r3.head.extra, p2, f2, T, L)), 512 & r3.flags && (r3.check = i(r3.check, p2, T, f2)), w2 -= T, f2 += T, r3.length -= T), r3.length)) break e;
                r3.length = 0, r3.mode = 7;
              case 7:
                if (2048 & r3.flags) {
                  if (0 === w2) break e;
                  T = 0;
                  do {
                    L = p2[f2 + T++], r3.head && L && r3.length < 65536 && (r3.head.name += String.fromCharCode(L));
                  } while (L && T < w2);
                  if (512 & r3.flags && (r3.check = i(r3.check, p2, T, f2)), w2 -= T, f2 += T, L) break e;
                } else r3.head && (r3.head.name = null);
                r3.length = 0, r3.mode = 8;
              case 8:
                if (4096 & r3.flags) {
                  if (0 === w2) break e;
                  T = 0;
                  do {
                    L = p2[f2 + T++], r3.head && L && r3.length < 65536 && (r3.head.comment += String.fromCharCode(L));
                  } while (L && T < w2);
                  if (512 & r3.flags && (r3.check = i(r3.check, p2, T, f2)), w2 -= T, f2 += T, L) break e;
                } else r3.head && (r3.head.comment = null);
                r3.mode = 9;
              case 9:
                if (512 & r3.flags) {
                  for (; b2 < 16; ) {
                    if (0 === w2) break e;
                    w2--, y2 += p2[f2++] << b2, b2 += 8;
                  }
                  if (y2 !== (65535 & r3.check)) {
                    e3.msg = "header crc mismatch", r3.mode = l2;
                    break;
                  }
                  y2 = 0, b2 = 0;
                }
                r3.head && (r3.head.hcrc = r3.flags >> 9 & 1, r3.head.done = true), e3.adler = r3.check = 0, r3.mode = u;
                break;
              case 10:
                for (; b2 < 32; ) {
                  if (0 === w2) break e;
                  w2--, y2 += p2[f2++] << b2, b2 += 8;
                }
                e3.adler = r3.check = h(y2), y2 = 0, b2 = 0, r3.mode = 11;
              case 11:
                if (0 === r3.havedict) return e3.next_out = m2, e3.avail_out = g2, e3.next_in = f2, e3.avail_in = w2, r3.hold = y2, r3.bits = b2, 2;
                e3.adler = r3.check = 1, r3.mode = u;
              case u:
                if (5 === t3 || 6 === t3) break e;
              case 13:
                if (r3.last) {
                  y2 >>>= 7 & b2, b2 -= 7 & b2, r3.mode = 27;
                  break;
                }
                for (; b2 < 3; ) {
                  if (0 === w2) break e;
                  w2--, y2 += p2[f2++] << b2, b2 += 8;
                }
                switch (r3.last = 1 & y2, b2 -= 1, 3 & (y2 >>>= 1)) {
                  case 0:
                    r3.mode = 14;
                    break;
                  case 1:
                    if (x(r3), r3.mode = 20, 6 === t3) {
                      y2 >>>= 2, b2 -= 2;
                      break e;
                    }
                    break;
                  case 2:
                    r3.mode = 17;
                    break;
                  case 3:
                    e3.msg = "invalid block type", r3.mode = l2;
                }
                y2 >>>= 2, b2 -= 2;
                break;
              case 14:
                for (y2 >>>= 7 & b2, b2 -= 7 & b2; b2 < 32; ) {
                  if (0 === w2) break e;
                  w2--, y2 += p2[f2++] << b2, b2 += 8;
                }
                if ((65535 & y2) != (y2 >>> 16 ^ 65535)) {
                  e3.msg = "invalid stored block lengths", r3.mode = l2;
                  break;
                }
                if (r3.length = 65535 & y2, y2 = 0, b2 = 0, r3.mode = 15, 6 === t3) break e;
              case 15:
                r3.mode = 16;
              case 16:
                if (T = r3.length) {
                  if (T > w2 && (T = w2), T > g2 && (T = g2), 0 === T) break e;
                  n2.arraySet(d2, p2, f2, T, m2), w2 -= T, f2 += T, g2 -= T, m2 += T, r3.length -= T;
                  break;
                }
                r3.mode = u;
                break;
              case 17:
                for (; b2 < 14; ) {
                  if (0 === w2) break e;
                  w2--, y2 += p2[f2++] << b2, b2 += 8;
                }
                if (r3.nlen = 257 + (31 & y2), y2 >>>= 5, b2 -= 5, r3.ndist = 1 + (31 & y2), y2 >>>= 5, b2 -= 5, r3.ncode = 4 + (15 & y2), y2 >>>= 4, b2 -= 4, r3.nlen > 286 || r3.ndist > 30) {
                  e3.msg = "too many length or distance symbols", r3.mode = l2;
                  break;
                }
                r3.have = 0, r3.mode = 18;
              case 18:
                for (; r3.have < r3.ncode; ) {
                  for (; b2 < 3; ) {
                    if (0 === w2) break e;
                    w2--, y2 += p2[f2++] << b2, b2 += 8;
                  }
                  r3.lens[U[r3.have++]] = 7 & y2, y2 >>>= 3, b2 -= 3;
                }
                for (; r3.have < 19; ) r3.lens[U[r3.have++]] = 0;
                if (r3.lencode = r3.lendyn, r3.lenbits = 7, P = { bits: r3.lenbits }, D = a(0, r3.lens, 0, 19, r3.lencode, 0, r3.work, P), r3.lenbits = P.bits, D) {
                  e3.msg = "invalid code lengths set", r3.mode = l2;
                  break;
                }
                r3.have = 0, r3.mode = 19;
              case 19:
                for (; r3.have < r3.nlen + r3.ndist; ) {
                  for (; R = (B = r3.lencode[y2 & (1 << r3.lenbits) - 1]) >>> 16 & 255, N = 65535 & B, !((I = B >>> 24) <= b2); ) {
                    if (0 === w2) break e;
                    w2--, y2 += p2[f2++] << b2, b2 += 8;
                  }
                  if (N < 16) y2 >>>= I, b2 -= I, r3.lens[r3.have++] = N;
                  else {
                    if (16 === N) {
                      for (F = I + 2; b2 < F; ) {
                        if (0 === w2) break e;
                        w2--, y2 += p2[f2++] << b2, b2 += 8;
                      }
                      if (y2 >>>= I, b2 -= I, 0 === r3.have) {
                        e3.msg = "invalid bit length repeat", r3.mode = l2;
                        break;
                      }
                      L = r3.lens[r3.have - 1], T = 3 + (3 & y2), y2 >>>= 2, b2 -= 2;
                    } else if (17 === N) {
                      for (F = I + 3; b2 < F; ) {
                        if (0 === w2) break e;
                        w2--, y2 += p2[f2++] << b2, b2 += 8;
                      }
                      b2 -= I, L = 0, T = 3 + (7 & (y2 >>>= I)), y2 >>>= 3, b2 -= 3;
                    } else {
                      for (F = I + 7; b2 < F; ) {
                        if (0 === w2) break e;
                        w2--, y2 += p2[f2++] << b2, b2 += 8;
                      }
                      b2 -= I, L = 0, T = 11 + (127 & (y2 >>>= I)), y2 >>>= 7, b2 -= 7;
                    }
                    if (r3.have + T > r3.nlen + r3.ndist) {
                      e3.msg = "invalid bit length repeat", r3.mode = l2;
                      break;
                    }
                    for (; T--; ) r3.lens[r3.have++] = L;
                  }
                }
                if (r3.mode === l2) break;
                if (0 === r3.lens[256]) {
                  e3.msg = "invalid code -- missing end-of-block", r3.mode = l2;
                  break;
                }
                if (r3.lenbits = 9, P = { bits: r3.lenbits }, D = a(1, r3.lens, 0, r3.nlen, r3.lencode, 0, r3.work, P), r3.lenbits = P.bits, D) {
                  e3.msg = "invalid literal/lengths set", r3.mode = l2;
                  break;
                }
                if (r3.distbits = 6, r3.distcode = r3.distdyn, P = { bits: r3.distbits }, D = a(2, r3.lens, r3.nlen, r3.ndist, r3.distcode, 0, r3.work, P), r3.distbits = P.bits, D) {
                  e3.msg = "invalid distances set", r3.mode = l2;
                  break;
                }
                if (r3.mode = 20, 6 === t3) break e;
              case 20:
                r3.mode = 21;
              case 21:
                if (w2 >= 6 && g2 >= 258) {
                  e3.next_out = m2, e3.avail_out = g2, e3.next_in = f2, e3.avail_in = w2, r3.hold = y2, r3.bits = b2, o(e3, E), m2 = e3.next_out, d2 = e3.output, g2 = e3.avail_out, f2 = e3.next_in, p2 = e3.input, w2 = e3.avail_in, y2 = r3.hold, b2 = r3.bits, r3.mode === u && (r3.back = -1);
                  break;
                }
                for (r3.back = 0; R = (B = r3.lencode[y2 & (1 << r3.lenbits) - 1]) >>> 16 & 255, N = 65535 & B, !((I = B >>> 24) <= b2); ) {
                  if (0 === w2) break e;
                  w2--, y2 += p2[f2++] << b2, b2 += 8;
                }
                if (R && 0 == (240 & R)) {
                  for (C = I, O = R, k = N; R = (B = r3.lencode[k + ((y2 & (1 << C + O) - 1) >> C)]) >>> 16 & 255, N = 65535 & B, !(C + (I = B >>> 24) <= b2); ) {
                    if (0 === w2) break e;
                    w2--, y2 += p2[f2++] << b2, b2 += 8;
                  }
                  y2 >>>= C, b2 -= C, r3.back += C;
                }
                if (y2 >>>= I, b2 -= I, r3.back += I, r3.length = N, 0 === R) {
                  r3.mode = 26;
                  break;
                }
                if (32 & R) {
                  r3.back = -1, r3.mode = u;
                  break;
                }
                if (64 & R) {
                  e3.msg = "invalid literal/length code", r3.mode = l2;
                  break;
                }
                r3.extra = 15 & R, r3.mode = 22;
              case 22:
                if (r3.extra) {
                  for (F = r3.extra; b2 < F; ) {
                    if (0 === w2) break e;
                    w2--, y2 += p2[f2++] << b2, b2 += 8;
                  }
                  r3.length += y2 & (1 << r3.extra) - 1, y2 >>>= r3.extra, b2 -= r3.extra, r3.back += r3.extra;
                }
                r3.was = r3.length, r3.mode = 23;
              case 23:
                for (; R = (B = r3.distcode[y2 & (1 << r3.distbits) - 1]) >>> 16 & 255, N = 65535 & B, !((I = B >>> 24) <= b2); ) {
                  if (0 === w2) break e;
                  w2--, y2 += p2[f2++] << b2, b2 += 8;
                }
                if (0 == (240 & R)) {
                  for (C = I, O = R, k = N; R = (B = r3.distcode[k + ((y2 & (1 << C + O) - 1) >> C)]) >>> 16 & 255, N = 65535 & B, !(C + (I = B >>> 24) <= b2); ) {
                    if (0 === w2) break e;
                    w2--, y2 += p2[f2++] << b2, b2 += 8;
                  }
                  y2 >>>= C, b2 -= C, r3.back += C;
                }
                if (y2 >>>= I, b2 -= I, r3.back += I, 64 & R) {
                  e3.msg = "invalid distance code", r3.mode = l2;
                  break;
                }
                r3.offset = N, r3.extra = 15 & R, r3.mode = 24;
              case 24:
                if (r3.extra) {
                  for (F = r3.extra; b2 < F; ) {
                    if (0 === w2) break e;
                    w2--, y2 += p2[f2++] << b2, b2 += 8;
                  }
                  r3.offset += y2 & (1 << r3.extra) - 1, y2 >>>= r3.extra, b2 -= r3.extra, r3.back += r3.extra;
                }
                if (r3.offset > r3.dmax) {
                  e3.msg = "invalid distance too far back", r3.mode = l2;
                  break;
                }
                r3.mode = 25;
              case 25:
                if (0 === g2) break e;
                if (T = E - g2, r3.offset > T) {
                  if ((T = r3.offset - T) > r3.whave && r3.sane) {
                    e3.msg = "invalid distance too far back", r3.mode = l2;
                    break;
                  }
                  T > r3.wnext ? (T -= r3.wnext, A = r3.wsize - T) : A = r3.wnext - T, T > r3.length && (T = r3.length), S = r3.window;
                } else S = d2, A = m2 - r3.offset, T = r3.length;
                T > g2 && (T = g2), g2 -= T, r3.length -= T;
                do {
                  d2[m2++] = S[A++];
                } while (--T);
                0 === r3.length && (r3.mode = 21);
                break;
              case 26:
                if (0 === g2) break e;
                d2[m2++] = r3.length, g2--, r3.mode = 21;
                break;
              case 27:
                if (r3.wrap) {
                  for (; b2 < 32; ) {
                    if (0 === w2) break e;
                    w2--, y2 |= p2[f2++] << b2, b2 += 8;
                  }
                  if (E -= g2, e3.total_out += E, r3.total += E, E && (e3.adler = r3.check = r3.flags ? i(r3.check, d2, E, m2 - E) : s(r3.check, d2, E, m2 - E)), E = g2, (r3.flags ? y2 : h(y2)) !== r3.check) {
                    e3.msg = "incorrect data check", r3.mode = l2;
                    break;
                  }
                  y2 = 0, b2 = 0;
                }
                r3.mode = 28;
              case 28:
                if (r3.wrap && r3.flags) {
                  for (; b2 < 32; ) {
                    if (0 === w2) break e;
                    w2--, y2 += p2[f2++] << b2, b2 += 8;
                  }
                  if (y2 !== (4294967295 & r3.total)) {
                    e3.msg = "incorrect length check", r3.mode = l2;
                    break;
                  }
                  y2 = 0, b2 = 0;
                }
                r3.mode = 29;
              case 29:
                D = 1;
                break e;
              case l2:
                D = -3;
                break e;
              case 31:
                return -4;
              default:
                return c;
            }
            return e3.next_out = m2, e3.avail_out = g2, e3.next_in = f2, e3.avail_in = w2, r3.hold = y2, r3.bits = b2, (r3.wsize || E !== e3.avail_out && r3.mode < l2 && (r3.mode < 27 || 4 !== t3)) && v(e3, e3.output, e3.next_out, E - e3.avail_out) ? (r3.mode = 31, -4) : (_ -= e3.avail_in, E -= e3.avail_out, e3.total_in += _, e3.total_out += E, r3.total += E, r3.wrap && E && (e3.adler = r3.check = r3.flags ? i(r3.check, d2, E, e3.next_out - E) : s(r3.check, d2, E, e3.next_out - E)), e3.data_type = r3.bits + (r3.last ? 64 : 0) + (r3.mode === u ? 128 : 0) + (20 === r3.mode || 15 === r3.mode ? 256 : 0), (0 === _ && 0 === E || 4 === t3) && 0 === D && (D = -5), D);
          }, t2.inflateEnd = function(e3) {
            if (!e3 || !e3.state) return c;
            var t3 = e3.state;
            return t3.window && (t3.window = null), e3.state = null, 0;
          }, t2.inflateGetHeader = function(e3, t3) {
            var r3;
            return e3 && e3.state ? 0 == (2 & (r3 = e3.state).wrap) ? c : (r3.head = t3, t3.done = false, 0) : c;
          }, t2.inflateSetDictionary = function(e3, t3) {
            var r3, n3 = t3.length;
            return e3 && e3.state ? 0 !== (r3 = e3.state).wrap && 11 !== r3.mode ? c : 11 === r3.mode && s(1, t3, n3, 0) !== r3.check ? -3 : v(e3, t3, n3, n3) ? (r3.mode = 31, -4) : (r3.havedict = 1, 0) : c;
          }, t2.inflateInfo = "pako inflate (from Nodeca project)";
        }, 9241: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(4236), s = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0], i = [16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78], o = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0], a = [16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];
          e2.exports = function(e3, t3, r3, c, u, l2, h, p) {
            var d, f, m, w, g, y, b, x, v, _ = p.bits, E = 0, T = 0, A = 0, S = 0, I = 0, R = 0, N = 0, C = 0, O = 0, k = 0, L = null, D = 0, P = new n2.Buf16(16), F = new n2.Buf16(16), B = null, M = 0;
            for (E = 0; E <= 15; E++) P[E] = 0;
            for (T = 0; T < c; T++) P[t3[r3 + T]]++;
            for (I = _, S = 15; S >= 1 && 0 === P[S]; S--) ;
            if (I > S && (I = S), 0 === S) return u[l2++] = 20971520, u[l2++] = 20971520, p.bits = 1, 0;
            for (A = 1; A < S && 0 === P[A]; A++) ;
            for (I < A && (I = A), C = 1, E = 1; E <= 15; E++) if (C <<= 1, (C -= P[E]) < 0) return -1;
            if (C > 0 && (0 === e3 || 1 !== S)) return -1;
            for (F[1] = 0, E = 1; E < 15; E++) F[E + 1] = F[E] + P[E];
            for (T = 0; T < c; T++) 0 !== t3[r3 + T] && (h[F[t3[r3 + T]]++] = T);
            if (0 === e3 ? (L = B = h, y = 19) : 1 === e3 ? (L = s, D -= 257, B = i, M -= 257, y = 256) : (L = o, B = a, y = -1), k = 0, T = 0, E = A, g = l2, R = I, N = 0, m = -1, w = (O = 1 << I) - 1, 1 === e3 && O > 852 || 2 === e3 && O > 592) return 1;
            for (; ; ) {
              b = E - N, h[T] < y ? (x = 0, v = h[T]) : h[T] > y ? (x = B[M + h[T]], v = L[D + h[T]]) : (x = 96, v = 0), d = 1 << E - N, A = f = 1 << R;
              do {
                u[g + (k >> N) + (f -= d)] = b << 24 | x << 16 | v | 0;
              } while (0 !== f);
              for (d = 1 << E - 1; k & d; ) d >>= 1;
              if (0 !== d ? (k &= d - 1, k += d) : k = 0, T++, 0 == --P[E]) {
                if (E === S) break;
                E = t3[r3 + h[T]];
              }
              if (E > I && (k & w) !== m) {
                for (0 === N && (N = I), g += A, C = 1 << (R = E - N); R + N < S && !((C -= P[R + N]) <= 0); ) R++, C <<= 1;
                if (O += 1 << R, 1 === e3 && O > 852 || 2 === e3 && O > 592) return 1;
                u[m = k & w] = I << 24 | R << 16 | g - l2 | 0;
              }
            }
            return 0 !== k && (u[g + k] = E - N << 24 | 64 << 16 | 0), p.bits = I, 0;
          };
        }, 8898: (e2) => {
          "use strict";
          e2.exports = { 2: "need dictionary", 1: "stream end", 0: "", "-1": "file error", "-2": "stream error", "-3": "data error", "-4": "insufficient memory", "-5": "buffer error", "-6": "incompatible version" };
        }, 342: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(4236);
          function s(e3) {
            for (var t3 = e3.length; --t3 >= 0; ) e3[t3] = 0;
          }
          var i = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0], o = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13], a = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7], c = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15], u = new Array(576);
          s(u);
          var l2 = new Array(60);
          s(l2);
          var h = new Array(512);
          s(h);
          var p = new Array(256);
          s(p);
          var d = new Array(29);
          s(d);
          var f, m, w, g = new Array(30);
          function y(e3, t3, r3, n3, s2) {
            this.static_tree = e3, this.extra_bits = t3, this.extra_base = r3, this.elems = n3, this.max_length = s2, this.has_stree = e3 && e3.length;
          }
          function b(e3, t3) {
            this.dyn_tree = e3, this.max_code = 0, this.stat_desc = t3;
          }
          function x(e3) {
            return e3 < 256 ? h[e3] : h[256 + (e3 >>> 7)];
          }
          function v(e3, t3) {
            e3.pending_buf[e3.pending++] = 255 & t3, e3.pending_buf[e3.pending++] = t3 >>> 8 & 255;
          }
          function _(e3, t3, r3) {
            e3.bi_valid > 16 - r3 ? (e3.bi_buf |= t3 << e3.bi_valid & 65535, v(e3, e3.bi_buf), e3.bi_buf = t3 >> 16 - e3.bi_valid, e3.bi_valid += r3 - 16) : (e3.bi_buf |= t3 << e3.bi_valid & 65535, e3.bi_valid += r3);
          }
          function E(e3, t3, r3) {
            _(e3, r3[2 * t3], r3[2 * t3 + 1]);
          }
          function T(e3, t3) {
            var r3 = 0;
            do {
              r3 |= 1 & e3, e3 >>>= 1, r3 <<= 1;
            } while (--t3 > 0);
            return r3 >>> 1;
          }
          function A(e3, t3, r3) {
            var n3, s2, i2 = new Array(16), o2 = 0;
            for (n3 = 1; n3 <= 15; n3++) i2[n3] = o2 = o2 + r3[n3 - 1] << 1;
            for (s2 = 0; s2 <= t3; s2++) {
              var a2 = e3[2 * s2 + 1];
              0 !== a2 && (e3[2 * s2] = T(i2[a2]++, a2));
            }
          }
          function S(e3) {
            var t3;
            for (t3 = 0; t3 < 286; t3++) e3.dyn_ltree[2 * t3] = 0;
            for (t3 = 0; t3 < 30; t3++) e3.dyn_dtree[2 * t3] = 0;
            for (t3 = 0; t3 < 19; t3++) e3.bl_tree[2 * t3] = 0;
            e3.dyn_ltree[512] = 1, e3.opt_len = e3.static_len = 0, e3.last_lit = e3.matches = 0;
          }
          function I(e3) {
            e3.bi_valid > 8 ? v(e3, e3.bi_buf) : e3.bi_valid > 0 && (e3.pending_buf[e3.pending++] = e3.bi_buf), e3.bi_buf = 0, e3.bi_valid = 0;
          }
          function R(e3, t3, r3, n3) {
            var s2 = 2 * t3, i2 = 2 * r3;
            return e3[s2] < e3[i2] || e3[s2] === e3[i2] && n3[t3] <= n3[r3];
          }
          function N(e3, t3, r3) {
            for (var n3 = e3.heap[r3], s2 = r3 << 1; s2 <= e3.heap_len && (s2 < e3.heap_len && R(t3, e3.heap[s2 + 1], e3.heap[s2], e3.depth) && s2++, !R(t3, n3, e3.heap[s2], e3.depth)); ) e3.heap[r3] = e3.heap[s2], r3 = s2, s2 <<= 1;
            e3.heap[r3] = n3;
          }
          function C(e3, t3, r3) {
            var n3, s2, a2, c2, u2 = 0;
            if (0 !== e3.last_lit) do {
              n3 = e3.pending_buf[e3.d_buf + 2 * u2] << 8 | e3.pending_buf[e3.d_buf + 2 * u2 + 1], s2 = e3.pending_buf[e3.l_buf + u2], u2++, 0 === n3 ? E(e3, s2, t3) : (E(e3, (a2 = p[s2]) + 256 + 1, t3), 0 !== (c2 = i[a2]) && _(e3, s2 -= d[a2], c2), E(e3, a2 = x(--n3), r3), 0 !== (c2 = o[a2]) && _(e3, n3 -= g[a2], c2));
            } while (u2 < e3.last_lit);
            E(e3, 256, t3);
          }
          function O(e3, t3) {
            var r3, n3, s2, i2 = t3.dyn_tree, o2 = t3.stat_desc.static_tree, a2 = t3.stat_desc.has_stree, c2 = t3.stat_desc.elems, u2 = -1;
            for (e3.heap_len = 0, e3.heap_max = 573, r3 = 0; r3 < c2; r3++) 0 !== i2[2 * r3] ? (e3.heap[++e3.heap_len] = u2 = r3, e3.depth[r3] = 0) : i2[2 * r3 + 1] = 0;
            for (; e3.heap_len < 2; ) i2[2 * (s2 = e3.heap[++e3.heap_len] = u2 < 2 ? ++u2 : 0)] = 1, e3.depth[s2] = 0, e3.opt_len--, a2 && (e3.static_len -= o2[2 * s2 + 1]);
            for (t3.max_code = u2, r3 = e3.heap_len >> 1; r3 >= 1; r3--) N(e3, i2, r3);
            s2 = c2;
            do {
              r3 = e3.heap[1], e3.heap[1] = e3.heap[e3.heap_len--], N(e3, i2, 1), n3 = e3.heap[1], e3.heap[--e3.heap_max] = r3, e3.heap[--e3.heap_max] = n3, i2[2 * s2] = i2[2 * r3] + i2[2 * n3], e3.depth[s2] = (e3.depth[r3] >= e3.depth[n3] ? e3.depth[r3] : e3.depth[n3]) + 1, i2[2 * r3 + 1] = i2[2 * n3 + 1] = s2, e3.heap[1] = s2++, N(e3, i2, 1);
            } while (e3.heap_len >= 2);
            e3.heap[--e3.heap_max] = e3.heap[1], function(e4, t4) {
              var r4, n4, s3, i3, o3, a3, c3 = t4.dyn_tree, u3 = t4.max_code, l3 = t4.stat_desc.static_tree, h2 = t4.stat_desc.has_stree, p2 = t4.stat_desc.extra_bits, d2 = t4.stat_desc.extra_base, f2 = t4.stat_desc.max_length, m2 = 0;
              for (i3 = 0; i3 <= 15; i3++) e4.bl_count[i3] = 0;
              for (c3[2 * e4.heap[e4.heap_max] + 1] = 0, r4 = e4.heap_max + 1; r4 < 573; r4++) (i3 = c3[2 * c3[2 * (n4 = e4.heap[r4]) + 1] + 1] + 1) > f2 && (i3 = f2, m2++), c3[2 * n4 + 1] = i3, n4 > u3 || (e4.bl_count[i3]++, o3 = 0, n4 >= d2 && (o3 = p2[n4 - d2]), a3 = c3[2 * n4], e4.opt_len += a3 * (i3 + o3), h2 && (e4.static_len += a3 * (l3[2 * n4 + 1] + o3)));
              if (0 !== m2) {
                do {
                  for (i3 = f2 - 1; 0 === e4.bl_count[i3]; ) i3--;
                  e4.bl_count[i3]--, e4.bl_count[i3 + 1] += 2, e4.bl_count[f2]--, m2 -= 2;
                } while (m2 > 0);
                for (i3 = f2; 0 !== i3; i3--) for (n4 = e4.bl_count[i3]; 0 !== n4; ) (s3 = e4.heap[--r4]) > u3 || (c3[2 * s3 + 1] !== i3 && (e4.opt_len += (i3 - c3[2 * s3 + 1]) * c3[2 * s3], c3[2 * s3 + 1] = i3), n4--);
              }
            }(e3, t3), A(i2, u2, e3.bl_count);
          }
          function k(e3, t3, r3) {
            var n3, s2, i2 = -1, o2 = t3[1], a2 = 0, c2 = 7, u2 = 4;
            for (0 === o2 && (c2 = 138, u2 = 3), t3[2 * (r3 + 1) + 1] = 65535, n3 = 0; n3 <= r3; n3++) s2 = o2, o2 = t3[2 * (n3 + 1) + 1], ++a2 < c2 && s2 === o2 || (a2 < u2 ? e3.bl_tree[2 * s2] += a2 : 0 !== s2 ? (s2 !== i2 && e3.bl_tree[2 * s2]++, e3.bl_tree[32]++) : a2 <= 10 ? e3.bl_tree[34]++ : e3.bl_tree[36]++, a2 = 0, i2 = s2, 0 === o2 ? (c2 = 138, u2 = 3) : s2 === o2 ? (c2 = 6, u2 = 3) : (c2 = 7, u2 = 4));
          }
          function L(e3, t3, r3) {
            var n3, s2, i2 = -1, o2 = t3[1], a2 = 0, c2 = 7, u2 = 4;
            for (0 === o2 && (c2 = 138, u2 = 3), n3 = 0; n3 <= r3; n3++) if (s2 = o2, o2 = t3[2 * (n3 + 1) + 1], !(++a2 < c2 && s2 === o2)) {
              if (a2 < u2) do {
                E(e3, s2, e3.bl_tree);
              } while (0 != --a2);
              else 0 !== s2 ? (s2 !== i2 && (E(e3, s2, e3.bl_tree), a2--), E(e3, 16, e3.bl_tree), _(e3, a2 - 3, 2)) : a2 <= 10 ? (E(e3, 17, e3.bl_tree), _(e3, a2 - 3, 3)) : (E(e3, 18, e3.bl_tree), _(e3, a2 - 11, 7));
              a2 = 0, i2 = s2, 0 === o2 ? (c2 = 138, u2 = 3) : s2 === o2 ? (c2 = 6, u2 = 3) : (c2 = 7, u2 = 4);
            }
          }
          s(g);
          var D = false;
          function P(e3, t3, r3, s2) {
            _(e3, 0 + (s2 ? 1 : 0), 3), function(e4, t4, r4, s3) {
              I(e4), v(e4, r4), v(e4, ~r4), n2.arraySet(e4.pending_buf, e4.window, t4, r4, e4.pending), e4.pending += r4;
            }(e3, t3, r3);
          }
          t2._tr_init = function(e3) {
            D || (function() {
              var e4, t3, r3, n3, s2, c2 = new Array(16);
              for (r3 = 0, n3 = 0; n3 < 28; n3++) for (d[n3] = r3, e4 = 0; e4 < 1 << i[n3]; e4++) p[r3++] = n3;
              for (p[r3 - 1] = n3, s2 = 0, n3 = 0; n3 < 16; n3++) for (g[n3] = s2, e4 = 0; e4 < 1 << o[n3]; e4++) h[s2++] = n3;
              for (s2 >>= 7; n3 < 30; n3++) for (g[n3] = s2 << 7, e4 = 0; e4 < 1 << o[n3] - 7; e4++) h[256 + s2++] = n3;
              for (t3 = 0; t3 <= 15; t3++) c2[t3] = 0;
              for (e4 = 0; e4 <= 143; ) u[2 * e4 + 1] = 8, e4++, c2[8]++;
              for (; e4 <= 255; ) u[2 * e4 + 1] = 9, e4++, c2[9]++;
              for (; e4 <= 279; ) u[2 * e4 + 1] = 7, e4++, c2[7]++;
              for (; e4 <= 287; ) u[2 * e4 + 1] = 8, e4++, c2[8]++;
              for (A(u, 287, c2), e4 = 0; e4 < 30; e4++) l2[2 * e4 + 1] = 5, l2[2 * e4] = T(e4, 5);
              f = new y(u, i, 257, 286, 15), m = new y(l2, o, 0, 30, 15), w = new y(new Array(0), a, 0, 19, 7);
            }(), D = true), e3.l_desc = new b(e3.dyn_ltree, f), e3.d_desc = new b(e3.dyn_dtree, m), e3.bl_desc = new b(e3.bl_tree, w), e3.bi_buf = 0, e3.bi_valid = 0, S(e3);
          }, t2._tr_stored_block = P, t2._tr_flush_block = function(e3, t3, r3, n3) {
            var s2, i2, o2 = 0;
            e3.level > 0 ? (2 === e3.strm.data_type && (e3.strm.data_type = function(e4) {
              var t4, r4 = 4093624447;
              for (t4 = 0; t4 <= 31; t4++, r4 >>>= 1) if (1 & r4 && 0 !== e4.dyn_ltree[2 * t4]) return 0;
              if (0 !== e4.dyn_ltree[18] || 0 !== e4.dyn_ltree[20] || 0 !== e4.dyn_ltree[26]) return 1;
              for (t4 = 32; t4 < 256; t4++) if (0 !== e4.dyn_ltree[2 * t4]) return 1;
              return 0;
            }(e3)), O(e3, e3.l_desc), O(e3, e3.d_desc), o2 = function(e4) {
              var t4;
              for (k(e4, e4.dyn_ltree, e4.l_desc.max_code), k(e4, e4.dyn_dtree, e4.d_desc.max_code), O(e4, e4.bl_desc), t4 = 18; t4 >= 3 && 0 === e4.bl_tree[2 * c[t4] + 1]; t4--) ;
              return e4.opt_len += 3 * (t4 + 1) + 5 + 5 + 4, t4;
            }(e3), s2 = e3.opt_len + 3 + 7 >>> 3, (i2 = e3.static_len + 3 + 7 >>> 3) <= s2 && (s2 = i2)) : s2 = i2 = r3 + 5, r3 + 4 <= s2 && -1 !== t3 ? P(e3, t3, r3, n3) : 4 === e3.strategy || i2 === s2 ? (_(e3, 2 + (n3 ? 1 : 0), 3), C(e3, u, l2)) : (_(e3, 4 + (n3 ? 1 : 0), 3), function(e4, t4, r4, n4) {
              var s3;
              for (_(e4, t4 - 257, 5), _(e4, r4 - 1, 5), _(e4, n4 - 4, 4), s3 = 0; s3 < n4; s3++) _(e4, e4.bl_tree[2 * c[s3] + 1], 3);
              L(e4, e4.dyn_ltree, t4 - 1), L(e4, e4.dyn_dtree, r4 - 1);
            }(e3, e3.l_desc.max_code + 1, e3.d_desc.max_code + 1, o2 + 1), C(e3, e3.dyn_ltree, e3.dyn_dtree)), S(e3), n3 && I(e3);
          }, t2._tr_tally = function(e3, t3, r3) {
            return e3.pending_buf[e3.d_buf + 2 * e3.last_lit] = t3 >>> 8 & 255, e3.pending_buf[e3.d_buf + 2 * e3.last_lit + 1] = 255 & t3, e3.pending_buf[e3.l_buf + e3.last_lit] = 255 & r3, e3.last_lit++, 0 === t3 ? e3.dyn_ltree[2 * r3]++ : (e3.matches++, t3--, e3.dyn_ltree[2 * (p[r3] + 256 + 1)]++, e3.dyn_dtree[2 * x(t3)]++), e3.last_lit === e3.lit_bufsize - 1;
          }, t2._tr_align = function(e3) {
            _(e3, 2, 3), E(e3, 256, u), function(e4) {
              16 === e4.bi_valid ? (v(e4, e4.bi_buf), e4.bi_buf = 0, e4.bi_valid = 0) : e4.bi_valid >= 8 && (e4.pending_buf[e4.pending++] = 255 & e4.bi_buf, e4.bi_buf >>= 8, e4.bi_valid -= 8);
            }(e3);
          };
        }, 2292: (e2) => {
          "use strict";
          e2.exports = function() {
            this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = "", this.state = null, this.data_type = 2, this.adler = 0;
          };
        }, 4155: (e2) => {
          var t2, r2, n2 = e2.exports = {};
          function s() {
            throw new Error("setTimeout has not been defined");
          }
          function i() {
            throw new Error("clearTimeout has not been defined");
          }
          function o(e3) {
            if (t2 === setTimeout) return setTimeout(e3, 0);
            if ((t2 === s || !t2) && setTimeout) return t2 = setTimeout, setTimeout(e3, 0);
            try {
              return t2(e3, 0);
            } catch (r3) {
              try {
                return t2.call(null, e3, 0);
              } catch (r4) {
                return t2.call(this, e3, 0);
              }
            }
          }
          !function() {
            try {
              t2 = "function" == typeof setTimeout ? setTimeout : s;
            } catch (e3) {
              t2 = s;
            }
            try {
              r2 = "function" == typeof clearTimeout ? clearTimeout : i;
            } catch (e3) {
              r2 = i;
            }
          }();
          var a, c = [], u = false, l2 = -1;
          function h() {
            u && a && (u = false, a.length ? c = a.concat(c) : l2 = -1, c.length && p());
          }
          function p() {
            if (!u) {
              var e3 = o(h);
              u = true;
              for (var t3 = c.length; t3; ) {
                for (a = c, c = []; ++l2 < t3; ) a && a[l2].run();
                l2 = -1, t3 = c.length;
              }
              a = null, u = false, function(e4) {
                if (r2 === clearTimeout) return clearTimeout(e4);
                if ((r2 === i || !r2) && clearTimeout) return r2 = clearTimeout, clearTimeout(e4);
                try {
                  r2(e4);
                } catch (t4) {
                  try {
                    return r2.call(null, e4);
                  } catch (t5) {
                    return r2.call(this, e4);
                  }
                }
              }(e3);
            }
          }
          function d(e3, t3) {
            this.fun = e3, this.array = t3;
          }
          function f() {
          }
          n2.nextTick = function(e3) {
            var t3 = new Array(arguments.length - 1);
            if (arguments.length > 1) for (var r3 = 1; r3 < arguments.length; r3++) t3[r3 - 1] = arguments[r3];
            c.push(new d(e3, t3)), 1 !== c.length || u || o(p);
          }, d.prototype.run = function() {
            this.fun.apply(null, this.array);
          }, n2.title = "browser", n2.browser = true, n2.env = {}, n2.argv = [], n2.version = "", n2.versions = {}, n2.on = f, n2.addListener = f, n2.once = f, n2.off = f, n2.removeListener = f, n2.removeAllListeners = f, n2.emit = f, n2.prependListener = f, n2.prependOnceListener = f, n2.listeners = function(e3) {
            return [];
          }, n2.binding = function(e3) {
            throw new Error("process.binding is not supported");
          }, n2.cwd = function() {
            return "/";
          }, n2.chdir = function(e3) {
            throw new Error("process.chdir is not supported");
          }, n2.umask = function() {
            return 0;
          };
        }, 9509: (e2, t2, r2) => {
          var n2 = r2(8764), s = n2.Buffer;
          function i(e3, t3) {
            for (var r3 in e3) t3[r3] = e3[r3];
          }
          function o(e3, t3, r3) {
            return s(e3, t3, r3);
          }
          s.from && s.alloc && s.allocUnsafe && s.allocUnsafeSlow ? e2.exports = n2 : (i(n2, t2), t2.Buffer = o), i(s, o), o.from = function(e3, t3, r3) {
            if ("number" == typeof e3) throw new TypeError("Argument must not be a number");
            return s(e3, t3, r3);
          }, o.alloc = function(e3, t3, r3) {
            if ("number" != typeof e3) throw new TypeError("Argument must be a number");
            var n3 = s(e3);
            return void 0 !== t3 ? "string" == typeof r3 ? n3.fill(t3, r3) : n3.fill(t3) : n3.fill(0), n3;
          }, o.allocUnsafe = function(e3) {
            if ("number" != typeof e3) throw new TypeError("Argument must be a number");
            return s(e3);
          }, o.allocUnsafeSlow = function(e3) {
            if ("number" != typeof e3) throw new TypeError("Argument must be a number");
            return n2.SlowBuffer(e3);
          };
        }, 6099: (e2, t2, r2) => {
          !function(e3) {
            e3.parser = function(e4, t4) {
              return new s(e4, t4);
            }, e3.SAXParser = s, e3.SAXStream = o, e3.createStream = function(e4, t4) {
              return new o(e4, t4);
            }, e3.MAX_BUFFER_LENGTH = 65536;
            var t3, n2 = ["comment", "sgmlDecl", "textNode", "tagName", "doctype", "procInstName", "procInstBody", "entity", "attribName", "attribValue", "cdata", "script"];
            function s(t4, r3) {
              if (!(this instanceof s)) return new s(t4, r3);
              var i2 = this;
              !function(e4) {
                for (var t5 = 0, r4 = n2.length; t5 < r4; t5++) e4[n2[t5]] = "";
              }(i2), i2.q = i2.c = "", i2.bufferCheckPosition = e3.MAX_BUFFER_LENGTH, i2.opt = r3 || {}, i2.opt.lowercase = i2.opt.lowercase || i2.opt.lowercasetags, i2.looseCase = i2.opt.lowercase ? "toLowerCase" : "toUpperCase", i2.tags = [], i2.closed = i2.closedRoot = i2.sawRoot = false, i2.tag = i2.error = null, i2.strict = !!t4, i2.noscript = !(!t4 && !i2.opt.noscript), i2.state = _.BEGIN, i2.strictEntities = i2.opt.strictEntities, i2.ENTITIES = i2.strictEntities ? Object.create(e3.XML_ENTITIES) : Object.create(e3.ENTITIES), i2.attribList = [], i2.opt.xmlns && (i2.ns = Object.create(u)), i2.trackPosition = false !== i2.opt.position, i2.trackPosition && (i2.position = i2.line = i2.column = 0), T(i2, "onready");
            }
            e3.EVENTS = ["text", "processinginstruction", "sgmldeclaration", "doctype", "comment", "opentagstart", "attribute", "opentag", "closetag", "opencdata", "cdata", "closecdata", "error", "end", "ready", "script", "opennamespace", "closenamespace"], Object.create || (Object.create = function(e4) {
              function t4() {
              }
              return t4.prototype = e4, new t4();
            }), Object.keys || (Object.keys = function(e4) {
              var t4 = [];
              for (var r3 in e4) e4.hasOwnProperty(r3) && t4.push(r3);
              return t4;
            }), s.prototype = { end: function() {
              N(this);
            }, write: function(t4) {
              var r3 = this;
              if (this.error) throw this.error;
              if (r3.closed) return R(r3, "Cannot write after close. Assign an onready handler.");
              if (null === t4) return N(r3);
              "object" == typeof t4 && (t4 = t4.toString());
              for (var s2 = 0, i2 = ""; i2 = M(t4, s2++), r3.c = i2, i2; ) switch (r3.trackPosition && (r3.position++, "\n" === i2 ? (r3.line++, r3.column = 0) : r3.column++), r3.state) {
                case _.BEGIN:
                  if (r3.state = _.BEGIN_WHITESPACE, "\uFEFF" === i2) continue;
                  B(r3, i2);
                  continue;
                case _.BEGIN_WHITESPACE:
                  B(r3, i2);
                  continue;
                case _.TEXT:
                  if (r3.sawRoot && !r3.closedRoot) {
                    for (var o2 = s2 - 1; i2 && "<" !== i2 && "&" !== i2; ) (i2 = M(t4, s2++)) && r3.trackPosition && (r3.position++, "\n" === i2 ? (r3.line++, r3.column = 0) : r3.column++);
                    r3.textNode += t4.substring(o2, s2 - 1);
                  }
                  "<" !== i2 || r3.sawRoot && r3.closedRoot && !r3.strict ? (f(i2) || r3.sawRoot && !r3.closedRoot || C(r3, "Text data outside of root node."), "&" === i2 ? r3.state = _.TEXT_ENTITY : r3.textNode += i2) : (r3.state = _.OPEN_WAKA, r3.startTagPosition = r3.position);
                  continue;
                case _.SCRIPT:
                  "<" === i2 ? r3.state = _.SCRIPT_ENDING : r3.script += i2;
                  continue;
                case _.SCRIPT_ENDING:
                  "/" === i2 ? r3.state = _.CLOSE_TAG : (r3.script += "<" + i2, r3.state = _.SCRIPT);
                  continue;
                case _.OPEN_WAKA:
                  if ("!" === i2) r3.state = _.SGML_DECL, r3.sgmlDecl = "";
                  else if (f(i2)) ;
                  else if (g(l2, i2)) r3.state = _.OPEN_TAG, r3.tagName = i2;
                  else if ("/" === i2) r3.state = _.CLOSE_TAG, r3.tagName = "";
                  else if ("?" === i2) r3.state = _.PROC_INST, r3.procInstName = r3.procInstBody = "";
                  else {
                    if (C(r3, "Unencoded <"), r3.startTagPosition + 1 < r3.position) {
                      var a2 = r3.position - r3.startTagPosition;
                      i2 = new Array(a2).join(" ") + i2;
                    }
                    r3.textNode += "<" + i2, r3.state = _.TEXT;
                  }
                  continue;
                case _.SGML_DECL:
                  "[CDATA[" === (r3.sgmlDecl + i2).toUpperCase() ? (A(r3, "onopencdata"), r3.state = _.CDATA, r3.sgmlDecl = "", r3.cdata = "") : r3.sgmlDecl + i2 === "--" ? (r3.state = _.COMMENT, r3.comment = "", r3.sgmlDecl = "") : "DOCTYPE" === (r3.sgmlDecl + i2).toUpperCase() ? (r3.state = _.DOCTYPE, (r3.doctype || r3.sawRoot) && C(r3, "Inappropriately located doctype declaration"), r3.doctype = "", r3.sgmlDecl = "") : ">" === i2 ? (A(r3, "onsgmldeclaration", r3.sgmlDecl), r3.sgmlDecl = "", r3.state = _.TEXT) : m(i2) ? (r3.state = _.SGML_DECL_QUOTED, r3.sgmlDecl += i2) : r3.sgmlDecl += i2;
                  continue;
                case _.SGML_DECL_QUOTED:
                  i2 === r3.q && (r3.state = _.SGML_DECL, r3.q = ""), r3.sgmlDecl += i2;
                  continue;
                case _.DOCTYPE:
                  ">" === i2 ? (r3.state = _.TEXT, A(r3, "ondoctype", r3.doctype), r3.doctype = true) : (r3.doctype += i2, "[" === i2 ? r3.state = _.DOCTYPE_DTD : m(i2) && (r3.state = _.DOCTYPE_QUOTED, r3.q = i2));
                  continue;
                case _.DOCTYPE_QUOTED:
                  r3.doctype += i2, i2 === r3.q && (r3.q = "", r3.state = _.DOCTYPE);
                  continue;
                case _.DOCTYPE_DTD:
                  r3.doctype += i2, "]" === i2 ? r3.state = _.DOCTYPE : m(i2) && (r3.state = _.DOCTYPE_DTD_QUOTED, r3.q = i2);
                  continue;
                case _.DOCTYPE_DTD_QUOTED:
                  r3.doctype += i2, i2 === r3.q && (r3.state = _.DOCTYPE_DTD, r3.q = "");
                  continue;
                case _.COMMENT:
                  "-" === i2 ? r3.state = _.COMMENT_ENDING : r3.comment += i2;
                  continue;
                case _.COMMENT_ENDING:
                  "-" === i2 ? (r3.state = _.COMMENT_ENDED, r3.comment = I(r3.opt, r3.comment), r3.comment && A(r3, "oncomment", r3.comment), r3.comment = "") : (r3.comment += "-" + i2, r3.state = _.COMMENT);
                  continue;
                case _.COMMENT_ENDED:
                  ">" !== i2 ? (C(r3, "Malformed comment"), r3.comment += "--" + i2, r3.state = _.COMMENT) : r3.state = _.TEXT;
                  continue;
                case _.CDATA:
                  "]" === i2 ? r3.state = _.CDATA_ENDING : r3.cdata += i2;
                  continue;
                case _.CDATA_ENDING:
                  "]" === i2 ? r3.state = _.CDATA_ENDING_2 : (r3.cdata += "]" + i2, r3.state = _.CDATA);
                  continue;
                case _.CDATA_ENDING_2:
                  ">" === i2 ? (r3.cdata && A(r3, "oncdata", r3.cdata), A(r3, "onclosecdata"), r3.cdata = "", r3.state = _.TEXT) : "]" === i2 ? r3.cdata += "]" : (r3.cdata += "]]" + i2, r3.state = _.CDATA);
                  continue;
                case _.PROC_INST:
                  "?" === i2 ? r3.state = _.PROC_INST_ENDING : f(i2) ? r3.state = _.PROC_INST_BODY : r3.procInstName += i2;
                  continue;
                case _.PROC_INST_BODY:
                  if (!r3.procInstBody && f(i2)) continue;
                  "?" === i2 ? r3.state = _.PROC_INST_ENDING : r3.procInstBody += i2;
                  continue;
                case _.PROC_INST_ENDING:
                  ">" === i2 ? (A(r3, "onprocessinginstruction", { name: r3.procInstName, body: r3.procInstBody }), r3.procInstName = r3.procInstBody = "", r3.state = _.TEXT) : (r3.procInstBody += "?" + i2, r3.state = _.PROC_INST_BODY);
                  continue;
                case _.OPEN_TAG:
                  g(h, i2) ? r3.tagName += i2 : (O(r3), ">" === i2 ? D(r3) : "/" === i2 ? r3.state = _.OPEN_TAG_SLASH : (f(i2) || C(r3, "Invalid character in tag name"), r3.state = _.ATTRIB));
                  continue;
                case _.OPEN_TAG_SLASH:
                  ">" === i2 ? (D(r3, true), P(r3)) : (C(r3, "Forward-slash in opening tag not followed by >"), r3.state = _.ATTRIB);
                  continue;
                case _.ATTRIB:
                  if (f(i2)) continue;
                  ">" === i2 ? D(r3) : "/" === i2 ? r3.state = _.OPEN_TAG_SLASH : g(l2, i2) ? (r3.attribName = i2, r3.attribValue = "", r3.state = _.ATTRIB_NAME) : C(r3, "Invalid attribute name");
                  continue;
                case _.ATTRIB_NAME:
                  "=" === i2 ? r3.state = _.ATTRIB_VALUE : ">" === i2 ? (C(r3, "Attribute without value"), r3.attribValue = r3.attribName, L(r3), D(r3)) : f(i2) ? r3.state = _.ATTRIB_NAME_SAW_WHITE : g(h, i2) ? r3.attribName += i2 : C(r3, "Invalid attribute name");
                  continue;
                case _.ATTRIB_NAME_SAW_WHITE:
                  if ("=" === i2) r3.state = _.ATTRIB_VALUE;
                  else {
                    if (f(i2)) continue;
                    C(r3, "Attribute without value"), r3.tag.attributes[r3.attribName] = "", r3.attribValue = "", A(r3, "onattribute", { name: r3.attribName, value: "" }), r3.attribName = "", ">" === i2 ? D(r3) : g(l2, i2) ? (r3.attribName = i2, r3.state = _.ATTRIB_NAME) : (C(r3, "Invalid attribute name"), r3.state = _.ATTRIB);
                  }
                  continue;
                case _.ATTRIB_VALUE:
                  if (f(i2)) continue;
                  m(i2) ? (r3.q = i2, r3.state = _.ATTRIB_VALUE_QUOTED) : (C(r3, "Unquoted attribute value"), r3.state = _.ATTRIB_VALUE_UNQUOTED, r3.attribValue = i2);
                  continue;
                case _.ATTRIB_VALUE_QUOTED:
                  if (i2 !== r3.q) {
                    "&" === i2 ? r3.state = _.ATTRIB_VALUE_ENTITY_Q : r3.attribValue += i2;
                    continue;
                  }
                  L(r3), r3.q = "", r3.state = _.ATTRIB_VALUE_CLOSED;
                  continue;
                case _.ATTRIB_VALUE_CLOSED:
                  f(i2) ? r3.state = _.ATTRIB : ">" === i2 ? D(r3) : "/" === i2 ? r3.state = _.OPEN_TAG_SLASH : g(l2, i2) ? (C(r3, "No whitespace between attributes"), r3.attribName = i2, r3.attribValue = "", r3.state = _.ATTRIB_NAME) : C(r3, "Invalid attribute name");
                  continue;
                case _.ATTRIB_VALUE_UNQUOTED:
                  if (!w(i2)) {
                    "&" === i2 ? r3.state = _.ATTRIB_VALUE_ENTITY_U : r3.attribValue += i2;
                    continue;
                  }
                  L(r3), ">" === i2 ? D(r3) : r3.state = _.ATTRIB;
                  continue;
                case _.CLOSE_TAG:
                  if (r3.tagName) ">" === i2 ? P(r3) : g(h, i2) ? r3.tagName += i2 : r3.script ? (r3.script += "</" + r3.tagName, r3.tagName = "", r3.state = _.SCRIPT) : (f(i2) || C(r3, "Invalid tagname in closing tag"), r3.state = _.CLOSE_TAG_SAW_WHITE);
                  else {
                    if (f(i2)) continue;
                    y(l2, i2) ? r3.script ? (r3.script += "</" + i2, r3.state = _.SCRIPT) : C(r3, "Invalid tagname in closing tag.") : r3.tagName = i2;
                  }
                  continue;
                case _.CLOSE_TAG_SAW_WHITE:
                  if (f(i2)) continue;
                  ">" === i2 ? P(r3) : C(r3, "Invalid characters in closing tag");
                  continue;
                case _.TEXT_ENTITY:
                case _.ATTRIB_VALUE_ENTITY_Q:
                case _.ATTRIB_VALUE_ENTITY_U:
                  var c2, u2;
                  switch (r3.state) {
                    case _.TEXT_ENTITY:
                      c2 = _.TEXT, u2 = "textNode";
                      break;
                    case _.ATTRIB_VALUE_ENTITY_Q:
                      c2 = _.ATTRIB_VALUE_QUOTED, u2 = "attribValue";
                      break;
                    case _.ATTRIB_VALUE_ENTITY_U:
                      c2 = _.ATTRIB_VALUE_UNQUOTED, u2 = "attribValue";
                  }
                  ";" === i2 ? (r3[u2] += F(r3), r3.entity = "", r3.state = c2) : g(r3.entity.length ? d : p, i2) ? r3.entity += i2 : (C(r3, "Invalid character in entity name"), r3[u2] += "&" + r3.entity + i2, r3.entity = "", r3.state = c2);
                  continue;
                default:
                  throw new Error(r3, "Unknown state: " + r3.state);
              }
              return r3.position >= r3.bufferCheckPosition && function(t5) {
                for (var r4 = Math.max(e3.MAX_BUFFER_LENGTH, 10), s3 = 0, i3 = 0, o3 = n2.length; i3 < o3; i3++) {
                  var a3 = t5[n2[i3]].length;
                  if (a3 > r4) switch (n2[i3]) {
                    case "textNode":
                      S(t5);
                      break;
                    case "cdata":
                      A(t5, "oncdata", t5.cdata), t5.cdata = "";
                      break;
                    case "script":
                      A(t5, "onscript", t5.script), t5.script = "";
                      break;
                    default:
                      R(t5, "Max buffer length exceeded: " + n2[i3]);
                  }
                  s3 = Math.max(s3, a3);
                }
                var c3 = e3.MAX_BUFFER_LENGTH - s3;
                t5.bufferCheckPosition = c3 + t5.position;
              }(r3), r3;
            }, resume: function() {
              return this.error = null, this;
            }, close: function() {
              return this.write(null);
            }, flush: function() {
              var e4;
              S(e4 = this), "" !== e4.cdata && (A(e4, "oncdata", e4.cdata), e4.cdata = ""), "" !== e4.script && (A(e4, "onscript", e4.script), e4.script = "");
            } };
            try {
              t3 = r2(2830).Stream;
            } catch (e4) {
              t3 = function() {
              };
            }
            var i = e3.EVENTS.filter(function(e4) {
              return "error" !== e4 && "end" !== e4;
            });
            function o(e4, r3) {
              if (!(this instanceof o)) return new o(e4, r3);
              t3.apply(this), this._parser = new s(e4, r3), this.writable = true, this.readable = true;
              var n3 = this;
              this._parser.onend = function() {
                n3.emit("end");
              }, this._parser.onerror = function(e5) {
                n3.emit("error", e5), n3._parser.error = null;
              }, this._decoder = null, i.forEach(function(e5) {
                Object.defineProperty(n3, "on" + e5, { get: function() {
                  return n3._parser["on" + e5];
                }, set: function(t4) {
                  if (!t4) return n3.removeAllListeners(e5), n3._parser["on" + e5] = t4, t4;
                  n3.on(e5, t4);
                }, enumerable: true, configurable: false });
              });
            }
            o.prototype = Object.create(t3.prototype, { constructor: { value: o } }), o.prototype.write = function(e4) {
              if ("function" == typeof Buffer && "function" == typeof Buffer.isBuffer && Buffer.isBuffer(e4)) {
                if (!this._decoder) {
                  var t4 = r2(2553).s;
                  this._decoder = new t4("utf8");
                }
                e4 = this._decoder.write(e4);
              }
              return this._parser.write(e4.toString()), this.emit("data", e4), true;
            }, o.prototype.end = function(e4) {
              return e4 && e4.length && this.write(e4), this._parser.end(), true;
            }, o.prototype.on = function(e4, r3) {
              var n3 = this;
              return n3._parser["on" + e4] || -1 === i.indexOf(e4) || (n3._parser["on" + e4] = function() {
                var t4 = 1 === arguments.length ? [arguments[0]] : Array.apply(null, arguments);
                t4.splice(0, 0, e4), n3.emit.apply(n3, t4);
              }), t3.prototype.on.call(n3, e4, r3);
            };
            var a = "http://www.w3.org/XML/1998/namespace", c = "http://www.w3.org/2000/xmlns/", u = { xml: a, xmlns: c }, l2 = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/, h = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/, p = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/, d = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
            function f(e4) {
              return " " === e4 || "\n" === e4 || "\r" === e4 || "	" === e4;
            }
            function m(e4) {
              return '"' === e4 || "'" === e4;
            }
            function w(e4) {
              return ">" === e4 || f(e4);
            }
            function g(e4, t4) {
              return e4.test(t4);
            }
            function y(e4, t4) {
              return !g(e4, t4);
            }
            var b, x, v, _ = 0;
            for (var E in e3.STATE = { BEGIN: _++, BEGIN_WHITESPACE: _++, TEXT: _++, TEXT_ENTITY: _++, OPEN_WAKA: _++, SGML_DECL: _++, SGML_DECL_QUOTED: _++, DOCTYPE: _++, DOCTYPE_QUOTED: _++, DOCTYPE_DTD: _++, DOCTYPE_DTD_QUOTED: _++, COMMENT_STARTING: _++, COMMENT: _++, COMMENT_ENDING: _++, COMMENT_ENDED: _++, CDATA: _++, CDATA_ENDING: _++, CDATA_ENDING_2: _++, PROC_INST: _++, PROC_INST_BODY: _++, PROC_INST_ENDING: _++, OPEN_TAG: _++, OPEN_TAG_SLASH: _++, ATTRIB: _++, ATTRIB_NAME: _++, ATTRIB_NAME_SAW_WHITE: _++, ATTRIB_VALUE: _++, ATTRIB_VALUE_QUOTED: _++, ATTRIB_VALUE_CLOSED: _++, ATTRIB_VALUE_UNQUOTED: _++, ATTRIB_VALUE_ENTITY_Q: _++, ATTRIB_VALUE_ENTITY_U: _++, CLOSE_TAG: _++, CLOSE_TAG_SAW_WHITE: _++, SCRIPT: _++, SCRIPT_ENDING: _++ }, e3.XML_ENTITIES = { amp: "&", gt: ">", lt: "<", quot: '"', apos: "'" }, e3.ENTITIES = { amp: "&", gt: ">", lt: "<", quot: '"', apos: "'", AElig: 198, Aacute: 193, Acirc: 194, Agrave: 192, Aring: 197, Atilde: 195, Auml: 196, Ccedil: 199, ETH: 208, Eacute: 201, Ecirc: 202, Egrave: 200, Euml: 203, Iacute: 205, Icirc: 206, Igrave: 204, Iuml: 207, Ntilde: 209, Oacute: 211, Ocirc: 212, Ograve: 210, Oslash: 216, Otilde: 213, Ouml: 214, THORN: 222, Uacute: 218, Ucirc: 219, Ugrave: 217, Uuml: 220, Yacute: 221, aacute: 225, acirc: 226, aelig: 230, agrave: 224, aring: 229, atilde: 227, auml: 228, ccedil: 231, eacute: 233, ecirc: 234, egrave: 232, eth: 240, euml: 235, iacute: 237, icirc: 238, igrave: 236, iuml: 239, ntilde: 241, oacute: 243, ocirc: 244, ograve: 242, oslash: 248, otilde: 245, ouml: 246, szlig: 223, thorn: 254, uacute: 250, ucirc: 251, ugrave: 249, uuml: 252, yacute: 253, yuml: 255, copy: 169, reg: 174, nbsp: 160, iexcl: 161, cent: 162, pound: 163, curren: 164, yen: 165, brvbar: 166, sect: 167, uml: 168, ordf: 170, laquo: 171, not: 172, shy: 173, macr: 175, deg: 176, plusmn: 177, sup1: 185, sup2: 178, sup3: 179, acute: 180, micro: 181, para: 182, middot: 183, cedil: 184, ordm: 186, raquo: 187, frac14: 188, frac12: 189, frac34: 190, iquest: 191, times: 215, divide: 247, OElig: 338, oelig: 339, Scaron: 352, scaron: 353, Yuml: 376, fnof: 402, circ: 710, tilde: 732, Alpha: 913, Beta: 914, Gamma: 915, Delta: 916, Epsilon: 917, Zeta: 918, Eta: 919, Theta: 920, Iota: 921, Kappa: 922, Lambda: 923, Mu: 924, Nu: 925, Xi: 926, Omicron: 927, Pi: 928, Rho: 929, Sigma: 931, Tau: 932, Upsilon: 933, Phi: 934, Chi: 935, Psi: 936, Omega: 937, alpha: 945, beta: 946, gamma: 947, delta: 948, epsilon: 949, zeta: 950, eta: 951, theta: 952, iota: 953, kappa: 954, lambda: 955, mu: 956, nu: 957, xi: 958, omicron: 959, pi: 960, rho: 961, sigmaf: 962, sigma: 963, tau: 964, upsilon: 965, phi: 966, chi: 967, psi: 968, omega: 969, thetasym: 977, upsih: 978, piv: 982, ensp: 8194, emsp: 8195, thinsp: 8201, zwnj: 8204, zwj: 8205, lrm: 8206, rlm: 8207, ndash: 8211, mdash: 8212, lsquo: 8216, rsquo: 8217, sbquo: 8218, ldquo: 8220, rdquo: 8221, bdquo: 8222, dagger: 8224, Dagger: 8225, bull: 8226, hellip: 8230, permil: 8240, prime: 8242, Prime: 8243, lsaquo: 8249, rsaquo: 8250, oline: 8254, frasl: 8260, euro: 8364, image: 8465, weierp: 8472, real: 8476, trade: 8482, alefsym: 8501, larr: 8592, uarr: 8593, rarr: 8594, darr: 8595, harr: 8596, crarr: 8629, lArr: 8656, uArr: 8657, rArr: 8658, dArr: 8659, hArr: 8660, forall: 8704, part: 8706, exist: 8707, empty: 8709, nabla: 8711, isin: 8712, notin: 8713, ni: 8715, prod: 8719, sum: 8721, minus: 8722, lowast: 8727, radic: 8730, prop: 8733, infin: 8734, ang: 8736, and: 8743, or: 8744, cap: 8745, cup: 8746, int: 8747, there4: 8756, sim: 8764, cong: 8773, asymp: 8776, ne: 8800, equiv: 8801, le: 8804, ge: 8805, sub: 8834, sup: 8835, nsub: 8836, sube: 8838, supe: 8839, oplus: 8853, otimes: 8855, perp: 8869, sdot: 8901, lceil: 8968, rceil: 8969, lfloor: 8970, rfloor: 8971, lang: 9001, rang: 9002, loz: 9674, spades: 9824, clubs: 9827, hearts: 9829, diams: 9830 }, Object.keys(e3.ENTITIES).forEach(function(t4) {
              var r3 = e3.ENTITIES[t4], n3 = "number" == typeof r3 ? String.fromCharCode(r3) : r3;
              e3.ENTITIES[t4] = n3;
            }), e3.STATE) e3.STATE[e3.STATE[E]] = E;
            function T(e4, t4, r3) {
              e4[t4] && e4[t4](r3);
            }
            function A(e4, t4, r3) {
              e4.textNode && S(e4), T(e4, t4, r3);
            }
            function S(e4) {
              e4.textNode = I(e4.opt, e4.textNode), e4.textNode && T(e4, "ontext", e4.textNode), e4.textNode = "";
            }
            function I(e4, t4) {
              return e4.trim && (t4 = t4.trim()), e4.normalize && (t4 = t4.replace(/\s+/g, " ")), t4;
            }
            function R(e4, t4) {
              return S(e4), e4.trackPosition && (t4 += "\nLine: " + e4.line + "\nColumn: " + e4.column + "\nChar: " + e4.c), t4 = new Error(t4), e4.error = t4, T(e4, "onerror", t4), e4;
            }
            function N(e4) {
              return e4.sawRoot && !e4.closedRoot && C(e4, "Unclosed root tag"), e4.state !== _.BEGIN && e4.state !== _.BEGIN_WHITESPACE && e4.state !== _.TEXT && R(e4, "Unexpected end"), S(e4), e4.c = "", e4.closed = true, T(e4, "onend"), s.call(e4, e4.strict, e4.opt), e4;
            }
            function C(e4, t4) {
              if ("object" != typeof e4 || !(e4 instanceof s)) throw new Error("bad call to strictFail");
              e4.strict && R(e4, t4);
            }
            function O(e4) {
              e4.strict || (e4.tagName = e4.tagName[e4.looseCase]());
              var t4 = e4.tags[e4.tags.length - 1] || e4, r3 = e4.tag = { name: e4.tagName, attributes: {} };
              e4.opt.xmlns && (r3.ns = t4.ns), e4.attribList.length = 0, A(e4, "onopentagstart", r3);
            }
            function k(e4, t4) {
              var r3 = e4.indexOf(":") < 0 ? ["", e4] : e4.split(":"), n3 = r3[0], s2 = r3[1];
              return t4 && "xmlns" === e4 && (n3 = "xmlns", s2 = ""), { prefix: n3, local: s2 };
            }
            function L(e4) {
              if (e4.strict || (e4.attribName = e4.attribName[e4.looseCase]()), -1 !== e4.attribList.indexOf(e4.attribName) || e4.tag.attributes.hasOwnProperty(e4.attribName)) e4.attribName = e4.attribValue = "";
              else {
                if (e4.opt.xmlns) {
                  var t4 = k(e4.attribName, true), r3 = t4.prefix, n3 = t4.local;
                  if ("xmlns" === r3) if ("xml" === n3 && e4.attribValue !== a) C(e4, "xml: prefix must be bound to " + a + "\nActual: " + e4.attribValue);
                  else if ("xmlns" === n3 && e4.attribValue !== c) C(e4, "xmlns: prefix must be bound to " + c + "\nActual: " + e4.attribValue);
                  else {
                    var s2 = e4.tag, i2 = e4.tags[e4.tags.length - 1] || e4;
                    s2.ns === i2.ns && (s2.ns = Object.create(i2.ns)), s2.ns[n3] = e4.attribValue;
                  }
                  e4.attribList.push([e4.attribName, e4.attribValue]);
                } else e4.tag.attributes[e4.attribName] = e4.attribValue, A(e4, "onattribute", { name: e4.attribName, value: e4.attribValue });
                e4.attribName = e4.attribValue = "";
              }
            }
            function D(e4, t4) {
              if (e4.opt.xmlns) {
                var r3 = e4.tag, n3 = k(e4.tagName);
                r3.prefix = n3.prefix, r3.local = n3.local, r3.uri = r3.ns[n3.prefix] || "", r3.prefix && !r3.uri && (C(e4, "Unbound namespace prefix: " + JSON.stringify(e4.tagName)), r3.uri = n3.prefix);
                var s2 = e4.tags[e4.tags.length - 1] || e4;
                r3.ns && s2.ns !== r3.ns && Object.keys(r3.ns).forEach(function(t5) {
                  A(e4, "onopennamespace", { prefix: t5, uri: r3.ns[t5] });
                });
                for (var i2 = 0, o2 = e4.attribList.length; i2 < o2; i2++) {
                  var a2 = e4.attribList[i2], c2 = a2[0], u2 = a2[1], l3 = k(c2, true), h2 = l3.prefix, p2 = l3.local, d2 = "" === h2 ? "" : r3.ns[h2] || "", f2 = { name: c2, value: u2, prefix: h2, local: p2, uri: d2 };
                  h2 && "xmlns" !== h2 && !d2 && (C(e4, "Unbound namespace prefix: " + JSON.stringify(h2)), f2.uri = h2), e4.tag.attributes[c2] = f2, A(e4, "onattribute", f2);
                }
                e4.attribList.length = 0;
              }
              e4.tag.isSelfClosing = !!t4, e4.sawRoot = true, e4.tags.push(e4.tag), A(e4, "onopentag", e4.tag), t4 || (e4.noscript || "script" !== e4.tagName.toLowerCase() ? e4.state = _.TEXT : e4.state = _.SCRIPT, e4.tag = null, e4.tagName = ""), e4.attribName = e4.attribValue = "", e4.attribList.length = 0;
            }
            function P(e4) {
              if (!e4.tagName) return C(e4, "Weird empty close tag."), e4.textNode += "</>", void (e4.state = _.TEXT);
              if (e4.script) {
                if ("script" !== e4.tagName) return e4.script += "</" + e4.tagName + ">", e4.tagName = "", void (e4.state = _.SCRIPT);
                A(e4, "onscript", e4.script), e4.script = "";
              }
              var t4 = e4.tags.length, r3 = e4.tagName;
              e4.strict || (r3 = r3[e4.looseCase]());
              for (var n3 = r3; t4-- && e4.tags[t4].name !== n3; ) C(e4, "Unexpected close tag");
              if (t4 < 0) return C(e4, "Unmatched closing tag: " + e4.tagName), e4.textNode += "</" + e4.tagName + ">", void (e4.state = _.TEXT);
              e4.tagName = r3;
              for (var s2 = e4.tags.length; s2-- > t4; ) {
                var i2 = e4.tag = e4.tags.pop();
                e4.tagName = e4.tag.name, A(e4, "onclosetag", e4.tagName);
                var o2 = {};
                for (var a2 in i2.ns) o2[a2] = i2.ns[a2];
                var c2 = e4.tags[e4.tags.length - 1] || e4;
                e4.opt.xmlns && i2.ns !== c2.ns && Object.keys(i2.ns).forEach(function(t5) {
                  var r4 = i2.ns[t5];
                  A(e4, "onclosenamespace", { prefix: t5, uri: r4 });
                });
              }
              0 === t4 && (e4.closedRoot = true), e4.tagName = e4.attribValue = e4.attribName = "", e4.attribList.length = 0, e4.state = _.TEXT;
            }
            function F(e4) {
              var t4, r3 = e4.entity, n3 = r3.toLowerCase(), s2 = "";
              return e4.ENTITIES[r3] ? e4.ENTITIES[r3] : e4.ENTITIES[n3] ? e4.ENTITIES[n3] : ("#" === (r3 = n3).charAt(0) && ("x" === r3.charAt(1) ? (r3 = r3.slice(2), s2 = (t4 = parseInt(r3, 16)).toString(16)) : (r3 = r3.slice(1), s2 = (t4 = parseInt(r3, 10)).toString(10))), r3 = r3.replace(/^0+/, ""), isNaN(t4) || s2.toLowerCase() !== r3 ? (C(e4, "Invalid character entity"), "&" + e4.entity + ";") : String.fromCodePoint(t4));
            }
            function B(e4, t4) {
              "<" === t4 ? (e4.state = _.OPEN_WAKA, e4.startTagPosition = e4.position) : f(t4) || (C(e4, "Non-whitespace before first tag."), e4.textNode = t4, e4.state = _.TEXT);
            }
            function M(e4, t4) {
              var r3 = "";
              return t4 < e4.length && (r3 = e4.charAt(t4)), r3;
            }
            _ = e3.STATE, String.fromCodePoint || (b = String.fromCharCode, x = Math.floor, v = function() {
              var e4, t4, r3 = 16384, n3 = [], s2 = -1, i2 = arguments.length;
              if (!i2) return "";
              for (var o2 = ""; ++s2 < i2; ) {
                var a2 = Number(arguments[s2]);
                if (!isFinite(a2) || a2 < 0 || a2 > 1114111 || x(a2) !== a2) throw RangeError("Invalid code point: " + a2);
                a2 <= 65535 ? n3.push(a2) : (e4 = 55296 + ((a2 -= 65536) >> 10), t4 = a2 % 1024 + 56320, n3.push(e4, t4)), (s2 + 1 === i2 || n3.length > r3) && (o2 += b.apply(null, n3), n3.length = 0);
              }
              return o2;
            }, Object.defineProperty ? Object.defineProperty(String, "fromCodePoint", { value: v, configurable: true, writable: true }) : String.fromCodePoint = v);
          }(t2);
        }, 4889: function(e2, t2, r2) {
          var n2 = r2(4155);
          !function(e3, t3) {
            "use strict";
            if (!e3.setImmediate) {
              var r3, s, i, o, a, c = 1, u = {}, l2 = false, h = e3.document, p = Object.getPrototypeOf && Object.getPrototypeOf(e3);
              p = p && p.setTimeout ? p : e3, "[object process]" === {}.toString.call(e3.process) ? r3 = function(e4) {
                n2.nextTick(function() {
                  f(e4);
                });
              } : function() {
                if (e3.postMessage && !e3.importScripts) {
                  var t4 = true, r4 = e3.onmessage;
                  return e3.onmessage = function() {
                    t4 = false;
                  }, e3.postMessage("", "*"), e3.onmessage = r4, t4;
                }
              }() ? (o = "setImmediate$" + Math.random() + "$", a = function(t4) {
                t4.source === e3 && "string" == typeof t4.data && 0 === t4.data.indexOf(o) && f(+t4.data.slice(o.length));
              }, e3.addEventListener ? e3.addEventListener("message", a, false) : e3.attachEvent("onmessage", a), r3 = function(t4) {
                e3.postMessage(o + t4, "*");
              }) : e3.MessageChannel ? ((i = new MessageChannel()).port1.onmessage = function(e4) {
                f(e4.data);
              }, r3 = function(e4) {
                i.port2.postMessage(e4);
              }) : h && "onreadystatechange" in h.createElement("script") ? (s = h.documentElement, r3 = function(e4) {
                var t4 = h.createElement("script");
                t4.onreadystatechange = function() {
                  f(e4), t4.onreadystatechange = null, s.removeChild(t4), t4 = null;
                }, s.appendChild(t4);
              }) : r3 = function(e4) {
                setTimeout(f, 0, e4);
              }, p.setImmediate = function(e4) {
                "function" != typeof e4 && (e4 = new Function("" + e4));
                for (var t4 = new Array(arguments.length - 1), n3 = 0; n3 < t4.length; n3++) t4[n3] = arguments[n3 + 1];
                var s2 = { callback: e4, args: t4 };
                return u[c] = s2, r3(c), c++;
              }, p.clearImmediate = d;
            }
            function d(e4) {
              delete u[e4];
            }
            function f(e4) {
              if (l2) setTimeout(f, 0, e4);
              else {
                var t4 = u[e4];
                if (t4) {
                  l2 = true;
                  try {
                    !function(e5) {
                      var t5 = e5.callback, r4 = e5.args;
                      switch (r4.length) {
                        case 0:
                          t5();
                          break;
                        case 1:
                          t5(r4[0]);
                          break;
                        case 2:
                          t5(r4[0], r4[1]);
                          break;
                        case 3:
                          t5(r4[0], r4[1], r4[2]);
                          break;
                        default:
                          t5.apply(void 0, r4);
                      }
                    }(t4);
                  } finally {
                    d(e4), l2 = false;
                  }
                }
              }
            }
          }("undefined" == typeof self ? void 0 === r2.g ? this : r2.g : self);
        }, 2830: (e2, t2, r2) => {
          e2.exports = s;
          var n2 = r2(7187).EventEmitter;
          function s() {
            n2.call(this);
          }
          r2(5717)(s, n2), s.Readable = r2(6577), s.Writable = r2(323), s.Duplex = r2(8656), s.Transform = r2(4473), s.PassThrough = r2(2366), s.finished = r2(1086), s.pipeline = r2(6472), s.Stream = s, s.prototype.pipe = function(e3, t3) {
            var r3 = this;
            function s2(t4) {
              e3.writable && false === e3.write(t4) && r3.pause && r3.pause();
            }
            function i() {
              r3.readable && r3.resume && r3.resume();
            }
            r3.on("data", s2), e3.on("drain", i), e3._isStdio || t3 && false === t3.end || (r3.on("end", a), r3.on("close", c));
            var o = false;
            function a() {
              o || (o = true, e3.end());
            }
            function c() {
              o || (o = true, "function" == typeof e3.destroy && e3.destroy());
            }
            function u(e4) {
              if (l2(), 0 === n2.listenerCount(this, "error")) throw e4;
            }
            function l2() {
              r3.removeListener("data", s2), e3.removeListener("drain", i), r3.removeListener("end", a), r3.removeListener("close", c), r3.removeListener("error", u), e3.removeListener("error", u), r3.removeListener("end", l2), r3.removeListener("close", l2), e3.removeListener("close", l2);
            }
            return r3.on("error", u), e3.on("error", u), r3.on("end", l2), r3.on("close", l2), e3.on("close", l2), e3.emit("pipe", r3), e3;
          };
        }, 8106: (e2) => {
          "use strict";
          var t2 = {};
          function r2(e3, r3, n3) {
            n3 || (n3 = Error);
            var s = function(e4) {
              var t3, n4;
              function s2(t4, n5, s3) {
                return e4.call(this, function(e5, t5, n6) {
                  return "string" == typeof r3 ? r3 : r3(e5, t5, n6);
                }(t4, n5, s3)) || this;
              }
              return n4 = e4, (t3 = s2).prototype = Object.create(n4.prototype), t3.prototype.constructor = t3, t3.__proto__ = n4, s2;
            }(n3);
            s.prototype.name = n3.name, s.prototype.code = e3, t2[e3] = s;
          }
          function n2(e3, t3) {
            if (Array.isArray(e3)) {
              var r3 = e3.length;
              return e3 = e3.map(function(e4) {
                return String(e4);
              }), r3 > 2 ? "one of ".concat(t3, " ").concat(e3.slice(0, r3 - 1).join(", "), ", or ") + e3[r3 - 1] : 2 === r3 ? "one of ".concat(t3, " ").concat(e3[0], " or ").concat(e3[1]) : "of ".concat(t3, " ").concat(e3[0]);
            }
            return "of ".concat(t3, " ").concat(String(e3));
          }
          r2("ERR_INVALID_OPT_VALUE", function(e3, t3) {
            return 'The value "' + t3 + '" is invalid for option "' + e3 + '"';
          }, TypeError), r2("ERR_INVALID_ARG_TYPE", function(e3, t3, r3) {
            var s, i, o, a, c;
            if ("string" == typeof t3 && (i = "not ", t3.substr(0, i.length) === i) ? (s = "must not be", t3 = t3.replace(/^not /, "")) : s = "must be", function(e4, t4, r4) {
              return (void 0 === r4 || r4 > e4.length) && (r4 = e4.length), e4.substring(r4 - t4.length, r4) === t4;
            }(e3, " argument")) o = "The ".concat(e3, " ").concat(s, " ").concat(n2(t3, "type"));
            else {
              var u = ("number" != typeof c && (c = 0), c + ".".length > (a = e3).length || -1 === a.indexOf(".", c) ? "argument" : "property");
              o = 'The "'.concat(e3, '" ').concat(u, " ").concat(s, " ").concat(n2(t3, "type"));
            }
            return o + ". Received type ".concat(typeof r3);
          }, TypeError), r2("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF"), r2("ERR_METHOD_NOT_IMPLEMENTED", function(e3) {
            return "The " + e3 + " method is not implemented";
          }), r2("ERR_STREAM_PREMATURE_CLOSE", "Premature close"), r2("ERR_STREAM_DESTROYED", function(e3) {
            return "Cannot call " + e3 + " after a stream was destroyed";
          }), r2("ERR_MULTIPLE_CALLBACK", "Callback called multiple times"), r2("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable"), r2("ERR_STREAM_WRITE_AFTER_END", "write after end"), r2("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError), r2("ERR_UNKNOWN_ENCODING", function(e3) {
            return "Unknown encoding: " + e3;
          }, TypeError), r2("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event"), e2.exports.q = t2;
        }, 8656: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(4155), s = Object.keys || function(e3) {
            var t3 = [];
            for (var r3 in e3) t3.push(r3);
            return t3;
          };
          e2.exports = l2;
          var i = r2(6577), o = r2(323);
          r2(5717)(l2, i);
          for (var a = s(o.prototype), c = 0; c < a.length; c++) {
            var u = a[c];
            l2.prototype[u] || (l2.prototype[u] = o.prototype[u]);
          }
          function l2(e3) {
            if (!(this instanceof l2)) return new l2(e3);
            i.call(this, e3), o.call(this, e3), this.allowHalfOpen = true, e3 && (false === e3.readable && (this.readable = false), false === e3.writable && (this.writable = false), false === e3.allowHalfOpen && (this.allowHalfOpen = false, this.once("end", h)));
          }
          function h() {
            this._writableState.ended || n2.nextTick(p, this);
          }
          function p(e3) {
            e3.end();
          }
          Object.defineProperty(l2.prototype, "writableHighWaterMark", { enumerable: false, get: function() {
            return this._writableState.highWaterMark;
          } }), Object.defineProperty(l2.prototype, "writableBuffer", { enumerable: false, get: function() {
            return this._writableState && this._writableState.getBuffer();
          } }), Object.defineProperty(l2.prototype, "writableLength", { enumerable: false, get: function() {
            return this._writableState.length;
          } }), Object.defineProperty(l2.prototype, "destroyed", { enumerable: false, get: function() {
            return void 0 !== this._readableState && void 0 !== this._writableState && this._readableState.destroyed && this._writableState.destroyed;
          }, set: function(e3) {
            void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed = e3, this._writableState.destroyed = e3);
          } });
        }, 2366: (e2, t2, r2) => {
          "use strict";
          e2.exports = s;
          var n2 = r2(4473);
          function s(e3) {
            if (!(this instanceof s)) return new s(e3);
            n2.call(this, e3);
          }
          r2(5717)(s, n2), s.prototype._transform = function(e3, t3, r3) {
            r3(null, e3);
          };
        }, 6577: (e2, t2, r2) => {
          "use strict";
          var n2, s = r2(4155);
          e2.exports = A, A.ReadableState = T, r2(7187).EventEmitter;
          var i, o = function(e3, t3) {
            return e3.listeners(t3).length;
          }, a = r2(3194), c = r2(8764).Buffer, u = r2.g.Uint8Array || function() {
          }, l2 = r2(5575);
          i = l2 && l2.debuglog ? l2.debuglog("stream") : function() {
          };
          var h, p, d, f = r2(9686), m = r2(1029), w = r2(94).getHighWaterMark, g = r2(8106).q, y = g.ERR_INVALID_ARG_TYPE, b = g.ERR_STREAM_PUSH_AFTER_EOF, x = g.ERR_METHOD_NOT_IMPLEMENTED, v = g.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
          r2(5717)(A, a);
          var _ = m.errorOrDestroy, E = ["error", "close", "destroy", "pause", "resume"];
          function T(e3, t3, s2) {
            n2 = n2 || r2(8656), e3 = e3 || {}, "boolean" != typeof s2 && (s2 = t3 instanceof n2), this.objectMode = !!e3.objectMode, s2 && (this.objectMode = this.objectMode || !!e3.readableObjectMode), this.highWaterMark = w(this, e3, "readableHighWaterMark", s2), this.buffer = new f(), this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = false, this.endEmitted = false, this.reading = false, this.sync = true, this.needReadable = false, this.emittedReadable = false, this.readableListening = false, this.resumeScheduled = false, this.paused = true, this.emitClose = false !== e3.emitClose, this.autoDestroy = !!e3.autoDestroy, this.destroyed = false, this.defaultEncoding = e3.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = false, this.decoder = null, this.encoding = null, e3.encoding && (h || (h = r2(2553).s), this.decoder = new h(e3.encoding), this.encoding = e3.encoding);
          }
          function A(e3) {
            if (n2 = n2 || r2(8656), !(this instanceof A)) return new A(e3);
            var t3 = this instanceof n2;
            this._readableState = new T(e3, this, t3), this.readable = true, e3 && ("function" == typeof e3.read && (this._read = e3.read), "function" == typeof e3.destroy && (this._destroy = e3.destroy)), a.call(this);
          }
          function S(e3, t3, r3, n3, s2) {
            i("readableAddChunk", t3);
            var o2, a2 = e3._readableState;
            if (null === t3) a2.reading = false, function(e4, t4) {
              if (i("onEofChunk"), !t4.ended) {
                if (t4.decoder) {
                  var r4 = t4.decoder.end();
                  r4 && r4.length && (t4.buffer.push(r4), t4.length += t4.objectMode ? 1 : r4.length);
                }
                t4.ended = true, t4.sync ? C(e4) : (t4.needReadable = false, t4.emittedReadable || (t4.emittedReadable = true, O(e4)));
              }
            }(e3, a2);
            else if (s2 || (o2 = function(e4, t4) {
              var r4, n4;
              return n4 = t4, c.isBuffer(n4) || n4 instanceof u || "string" == typeof t4 || void 0 === t4 || e4.objectMode || (r4 = new y("chunk", ["string", "Buffer", "Uint8Array"], t4)), r4;
            }(a2, t3)), o2) _(e3, o2);
            else if (a2.objectMode || t3 && t3.length > 0) if ("string" == typeof t3 || a2.objectMode || Object.getPrototypeOf(t3) === c.prototype || (t3 = function(e4) {
              return c.from(e4);
            }(t3)), n3) a2.endEmitted ? _(e3, new v()) : I(e3, a2, t3, true);
            else if (a2.ended) _(e3, new b());
            else {
              if (a2.destroyed) return false;
              a2.reading = false, a2.decoder && !r3 ? (t3 = a2.decoder.write(t3), a2.objectMode || 0 !== t3.length ? I(e3, a2, t3, false) : k(e3, a2)) : I(e3, a2, t3, false);
            }
            else n3 || (a2.reading = false, k(e3, a2));
            return !a2.ended && (a2.length < a2.highWaterMark || 0 === a2.length);
          }
          function I(e3, t3, r3, n3) {
            t3.flowing && 0 === t3.length && !t3.sync ? (t3.awaitDrain = 0, e3.emit("data", r3)) : (t3.length += t3.objectMode ? 1 : r3.length, n3 ? t3.buffer.unshift(r3) : t3.buffer.push(r3), t3.needReadable && C(e3)), k(e3, t3);
          }
          Object.defineProperty(A.prototype, "destroyed", { enumerable: false, get: function() {
            return void 0 !== this._readableState && this._readableState.destroyed;
          }, set: function(e3) {
            this._readableState && (this._readableState.destroyed = e3);
          } }), A.prototype.destroy = m.destroy, A.prototype._undestroy = m.undestroy, A.prototype._destroy = function(e3, t3) {
            t3(e3);
          }, A.prototype.push = function(e3, t3) {
            var r3, n3 = this._readableState;
            return n3.objectMode ? r3 = true : "string" == typeof e3 && ((t3 = t3 || n3.defaultEncoding) !== n3.encoding && (e3 = c.from(e3, t3), t3 = ""), r3 = true), S(this, e3, t3, false, r3);
          }, A.prototype.unshift = function(e3) {
            return S(this, e3, null, true, false);
          }, A.prototype.isPaused = function() {
            return false === this._readableState.flowing;
          }, A.prototype.setEncoding = function(e3) {
            h || (h = r2(2553).s);
            var t3 = new h(e3);
            this._readableState.decoder = t3, this._readableState.encoding = this._readableState.decoder.encoding;
            for (var n3 = this._readableState.buffer.head, s2 = ""; null !== n3; ) s2 += t3.write(n3.data), n3 = n3.next;
            return this._readableState.buffer.clear(), "" !== s2 && this._readableState.buffer.push(s2), this._readableState.length = s2.length, this;
          };
          var R = 1073741824;
          function N(e3, t3) {
            return e3 <= 0 || 0 === t3.length && t3.ended ? 0 : t3.objectMode ? 1 : e3 != e3 ? t3.flowing && t3.length ? t3.buffer.head.data.length : t3.length : (e3 > t3.highWaterMark && (t3.highWaterMark = function(e4) {
              return e4 >= R ? e4 = R : (e4--, e4 |= e4 >>> 1, e4 |= e4 >>> 2, e4 |= e4 >>> 4, e4 |= e4 >>> 8, e4 |= e4 >>> 16, e4++), e4;
            }(e3)), e3 <= t3.length ? e3 : t3.ended ? t3.length : (t3.needReadable = true, 0));
          }
          function C(e3) {
            var t3 = e3._readableState;
            i("emitReadable", t3.needReadable, t3.emittedReadable), t3.needReadable = false, t3.emittedReadable || (i("emitReadable", t3.flowing), t3.emittedReadable = true, s.nextTick(O, e3));
          }
          function O(e3) {
            var t3 = e3._readableState;
            i("emitReadable_", t3.destroyed, t3.length, t3.ended), t3.destroyed || !t3.length && !t3.ended || (e3.emit("readable"), t3.emittedReadable = false), t3.needReadable = !t3.flowing && !t3.ended && t3.length <= t3.highWaterMark, B(e3);
          }
          function k(e3, t3) {
            t3.readingMore || (t3.readingMore = true, s.nextTick(L, e3, t3));
          }
          function L(e3, t3) {
            for (; !t3.reading && !t3.ended && (t3.length < t3.highWaterMark || t3.flowing && 0 === t3.length); ) {
              var r3 = t3.length;
              if (i("maybeReadMore read 0"), e3.read(0), r3 === t3.length) break;
            }
            t3.readingMore = false;
          }
          function D(e3) {
            var t3 = e3._readableState;
            t3.readableListening = e3.listenerCount("readable") > 0, t3.resumeScheduled && !t3.paused ? t3.flowing = true : e3.listenerCount("data") > 0 && e3.resume();
          }
          function P(e3) {
            i("readable nexttick read 0"), e3.read(0);
          }
          function F(e3, t3) {
            i("resume", t3.reading), t3.reading || e3.read(0), t3.resumeScheduled = false, e3.emit("resume"), B(e3), t3.flowing && !t3.reading && e3.read(0);
          }
          function B(e3) {
            var t3 = e3._readableState;
            for (i("flow", t3.flowing); t3.flowing && null !== e3.read(); ) ;
          }
          function M(e3, t3) {
            return 0 === t3.length ? null : (t3.objectMode ? r3 = t3.buffer.shift() : !e3 || e3 >= t3.length ? (r3 = t3.decoder ? t3.buffer.join("") : 1 === t3.buffer.length ? t3.buffer.first() : t3.buffer.concat(t3.length), t3.buffer.clear()) : r3 = t3.buffer.consume(e3, t3.decoder), r3);
            var r3;
          }
          function U(e3) {
            var t3 = e3._readableState;
            i("endReadable", t3.endEmitted), t3.endEmitted || (t3.ended = true, s.nextTick(H, t3, e3));
          }
          function H(e3, t3) {
            if (i("endReadableNT", e3.endEmitted, e3.length), !e3.endEmitted && 0 === e3.length && (e3.endEmitted = true, t3.readable = false, t3.emit("end"), e3.autoDestroy)) {
              var r3 = t3._writableState;
              (!r3 || r3.autoDestroy && r3.finished) && t3.destroy();
            }
          }
          function z(e3, t3) {
            for (var r3 = 0, n3 = e3.length; r3 < n3; r3++) if (e3[r3] === t3) return r3;
            return -1;
          }
          A.prototype.read = function(e3) {
            i("read", e3), e3 = parseInt(e3, 10);
            var t3 = this._readableState, r3 = e3;
            if (0 !== e3 && (t3.emittedReadable = false), 0 === e3 && t3.needReadable && ((0 !== t3.highWaterMark ? t3.length >= t3.highWaterMark : t3.length > 0) || t3.ended)) return i("read: emitReadable", t3.length, t3.ended), 0 === t3.length && t3.ended ? U(this) : C(this), null;
            if (0 === (e3 = N(e3, t3)) && t3.ended) return 0 === t3.length && U(this), null;
            var n3, s2 = t3.needReadable;
            return i("need readable", s2), (0 === t3.length || t3.length - e3 < t3.highWaterMark) && i("length less than watermark", s2 = true), t3.ended || t3.reading ? i("reading or ended", s2 = false) : s2 && (i("do read"), t3.reading = true, t3.sync = true, 0 === t3.length && (t3.needReadable = true), this._read(t3.highWaterMark), t3.sync = false, t3.reading || (e3 = N(r3, t3))), null === (n3 = e3 > 0 ? M(e3, t3) : null) ? (t3.needReadable = t3.length <= t3.highWaterMark, e3 = 0) : (t3.length -= e3, t3.awaitDrain = 0), 0 === t3.length && (t3.ended || (t3.needReadable = true), r3 !== e3 && t3.ended && U(this)), null !== n3 && this.emit("data", n3), n3;
          }, A.prototype._read = function(e3) {
            _(this, new x("_read()"));
          }, A.prototype.pipe = function(e3, t3) {
            var r3 = this, n3 = this._readableState;
            switch (n3.pipesCount) {
              case 0:
                n3.pipes = e3;
                break;
              case 1:
                n3.pipes = [n3.pipes, e3];
                break;
              default:
                n3.pipes.push(e3);
            }
            n3.pipesCount += 1, i("pipe count=%d opts=%j", n3.pipesCount, t3);
            var a2 = t3 && false === t3.end || e3 === s.stdout || e3 === s.stderr ? m2 : c2;
            function c2() {
              i("onend"), e3.end();
            }
            n3.endEmitted ? s.nextTick(a2) : r3.once("end", a2), e3.on("unpipe", function t4(s2, o2) {
              i("onunpipe"), s2 === r3 && o2 && false === o2.hasUnpiped && (o2.hasUnpiped = true, i("cleanup"), e3.removeListener("close", d2), e3.removeListener("finish", f2), e3.removeListener("drain", u2), e3.removeListener("error", p2), e3.removeListener("unpipe", t4), r3.removeListener("end", c2), r3.removeListener("end", m2), r3.removeListener("data", h2), l3 = true, !n3.awaitDrain || e3._writableState && !e3._writableState.needDrain || u2());
            });
            var u2 = /* @__PURE__ */ function(e4) {
              return function() {
                var t4 = e4._readableState;
                i("pipeOnDrain", t4.awaitDrain), t4.awaitDrain && t4.awaitDrain--, 0 === t4.awaitDrain && o(e4, "data") && (t4.flowing = true, B(e4));
              };
            }(r3);
            e3.on("drain", u2);
            var l3 = false;
            function h2(t4) {
              i("ondata");
              var s2 = e3.write(t4);
              i("dest.write", s2), false === s2 && ((1 === n3.pipesCount && n3.pipes === e3 || n3.pipesCount > 1 && -1 !== z(n3.pipes, e3)) && !l3 && (i("false write response, pause", n3.awaitDrain), n3.awaitDrain++), r3.pause());
            }
            function p2(t4) {
              i("onerror", t4), m2(), e3.removeListener("error", p2), 0 === o(e3, "error") && _(e3, t4);
            }
            function d2() {
              e3.removeListener("finish", f2), m2();
            }
            function f2() {
              i("onfinish"), e3.removeListener("close", d2), m2();
            }
            function m2() {
              i("unpipe"), r3.unpipe(e3);
            }
            return r3.on("data", h2), function(e4, t4, r4) {
              if ("function" == typeof e4.prependListener) return e4.prependListener(t4, r4);
              e4._events && e4._events.error ? Array.isArray(e4._events.error) ? e4._events.error.unshift(r4) : e4._events.error = [r4, e4._events.error] : e4.on(t4, r4);
            }(e3, "error", p2), e3.once("close", d2), e3.once("finish", f2), e3.emit("pipe", r3), n3.flowing || (i("pipe resume"), r3.resume()), e3;
          }, A.prototype.unpipe = function(e3) {
            var t3 = this._readableState, r3 = { hasUnpiped: false };
            if (0 === t3.pipesCount) return this;
            if (1 === t3.pipesCount) return e3 && e3 !== t3.pipes || (e3 || (e3 = t3.pipes), t3.pipes = null, t3.pipesCount = 0, t3.flowing = false, e3 && e3.emit("unpipe", this, r3)), this;
            if (!e3) {
              var n3 = t3.pipes, s2 = t3.pipesCount;
              t3.pipes = null, t3.pipesCount = 0, t3.flowing = false;
              for (var i2 = 0; i2 < s2; i2++) n3[i2].emit("unpipe", this, { hasUnpiped: false });
              return this;
            }
            var o2 = z(t3.pipes, e3);
            return -1 === o2 || (t3.pipes.splice(o2, 1), t3.pipesCount -= 1, 1 === t3.pipesCount && (t3.pipes = t3.pipes[0]), e3.emit("unpipe", this, r3)), this;
          }, A.prototype.on = function(e3, t3) {
            var r3 = a.prototype.on.call(this, e3, t3), n3 = this._readableState;
            return "data" === e3 ? (n3.readableListening = this.listenerCount("readable") > 0, false !== n3.flowing && this.resume()) : "readable" === e3 && (n3.endEmitted || n3.readableListening || (n3.readableListening = n3.needReadable = true, n3.flowing = false, n3.emittedReadable = false, i("on readable", n3.length, n3.reading), n3.length ? C(this) : n3.reading || s.nextTick(P, this))), r3;
          }, A.prototype.addListener = A.prototype.on, A.prototype.removeListener = function(e3, t3) {
            var r3 = a.prototype.removeListener.call(this, e3, t3);
            return "readable" === e3 && s.nextTick(D, this), r3;
          }, A.prototype.removeAllListeners = function(e3) {
            var t3 = a.prototype.removeAllListeners.apply(this, arguments);
            return "readable" !== e3 && void 0 !== e3 || s.nextTick(D, this), t3;
          }, A.prototype.resume = function() {
            var e3 = this._readableState;
            return e3.flowing || (i("resume"), e3.flowing = !e3.readableListening, function(e4, t3) {
              t3.resumeScheduled || (t3.resumeScheduled = true, s.nextTick(F, e4, t3));
            }(this, e3)), e3.paused = false, this;
          }, A.prototype.pause = function() {
            return i("call pause flowing=%j", this._readableState.flowing), false !== this._readableState.flowing && (i("pause"), this._readableState.flowing = false, this.emit("pause")), this._readableState.paused = true, this;
          }, A.prototype.wrap = function(e3) {
            var t3 = this, r3 = this._readableState, n3 = false;
            for (var s2 in e3.on("end", function() {
              if (i("wrapped end"), r3.decoder && !r3.ended) {
                var e4 = r3.decoder.end();
                e4 && e4.length && t3.push(e4);
              }
              t3.push(null);
            }), e3.on("data", function(s3) {
              i("wrapped data"), r3.decoder && (s3 = r3.decoder.write(s3)), r3.objectMode && null == s3 || (r3.objectMode || s3 && s3.length) && (t3.push(s3) || (n3 = true, e3.pause()));
            }), e3) void 0 === this[s2] && "function" == typeof e3[s2] && (this[s2] = /* @__PURE__ */ function(t4) {
              return function() {
                return e3[t4].apply(e3, arguments);
              };
            }(s2));
            for (var o2 = 0; o2 < E.length; o2++) e3.on(E[o2], this.emit.bind(this, E[o2]));
            return this._read = function(t4) {
              i("wrapped _read", t4), n3 && (n3 = false, e3.resume());
            }, this;
          }, "function" == typeof Symbol && (A.prototype[Symbol.asyncIterator] = function() {
            return void 0 === p && (p = r2(828)), p(this);
          }), Object.defineProperty(A.prototype, "readableHighWaterMark", { enumerable: false, get: function() {
            return this._readableState.highWaterMark;
          } }), Object.defineProperty(A.prototype, "readableBuffer", { enumerable: false, get: function() {
            return this._readableState && this._readableState.buffer;
          } }), Object.defineProperty(A.prototype, "readableFlowing", { enumerable: false, get: function() {
            return this._readableState.flowing;
          }, set: function(e3) {
            this._readableState && (this._readableState.flowing = e3);
          } }), A._fromList = M, Object.defineProperty(A.prototype, "readableLength", { enumerable: false, get: function() {
            return this._readableState.length;
          } }), "function" == typeof Symbol && (A.from = function(e3, t3) {
            return void 0 === d && (d = r2(1265)), d(A, e3, t3);
          });
        }, 4473: (e2, t2, r2) => {
          "use strict";
          e2.exports = l2;
          var n2 = r2(8106).q, s = n2.ERR_METHOD_NOT_IMPLEMENTED, i = n2.ERR_MULTIPLE_CALLBACK, o = n2.ERR_TRANSFORM_ALREADY_TRANSFORMING, a = n2.ERR_TRANSFORM_WITH_LENGTH_0, c = r2(8656);
          function u(e3, t3) {
            var r3 = this._transformState;
            r3.transforming = false;
            var n3 = r3.writecb;
            if (null === n3) return this.emit("error", new i());
            r3.writechunk = null, r3.writecb = null, null != t3 && this.push(t3), n3(e3);
            var s2 = this._readableState;
            s2.reading = false, (s2.needReadable || s2.length < s2.highWaterMark) && this._read(s2.highWaterMark);
          }
          function l2(e3) {
            if (!(this instanceof l2)) return new l2(e3);
            c.call(this, e3), this._transformState = { afterTransform: u.bind(this), needTransform: false, transforming: false, writecb: null, writechunk: null, writeencoding: null }, this._readableState.needReadable = true, this._readableState.sync = false, e3 && ("function" == typeof e3.transform && (this._transform = e3.transform), "function" == typeof e3.flush && (this._flush = e3.flush)), this.on("prefinish", h);
          }
          function h() {
            var e3 = this;
            "function" != typeof this._flush || this._readableState.destroyed ? p(this, null, null) : this._flush(function(t3, r3) {
              p(e3, t3, r3);
            });
          }
          function p(e3, t3, r3) {
            if (t3) return e3.emit("error", t3);
            if (null != r3 && e3.push(r3), e3._writableState.length) throw new a();
            if (e3._transformState.transforming) throw new o();
            return e3.push(null);
          }
          r2(5717)(l2, c), l2.prototype.push = function(e3, t3) {
            return this._transformState.needTransform = false, c.prototype.push.call(this, e3, t3);
          }, l2.prototype._transform = function(e3, t3, r3) {
            r3(new s("_transform()"));
          }, l2.prototype._write = function(e3, t3, r3) {
            var n3 = this._transformState;
            if (n3.writecb = r3, n3.writechunk = e3, n3.writeencoding = t3, !n3.transforming) {
              var s2 = this._readableState;
              (n3.needTransform || s2.needReadable || s2.length < s2.highWaterMark) && this._read(s2.highWaterMark);
            }
          }, l2.prototype._read = function(e3) {
            var t3 = this._transformState;
            null === t3.writechunk || t3.transforming ? t3.needTransform = true : (t3.transforming = true, this._transform(t3.writechunk, t3.writeencoding, t3.afterTransform));
          }, l2.prototype._destroy = function(e3, t3) {
            c.prototype._destroy.call(this, e3, function(e4) {
              t3(e4);
            });
          };
        }, 323: (e2, t2, r2) => {
          "use strict";
          var n2, s = r2(4155);
          function i(e3) {
            var t3 = this;
            this.next = null, this.entry = null, this.finish = function() {
              !function(e4, t4, r3) {
                var n3 = e4.entry;
                for (e4.entry = null; n3; ) {
                  var s2 = n3.callback;
                  t4.pendingcb--, s2(void 0), n3 = n3.next;
                }
                t4.corkedRequestsFree.next = e4;
              }(t3, e3);
            };
          }
          e2.exports = A, A.WritableState = T;
          var o, a = { deprecate: r2(4927) }, c = r2(3194), u = r2(8764).Buffer, l2 = r2.g.Uint8Array || function() {
          }, h = r2(1029), p = r2(94).getHighWaterMark, d = r2(8106).q, f = d.ERR_INVALID_ARG_TYPE, m = d.ERR_METHOD_NOT_IMPLEMENTED, w = d.ERR_MULTIPLE_CALLBACK, g = d.ERR_STREAM_CANNOT_PIPE, y = d.ERR_STREAM_DESTROYED, b = d.ERR_STREAM_NULL_VALUES, x = d.ERR_STREAM_WRITE_AFTER_END, v = d.ERR_UNKNOWN_ENCODING, _ = h.errorOrDestroy;
          function E() {
          }
          function T(e3, t3, o2) {
            n2 = n2 || r2(8656), e3 = e3 || {}, "boolean" != typeof o2 && (o2 = t3 instanceof n2), this.objectMode = !!e3.objectMode, o2 && (this.objectMode = this.objectMode || !!e3.writableObjectMode), this.highWaterMark = p(this, e3, "writableHighWaterMark", o2), this.finalCalled = false, this.needDrain = false, this.ending = false, this.ended = false, this.finished = false, this.destroyed = false;
            var a2 = false === e3.decodeStrings;
            this.decodeStrings = !a2, this.defaultEncoding = e3.defaultEncoding || "utf8", this.length = 0, this.writing = false, this.corked = 0, this.sync = true, this.bufferProcessing = false, this.onwrite = function(e4) {
              !function(e5, t4) {
                var r3 = e5._writableState, n3 = r3.sync, i2 = r3.writecb;
                if ("function" != typeof i2) throw new w();
                if (function(e6) {
                  e6.writing = false, e6.writecb = null, e6.length -= e6.writelen, e6.writelen = 0;
                }(r3), t4) !function(e6, t5, r4, n4, i3) {
                  --t5.pendingcb, r4 ? (s.nextTick(i3, n4), s.nextTick(O, e6, t5), e6._writableState.errorEmitted = true, _(e6, n4)) : (i3(n4), e6._writableState.errorEmitted = true, _(e6, n4), O(e6, t5));
                }(e5, r3, n3, t4, i2);
                else {
                  var o3 = N(r3) || e5.destroyed;
                  o3 || r3.corked || r3.bufferProcessing || !r3.bufferedRequest || R(e5, r3), n3 ? s.nextTick(I, e5, r3, o3, i2) : I(e5, r3, o3, i2);
                }
              }(t3, e4);
            }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = false, this.errorEmitted = false, this.emitClose = false !== e3.emitClose, this.autoDestroy = !!e3.autoDestroy, this.bufferedRequestCount = 0, this.corkedRequestsFree = new i(this);
          }
          function A(e3) {
            var t3 = this instanceof (n2 = n2 || r2(8656));
            if (!t3 && !o.call(A, this)) return new A(e3);
            this._writableState = new T(e3, this, t3), this.writable = true, e3 && ("function" == typeof e3.write && (this._write = e3.write), "function" == typeof e3.writev && (this._writev = e3.writev), "function" == typeof e3.destroy && (this._destroy = e3.destroy), "function" == typeof e3.final && (this._final = e3.final)), c.call(this);
          }
          function S(e3, t3, r3, n3, s2, i2, o2) {
            t3.writelen = n3, t3.writecb = o2, t3.writing = true, t3.sync = true, t3.destroyed ? t3.onwrite(new y("write")) : r3 ? e3._writev(s2, t3.onwrite) : e3._write(s2, i2, t3.onwrite), t3.sync = false;
          }
          function I(e3, t3, r3, n3) {
            r3 || function(e4, t4) {
              0 === t4.length && t4.needDrain && (t4.needDrain = false, e4.emit("drain"));
            }(e3, t3), t3.pendingcb--, n3(), O(e3, t3);
          }
          function R(e3, t3) {
            t3.bufferProcessing = true;
            var r3 = t3.bufferedRequest;
            if (e3._writev && r3 && r3.next) {
              var n3 = t3.bufferedRequestCount, s2 = new Array(n3), o2 = t3.corkedRequestsFree;
              o2.entry = r3;
              for (var a2 = 0, c2 = true; r3; ) s2[a2] = r3, r3.isBuf || (c2 = false), r3 = r3.next, a2 += 1;
              s2.allBuffers = c2, S(e3, t3, true, t3.length, s2, "", o2.finish), t3.pendingcb++, t3.lastBufferedRequest = null, o2.next ? (t3.corkedRequestsFree = o2.next, o2.next = null) : t3.corkedRequestsFree = new i(t3), t3.bufferedRequestCount = 0;
            } else {
              for (; r3; ) {
                var u2 = r3.chunk, l3 = r3.encoding, h2 = r3.callback;
                if (S(e3, t3, false, t3.objectMode ? 1 : u2.length, u2, l3, h2), r3 = r3.next, t3.bufferedRequestCount--, t3.writing) break;
              }
              null === r3 && (t3.lastBufferedRequest = null);
            }
            t3.bufferedRequest = r3, t3.bufferProcessing = false;
          }
          function N(e3) {
            return e3.ending && 0 === e3.length && null === e3.bufferedRequest && !e3.finished && !e3.writing;
          }
          function C(e3, t3) {
            e3._final(function(r3) {
              t3.pendingcb--, r3 && _(e3, r3), t3.prefinished = true, e3.emit("prefinish"), O(e3, t3);
            });
          }
          function O(e3, t3) {
            var r3 = N(t3);
            if (r3 && (function(e4, t4) {
              t4.prefinished || t4.finalCalled || ("function" != typeof e4._final || t4.destroyed ? (t4.prefinished = true, e4.emit("prefinish")) : (t4.pendingcb++, t4.finalCalled = true, s.nextTick(C, e4, t4)));
            }(e3, t3), 0 === t3.pendingcb && (t3.finished = true, e3.emit("finish"), t3.autoDestroy))) {
              var n3 = e3._readableState;
              (!n3 || n3.autoDestroy && n3.endEmitted) && e3.destroy();
            }
            return r3;
          }
          r2(5717)(A, c), T.prototype.getBuffer = function() {
            for (var e3 = this.bufferedRequest, t3 = []; e3; ) t3.push(e3), e3 = e3.next;
            return t3;
          }, function() {
            try {
              Object.defineProperty(T.prototype, "buffer", { get: a.deprecate(function() {
                return this.getBuffer();
              }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003") });
            } catch (e3) {
            }
          }(), "function" == typeof Symbol && Symbol.hasInstance && "function" == typeof Function.prototype[Symbol.hasInstance] ? (o = Function.prototype[Symbol.hasInstance], Object.defineProperty(A, Symbol.hasInstance, { value: function(e3) {
            return !!o.call(this, e3) || this === A && e3 && e3._writableState instanceof T;
          } })) : o = function(e3) {
            return e3 instanceof this;
          }, A.prototype.pipe = function() {
            _(this, new g());
          }, A.prototype.write = function(e3, t3, r3) {
            var n3, i2 = this._writableState, o2 = false, a2 = !i2.objectMode && (n3 = e3, u.isBuffer(n3) || n3 instanceof l2);
            return a2 && !u.isBuffer(e3) && (e3 = function(e4) {
              return u.from(e4);
            }(e3)), "function" == typeof t3 && (r3 = t3, t3 = null), a2 ? t3 = "buffer" : t3 || (t3 = i2.defaultEncoding), "function" != typeof r3 && (r3 = E), i2.ending ? function(e4, t4) {
              var r4 = new x();
              _(e4, r4), s.nextTick(t4, r4);
            }(this, r3) : (a2 || function(e4, t4, r4, n4) {
              var i3;
              return null === r4 ? i3 = new b() : "string" == typeof r4 || t4.objectMode || (i3 = new f("chunk", ["string", "Buffer"], r4)), !i3 || (_(e4, i3), s.nextTick(n4, i3), false);
            }(this, i2, e3, r3)) && (i2.pendingcb++, o2 = function(e4, t4, r4, n4, s2, i3) {
              if (!r4) {
                var o3 = function(e5, t5, r5) {
                  return e5.objectMode || false === e5.decodeStrings || "string" != typeof t5 || (t5 = u.from(t5, r5)), t5;
                }(t4, n4, s2);
                n4 !== o3 && (r4 = true, s2 = "buffer", n4 = o3);
              }
              var a3 = t4.objectMode ? 1 : n4.length;
              t4.length += a3;
              var c2 = t4.length < t4.highWaterMark;
              if (c2 || (t4.needDrain = true), t4.writing || t4.corked) {
                var l3 = t4.lastBufferedRequest;
                t4.lastBufferedRequest = { chunk: n4, encoding: s2, isBuf: r4, callback: i3, next: null }, l3 ? l3.next = t4.lastBufferedRequest : t4.bufferedRequest = t4.lastBufferedRequest, t4.bufferedRequestCount += 1;
              } else S(e4, t4, false, a3, n4, s2, i3);
              return c2;
            }(this, i2, a2, e3, t3, r3)), o2;
          }, A.prototype.cork = function() {
            this._writableState.corked++;
          }, A.prototype.uncork = function() {
            var e3 = this._writableState;
            e3.corked && (e3.corked--, e3.writing || e3.corked || e3.bufferProcessing || !e3.bufferedRequest || R(this, e3));
          }, A.prototype.setDefaultEncoding = function(e3) {
            if ("string" == typeof e3 && (e3 = e3.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((e3 + "").toLowerCase()) > -1)) throw new v(e3);
            return this._writableState.defaultEncoding = e3, this;
          }, Object.defineProperty(A.prototype, "writableBuffer", { enumerable: false, get: function() {
            return this._writableState && this._writableState.getBuffer();
          } }), Object.defineProperty(A.prototype, "writableHighWaterMark", { enumerable: false, get: function() {
            return this._writableState.highWaterMark;
          } }), A.prototype._write = function(e3, t3, r3) {
            r3(new m("_write()"));
          }, A.prototype._writev = null, A.prototype.end = function(e3, t3, r3) {
            var n3 = this._writableState;
            return "function" == typeof e3 ? (r3 = e3, e3 = null, t3 = null) : "function" == typeof t3 && (r3 = t3, t3 = null), null != e3 && this.write(e3, t3), n3.corked && (n3.corked = 1, this.uncork()), n3.ending || function(e4, t4, r4) {
              t4.ending = true, O(e4, t4), r4 && (t4.finished ? s.nextTick(r4) : e4.once("finish", r4)), t4.ended = true, e4.writable = false;
            }(this, n3, r3), this;
          }, Object.defineProperty(A.prototype, "writableLength", { enumerable: false, get: function() {
            return this._writableState.length;
          } }), Object.defineProperty(A.prototype, "destroyed", { enumerable: false, get: function() {
            return void 0 !== this._writableState && this._writableState.destroyed;
          }, set: function(e3) {
            this._writableState && (this._writableState.destroyed = e3);
          } }), A.prototype.destroy = h.destroy, A.prototype._undestroy = h.undestroy, A.prototype._destroy = function(e3, t3) {
            t3(e3);
          };
        }, 828: (e2, t2, r2) => {
          "use strict";
          var n2, s = r2(4155);
          function i(e3, t3, r3) {
            return t3 in e3 ? Object.defineProperty(e3, t3, { value: r3, enumerable: true, configurable: true, writable: true }) : e3[t3] = r3, e3;
          }
          var o = r2(1086), a = Symbol("lastResolve"), c = Symbol("lastReject"), u = Symbol("error"), l2 = Symbol("ended"), h = Symbol("lastPromise"), p = Symbol("handlePromise"), d = Symbol("stream");
          function f(e3, t3) {
            return { value: e3, done: t3 };
          }
          function m(e3) {
            var t3 = e3[a];
            if (null !== t3) {
              var r3 = e3[d].read();
              null !== r3 && (e3[h] = null, e3[a] = null, e3[c] = null, t3(f(r3, false)));
            }
          }
          function w(e3) {
            s.nextTick(m, e3);
          }
          var g = Object.getPrototypeOf(function() {
          }), y = Object.setPrototypeOf((i(n2 = { get stream() {
            return this[d];
          }, next: function() {
            var e3 = this, t3 = this[u];
            if (null !== t3) return Promise.reject(t3);
            if (this[l2]) return Promise.resolve(f(void 0, true));
            if (this[d].destroyed) return new Promise(function(t4, r4) {
              s.nextTick(function() {
                e3[u] ? r4(e3[u]) : t4(f(void 0, true));
              });
            });
            var r3, n3 = this[h];
            if (n3) r3 = new Promise(/* @__PURE__ */ function(e4, t4) {
              return function(r4, n4) {
                e4.then(function() {
                  t4[l2] ? r4(f(void 0, true)) : t4[p](r4, n4);
                }, n4);
              };
            }(n3, this));
            else {
              var i2 = this[d].read();
              if (null !== i2) return Promise.resolve(f(i2, false));
              r3 = new Promise(this[p]);
            }
            return this[h] = r3, r3;
          } }, Symbol.asyncIterator, function() {
            return this;
          }), i(n2, "return", function() {
            var e3 = this;
            return new Promise(function(t3, r3) {
              e3[d].destroy(null, function(e4) {
                e4 ? r3(e4) : t3(f(void 0, true));
              });
            });
          }), n2), g);
          e2.exports = function(e3) {
            var t3, r3 = Object.create(y, (i(t3 = {}, d, { value: e3, writable: true }), i(t3, a, { value: null, writable: true }), i(t3, c, { value: null, writable: true }), i(t3, u, { value: null, writable: true }), i(t3, l2, { value: e3._readableState.endEmitted, writable: true }), i(t3, p, { value: function(e4, t4) {
              var n3 = r3[d].read();
              n3 ? (r3[h] = null, r3[a] = null, r3[c] = null, e4(f(n3, false))) : (r3[a] = e4, r3[c] = t4);
            }, writable: true }), t3));
            return r3[h] = null, o(e3, function(e4) {
              if (e4 && "ERR_STREAM_PREMATURE_CLOSE" !== e4.code) {
                var t4 = r3[c];
                return null !== t4 && (r3[h] = null, r3[a] = null, r3[c] = null, t4(e4)), void (r3[u] = e4);
              }
              var n3 = r3[a];
              null !== n3 && (r3[h] = null, r3[a] = null, r3[c] = null, n3(f(void 0, true))), r3[l2] = true;
            }), e3.on("readable", w.bind(null, r3)), r3;
          };
        }, 9686: (e2, t2, r2) => {
          "use strict";
          function n2(e3, t3) {
            var r3 = Object.keys(e3);
            if (Object.getOwnPropertySymbols) {
              var n3 = Object.getOwnPropertySymbols(e3);
              t3 && (n3 = n3.filter(function(t4) {
                return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
              })), r3.push.apply(r3, n3);
            }
            return r3;
          }
          function s(e3, t3, r3) {
            return t3 in e3 ? Object.defineProperty(e3, t3, { value: r3, enumerable: true, configurable: true, writable: true }) : e3[t3] = r3, e3;
          }
          function i(e3, t3) {
            for (var r3 = 0; r3 < t3.length; r3++) {
              var n3 = t3[r3];
              n3.enumerable = n3.enumerable || false, n3.configurable = true, "value" in n3 && (n3.writable = true), Object.defineProperty(e3, n3.key, n3);
            }
          }
          var o = r2(8764).Buffer, a = r2(5575).inspect, c = a && a.custom || "inspect";
          e2.exports = function() {
            function e3() {
              !function(e4, t4) {
                if (!(e4 instanceof t4)) throw new TypeError("Cannot call a class as a function");
              }(this, e3), this.head = null, this.tail = null, this.length = 0;
            }
            var t3, r3;
            return t3 = e3, r3 = [{ key: "push", value: function(e4) {
              var t4 = { data: e4, next: null };
              this.length > 0 ? this.tail.next = t4 : this.head = t4, this.tail = t4, ++this.length;
            } }, { key: "unshift", value: function(e4) {
              var t4 = { data: e4, next: this.head };
              0 === this.length && (this.tail = t4), this.head = t4, ++this.length;
            } }, { key: "shift", value: function() {
              if (0 !== this.length) {
                var e4 = this.head.data;
                return 1 === this.length ? this.head = this.tail = null : this.head = this.head.next, --this.length, e4;
              }
            } }, { key: "clear", value: function() {
              this.head = this.tail = null, this.length = 0;
            } }, { key: "join", value: function(e4) {
              if (0 === this.length) return "";
              for (var t4 = this.head, r4 = "" + t4.data; t4 = t4.next; ) r4 += e4 + t4.data;
              return r4;
            } }, { key: "concat", value: function(e4) {
              if (0 === this.length) return o.alloc(0);
              for (var t4, r4, n3, s2 = o.allocUnsafe(e4 >>> 0), i2 = this.head, a2 = 0; i2; ) t4 = i2.data, r4 = s2, n3 = a2, o.prototype.copy.call(t4, r4, n3), a2 += i2.data.length, i2 = i2.next;
              return s2;
            } }, { key: "consume", value: function(e4, t4) {
              var r4;
              return e4 < this.head.data.length ? (r4 = this.head.data.slice(0, e4), this.head.data = this.head.data.slice(e4)) : r4 = e4 === this.head.data.length ? this.shift() : t4 ? this._getString(e4) : this._getBuffer(e4), r4;
            } }, { key: "first", value: function() {
              return this.head.data;
            } }, { key: "_getString", value: function(e4) {
              var t4 = this.head, r4 = 1, n3 = t4.data;
              for (e4 -= n3.length; t4 = t4.next; ) {
                var s2 = t4.data, i2 = e4 > s2.length ? s2.length : e4;
                if (i2 === s2.length ? n3 += s2 : n3 += s2.slice(0, e4), 0 == (e4 -= i2)) {
                  i2 === s2.length ? (++r4, t4.next ? this.head = t4.next : this.head = this.tail = null) : (this.head = t4, t4.data = s2.slice(i2));
                  break;
                }
                ++r4;
              }
              return this.length -= r4, n3;
            } }, { key: "_getBuffer", value: function(e4) {
              var t4 = o.allocUnsafe(e4), r4 = this.head, n3 = 1;
              for (r4.data.copy(t4), e4 -= r4.data.length; r4 = r4.next; ) {
                var s2 = r4.data, i2 = e4 > s2.length ? s2.length : e4;
                if (s2.copy(t4, t4.length - e4, 0, i2), 0 == (e4 -= i2)) {
                  i2 === s2.length ? (++n3, r4.next ? this.head = r4.next : this.head = this.tail = null) : (this.head = r4, r4.data = s2.slice(i2));
                  break;
                }
                ++n3;
              }
              return this.length -= n3, t4;
            } }, { key: c, value: function(e4, t4) {
              return a(this, function(e5) {
                for (var t5 = 1; t5 < arguments.length; t5++) {
                  var r4 = null != arguments[t5] ? arguments[t5] : {};
                  t5 % 2 ? n2(Object(r4), true).forEach(function(t6) {
                    s(e5, t6, r4[t6]);
                  }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e5, Object.getOwnPropertyDescriptors(r4)) : n2(Object(r4)).forEach(function(t6) {
                    Object.defineProperty(e5, t6, Object.getOwnPropertyDescriptor(r4, t6));
                  });
                }
                return e5;
              }({}, t4, { depth: 0, customInspect: false }));
            } }], r3 && i(t3.prototype, r3), e3;
          }();
        }, 1029: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(4155);
          function s(e3, t3) {
            o(e3, t3), i(e3);
          }
          function i(e3) {
            e3._writableState && !e3._writableState.emitClose || e3._readableState && !e3._readableState.emitClose || e3.emit("close");
          }
          function o(e3, t3) {
            e3.emit("error", t3);
          }
          e2.exports = { destroy: function(e3, t3) {
            var r3 = this, a = this._readableState && this._readableState.destroyed, c = this._writableState && this._writableState.destroyed;
            return a || c ? (t3 ? t3(e3) : e3 && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = true, n2.nextTick(o, this, e3)) : n2.nextTick(o, this, e3)), this) : (this._readableState && (this._readableState.destroyed = true), this._writableState && (this._writableState.destroyed = true), this._destroy(e3 || null, function(e4) {
              !t3 && e4 ? r3._writableState ? r3._writableState.errorEmitted ? n2.nextTick(i, r3) : (r3._writableState.errorEmitted = true, n2.nextTick(s, r3, e4)) : n2.nextTick(s, r3, e4) : t3 ? (n2.nextTick(i, r3), t3(e4)) : n2.nextTick(i, r3);
            }), this);
          }, undestroy: function() {
            this._readableState && (this._readableState.destroyed = false, this._readableState.reading = false, this._readableState.ended = false, this._readableState.endEmitted = false), this._writableState && (this._writableState.destroyed = false, this._writableState.ended = false, this._writableState.ending = false, this._writableState.finalCalled = false, this._writableState.prefinished = false, this._writableState.finished = false, this._writableState.errorEmitted = false);
          }, errorOrDestroy: function(e3, t3) {
            var r3 = e3._readableState, n3 = e3._writableState;
            r3 && r3.autoDestroy || n3 && n3.autoDestroy ? e3.destroy(t3) : e3.emit("error", t3);
          } };
        }, 1086: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(8106).q.ERR_STREAM_PREMATURE_CLOSE;
          function s() {
          }
          e2.exports = function e3(t3, r3, i) {
            if ("function" == typeof r3) return e3(t3, null, r3);
            r3 || (r3 = {}), i = /* @__PURE__ */ function(e4) {
              var t4 = false;
              return function() {
                if (!t4) {
                  t4 = true;
                  for (var r4 = arguments.length, n3 = new Array(r4), s2 = 0; s2 < r4; s2++) n3[s2] = arguments[s2];
                  e4.apply(this, n3);
                }
              };
            }(i || s);
            var o = r3.readable || false !== r3.readable && t3.readable, a = r3.writable || false !== r3.writable && t3.writable, c = function() {
              t3.writable || l2();
            }, u = t3._writableState && t3._writableState.finished, l2 = function() {
              a = false, u = true, o || i.call(t3);
            }, h = t3._readableState && t3._readableState.endEmitted, p = function() {
              o = false, h = true, a || i.call(t3);
            }, d = function(e4) {
              i.call(t3, e4);
            }, f = function() {
              var e4;
              return o && !h ? (t3._readableState && t3._readableState.ended || (e4 = new n2()), i.call(t3, e4)) : a && !u ? (t3._writableState && t3._writableState.ended || (e4 = new n2()), i.call(t3, e4)) : void 0;
            }, m = function() {
              t3.req.on("finish", l2);
            };
            return function(e4) {
              return e4.setHeader && "function" == typeof e4.abort;
            }(t3) ? (t3.on("complete", l2), t3.on("abort", f), t3.req ? m() : t3.on("request", m)) : a && !t3._writableState && (t3.on("end", c), t3.on("close", c)), t3.on("end", p), t3.on("finish", l2), false !== r3.error && t3.on("error", d), t3.on("close", f), function() {
              t3.removeListener("complete", l2), t3.removeListener("abort", f), t3.removeListener("request", m), t3.req && t3.req.removeListener("finish", l2), t3.removeListener("end", c), t3.removeListener("close", c), t3.removeListener("finish", l2), t3.removeListener("end", p), t3.removeListener("error", d), t3.removeListener("close", f);
            };
          };
        }, 1265: (e2) => {
          e2.exports = function() {
            throw new Error("Readable.from is not available in the browser");
          };
        }, 6472: (e2, t2, r2) => {
          "use strict";
          var n2, s = r2(8106).q, i = s.ERR_MISSING_ARGS, o = s.ERR_STREAM_DESTROYED;
          function a(e3) {
            if (e3) throw e3;
          }
          function c(e3, t3, s2, i2) {
            i2 = /* @__PURE__ */ function(e4) {
              var t4 = false;
              return function() {
                t4 || (t4 = true, e4.apply(void 0, arguments));
              };
            }(i2);
            var a2 = false;
            e3.on("close", function() {
              a2 = true;
            }), void 0 === n2 && (n2 = r2(1086)), n2(e3, { readable: t3, writable: s2 }, function(e4) {
              if (e4) return i2(e4);
              a2 = true, i2();
            });
            var c2 = false;
            return function(t4) {
              if (!a2 && !c2) return c2 = true, function(e4) {
                return e4.setHeader && "function" == typeof e4.abort;
              }(e3) ? e3.abort() : "function" == typeof e3.destroy ? e3.destroy() : void i2(t4 || new o("pipe"));
            };
          }
          function u(e3) {
            e3();
          }
          function l2(e3, t3) {
            return e3.pipe(t3);
          }
          function h(e3) {
            return e3.length ? "function" != typeof e3[e3.length - 1] ? a : e3.pop() : a;
          }
          e2.exports = function() {
            for (var e3 = arguments.length, t3 = new Array(e3), r3 = 0; r3 < e3; r3++) t3[r3] = arguments[r3];
            var n3, s2 = h(t3);
            if (Array.isArray(t3[0]) && (t3 = t3[0]), t3.length < 2) throw new i("streams");
            var o2 = t3.map(function(e4, r4) {
              var i2 = r4 < t3.length - 1;
              return c(e4, i2, r4 > 0, function(e5) {
                n3 || (n3 = e5), e5 && o2.forEach(u), i2 || (o2.forEach(u), s2(n3));
              });
            });
            return t3.reduce(l2);
          };
        }, 94: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(8106).q.ERR_INVALID_OPT_VALUE;
          e2.exports = { getHighWaterMark: function(e3, t3, r3, s) {
            var i = function(e4, t4, r4) {
              return null != e4.highWaterMark ? e4.highWaterMark : t4 ? e4[r4] : null;
            }(t3, s, r3);
            if (null != i) {
              if (!isFinite(i) || Math.floor(i) !== i || i < 0) throw new n2(s ? r3 : "highWaterMark", i);
              return Math.floor(i);
            }
            return e3.objectMode ? 16 : 16384;
          } };
        }, 3194: (e2, t2, r2) => {
          e2.exports = r2(7187).EventEmitter;
        }, 2553: (e2, t2, r2) => {
          "use strict";
          var n2 = r2(9509).Buffer, s = n2.isEncoding || function(e3) {
            switch ((e3 = "" + e3) && e3.toLowerCase()) {
              case "hex":
              case "utf8":
              case "utf-8":
              case "ascii":
              case "binary":
              case "base64":
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
              case "raw":
                return true;
              default:
                return false;
            }
          };
          function i(e3) {
            var t3;
            switch (this.encoding = function(e4) {
              var t4 = function(e5) {
                if (!e5) return "utf8";
                for (var t5; ; ) switch (e5) {
                  case "utf8":
                  case "utf-8":
                    return "utf8";
                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return "utf16le";
                  case "latin1":
                  case "binary":
                    return "latin1";
                  case "base64":
                  case "ascii":
                  case "hex":
                    return e5;
                  default:
                    if (t5) return;
                    e5 = ("" + e5).toLowerCase(), t5 = true;
                }
              }(e4);
              if ("string" != typeof t4 && (n2.isEncoding === s || !s(e4))) throw new Error("Unknown encoding: " + e4);
              return t4 || e4;
            }(e3), this.encoding) {
              case "utf16le":
                this.text = c, this.end = u, t3 = 4;
                break;
              case "utf8":
                this.fillLast = a, t3 = 4;
                break;
              case "base64":
                this.text = l2, this.end = h, t3 = 3;
                break;
              default:
                return this.write = p, void (this.end = d);
            }
            this.lastNeed = 0, this.lastTotal = 0, this.lastChar = n2.allocUnsafe(t3);
          }
          function o(e3) {
            return e3 <= 127 ? 0 : e3 >> 5 == 6 ? 2 : e3 >> 4 == 14 ? 3 : e3 >> 3 == 30 ? 4 : e3 >> 6 == 2 ? -1 : -2;
          }
          function a(e3) {
            var t3 = this.lastTotal - this.lastNeed, r3 = function(e4, t4, r4) {
              if (128 != (192 & t4[0])) return e4.lastNeed = 0, "\uFFFD";
              if (e4.lastNeed > 1 && t4.length > 1) {
                if (128 != (192 & t4[1])) return e4.lastNeed = 1, "\uFFFD";
                if (e4.lastNeed > 2 && t4.length > 2 && 128 != (192 & t4[2])) return e4.lastNeed = 2, "\uFFFD";
              }
            }(this, e3);
            return void 0 !== r3 ? r3 : this.lastNeed <= e3.length ? (e3.copy(this.lastChar, t3, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal)) : (e3.copy(this.lastChar, t3, 0, e3.length), void (this.lastNeed -= e3.length));
          }
          function c(e3, t3) {
            if ((e3.length - t3) % 2 == 0) {
              var r3 = e3.toString("utf16le", t3);
              if (r3) {
                var n3 = r3.charCodeAt(r3.length - 1);
                if (n3 >= 55296 && n3 <= 56319) return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = e3[e3.length - 2], this.lastChar[1] = e3[e3.length - 1], r3.slice(0, -1);
              }
              return r3;
            }
            return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = e3[e3.length - 1], e3.toString("utf16le", t3, e3.length - 1);
          }
          function u(e3) {
            var t3 = e3 && e3.length ? this.write(e3) : "";
            if (this.lastNeed) {
              var r3 = this.lastTotal - this.lastNeed;
              return t3 + this.lastChar.toString("utf16le", 0, r3);
            }
            return t3;
          }
          function l2(e3, t3) {
            var r3 = (e3.length - t3) % 3;
            return 0 === r3 ? e3.toString("base64", t3) : (this.lastNeed = 3 - r3, this.lastTotal = 3, 1 === r3 ? this.lastChar[0] = e3[e3.length - 1] : (this.lastChar[0] = e3[e3.length - 2], this.lastChar[1] = e3[e3.length - 1]), e3.toString("base64", t3, e3.length - r3));
          }
          function h(e3) {
            var t3 = e3 && e3.length ? this.write(e3) : "";
            return this.lastNeed ? t3 + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : t3;
          }
          function p(e3) {
            return e3.toString(this.encoding);
          }
          function d(e3) {
            return e3 && e3.length ? this.write(e3) : "";
          }
          t2.s = i, i.prototype.write = function(e3) {
            if (0 === e3.length) return "";
            var t3, r3;
            if (this.lastNeed) {
              if (void 0 === (t3 = this.fillLast(e3))) return "";
              r3 = this.lastNeed, this.lastNeed = 0;
            } else r3 = 0;
            return r3 < e3.length ? t3 ? t3 + this.text(e3, r3) : this.text(e3, r3) : t3 || "";
          }, i.prototype.end = function(e3) {
            var t3 = e3 && e3.length ? this.write(e3) : "";
            return this.lastNeed ? t3 + "\uFFFD" : t3;
          }, i.prototype.text = function(e3, t3) {
            var r3 = function(e4, t4, r4) {
              var n4 = t4.length - 1;
              if (n4 < r4) return 0;
              var s2 = o(t4[n4]);
              return s2 >= 0 ? (s2 > 0 && (e4.lastNeed = s2 - 1), s2) : --n4 < r4 || -2 === s2 ? 0 : (s2 = o(t4[n4])) >= 0 ? (s2 > 0 && (e4.lastNeed = s2 - 2), s2) : --n4 < r4 || -2 === s2 ? 0 : (s2 = o(t4[n4])) >= 0 ? (s2 > 0 && (2 === s2 ? s2 = 0 : e4.lastNeed = s2 - 3), s2) : 0;
            }(this, e3, t3);
            if (!this.lastNeed) return e3.toString("utf8", t3);
            this.lastTotal = r3;
            var n3 = e3.length - (r3 - this.lastNeed);
            return e3.copy(this.lastChar, 0, n3), e3.toString("utf8", t3, n3);
          }, i.prototype.fillLast = function(e3) {
            if (this.lastNeed <= e3.length) return e3.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
            e3.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, e3.length), this.lastNeed -= e3.length;
          };
        }, 5457: (e2, t2, r2) => {
          "use strict";
          r2.d(t2, { vw: () => i, rq: () => s, EL: () => a, NY: () => o });
          let n2 = 0;
          const s = (e3) => Math.floor(e3 / 25.4 * 72 * 20), i = (e3) => Math.floor(72 * e3 * 20), o = () => ++n2, a = () => ((e3 = 21) => {
            let t3 = "", r3 = e3;
            for (; r3--; ) t3 += "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict"[64 * Math.random() | 0];
            return t3;
          })().toLowerCase();
        }, 5575: (e2, t2, r2) => {
          "use strict";
          r2.r(t2), r2.d(t2, { convertInchesToTwip: () => n2.vw, convertMillimetersToTwip: () => n2.rq, dateTimeValue: () => s.sF, decimalNumber: () => s.vH, eighthPointMeasureValue: () => s.LV, hexColorValue: () => s.dg, hpsMeasureValue: () => s.KR, longHexNumber: () => s.mA, measurementOrPercentValue: () => s.aB, percentageValue: () => s.wp, pointMeasureValue: () => s.gg, positiveUniversalMeasureValue: () => s._p, shortHexNumber: () => s.G0, signedHpsMeasureValue: () => s.Rg, signedTwipsMeasureValue: () => s.xb, twipsMeasureValue: () => s.Jd, uCharHexNumber: () => s.xD, uniqueId: () => n2.EL, uniqueNumericId: () => n2.NY, universalMeasureValue: () => s.KC, unsignedDecimalNumber: () => s.f$ });
          var n2 = r2(5457), s = r2(6595);
        }, 6595: (e2, t2, r2) => {
          "use strict";
          r2.d(t2, { G0: () => a, Jd: () => w, KC: () => u, KR: () => f, LV: () => b, Rg: () => m, _p: () => h, aB: () => y, dg: () => p, f$: () => s, gg: () => x, mA: () => o, sF: () => v, vH: () => n2, wp: () => g, xD: () => c, xb: () => d });
          const n2 = (e3) => {
            if (isNaN(e3)) throw new Error(`Invalid value '${e3}' specified. Must be an integer.`);
            return Math.floor(e3);
          }, s = (e3) => {
            const t3 = n2(e3);
            if (t3 < 0) throw new Error(`Invalid value '${e3}' specified. Must be a positive integer.`);
            return t3;
          }, i = (e3, t3) => {
            const r3 = 2 * t3;
            if (e3.length !== r3 || isNaN(Number(`0x${e3}`))) throw new Error(`Invalid hex value '${e3}'. Expected ${r3} digit hex value`);
            return e3;
          }, o = (e3) => i(e3, 4), a = (e3) => i(e3, 2), c = (e3) => i(e3, 1), u = (e3) => {
            const t3 = e3.slice(-2);
            if (!l2.includes(t3)) throw new Error(`Invalid unit '${t3}' specified. Valid units are ${l2.join(", ")}`);
            const r3 = e3.substring(0, e3.length - 2);
            if (isNaN(Number(r3))) throw new Error(`Invalid value '${r3}' specified. Expected a valid number.`);
            return `${Number(r3)}${t3}`;
          }, l2 = ["mm", "cm", "in", "pt", "pc", "pi"], h = (e3) => {
            const t3 = u(e3);
            if (parseFloat(t3) < 0) throw new Error(`Invalid value '${t3}' specified. Expected a positive number.`);
            return t3;
          }, p = (e3) => {
            if ("auto" === e3) return e3;
            const t3 = "#" === e3.charAt(0) ? e3.substring(1) : e3;
            return i(t3, 3);
          }, d = (e3) => "string" == typeof e3 ? u(e3) : n2(e3), f = (e3) => "string" == typeof e3 ? h(e3) : s(e3), m = (e3) => "string" == typeof e3 ? u(e3) : n2(e3), w = (e3) => "string" == typeof e3 ? h(e3) : s(e3), g = (e3) => {
            if ("%" !== e3.slice(-1)) throw new Error(`Invalid value '${e3}'. Expected percentage value (eg '55%')`);
            const t3 = e3.substring(0, e3.length - 1);
            if (isNaN(Number(t3))) throw new Error(`Invalid value '${t3}' specified. Expected a valid number.`);
            return `${Number(t3)}%`;
          }, y = (e3) => "number" == typeof e3 ? n2(e3) : "%" === e3.slice(-1) ? g(e3) : u(e3), b = s, x = s, v = (e3) => e3.toISOString();
        }, 4927: (e2, t2, r2) => {
          function n2(e3) {
            try {
              if (!r2.g.localStorage) return false;
            } catch (e4) {
              return false;
            }
            var t3 = r2.g.localStorage[e3];
            return null != t3 && "true" === String(t3).toLowerCase();
          }
          e2.exports = function(e3, t3) {
            if (n2("noDeprecation")) return e3;
            var r3 = false;
            return function() {
              if (!r3) {
                if (n2("throwDeprecation")) throw new Error(t3);
                n2("traceDeprecation") ? console.trace(t3) : console.warn(t3), r3 = true;
              }
              return e3.apply(this, arguments);
            };
          };
        }, 9881: (e2) => {
          e2.exports = { isArray: function(e3) {
            return Array.isArray ? Array.isArray(e3) : "[object Array]" === Object.prototype.toString.call(e3);
          } };
        }, 7888: (e2, t2, r2) => {
          var n2 = r2(1229), s = r2(1388), i = r2(6501), o = r2(4673);
          e2.exports = { xml2js: n2, xml2json: s, js2xml: i, json2xml: o };
        }, 6501: (e2, t2, r2) => {
          var n2, s, i = r2(4740), o = r2(9881).isArray;
          function a(e3, t3, r3) {
            return (!r3 && e3.spaces ? "\n" : "") + Array(t3 + 1).join(e3.spaces);
          }
          function c(e3, t3, r3) {
            if (t3.ignoreAttributes) return "";
            "attributesFn" in t3 && (e3 = t3.attributesFn(e3, s, n2));
            var i2, o2, c2, u2, l3 = [];
            for (i2 in e3) e3.hasOwnProperty(i2) && null !== e3[i2] && void 0 !== e3[i2] && (u2 = t3.noQuotesForNativeAttributes && "string" != typeof e3[i2] ? "" : '"', o2 = (o2 = "" + e3[i2]).replace(/"/g, "&quot;"), c2 = "attributeNameFn" in t3 ? t3.attributeNameFn(i2, o2, s, n2) : i2, l3.push(t3.spaces && t3.indentAttributes ? a(t3, r3 + 1, false) : " "), l3.push(c2 + "=" + u2 + ("attributeValueFn" in t3 ? t3.attributeValueFn(o2, i2, s, n2) : o2) + u2));
            return e3 && Object.keys(e3).length && t3.spaces && t3.indentAttributes && l3.push(a(t3, r3, false)), l3.join("");
          }
          function u(e3, t3, r3) {
            return n2 = e3, s = "xml", t3.ignoreDeclaration ? "" : "<?xml" + c(e3[t3.attributesKey], t3, r3) + "?>";
          }
          function l2(e3, t3, r3) {
            if (t3.ignoreInstruction) return "";
            var i2;
            for (i2 in e3) if (e3.hasOwnProperty(i2)) break;
            var o2 = "instructionNameFn" in t3 ? t3.instructionNameFn(i2, e3[i2], s, n2) : i2;
            if ("object" == typeof e3[i2]) return n2 = e3, s = o2, "<?" + o2 + c(e3[i2][t3.attributesKey], t3, r3) + "?>";
            var a2 = e3[i2] ? e3[i2] : "";
            return "instructionFn" in t3 && (a2 = t3.instructionFn(a2, i2, s, n2)), "<?" + o2 + (a2 ? " " + a2 : "") + "?>";
          }
          function h(e3, t3) {
            return t3.ignoreComment ? "" : "<!--" + ("commentFn" in t3 ? t3.commentFn(e3, s, n2) : e3) + "-->";
          }
          function p(e3, t3) {
            return t3.ignoreCdata ? "" : "<![CDATA[" + ("cdataFn" in t3 ? t3.cdataFn(e3, s, n2) : e3.replace("]]>", "]]]]><![CDATA[>")) + "]]>";
          }
          function d(e3, t3) {
            return t3.ignoreDoctype ? "" : "<!DOCTYPE " + ("doctypeFn" in t3 ? t3.doctypeFn(e3, s, n2) : e3) + ">";
          }
          function f(e3, t3) {
            return t3.ignoreText ? "" : (e3 = (e3 = (e3 = "" + e3).replace(/&amp;/g, "&")).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;"), "textFn" in t3 ? t3.textFn(e3, s, n2) : e3);
          }
          function m(e3, t3, r3, i2) {
            return e3.reduce(function(e4, o2) {
              var u2 = a(t3, r3, i2 && !e4);
              switch (o2.type) {
                case "element":
                  return e4 + u2 + function(e5, t4, r4) {
                    n2 = e5, s = e5.name;
                    var i3 = [], o3 = "elementNameFn" in t4 ? t4.elementNameFn(e5.name, e5) : e5.name;
                    i3.push("<" + o3), e5[t4.attributesKey] && i3.push(c(e5[t4.attributesKey], t4, r4));
                    var a2 = e5[t4.elementsKey] && e5[t4.elementsKey].length || e5[t4.attributesKey] && "preserve" === e5[t4.attributesKey]["xml:space"];
                    return a2 || (a2 = "fullTagEmptyElementFn" in t4 ? t4.fullTagEmptyElementFn(e5.name, e5) : t4.fullTagEmptyElement), a2 ? (i3.push(">"), e5[t4.elementsKey] && e5[t4.elementsKey].length && (i3.push(m(e5[t4.elementsKey], t4, r4 + 1)), n2 = e5, s = e5.name), i3.push(t4.spaces && function(e6, t5) {
                      var r5;
                      if (e6.elements && e6.elements.length) for (r5 = 0; r5 < e6.elements.length; ++r5) switch (e6.elements[r5][t5.typeKey]) {
                        case "text":
                          if (t5.indentText) return true;
                          break;
                        case "cdata":
                          if (t5.indentCdata) return true;
                          break;
                        case "instruction":
                          if (t5.indentInstruction) return true;
                          break;
                        default:
                          return true;
                      }
                      return false;
                    }(e5, t4) ? "\n" + Array(r4 + 1).join(t4.spaces) : ""), i3.push("</" + o3 + ">")) : i3.push("/>"), i3.join("");
                  }(o2, t3, r3);
                case "comment":
                  return e4 + u2 + h(o2[t3.commentKey], t3);
                case "doctype":
                  return e4 + u2 + d(o2[t3.doctypeKey], t3);
                case "cdata":
                  return e4 + (t3.indentCdata ? u2 : "") + p(o2[t3.cdataKey], t3);
                case "text":
                  return e4 + (t3.indentText ? u2 : "") + f(o2[t3.textKey], t3);
                case "instruction":
                  var w2 = {};
                  return w2[o2[t3.nameKey]] = o2[t3.attributesKey] ? o2 : o2[t3.instructionKey], e4 + (t3.indentInstruction ? u2 : "") + l2(w2, t3, r3);
              }
            }, "");
          }
          function w(e3, t3, r3) {
            var n3;
            for (n3 in e3) if (e3.hasOwnProperty(n3)) switch (n3) {
              case t3.parentKey:
              case t3.attributesKey:
                break;
              case t3.textKey:
                if (t3.indentText || r3) return true;
                break;
              case t3.cdataKey:
                if (t3.indentCdata || r3) return true;
                break;
              case t3.instructionKey:
                if (t3.indentInstruction || r3) return true;
                break;
              case t3.doctypeKey:
              case t3.commentKey:
              default:
                return true;
            }
            return false;
          }
          function g(e3, t3, r3, i2, o2) {
            n2 = e3, s = t3;
            var u2 = "elementNameFn" in r3 ? r3.elementNameFn(t3, e3) : t3;
            if (null == e3 || "" === e3) return "fullTagEmptyElementFn" in r3 && r3.fullTagEmptyElementFn(t3, e3) || r3.fullTagEmptyElement ? "<" + u2 + "></" + u2 + ">" : "<" + u2 + "/>";
            var l3 = [];
            if (t3) {
              if (l3.push("<" + u2), "object" != typeof e3) return l3.push(">" + f(e3, r3) + "</" + u2 + ">"), l3.join("");
              e3[r3.attributesKey] && l3.push(c(e3[r3.attributesKey], r3, i2));
              var h2 = w(e3, r3, true) || e3[r3.attributesKey] && "preserve" === e3[r3.attributesKey]["xml:space"];
              if (h2 || (h2 = "fullTagEmptyElementFn" in r3 ? r3.fullTagEmptyElementFn(t3, e3) : r3.fullTagEmptyElement), !h2) return l3.push("/>"), l3.join("");
              l3.push(">");
            }
            return l3.push(y(e3, r3, i2 + 1, false)), n2 = e3, s = t3, t3 && l3.push((o2 ? a(r3, i2, false) : "") + "</" + u2 + ">"), l3.join("");
          }
          function y(e3, t3, r3, n3) {
            var s2, i2, c2, m2 = [];
            for (i2 in e3) if (e3.hasOwnProperty(i2)) for (c2 = o(e3[i2]) ? e3[i2] : [e3[i2]], s2 = 0; s2 < c2.length; ++s2) {
              switch (i2) {
                case t3.declarationKey:
                  m2.push(u(c2[s2], t3, r3));
                  break;
                case t3.instructionKey:
                  m2.push((t3.indentInstruction ? a(t3, r3, n3) : "") + l2(c2[s2], t3, r3));
                  break;
                case t3.attributesKey:
                case t3.parentKey:
                  break;
                case t3.textKey:
                  m2.push((t3.indentText ? a(t3, r3, n3) : "") + f(c2[s2], t3));
                  break;
                case t3.cdataKey:
                  m2.push((t3.indentCdata ? a(t3, r3, n3) : "") + p(c2[s2], t3));
                  break;
                case t3.doctypeKey:
                  m2.push(a(t3, r3, n3) + d(c2[s2], t3));
                  break;
                case t3.commentKey:
                  m2.push(a(t3, r3, n3) + h(c2[s2], t3));
                  break;
                default:
                  m2.push(a(t3, r3, n3) + g(c2[s2], i2, t3, r3, w(c2[s2], t3)));
              }
              n3 = n3 && !m2.length;
            }
            return m2.join("");
          }
          e2.exports = function(e3, t3) {
            t3 = function(e4) {
              var t4 = i.copyOptions(e4);
              return i.ensureFlagExists("ignoreDeclaration", t4), i.ensureFlagExists("ignoreInstruction", t4), i.ensureFlagExists("ignoreAttributes", t4), i.ensureFlagExists("ignoreText", t4), i.ensureFlagExists("ignoreComment", t4), i.ensureFlagExists("ignoreCdata", t4), i.ensureFlagExists("ignoreDoctype", t4), i.ensureFlagExists("compact", t4), i.ensureFlagExists("indentText", t4), i.ensureFlagExists("indentCdata", t4), i.ensureFlagExists("indentAttributes", t4), i.ensureFlagExists("indentInstruction", t4), i.ensureFlagExists("fullTagEmptyElement", t4), i.ensureFlagExists("noQuotesForNativeAttributes", t4), i.ensureSpacesExists(t4), "number" == typeof t4.spaces && (t4.spaces = Array(t4.spaces + 1).join(" ")), i.ensureKeyExists("declaration", t4), i.ensureKeyExists("instruction", t4), i.ensureKeyExists("attributes", t4), i.ensureKeyExists("text", t4), i.ensureKeyExists("comment", t4), i.ensureKeyExists("cdata", t4), i.ensureKeyExists("doctype", t4), i.ensureKeyExists("type", t4), i.ensureKeyExists("name", t4), i.ensureKeyExists("elements", t4), i.checkFnExists("doctype", t4), i.checkFnExists("instruction", t4), i.checkFnExists("cdata", t4), i.checkFnExists("comment", t4), i.checkFnExists("text", t4), i.checkFnExists("instructionName", t4), i.checkFnExists("elementName", t4), i.checkFnExists("attributeName", t4), i.checkFnExists("attributeValue", t4), i.checkFnExists("attributes", t4), i.checkFnExists("fullTagEmptyElement", t4), t4;
            }(t3);
            var r3 = [];
            return n2 = e3, s = "_root_", t3.compact ? r3.push(y(e3, t3, 0, true)) : (e3[t3.declarationKey] && r3.push(u(e3[t3.declarationKey], t3, 0)), e3[t3.elementsKey] && e3[t3.elementsKey].length && r3.push(m(e3[t3.elementsKey], t3, 0, !r3.length))), r3.join("");
          };
        }, 4673: (e2, t2, r2) => {
          var n2 = r2(6501);
          e2.exports = function(e3, t3) {
            e3 instanceof Buffer && (e3 = e3.toString());
            var r3 = null;
            if ("string" == typeof e3) try {
              r3 = JSON.parse(e3);
            } catch (e4) {
              throw new Error("The JSON structure is invalid");
            }
            else r3 = e3;
            return n2(r3, t3);
          };
        }, 4740: (e2, t2, r2) => {
          var n2 = r2(9881).isArray;
          e2.exports = { copyOptions: function(e3) {
            var t3, r3 = {};
            for (t3 in e3) e3.hasOwnProperty(t3) && (r3[t3] = e3[t3]);
            return r3;
          }, ensureFlagExists: function(e3, t3) {
            e3 in t3 && "boolean" == typeof t3[e3] || (t3[e3] = false);
          }, ensureSpacesExists: function(e3) {
            (!("spaces" in e3) || "number" != typeof e3.spaces && "string" != typeof e3.spaces) && (e3.spaces = 0);
          }, ensureAlwaysArrayExists: function(e3) {
            "alwaysArray" in e3 && ("boolean" == typeof e3.alwaysArray || n2(e3.alwaysArray)) || (e3.alwaysArray = false);
          }, ensureKeyExists: function(e3, t3) {
            e3 + "Key" in t3 && "string" == typeof t3[e3 + "Key"] || (t3[e3 + "Key"] = t3.compact ? "_" + e3 : e3);
          }, checkFnExists: function(e3, t3) {
            return e3 + "Fn" in t3;
          } };
        }, 1229: (e2, t2, r2) => {
          var n2, s, i = r2(6099), o = r2(4740), a = r2(9881).isArray;
          function c(e3) {
            var t3 = Number(e3);
            if (!isNaN(t3)) return t3;
            var r3 = e3.toLowerCase();
            return "true" === r3 || "false" !== r3 && e3;
          }
          function u(e3, t3) {
            var r3;
            if (n2.compact) {
              if (!s[n2[e3 + "Key"]] && (a(n2.alwaysArray) ? -1 !== n2.alwaysArray.indexOf(n2[e3 + "Key"]) : n2.alwaysArray) && (s[n2[e3 + "Key"]] = []), s[n2[e3 + "Key"]] && !a(s[n2[e3 + "Key"]]) && (s[n2[e3 + "Key"]] = [s[n2[e3 + "Key"]]]), e3 + "Fn" in n2 && "string" == typeof t3 && (t3 = n2[e3 + "Fn"](t3, s)), "instruction" === e3 && ("instructionFn" in n2 || "instructionNameFn" in n2)) {
                for (r3 in t3) if (t3.hasOwnProperty(r3)) if ("instructionFn" in n2) t3[r3] = n2.instructionFn(t3[r3], r3, s);
                else {
                  var i2 = t3[r3];
                  delete t3[r3], t3[n2.instructionNameFn(r3, i2, s)] = i2;
                }
              }
              a(s[n2[e3 + "Key"]]) ? s[n2[e3 + "Key"]].push(t3) : s[n2[e3 + "Key"]] = t3;
            } else {
              s[n2.elementsKey] || (s[n2.elementsKey] = []);
              var o2 = {};
              if (o2[n2.typeKey] = e3, "instruction" === e3) {
                for (r3 in t3) if (t3.hasOwnProperty(r3)) break;
                o2[n2.nameKey] = "instructionNameFn" in n2 ? n2.instructionNameFn(r3, t3, s) : r3, n2.instructionHasAttributes ? (o2[n2.attributesKey] = t3[r3][n2.attributesKey], "instructionFn" in n2 && (o2[n2.attributesKey] = n2.instructionFn(o2[n2.attributesKey], r3, s))) : ("instructionFn" in n2 && (t3[r3] = n2.instructionFn(t3[r3], r3, s)), o2[n2.instructionKey] = t3[r3]);
              } else e3 + "Fn" in n2 && (t3 = n2[e3 + "Fn"](t3, s)), o2[n2[e3 + "Key"]] = t3;
              n2.addParent && (o2[n2.parentKey] = s), s[n2.elementsKey].push(o2);
            }
          }
          function l2(e3) {
            var t3;
            if ("attributesFn" in n2 && e3 && (e3 = n2.attributesFn(e3, s)), (n2.trim || "attributeValueFn" in n2 || "attributeNameFn" in n2 || n2.nativeTypeAttributes) && e3) {
              for (t3 in e3) if (e3.hasOwnProperty(t3) && (n2.trim && (e3[t3] = e3[t3].trim()), n2.nativeTypeAttributes && (e3[t3] = c(e3[t3])), "attributeValueFn" in n2 && (e3[t3] = n2.attributeValueFn(e3[t3], t3, s)), "attributeNameFn" in n2)) {
                var r3 = e3[t3];
                delete e3[t3], e3[n2.attributeNameFn(t3, e3[t3], s)] = r3;
              }
            }
            return e3;
          }
          function h(e3) {
            var t3 = {};
            if (e3.body && ("xml" === e3.name.toLowerCase() || n2.instructionHasAttributes)) {
              for (var r3, i2 = /([\w:-]+)\s*=\s*(?:"([^"]*)"|'([^']*)'|(\w+))\s*/g; null !== (r3 = i2.exec(e3.body)); ) t3[r3[1]] = r3[2] || r3[3] || r3[4];
              t3 = l2(t3);
            }
            if ("xml" === e3.name.toLowerCase()) {
              if (n2.ignoreDeclaration) return;
              s[n2.declarationKey] = {}, Object.keys(t3).length && (s[n2.declarationKey][n2.attributesKey] = t3), n2.addParent && (s[n2.declarationKey][n2.parentKey] = s);
            } else {
              if (n2.ignoreInstruction) return;
              n2.trim && (e3.body = e3.body.trim());
              var o2 = {};
              n2.instructionHasAttributes && Object.keys(t3).length ? (o2[e3.name] = {}, o2[e3.name][n2.attributesKey] = t3) : o2[e3.name] = e3.body, u("instruction", o2);
            }
          }
          function p(e3, t3) {
            var r3;
            if ("object" == typeof e3 && (t3 = e3.attributes, e3 = e3.name), t3 = l2(t3), "elementNameFn" in n2 && (e3 = n2.elementNameFn(e3, s)), n2.compact) {
              var i2;
              if (r3 = {}, !n2.ignoreAttributes && t3 && Object.keys(t3).length) for (i2 in r3[n2.attributesKey] = {}, t3) t3.hasOwnProperty(i2) && (r3[n2.attributesKey][i2] = t3[i2]);
              !(e3 in s) && (a(n2.alwaysArray) ? -1 !== n2.alwaysArray.indexOf(e3) : n2.alwaysArray) && (s[e3] = []), s[e3] && !a(s[e3]) && (s[e3] = [s[e3]]), a(s[e3]) ? s[e3].push(r3) : s[e3] = r3;
            } else s[n2.elementsKey] || (s[n2.elementsKey] = []), (r3 = {})[n2.typeKey] = "element", r3[n2.nameKey] = e3, !n2.ignoreAttributes && t3 && Object.keys(t3).length && (r3[n2.attributesKey] = t3), n2.alwaysChildren && (r3[n2.elementsKey] = []), s[n2.elementsKey].push(r3);
            r3[n2.parentKey] = s, s = r3;
          }
          function d(e3) {
            n2.ignoreText || (e3.trim() || n2.captureSpacesBetweenElements) && (n2.trim && (e3 = e3.trim()), n2.nativeType && (e3 = c(e3)), n2.sanitize && (e3 = e3.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;")), u("text", e3));
          }
          function f(e3) {
            n2.ignoreComment || (n2.trim && (e3 = e3.trim()), u("comment", e3));
          }
          function m(e3) {
            var t3 = s[n2.parentKey];
            n2.addParent || delete s[n2.parentKey], s = t3;
          }
          function w(e3) {
            n2.ignoreCdata || (n2.trim && (e3 = e3.trim()), u("cdata", e3));
          }
          function g(e3) {
            n2.ignoreDoctype || (e3 = e3.replace(/^ /, ""), n2.trim && (e3 = e3.trim()), u("doctype", e3));
          }
          function y(e3) {
            e3.note = e3;
          }
          e2.exports = function(e3, t3) {
            var r3 = i.parser(true, {}), a2 = {};
            if (s = a2, n2 = function(e4) {
              return n2 = o.copyOptions(e4), o.ensureFlagExists("ignoreDeclaration", n2), o.ensureFlagExists("ignoreInstruction", n2), o.ensureFlagExists("ignoreAttributes", n2), o.ensureFlagExists("ignoreText", n2), o.ensureFlagExists("ignoreComment", n2), o.ensureFlagExists("ignoreCdata", n2), o.ensureFlagExists("ignoreDoctype", n2), o.ensureFlagExists("compact", n2), o.ensureFlagExists("alwaysChildren", n2), o.ensureFlagExists("addParent", n2), o.ensureFlagExists("trim", n2), o.ensureFlagExists("nativeType", n2), o.ensureFlagExists("nativeTypeAttributes", n2), o.ensureFlagExists("sanitize", n2), o.ensureFlagExists("instructionHasAttributes", n2), o.ensureFlagExists("captureSpacesBetweenElements", n2), o.ensureAlwaysArrayExists(n2), o.ensureKeyExists("declaration", n2), o.ensureKeyExists("instruction", n2), o.ensureKeyExists("attributes", n2), o.ensureKeyExists("text", n2), o.ensureKeyExists("comment", n2), o.ensureKeyExists("cdata", n2), o.ensureKeyExists("doctype", n2), o.ensureKeyExists("type", n2), o.ensureKeyExists("name", n2), o.ensureKeyExists("elements", n2), o.ensureKeyExists("parent", n2), o.checkFnExists("doctype", n2), o.checkFnExists("instruction", n2), o.checkFnExists("cdata", n2), o.checkFnExists("comment", n2), o.checkFnExists("text", n2), o.checkFnExists("instructionName", n2), o.checkFnExists("elementName", n2), o.checkFnExists("attributeName", n2), o.checkFnExists("attributeValue", n2), o.checkFnExists("attributes", n2), n2;
            }(t3), r3.opt = { strictEntities: true }, r3.onopentag = p, r3.ontext = d, r3.oncomment = f, r3.onclosetag = m, r3.onerror = y, r3.oncdata = w, r3.ondoctype = g, r3.onprocessinginstruction = h, r3.write(e3).close(), a2[n2.elementsKey]) {
              var c2 = a2[n2.elementsKey];
              delete a2[n2.elementsKey], a2[n2.elementsKey] = c2, delete a2.text;
            }
            return a2;
          };
        }, 1388: (e2, t2, r2) => {
          var n2 = r2(4740), s = r2(1229);
          e2.exports = function(e3, t3) {
            var r3, i, o;
            return r3 = function(e4) {
              var t4 = n2.copyOptions(e4);
              return n2.ensureSpacesExists(t4), t4;
            }(t3), i = s(e3, r3), o = "compact" in r3 && r3.compact ? "_parent" : "parent", ("addParent" in r3 && r3.addParent ? JSON.stringify(i, function(e4, t4) {
              return e4 === o ? "_" : t4;
            }, r3.spaces) : JSON.stringify(i, null, r3.spaces)).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
          };
        }, 255: (e2) => {
          var t2 = { "&": "&amp;", '"': "&quot;", "'": "&apos;", "<": "&lt;", ">": "&gt;" };
          e2.exports = function(e3) {
            return e3 && e3.replace ? e3.replace(/([&"<>'])/g, function(e4, r2) {
              return t2[r2];
            }) : e3;
          };
        }, 3479: (e2, t2, r2) => {
          var n2 = r2(4155), s = r2(255), i = r2(2830).Stream;
          function o(e3, t3, r3) {
            r3 = r3 || 0;
            var n3, i2, a2 = (n3 = t3, new Array(r3 || 0).join(n3 || "")), c = e3;
            if ("object" == typeof e3 && (c = e3[i2 = Object.keys(e3)[0]]) && c._elem) return c._elem.name = i2, c._elem.icount = r3, c._elem.indent = t3, c._elem.indents = a2, c._elem.interrupt = c, c._elem;
            var u, l2 = [], h = [];
            function p(e4) {
              Object.keys(e4).forEach(function(t4) {
                l2.push(function(e5, t5) {
                  return e5 + '="' + s(t5) + '"';
                }(t4, e4[t4]));
              });
            }
            switch (typeof c) {
              case "object":
                if (null === c) break;
                c._attr && p(c._attr), c._cdata && h.push(("<![CDATA[" + c._cdata).replace(/\]\]>/g, "]]]]><![CDATA[>") + "]]>"), c.forEach && (u = false, h.push(""), c.forEach(function(e4) {
                  "object" == typeof e4 ? "_attr" == Object.keys(e4)[0] ? p(e4._attr) : h.push(o(e4, t3, r3 + 1)) : (h.pop(), u = true, h.push(s(e4)));
                }), u || h.push(""));
                break;
              default:
                h.push(s(c));
            }
            return { name: i2, interrupt: false, attributes: l2, content: h, icount: r3, indents: a2, indent: t3 };
          }
          function a(e3, t3, r3) {
            if ("object" != typeof t3) return e3(false, t3);
            var n3 = t3.interrupt ? 1 : t3.content.length;
            function s2() {
              for (; t3.content.length; ) {
                var s3 = t3.content.shift();
                if (void 0 !== s3) {
                  if (i2(s3)) return;
                  a(e3, s3);
                }
              }
              e3(false, (n3 > 1 ? t3.indents : "") + (t3.name ? "</" + t3.name + ">" : "") + (t3.indent && !r3 ? "\n" : "")), r3 && r3();
            }
            function i2(t4) {
              return !!t4.interrupt && (t4.interrupt.append = e3, t4.interrupt.end = s2, t4.interrupt = false, e3(true), true);
            }
            if (e3(false, t3.indents + (t3.name ? "<" + t3.name : "") + (t3.attributes.length ? " " + t3.attributes.join(" ") : "") + (n3 ? t3.name ? ">" : "" : t3.name ? "/>" : "") + (t3.indent && n3 > 1 ? "\n" : "")), !n3) return e3(false, t3.indent ? "\n" : "");
            i2(t3) || s2();
          }
          e2.exports = function(e3, t3) {
            "object" != typeof t3 && (t3 = { indent: t3 });
            var r3, s2, c = t3.stream ? new i() : null, u = "", l2 = false, h = t3.indent ? true === t3.indent ? "    " : t3.indent : "", p = true;
            function d(e4) {
              p ? n2.nextTick(e4) : e4();
            }
            function f(e4, t4) {
              if (void 0 !== t4 && (u += t4), e4 && !l2 && (c = c || new i(), l2 = true), e4 && l2) {
                var r4 = u;
                d(function() {
                  c.emit("data", r4);
                }), u = "";
              }
            }
            function m(e4, t4) {
              a(f, o(e4, h, h ? 1 : 0), t4);
            }
            function w() {
              if (c) {
                var e4 = u;
                d(function() {
                  c.emit("data", e4), c.emit("end"), c.readable = false, c.emit("close");
                });
              }
            }
            return d(function() {
              p = false;
            }), t3.declaration && (s2 = { version: "1.0", encoding: (r3 = t3.declaration).encoding || "UTF-8" }, r3.standalone && (s2.standalone = r3.standalone), m({ "?xml": { _attr: s2 } }), u = u.replace("/>", "?>")), e3 && e3.forEach ? e3.forEach(function(t4, r4) {
              var n3;
              r4 + 1 === e3.length && (n3 = w), m(t4, n3);
            }) : m(e3, w), c ? (c.readable = true, c) : u;
          }, e2.exports.element = e2.exports.Element = function() {
            var e3 = Array.prototype.slice.call(arguments), t3 = { _elem: o(e3), push: function(e4) {
              if (!this.append) throw new Error("not assigned to a parent!");
              var t4 = this, r3 = this._elem.indent;
              a(this.append, o(e4, r3, this._elem.icount + (r3 ? 1 : 0)), function() {
                t4.append(true);
              });
            }, close: function(e4) {
              void 0 !== e4 && this.push(e4), this.end && this.end();
            } };
            return t3;
          };
        } }, t = {};
        function r(n2) {
          var s = t[n2];
          if (void 0 !== s) return s.exports;
          var i = t[n2] = { exports: {} };
          return e[n2].call(i.exports, i, i.exports, r), i.exports;
        }
        r.d = (e2, t2) => {
          for (var n2 in t2) r.o(t2, n2) && !r.o(e2, n2) && Object.defineProperty(e2, n2, { enumerable: true, get: t2[n2] });
        }, r.g = function() {
          if ("object" == typeof globalThis) return globalThis;
          try {
            return this || new Function("return this")();
          } catch (e2) {
            if ("object" == typeof window) return window;
          }
        }(), r.o = (e2, t2) => Object.prototype.hasOwnProperty.call(e2, t2), r.r = (e2) => {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
        };
        var n = {};
        return (() => {
          "use strict";
          r.r(n), r.d(n, { AbstractNumbering: () => Ji, Alignment: () => D, AlignmentAttributes: () => L, AlignmentType: () => m, Attributes: () => a, BaseEmphasisMark: () => Q, BaseXmlComponent: () => e2, Body: () => un, Bookmark: () => Or, BookmarkEnd: () => Lr, BookmarkStart: () => kr, Border: () => B, BorderElement: () => P, BorderStyle: () => w, Column: () => hn, ColumnAttributes: () => ln, ColumnBreak: () => pr, Columns: () => jr, ColumnsAttributes: () => zr, Comment: () => cr, CommentRangeEnd: () => or, CommentRangeStart: () => ir, CommentReference: () => ar, Comments: () => ur, ConcreteHyperlink: () => Sr, ConcreteNumbering: () => to, DeletedTextRun: () => na, DocGridAttributes: () => Wr, Document: () => Ho, DocumentAttributes: () => pn, DocumentBackground: () => fn, DocumentBackgroundAttributes: () => dn, DocumentDefaults: () => Bo, DocumentGrid: () => Kr, DocumentGridType: () => Pe, DotEmphasisMark: () => te, Drawing: () => Xt, DropCapType: () => vn, EMPTY_OBJECT: () => t2, EmphasisMark: () => ee, EmphasisMarkType: () => E, ExternalHyperlink: () => Rr, File: () => Ho, FootNoteReferenceRunAttributes: () => qo, FootNotes: () => ki, Footer: () => Xo, FooterWrapper: () => _i, FootnoteReference: () => Zo, FootnoteReferenceRun: () => Yo, FrameAnchorType: () => _n, FrameProperties: () => An, FramePropertiesAttributes: () => Tn, FrameWrap: () => En, GridSpan: () => ks, Header: () => $o, HeaderFooterReference: () => Hr, HeaderFooterReferenceType: () => Le, HeaderFooterType: () => De, HeaderWrapper: () => Fi, HeadingLevel: () => Se, HeightRule: () => $s, HorizontalPosition: () => Ze, HorizontalPositionAlign: () => y, HorizontalPositionRelativeFrom: () => xe, HpsMeasureElement: () => R, HyperlinkType: () => Oe, IgnoreIfEmptyXmlComponent: () => i, ImageRun: () => qt, ImportDotx: () => wa, ImportedRootElementAttributes: () => p, ImportedXmlComponent: () => h, Indent: () => H, InitializableXmlComponent: () => f, InsertedTextRun: () => Jo, InternalHyperlink: () => Ir, LeaderType: () => Re, Level: () => Xi, LevelBase: () => $i, LevelForOverride: () => qi, LevelFormat: () => Ui, LevelOverride: () => no, LevelSuffix: () => Hi, LineNumberAttributes: () => Gr, LineNumberRestartFormat: () => Fe, LineNumberType: () => Vr, LineRuleType: () => Ae, Math: () => Rn, MathAccentCharacter: () => Pn, MathAngledBrackets: () => bs, MathBase: () => Fn, MathCurlyBrackets: () => ys, MathDegree: () => ns, MathDenominator: () => On, MathFraction: () => Ln, MathFunction: () => ls, MathFunctionName: () => cs, MathFunctionProperties: () => us, MathIntegral: () => $n, MathLimitLocation: () => Mn, MathNAryProperties: () => Wn, MathNumerator: () => kn, MathPreSubSuperScript: () => ts, MathPreSubSuperScriptProperties: () => es, MathRadical: () => as, MathRadicalProperties: () => os, MathRoundBrackets: () => ws, MathRun: () => Cn, MathSquareBrackets: () => gs, MathSubScript: () => Yn, MathSubScriptElement: () => Kn, MathSubScriptProperties: () => Zn, MathSubSuperScript: () => Qn, MathSubSuperScriptProperties: () => Jn, MathSum: () => Vn, MathSuperScript: () => qn, MathSuperScriptElement: () => Gn, MathSuperScriptProperties: () => Xn, Media: () => Bi, NumberFormat: () => x, NumberProperties: () => xr, NumberValueElement: () => C, Numbering: () => oo, OnOffElement: () => I, OutlineLevel: () => Dr, OverlapType: () => Gs, Packer: () => pa, PageBorderDisplay: () => Be, PageBorderOffsetFrom: () => Me, PageBorderZOrder: () => Ue, PageBorders: () => Xr, PageBreak: () => hr, PageBreakBefore: () => dr, PageMargin: () => Zr, PageMarginAttributes: () => qr, PageNumber: () => A, PageNumberSeparator: () => He, PageNumberType: () => Jr, PageNumberTypeAttributes: () => Yr, PageOrientation: () => ze, PageReference: () => Fr, PageSize: () => en, PageSizeAttributes: () => Qr, PageTextDirection: () => rn, PageTextDirectionType: () => je, Paragraph: () => In, ParagraphProperties: () => Sn, ParagraphPropertiesDefaults: () => Po, PrettifyType: () => la, RelativeHorizontalPosition: () => Ws, RelativeVerticalPosition: () => Ks, Run: () => me, RunFonts: () => ae, RunProperties: () => pe, RunPropertiesChange: () => de, RunPropertiesDefaults: () => Fo, SectionProperties: () => cn, SectionType: () => We, SectionTypeAttributes: () => nn, SequentialIdentifier: () => Yt, Shading: () => Y, ShadingType: () => _, SimpleField: () => er, SimpleMailMergeField: () => tr, SimplePos: () => Ve, SpaceType: () => v, Spacing: () => mr, StringContainer: () => k, StringEnumValueElement: () => O, StringValueElement: () => N, Style: () => wr, StyleForCharacter: () => bo, StyleForParagraph: () => yo, StyleLevel: () => Vo, Styles: () => Do, SymbolRun: () => be, TDirection: () => Fs, Tab: () => Jt, TabAttributes: () => yr, TabStop: () => gr, TabStopItem: () => br, TabStopPosition: () => Ne, TabStopType: () => Ie, Table: () => ei, TableAnchorType: () => js, TableBorders: () => zs, TableCell: () => Ms, TableCellBorders: () => Cs, TableFloatOptionsAttributes: () => qs, TableFloatProperties: () => Zs, TableLayout: () => Js, TableLayoutType: () => Vs, TableOfContents: () => Go, TableProperties: () => Qs, TableRow: () => si, TableRowHeight: () => ri, TableRowHeightAttributes: () => ti, TableRowProperties: () => ni, TableWidthElement: () => Rs, TextDirection: () => Ss, TextRun: () => we, TextWrappingSide: () => Ee, TextWrappingType: () => _e, ThematicBreak: () => M, Type: () => sn, Underline: () => he, UnderlineType: () => T, VerticalAlign: () => ke, VerticalAlignAttributes: () => Br, VerticalAlignElement: () => Mr, VerticalMerge: () => Ds, VerticalMergeType: () => As, VerticalPosition: () => Je, VerticalPositionAlign: () => b, VerticalPositionRelativeFrom: () => ve, WORKAROUND: () => zo, WORKAROUND2: () => Mi, WORKAROUND3: () => d, WORKAROUND4: () => rs, WidthType: () => Es, WrapNone: () => Rt, WrapSquare: () => Ct, WrapTight: () => kt, WrapTopAndBottom: () => Dt, XmlAttributeComponent: () => o, XmlComponent: () => s, convertInchesToTwip: () => ga.convertInchesToTwip, convertMillimetersToTwip: () => ga.convertMillimetersToTwip, convertToXmlComponent: () => u, dateTimeValue: () => ga.dateTimeValue, decimalNumber: () => ga.decimalNumber, eighthPointMeasureValue: () => ga.eighthPointMeasureValue, hexColorValue: () => ga.hexColorValue, hpsMeasureValue: () => ga.hpsMeasureValue, longHexNumber: () => ga.longHexNumber, measurementOrPercentValue: () => ga.measurementOrPercentValue, percentageValue: () => ga.percentageValue, pointMeasureValue: () => ga.pointMeasureValue, positiveUniversalMeasureValue: () => ga.positiveUniversalMeasureValue, sectionMarginDefaults: () => on, sectionPageSizeDefaults: () => an, shortHexNumber: () => ga.shortHexNumber, signedHpsMeasureValue: () => ga.signedHpsMeasureValue, signedTwipsMeasureValue: () => ga.signedTwipsMeasureValue, twipsMeasureValue: () => ga.twipsMeasureValue, uCharHexNumber: () => ga.uCharHexNumber, uniqueId: () => ga.uniqueId, uniqueNumericId: () => ga.uniqueNumericId, universalMeasureValue: () => ga.universalMeasureValue, unsignedDecimalNumber: () => ga.unsignedDecimalNumber });
          class e2 {
            constructor(e3) {
              this.rootKey = e3;
            }
          }
          const t2 = Object.seal({});
          class s extends e2 {
            constructor(e3) {
              super(e3), this.root = new Array();
            }
            prepForXml(r2) {
              var n2;
              const s2 = this.root.map((t3) => t3 instanceof e2 ? t3.prepForXml(r2) : t3).filter((e3) => void 0 !== e3);
              return { [this.rootKey]: s2.length ? 1 === s2.length && (null === (n2 = s2[0]) || void 0 === n2 ? void 0 : n2._attr) ? s2[0] : s2 : t2 };
            }
            addChildElement(e3) {
              return this.root.push(e3), this;
            }
          }
          class i extends s {
            prepForXml(e3) {
              const t3 = super.prepForXml(e3);
              if (t3 && ("object" != typeof t3[this.rootKey] || Object.keys(t3[this.rootKey]).length)) return t3;
            }
          }
          class o extends e2 {
            constructor(e3) {
              super("_attr"), this.root = e3;
            }
            prepForXml(e3) {
              const t3 = {};
              return Object.keys(this.root).forEach((e4) => {
                const r2 = this.root[e4];
                if (void 0 !== r2) {
                  const n2 = this.xmlKeys && this.xmlKeys[e4] || e4;
                  t3[n2] = r2;
                }
              }), { _attr: t3 };
            }
          }
          class a extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { val: "w:val", color: "w:color", fill: "w:fill", space: "w:space", sz: "w:sz", type: "w:type", rsidR: "w:rsidR", rsidRPr: "w:rsidRPr", rsidSect: "w:rsidSect", w: "w:w", h: "w:h", top: "w:top", right: "w:right", bottom: "w:bottom", left: "w:left", header: "w:header", footer: "w:footer", gutter: "w:gutter", linePitch: "w:linePitch", pos: "w:pos" };
            }
          }
          var c = r(7888);
          const u = (e3) => {
            switch (e3.type) {
              case void 0:
              case "element":
                const t3 = new h(e3.name, e3.attributes), r2 = e3.elements || [];
                for (const e4 of r2) {
                  const r3 = u(e4);
                  void 0 !== r3 && t3.push(r3);
                }
                return t3;
              case "text":
                return e3.text;
              default:
                return;
            }
          };
          class l2 extends o {
          }
          class h extends s {
            static fromXmlString(e3) {
              const t3 = (0, c.xml2js)(e3, { compact: false });
              return u(t3);
            }
            constructor(e3, t3) {
              super(e3), t3 && this.root.push(new l2(t3));
            }
            push(e3) {
              this.root.push(e3);
            }
          }
          class p extends s {
            constructor(e3) {
              super(""), this._attr = e3;
            }
            prepForXml(e3) {
              return { _attr: this._attr };
            }
          }
          const d = "";
          class f extends s {
            constructor(e3, t3) {
              super(e3), t3 && (this.root = t3.root);
            }
          }
          var m, w, g, y, b, x, v, _, E, T, A, S = r(6595);
          class I extends s {
            constructor(e3, t3 = true) {
              super(e3), true !== t3 && this.root.push(new a({ val: t3 }));
            }
          }
          class R extends s {
            constructor(e3, t3) {
              super(e3), this.root.push(new a({ val: (0, S.KR)(t3) }));
            }
          }
          class N extends s {
            constructor(e3, t3) {
              super(e3), this.root.push(new a({ val: t3 }));
            }
          }
          class C extends s {
            constructor(e3, t3) {
              super(e3), this.root.push(new a({ val: t3 }));
            }
          }
          class O extends s {
            constructor(e3, t3) {
              super(e3), this.root.push(new a({ val: t3 }));
            }
          }
          class k extends s {
            constructor(e3, t3) {
              super(e3), this.root.push(t3);
            }
          }
          !function(e3) {
            e3.START = "start", e3.CENTER = "center", e3.END = "end", e3.BOTH = "both", e3.MEDIUM_KASHIDA = "mediumKashida", e3.DISTRIBUTE = "distribute", e3.NUM_TAB = "numTab", e3.HIGH_KASHIDA = "highKashida", e3.LOW_KASHIDA = "lowKashida", e3.THAI_DISTRIBUTE = "thaiDistribute", e3.LEFT = "left", e3.RIGHT = "right", e3.JUSTIFIED = "both";
          }(m || (m = {}));
          class L extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { val: "w:val" };
            }
          }
          class D extends s {
            constructor(e3) {
              super("w:jc"), this.root.push(new L({ val: e3 }));
            }
          }
          class P extends s {
            constructor(e3, { color: t3, size: r2, space: n2, style: s2 }) {
              super(e3), this.root.push(new F({ style: s2, color: void 0 === t3 ? void 0 : (0, S.dg)(t3), size: void 0 === r2 ? void 0 : (0, S.LV)(r2), space: void 0 === n2 ? void 0 : (0, S.gg)(n2) }));
            }
          }
          class F extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { style: "w:val", color: "w:color", size: "w:sz", space: "w:space" };
            }
          }
          !function(e3) {
            e3.SINGLE = "single", e3.DASH_DOT_STROKED = "dashDotStroked", e3.DASHED = "dashed", e3.DASH_SMALL_GAP = "dashSmallGap", e3.DOT_DASH = "dotDash", e3.DOT_DOT_DASH = "dotDotDash", e3.DOTTED = "dotted", e3.DOUBLE = "double", e3.DOUBLE_WAVE = "doubleWave", e3.INSET = "inset", e3.NIL = "nil", e3.NONE = "none", e3.OUTSET = "outset", e3.THICK = "thick", e3.THICK_THIN_LARGE_GAP = "thickThinLargeGap", e3.THICK_THIN_MEDIUM_GAP = "thickThinMediumGap", e3.THICK_THIN_SMALL_GAP = "thickThinSmallGap", e3.THIN_THICK_LARGE_GAP = "thinThickLargeGap", e3.THIN_THICK_MEDIUM_GAP = "thinThickMediumGap", e3.THIN_THICK_SMALL_GAP = "thinThickSmallGap", e3.THIN_THICK_THIN_LARGE_GAP = "thinThickThinLargeGap", e3.THIN_THICK_THIN_MEDIUM_GAP = "thinThickThinMediumGap", e3.THIN_THICK_THIN_SMALL_GAP = "thinThickThinSmallGap", e3.THREE_D_EMBOSS = "threeDEmboss", e3.THREE_D_ENGRAVE = "threeDEngrave", e3.TRIPLE = "triple", e3.WAVE = "wave";
          }(w || (w = {}));
          class B extends i {
            constructor(e3) {
              super("w:pBdr"), e3.top && this.root.push(new P("w:top", e3.top)), e3.bottom && this.root.push(new P("w:bottom", e3.bottom)), e3.left && this.root.push(new P("w:left", e3.left)), e3.right && this.root.push(new P("w:right", e3.right));
            }
          }
          class M extends s {
            constructor() {
              super("w:pBdr");
              const e3 = new P("w:bottom", { color: "auto", space: 1, style: w.SINGLE, size: 6 });
              this.root.push(e3);
            }
          }
          class U extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { start: "w:start", end: "w:end", left: "w:left", right: "w:right", hanging: "w:hanging", firstLine: "w:firstLine" };
            }
          }
          class H extends s {
            constructor({ start: e3, end: t3, left: r2, right: n2, hanging: s2, firstLine: i2 }) {
              super("w:ind"), this.root.push(new U({ start: void 0 === e3 ? void 0 : (0, S.xb)(e3), end: void 0 === t3 ? void 0 : (0, S.xb)(t3), left: void 0 === r2 ? void 0 : (0, S.xb)(r2), right: void 0 === n2 ? void 0 : (0, S.xb)(n2), hanging: void 0 === s2 ? void 0 : (0, S.Jd)(s2), firstLine: void 0 === i2 ? void 0 : (0, S.Jd)(i2) }));
            }
          }
          class z extends s {
            constructor() {
              super("w:br");
            }
          }
          !function(e3) {
            e3.BEGIN = "begin", e3.END = "end", e3.SEPARATE = "separate";
          }(g || (g = {}));
          class j extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { type: "w:fldCharType", dirty: "w:dirty" };
            }
          }
          class W extends s {
            constructor(e3) {
              super("w:fldChar"), this.root.push(new j({ type: g.BEGIN, dirty: e3 }));
            }
          }
          class K extends s {
            constructor(e3) {
              super("w:fldChar"), this.root.push(new j({ type: g.SEPARATE, dirty: e3 }));
            }
          }
          class G extends s {
            constructor(e3) {
              super("w:fldChar"), this.root.push(new j({ type: g.END, dirty: e3 }));
            }
          }
          !function(e3) {
            e3.CENTER = "center", e3.INSIDE = "inside", e3.LEFT = "left", e3.OUTSIDE = "outside", e3.RIGHT = "right";
          }(y || (y = {})), function(e3) {
            e3.BOTTOM = "bottom", e3.CENTER = "center", e3.INSIDE = "inside", e3.OUTSIDE = "outside", e3.TOP = "top";
          }(b || (b = {})), function(e3) {
            e3.DECIMAL = "decimal", e3.UPPER_ROMAN = "upperRoman", e3.LOWER_ROMAN = "lowerRoman", e3.UPPER_LETTER = "upperLetter", e3.LOWER_LETTER = "lowerLetter", e3.ORDINAL = "ordinal", e3.CARDINAL_TEXT = "cardinalText", e3.ORDINAL_TEXT = "ordinalText", e3.HEX = "hex", e3.CHICAGO = "chicago", e3.IDEOGRAPH_DIGITAL = "ideographDigital", e3.JAPANESE_COUNTING = "japaneseCounting", e3.AIUEO = "aiueo", e3.IROHA = "iroha", e3.DECIMAL_FULL_WIDTH = "decimalFullWidth", e3.DECIMAL_HALF_WIDTH = "decimalHalfWidth", e3.JAPANESE_LEGAL = "japaneseLegal", e3.JAPANESE_DIGITAL_TEN_THOUSAND = "japaneseDigitalTenThousand", e3.DECIMAL_ENCLOSED_CIRCLE = "decimalEnclosedCircle", e3.DECIMAL_FULL_WIDTH_2 = "decimalFullWidth2", e3.AIUEO_FULL_WIDTH = "aiueoFullWidth", e3.IROHA_FULL_WIDTH = "irohaFullWidth", e3.DECIMAL_ZERO = "decimalZero", e3.BULLET = "bullet", e3.GANADA = "ganada", e3.CHOSUNG = "chosung", e3.DECIMAL_ENCLOSED_FULL_STOP = "decimalEnclosedFullstop", e3.DECIMAL_ENCLOSED_PAREN = "decimalEnclosedParen", e3.DECIMAL_ENCLOSED_CIRCLE_CHINESE = "decimalEnclosedCircleChinese", e3.IDEOGRAPH_ENCLOSED_CIRCLE = "ideographEnclosedCircle", e3.IDEOGRAPH_TRADITIONAL = "ideographTraditional", e3.IDEOGRAPH_ZODIAC = "ideographZodiac", e3.IDEOGRAPH_ZODIAC_TRADITIONAL = "ideographZodiacTraditional", e3.TAIWANESE_COUNTING = "taiwaneseCounting", e3.IDEOGRAPH_LEGAL_TRADITIONAL = "ideographLegalTraditional", e3.TAIWANESE_COUNTING_THOUSAND = "taiwaneseCountingThousand", e3.TAIWANESE_DIGITAL = "taiwaneseDigital", e3.CHINESE_COUNTING = "chineseCounting", e3.CHINESE_LEGAL_SIMPLIFIED = "chineseLegalSimplified", e3.CHINESE_COUNTING_TEN_THOUSAND = "chineseCountingThousand", e3.KOREAN_DIGITAL = "koreanDigital", e3.KOREAN_COUNTING = "koreanCounting", e3.KOREAN_LEGAL = "koreanLegal", e3.KOREAN_DIGITAL_2 = "koreanDigital2", e3.VIETNAMESE_COUNTING = "vietnameseCounting", e3.RUSSIAN_LOWER = "russianLower", e3.RUSSIAN_UPPER = "russianUpper", e3.NONE = "none", e3.NUMBER_IN_DASH = "numberInDash", e3.HEBREW_1 = "hebrew1", e3.HEBREW_2 = "hebrew2", e3.ARABIC_ALPHA = "arabicAlpha", e3.ARABIC_ABJAD = "arabicAbjad", e3.HINDI_VOWELS = "hindiVowels", e3.HINDI_CONSONANTS = "hindiConsonants", e3.HINDI_NUMBERS = "hindiNumbers", e3.HINDI_COUNTING = "hindiCounting", e3.THAI_LETTERS = "thaiLetters", e3.THAI_NUMBERS = "thaiNumbers", e3.THAI_COUNTING = "thaiCounting", e3.BAHT_TEXT = "bahtText", e3.DOLLAR_TEXT = "dollarText";
          }(x || (x = {})), function(e3) {
            e3.DEFAULT = "default", e3.PRESERVE = "preserve";
          }(v || (v = {}));
          class V extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { space: "xml:space" };
            }
          }
          class $ extends s {
            constructor() {
              super("w:instrText"), this.root.push(new V({ space: v.PRESERVE })), this.root.push("PAGE");
            }
          }
          class X extends s {
            constructor() {
              super("w:instrText"), this.root.push(new V({ space: v.PRESERVE })), this.root.push("NUMPAGES");
            }
          }
          class q extends s {
            constructor() {
              super("w:instrText"), this.root.push(new V({ space: v.PRESERVE })), this.root.push("SECTIONPAGES");
            }
          }
          class Z extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { fill: "w:fill", color: "w:color", type: "w:val" };
            }
          }
          class Y extends s {
            constructor({ fill: e3, color: t3, type: r2 }) {
              super("w:shd"), this.root.push(new Z({ fill: void 0 === e3 ? void 0 : (0, S.dg)(e3), color: void 0 === t3 ? void 0 : (0, S.dg)(t3), type: r2 }));
            }
          }
          !function(e3) {
            e3.CLEAR = "clear", e3.DIAGONAL_CROSS = "diagCross", e3.DIAGONAL_STRIPE = "diagStripe", e3.HORIZONTAL_CROSS = "horzCross", e3.HORIZONTAL_STRIPE = "horzStripe", e3.NIL = "nil", e3.PERCENT_5 = "pct5", e3.PERCENT_10 = "pct10", e3.PERCENT_12 = "pct12", e3.PERCENT_15 = "pct15", e3.PERCENT_20 = "pct20", e3.PERCENT_25 = "pct25", e3.PERCENT_30 = "pct30", e3.PERCENT_35 = "pct35", e3.PERCENT_37 = "pct37", e3.PERCENT_40 = "pct40", e3.PERCENT_45 = "pct45", e3.PERCENT_50 = "pct50", e3.PERCENT_55 = "pct55", e3.PERCENT_60 = "pct60", e3.PERCENT_62 = "pct62", e3.PERCENT_65 = "pct65", e3.PERCENT_70 = "pct70", e3.PERCENT_75 = "pct75", e3.PERCENT_80 = "pct80", e3.PERCENT_85 = "pct85", e3.PERCENT_87 = "pct87", e3.PERCENT_90 = "pct90", e3.PERCENT_95 = "pct95", e3.REVERSE_DIAGONAL_STRIPE = "reverseDiagStripe", e3.SOLID = "solid", e3.THIN_DIAGONAL_CROSS = "thinDiagCross", e3.THIN_DIAGONAL_STRIPE = "thinDiagStripe", e3.THIN_HORIZONTAL_CROSS = "thinHorzCross", e3.THIN_REVERSE_DIAGONAL_STRIPE = "thinReverseDiagStripe", e3.THIN_VERTICAL_STRIPE = "thinVertStripe", e3.VERTICAL_STRIPE = "vertStripe";
          }(_ || (_ = {}));
          class J extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { id: "w:id", author: "w:author", date: "w:date" };
            }
          }
          !function(e3) {
            e3.DOT = "dot";
          }(E || (E = {}));
          class Q extends s {
            constructor(e3) {
              super("w:em"), this.root.push(new a({ val: e3 }));
            }
          }
          class ee extends Q {
            constructor(e3 = E.DOT) {
              super(e3);
            }
          }
          class te extends Q {
            constructor() {
              super(E.DOT);
            }
          }
          class re extends s {
            constructor(e3) {
              super("w:spacing"), this.root.push(new a({ val: (0, S.xb)(e3) }));
            }
          }
          class ne extends s {
            constructor(e3) {
              super("w:color"), this.root.push(new a({ val: (0, S.dg)(e3) }));
            }
          }
          class se extends s {
            constructor(e3) {
              super("w:highlight"), this.root.push(new a({ val: e3 }));
            }
          }
          class ie extends s {
            constructor(e3) {
              super("w:highlightCs"), this.root.push(new a({ val: e3 }));
            }
          }
          class oe extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { ascii: "w:ascii", cs: "w:cs", eastAsia: "w:eastAsia", hAnsi: "w:hAnsi", hint: "w:hint" };
            }
          }
          class ae extends s {
            constructor(e3, t3) {
              if (super("w:rFonts"), "string" == typeof e3) {
                const r2 = e3;
                this.root.push(new oe({ ascii: r2, cs: r2, eastAsia: r2, hAnsi: r2, hint: t3 }));
              } else {
                const t4 = e3;
                this.root.push(new oe(t4));
              }
            }
          }
          class ce extends s {
            constructor(e3) {
              super("w:vertAlign"), this.root.push(new a({ val: e3 }));
            }
          }
          class ue extends ce {
            constructor() {
              super("superscript");
            }
          }
          class le extends ce {
            constructor() {
              super("subscript");
            }
          }
          !function(e3) {
            e3.SINGLE = "single", e3.WORDS = "words", e3.DOUBLE = "double", e3.THICK = "thick", e3.DOTTED = "dotted", e3.DOTTEDHEAVY = "dottedHeavy", e3.DASH = "dash", e3.DASHEDHEAVY = "dashedHeavy", e3.DASHLONG = "dashLong", e3.DASHLONGHEAVY = "dashLongHeavy", e3.DOTDASH = "dotDash", e3.DASHDOTHEAVY = "dashDotHeavy", e3.DOTDOTDASH = "dotDotDash", e3.DASHDOTDOTHEAVY = "dashDotDotHeavy", e3.WAVE = "wave", e3.WAVYHEAVY = "wavyHeavy", e3.WAVYDOUBLE = "wavyDouble", e3.NONE = "none";
          }(T || (T = {}));
          class he extends s {
            constructor(e3 = T.SINGLE, t3) {
              super("w:u"), this.root.push(new a({ val: e3, color: void 0 === t3 ? void 0 : (0, S.dg)(t3) }));
            }
          }
          class pe extends i {
            constructor(e3) {
              var t3, r2;
              if (super("w:rPr"), !e3) return;
              void 0 !== e3.bold && this.push(new I("w:b", e3.bold)), (void 0 === e3.boldComplexScript && void 0 !== e3.bold || e3.boldComplexScript) && this.push(new I("w:bCs", null !== (t3 = e3.boldComplexScript) && void 0 !== t3 ? t3 : e3.bold)), void 0 !== e3.italics && this.push(new I("w:i", e3.italics)), (void 0 === e3.italicsComplexScript && void 0 !== e3.italics || e3.italicsComplexScript) && this.push(new I("w:iCs", null !== (r2 = e3.italicsComplexScript) && void 0 !== r2 ? r2 : e3.italics)), e3.underline && this.push(new he(e3.underline.type, e3.underline.color)), e3.emphasisMark && this.push(new ee(e3.emphasisMark.type)), e3.color && this.push(new ne(e3.color)), void 0 !== e3.size && this.push(new R("w:sz", e3.size));
              const n2 = void 0 === e3.sizeComplexScript || true === e3.sizeComplexScript ? e3.size : e3.sizeComplexScript;
              n2 && this.push(new R("w:szCs", n2)), void 0 !== e3.rightToLeft && this.push(new I("w:rtl", e3.rightToLeft)), void 0 !== e3.smallCaps ? this.push(new I("w:smallCaps", e3.smallCaps)) : void 0 !== e3.allCaps && this.push(new I("w:caps", e3.allCaps)), void 0 !== e3.strike && this.push(new I("w:strike", e3.strike)), void 0 !== e3.doubleStrike && this.push(new I("w:dstrike", e3.doubleStrike)), e3.subScript && this.push(new le()), e3.superScript && this.push(new ue()), e3.style && this.push(new N("w:rStyle", e3.style)), e3.font && ("string" == typeof e3.font ? this.push(new ae(e3.font)) : "name" in e3.font ? this.push(new ae(e3.font.name, e3.font.hint)) : this.push(new ae(e3.font))), e3.highlight && this.push(new se(e3.highlight));
              const s2 = void 0 === e3.highlightComplexScript || true === e3.highlightComplexScript ? e3.highlight : e3.highlightComplexScript;
              s2 && this.push(new ie(s2)), e3.characterSpacing && this.push(new re(e3.characterSpacing)), void 0 !== e3.emboss && this.push(new I("w:emboss", e3.emboss)), void 0 !== e3.imprint && this.push(new I("w:imprint", e3.imprint)), e3.shading && this.push(new Y(e3.shading)), e3.revision && this.push(new de(e3.revision)), e3.border && this.push(new P("w:bdr", e3.border)), e3.vanish && this.push(new I("w:vanish", e3.vanish)), e3.specVanish && this.push(new I("w:specVanish", e3.vanish)), void 0 !== e3.scale && this.push(new C("w:w", e3.scale));
            }
            push(e3) {
              this.root.push(e3);
            }
          }
          class de extends s {
            constructor(e3) {
              super("w:rPrChange"), this.root.push(new J({ id: e3.id, author: e3.author, date: e3.date })), this.addChildElement(new pe(e3));
            }
          }
          class fe extends s {
            constructor(e3) {
              var t3;
              return super("w:t"), "string" == typeof e3 ? (this.root.push(new V({ space: v.PRESERVE })), this.root.push(e3), this) : (this.root.push(new V({ space: null !== (t3 = e3.space) && void 0 !== t3 ? t3 : v.DEFAULT })), this.root.push(e3.text), this);
            }
          }
          !function(e3) {
            e3.CURRENT = "CURRENT", e3.TOTAL_PAGES = "TOTAL_PAGES", e3.TOTAL_PAGES_IN_SECTION = "TOTAL_PAGES_IN_SECTION";
          }(A || (A = {}));
          class me extends s {
            constructor(e3) {
              if (super("w:r"), this.properties = new pe(e3), this.root.push(this.properties), e3.break) for (let t3 = 0; t3 < e3.break; t3++) this.root.push(new z());
              if (e3.children) for (const t3 of e3.children) if ("string" != typeof t3) this.root.push(t3);
              else switch (t3) {
                case A.CURRENT:
                  this.root.push(new W()), this.root.push(new $()), this.root.push(new K()), this.root.push(new G());
                  break;
                case A.TOTAL_PAGES:
                  this.root.push(new W()), this.root.push(new X()), this.root.push(new K()), this.root.push(new G());
                  break;
                case A.TOTAL_PAGES_IN_SECTION:
                  this.root.push(new W()), this.root.push(new q()), this.root.push(new K()), this.root.push(new G());
                  break;
                default:
                  this.root.push(new fe(t3));
              }
              else e3.text && this.root.push(new fe(e3.text));
            }
          }
          class we extends me {
            constructor(e3) {
              if ("string" == typeof e3) return super({}), this.root.push(new fe(e3)), this;
              super(e3);
            }
          }
          class ge extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { char: "w:char", symbolfont: "w:font" };
            }
          }
          class ye extends s {
            constructor(e3 = "", t3 = "Wingdings") {
              super("w:sym"), this.root.push(new ge({ char: e3, symbolfont: t3 }));
            }
          }
          class be extends me {
            constructor(e3) {
              if ("string" == typeof e3) return super({}), this.root.push(new ye(e3)), this;
              super(e3), this.root.push(new ye(e3.char, e3.symbolfont));
            }
          }
          var xe, ve, _e, Ee, Te, Ae, Se, Ie, Re, Ne, Ce, Oe, ke, Le, De, Pe, Fe, Be, Me, Ue, He, ze, je, We, Ke = r(5457);
          !function(e3) {
            e3.CHARACTER = "character", e3.COLUMN = "column", e3.INSIDE_MARGIN = "insideMargin", e3.LEFT_MARGIN = "leftMargin", e3.MARGIN = "margin", e3.OUTSIDE_MARGIN = "outsideMargin", e3.PAGE = "page", e3.RIGHT_MARGIN = "rightMargin";
          }(xe || (xe = {})), function(e3) {
            e3.BOTTOM_MARGIN = "bottomMargin", e3.INSIDE_MARGIN = "insideMargin", e3.LINE = "line", e3.MARGIN = "margin", e3.OUTSIDE_MARGIN = "outsideMargin", e3.PAGE = "page", e3.PARAGRAPH = "paragraph", e3.TOP_MARGIN = "topMargin";
          }(ve || (ve = {}));
          class Ge extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { x: "x", y: "y" };
            }
          }
          class Ve extends s {
            constructor() {
              super("wp:simplePos"), this.root.push(new Ge({ x: 0, y: 0 }));
            }
          }
          class $e extends s {
            constructor(e3) {
              super("wp:align"), this.root.push(e3);
            }
          }
          class Xe extends s {
            constructor(e3) {
              super("wp:posOffset"), this.root.push(e3.toString());
            }
          }
          class qe extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { relativeFrom: "relativeFrom" };
            }
          }
          class Ze extends s {
            constructor(e3) {
              if (super("wp:positionH"), this.root.push(new qe({ relativeFrom: e3.relative || xe.PAGE })), e3.align) this.root.push(new $e(e3.align));
              else {
                if (void 0 === e3.offset) throw new Error("There is no configuration provided for floating position (Align or offset)");
                this.root.push(new Xe(e3.offset));
              }
            }
          }
          class Ye extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { relativeFrom: "relativeFrom" };
            }
          }
          class Je extends s {
            constructor(e3) {
              if (super("wp:positionV"), this.root.push(new Ye({ relativeFrom: e3.relative || ve.PAGE })), e3.align) this.root.push(new $e(e3.align));
              else {
                if (void 0 === e3.offset) throw new Error("There is no configuration provided for floating position (Align or offset)");
                this.root.push(new Xe(e3.offset));
              }
            }
          }
          class Qe extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { uri: "uri" };
            }
          }
          class et extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { embed: "r:embed", cstate: "cstate" };
            }
          }
          class tt extends s {
            constructor(e3) {
              super("a:blip"), this.root.push(new et({ embed: `rId{${e3.fileName}}`, cstate: "none" }));
            }
          }
          class rt extends s {
            constructor() {
              super("a:srcRect");
            }
          }
          class nt extends s {
            constructor() {
              super("a:fillRect");
            }
          }
          class st extends s {
            constructor() {
              super("a:stretch"), this.root.push(new nt());
            }
          }
          class it extends s {
            constructor(e3) {
              super("pic:blipFill"), this.root.push(new tt(e3)), this.root.push(new rt()), this.root.push(new st());
            }
          }
          class ot extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { noChangeAspect: "noChangeAspect", noChangeArrowheads: "noChangeArrowheads" };
            }
          }
          class at extends s {
            constructor() {
              super("a:picLocks"), this.root.push(new ot({ noChangeAspect: 1, noChangeArrowheads: 1 }));
            }
          }
          class ct extends s {
            constructor() {
              super("pic:cNvPicPr"), this.root.push(new at());
            }
          }
          class ut extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { id: "id", name: "name", descr: "descr" };
            }
          }
          class lt extends s {
            constructor() {
              super("pic:cNvPr"), this.root.push(new ut({ id: 0, name: "", descr: "" }));
            }
          }
          class ht extends s {
            constructor() {
              super("pic:nvPicPr"), this.root.push(new lt()), this.root.push(new ct());
            }
          }
          class pt extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { xmlns: "xmlns:pic" };
            }
          }
          class dt extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { cx: "cx", cy: "cy" };
            }
          }
          class ft extends s {
            constructor(e3, t3) {
              super("a:ext"), this.attributes = new dt({ cx: e3, cy: t3 }), this.root.push(this.attributes);
            }
          }
          class mt extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { x: "x", y: "y" };
            }
          }
          class wt extends s {
            constructor() {
              super("a:off"), this.root.push(new mt({ x: 0, y: 0 }));
            }
          }
          class gt extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { flipVertical: "flipV", flipHorizontal: "flipH", rotation: "rot" };
            }
          }
          class yt extends s {
            constructor(e3) {
              var t3, r2;
              super("a:xfrm"), this.root.push(new gt({ flipVertical: null === (t3 = e3.flip) || void 0 === t3 ? void 0 : t3.vertical, flipHorizontal: null === (r2 = e3.flip) || void 0 === r2 ? void 0 : r2.horizontal, rotation: e3.rotation })), this.extents = new ft(e3.emus.x, e3.emus.y), this.root.push(new wt()), this.root.push(this.extents);
            }
          }
          class bt extends s {
            constructor() {
              super("a:avLst");
            }
          }
          class xt extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { prst: "prst" };
            }
          }
          class vt extends s {
            constructor() {
              super("a:prstGeom"), this.root.push(new xt({ prst: "rect" })), this.root.push(new bt());
            }
          }
          class _t extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { bwMode: "bwMode" };
            }
          }
          class Et extends s {
            constructor(e3) {
              super("pic:spPr"), this.root.push(new _t({ bwMode: "auto" })), this.form = new yt(e3), this.root.push(this.form), this.root.push(new vt());
            }
          }
          class Tt extends s {
            constructor(e3, t3) {
              super("pic:pic"), this.root.push(new pt({ xmlns: "http://schemas.openxmlformats.org/drawingml/2006/picture" })), this.root.push(new ht()), this.root.push(new it(e3)), this.root.push(new Et(t3));
            }
          }
          class At extends s {
            constructor(e3, t3) {
              super("a:graphicData"), this.root.push(new Qe({ uri: "http://schemas.openxmlformats.org/drawingml/2006/picture" })), this.pic = new Tt(e3, t3), this.root.push(this.pic);
            }
          }
          class St extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { a: "xmlns:a" };
            }
          }
          class It extends s {
            constructor(e3, t3) {
              super("a:graphic"), this.root.push(new St({ a: "http://schemas.openxmlformats.org/drawingml/2006/main" })), this.data = new At(e3, t3), this.root.push(this.data);
            }
          }
          !function(e3) {
            e3[e3.NONE = 0] = "NONE", e3[e3.SQUARE = 1] = "SQUARE", e3[e3.TIGHT = 2] = "TIGHT", e3[e3.TOP_AND_BOTTOM = 3] = "TOP_AND_BOTTOM";
          }(_e || (_e = {})), function(e3) {
            e3.BOTH_SIDES = "bothSides", e3.LEFT = "left", e3.RIGHT = "right", e3.LARGEST = "largest";
          }(Ee || (Ee = {}));
          class Rt extends s {
            constructor() {
              super("wp:wrapNone");
            }
          }
          class Nt extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { distT: "distT", distB: "distB", distL: "distL", distR: "distR", wrapText: "wrapText" };
            }
          }
          class Ct extends s {
            constructor(e3, t3 = { top: 0, bottom: 0, left: 0, right: 0 }) {
              super("wp:wrapSquare"), this.root.push(new Nt({ wrapText: e3.side || Ee.BOTH_SIDES, distT: t3.top, distB: t3.bottom, distL: t3.left, distR: t3.right }));
            }
          }
          class Ot extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { distT: "distT", distB: "distB" };
            }
          }
          class kt extends s {
            constructor(e3 = { top: 0, bottom: 0 }) {
              super("wp:wrapTight"), this.root.push(new Ot({ distT: e3.top, distB: e3.bottom }));
            }
          }
          class Lt extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { distT: "distT", distB: "distB" };
            }
          }
          class Dt extends s {
            constructor(e3 = { top: 0, bottom: 0 }) {
              super("wp:wrapTopAndBottom"), this.root.push(new Lt({ distT: e3.top, distB: e3.bottom }));
            }
          }
          class Pt extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { id: "id", name: "name", description: "descr", title: "title" };
            }
          }
          class Ft extends s {
            constructor({ name: e3, description: t3, title: r2 } = { name: "", description: "", title: "" }) {
              super("wp:docPr"), this.root.push(new Pt({ id: (0, Ke.NY)(), name: e3, description: t3, title: r2 }));
            }
          }
          class Bt extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { b: "b", l: "l", r: "r", t: "t" };
            }
          }
          class Mt extends s {
            constructor() {
              super("wp:effectExtent"), this.root.push(new Bt({ b: 0, l: 0, r: 0, t: 0 }));
            }
          }
          class Ut extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { cx: "cx", cy: "cy" };
            }
          }
          class Ht extends s {
            constructor(e3, t3) {
              super("wp:extent"), this.attributes = new Ut({ cx: e3, cy: t3 }), this.root.push(this.attributes);
            }
          }
          class zt extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { xmlns: "xmlns:a", noChangeAspect: "noChangeAspect" };
            }
          }
          class jt extends s {
            constructor() {
              super("a:graphicFrameLocks"), this.root.push(new zt({ xmlns: "http://schemas.openxmlformats.org/drawingml/2006/main", noChangeAspect: 1 }));
            }
          }
          class Wt extends s {
            constructor() {
              super("wp:cNvGraphicFramePr"), this.root.push(new jt());
            }
          }
          class Kt extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { distT: "distT", distB: "distB", distL: "distL", distR: "distR", allowOverlap: "allowOverlap", behindDoc: "behindDoc", layoutInCell: "layoutInCell", locked: "locked", relativeHeight: "relativeHeight", simplePos: "simplePos" };
            }
          }
          class Gt extends s {
            constructor(e3, t3, r2) {
              super("wp:anchor");
              const n2 = Object.assign({ allowOverlap: true, behindDocument: false, lockAnchor: false, layoutInCell: true, verticalPosition: {}, horizontalPosition: {} }, r2.floating);
              if (this.root.push(new Kt({ distT: n2.margins && n2.margins.top || 0, distB: n2.margins && n2.margins.bottom || 0, distL: n2.margins && n2.margins.left || 0, distR: n2.margins && n2.margins.right || 0, simplePos: "0", allowOverlap: true === n2.allowOverlap ? "1" : "0", behindDoc: true === n2.behindDocument ? "1" : "0", locked: true === n2.lockAnchor ? "1" : "0", layoutInCell: true === n2.layoutInCell ? "1" : "0", relativeHeight: n2.zIndex ? n2.zIndex : t3.emus.y })), this.root.push(new Ve()), this.root.push(new Ze(n2.horizontalPosition)), this.root.push(new Je(n2.verticalPosition)), this.root.push(new Ht(t3.emus.x, t3.emus.y)), this.root.push(new Mt()), void 0 !== r2.floating && void 0 !== r2.floating.wrap) switch (r2.floating.wrap.type) {
                case _e.SQUARE:
                  this.root.push(new Ct(r2.floating.wrap, r2.floating.margins));
                  break;
                case _e.TIGHT:
                  this.root.push(new kt(r2.floating.margins));
                  break;
                case _e.TOP_AND_BOTTOM:
                  this.root.push(new Dt(r2.floating.margins));
                  break;
                case _e.NONE:
                default:
                  this.root.push(new Rt());
              }
              else this.root.push(new Rt());
              this.root.push(new Ft(r2.docProperties)), this.root.push(new Wt()), this.root.push(new It(e3, t3));
            }
          }
          class Vt extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { distT: "distT", distB: "distB", distL: "distL", distR: "distR" };
            }
          }
          class $t extends s {
            constructor({ mediaData: e3, transform: t3, docProperties: r2 }) {
              super("wp:inline"), this.root.push(new Vt({ distT: 0, distB: 0, distL: 0, distR: 0 })), this.extent = new Ht(t3.emus.x, t3.emus.y), this.graphic = new It(e3, t3), this.root.push(this.extent), this.root.push(new Mt()), this.root.push(new Ft(r2)), this.root.push(new Wt()), this.root.push(this.graphic);
            }
          }
          class Xt extends s {
            constructor(e3, t3 = {}) {
              super("w:drawing"), t3.floating ? this.root.push(new Gt(e3, e3.transformation, t3)) : (this.inline = new $t({ mediaData: e3, transform: e3.transformation, docProperties: t3.docProperties }), this.root.push(this.inline));
            }
          }
          class qt extends me {
            constructor(e3) {
              super({}), this.key = `${(0, Ke.EL)()}.png`;
              const t3 = "string" == typeof e3.data ? this.convertDataURIToBinary(e3.data) : e3.data;
              this.imageData = { stream: t3, fileName: this.key, transformation: { pixels: { x: Math.round(e3.transformation.width), y: Math.round(e3.transformation.height) }, emus: { x: Math.round(9525 * e3.transformation.width), y: Math.round(9525 * e3.transformation.height) }, flip: e3.transformation.flip, rotation: e3.transformation.rotation ? 6e4 * e3.transformation.rotation : void 0 } };
              const r2 = new Xt(this.imageData, { floating: e3.floating, docProperties: e3.altText });
              this.root.push(r2);
            }
            prepForXml(e3) {
              return e3.file.Media.addImage(this.key, this.imageData), super.prepForXml(e3);
            }
            convertDataURIToBinary(e3) {
              if ("function" == typeof atob) {
                const t3 = ";base64,", r2 = e3.indexOf(t3), n2 = -1 === r2 ? 0 : r2 + t3.length;
                return new Uint8Array(atob(e3.substring(n2)).split("").map((e4) => e4.charCodeAt(0)));
              }
              return new (r(8764)).Buffer(e3, "base64");
            }
          }
          class Zt extends s {
            constructor(e3) {
              super("w:instrText"), this.root.push(new V({ space: v.PRESERVE })), this.root.push(`SEQ ${e3}`);
            }
          }
          class Yt extends me {
            constructor(e3) {
              super({}), this.root.push(new W(true)), this.root.push(new Zt(e3)), this.root.push(new K()), this.root.push(new G());
            }
          }
          class Jt extends s {
            constructor() {
              super("w:tab");
            }
          }
          class Qt extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { instr: "w:instr" };
            }
          }
          class er extends s {
            constructor(e3, t3) {
              super("w:fldSimple"), this.root.push(new Qt({ instr: e3 })), void 0 !== t3 && this.root.push(new we(t3));
            }
          }
          class tr extends er {
            constructor(e3) {
              super(` MERGEFIELD ${e3} `, `\xAB${e3}\xBB`);
            }
          }
          class rr extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { id: "w:id", initials: "w:initials", author: "w:author", date: "w:date" };
            }
          }
          class nr extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { id: "w:id" };
            }
          }
          class sr extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { "xmlns:cx": "xmlns:cx", "xmlns:cx1": "xmlns:cx1", "xmlns:cx2": "xmlns:cx2", "xmlns:cx3": "xmlns:cx3", "xmlns:cx4": "xmlns:cx4", "xmlns:cx5": "xmlns:cx5", "xmlns:cx6": "xmlns:cx6", "xmlns:cx7": "xmlns:cx7", "xmlns:cx8": "xmlns:cx8", "xmlns:mc": "xmlns:mc", "xmlns:aink": "xmlns:aink", "xmlns:am3d": "xmlns:am3d", "xmlns:o": "xmlns:o", "xmlns:r": "xmlns:r", "xmlns:m": "xmlns:m", "xmlns:v": "xmlns:v", "xmlns:wp14": "xmlns:wp14", "xmlns:wp": "xmlns:wp", "xmlns:w10": "xmlns:w10", "xmlns:w": "xmlns:w", "xmlns:w14": "xmlns:w14", "xmlns:w15": "xmlns:w15", "xmlns:w16cex": "xmlns:w16cex", "xmlns:w16cid": "xmlns:w16cid", "xmlns:w16": "xmlns:w16", "xmlns:w16sdtdh": "xmlns:w16sdtdh", "xmlns:w16se": "xmlns:w16se", "xmlns:wpg": "xmlns:wpg", "xmlns:wpi": "xmlns:wpi", "xmlns:wne": "xmlns:wne", "xmlns:wps": "xmlns:wps" };
            }
          }
          class ir extends s {
            constructor(e3) {
              super("w:commentRangeStart"), this.root.push(new nr({ id: e3 }));
            }
          }
          class or extends s {
            constructor(e3) {
              super("w:commentRangeEnd"), this.root.push(new nr({ id: e3 }));
            }
          }
          class ar extends s {
            constructor(e3) {
              super("w:commentReference"), this.root.push(new nr({ id: e3 }));
            }
          }
          class cr extends s {
            constructor({ id: e3, initials: t3, author: r2, date: n2 = /* @__PURE__ */ new Date(), text: s2 }) {
              super("w:comment"), this.root.push(new rr({ id: e3, initials: t3, author: r2, date: n2.toISOString() })), this.root.push(new In({ children: [new we(s2)] }));
            }
          }
          class ur extends s {
            constructor({ children: e3 }) {
              super("w:comments"), this.root.push(new sr({ "xmlns:cx": "http://schemas.microsoft.com/office/drawing/2014/chartex", "xmlns:cx1": "http://schemas.microsoft.com/office/drawing/2015/9/8/chartex", "xmlns:cx2": "http://schemas.microsoft.com/office/drawing/2015/10/21/chartex", "xmlns:cx3": "http://schemas.microsoft.com/office/drawing/2016/5/9/chartex", "xmlns:cx4": "http://schemas.microsoft.com/office/drawing/2016/5/10/chartex", "xmlns:cx5": "http://schemas.microsoft.com/office/drawing/2016/5/11/chartex", "xmlns:cx6": "http://schemas.microsoft.com/office/drawing/2016/5/12/chartex", "xmlns:cx7": "http://schemas.microsoft.com/office/drawing/2016/5/13/chartex", "xmlns:cx8": "http://schemas.microsoft.com/office/drawing/2016/5/14/chartex", "xmlns:mc": "http://schemas.openxmlformats.org/markup-compatibility/2006", "xmlns:aink": "http://schemas.microsoft.com/office/drawing/2016/ink", "xmlns:am3d": "http://schemas.microsoft.com/office/drawing/2017/model3d", "xmlns:o": "urn:schemas-microsoft-com:office:office", "xmlns:r": "http://schemas.openxmlformats.org/officeDocument/2006/relationships", "xmlns:m": "http://schemas.openxmlformats.org/officeDocument/2006/math", "xmlns:v": "urn:schemas-microsoft-com:vml", "xmlns:wp14": "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing", "xmlns:wp": "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing", "xmlns:w10": "urn:schemas-microsoft-com:office:word", "xmlns:w": "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "xmlns:w14": "http://schemas.microsoft.com/office/word/2010/wordml", "xmlns:w15": "http://schemas.microsoft.com/office/word/2012/wordml", "xmlns:w16cex": "http://schemas.microsoft.com/office/word/2018/wordml/cex", "xmlns:w16cid": "http://schemas.microsoft.com/office/word/2016/wordml/cid", "xmlns:w16": "http://schemas.microsoft.com/office/word/2018/wordml", "xmlns:w16sdtdh": "http://schemas.microsoft.com/office/word/2020/wordml/sdtdatahash", "xmlns:w16se": "http://schemas.microsoft.com/office/word/2015/wordml/symex", "xmlns:wpg": "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup", "xmlns:wpi": "http://schemas.microsoft.com/office/word/2010/wordprocessingInk", "xmlns:wne": "http://schemas.microsoft.com/office/word/2006/wordml", "xmlns:wps": "http://schemas.microsoft.com/office/word/2010/wordprocessingShape" }));
              for (const t3 of e3) this.root.push(new cr(t3));
            }
          }
          !function(e3) {
            e3.COLUMN = "column", e3.PAGE = "page";
          }(Te || (Te = {}));
          class lr extends s {
            constructor(e3) {
              super("w:br"), this.root.push(new a({ type: e3 }));
            }
          }
          class hr extends me {
            constructor() {
              super({}), this.root.push(new lr(Te.PAGE));
            }
          }
          class pr extends me {
            constructor() {
              super({}), this.root.push(new lr(Te.COLUMN));
            }
          }
          class dr extends s {
            constructor() {
              super("w:pageBreakBefore");
            }
          }
          !function(e3) {
            e3.AT_LEAST = "atLeast", e3.EXACTLY = "exactly", e3.EXACT = "exact", e3.AUTO = "auto";
          }(Ae || (Ae = {}));
          class fr extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { after: "w:after", before: "w:before", line: "w:line", lineRule: "w:lineRule" };
            }
          }
          class mr extends s {
            constructor(e3) {
              super("w:spacing"), this.root.push(new fr(e3));
            }
          }
          !function(e3) {
            e3.HEADING_1 = "Heading1", e3.HEADING_2 = "Heading2", e3.HEADING_3 = "Heading3", e3.HEADING_4 = "Heading4", e3.HEADING_5 = "Heading5", e3.HEADING_6 = "Heading6", e3.TITLE = "Title";
          }(Se || (Se = {}));
          class wr extends s {
            constructor(e3) {
              super("w:pStyle"), this.root.push(new a({ val: e3 }));
            }
          }
          class gr extends s {
            constructor(e3) {
              super("w:tabs");
              for (const t3 of e3) this.root.push(new br(t3));
            }
          }
          !function(e3) {
            e3.LEFT = "left", e3.RIGHT = "right", e3.CENTER = "center", e3.BAR = "bar", e3.CLEAR = "clear", e3.DECIMAL = "decimal", e3.END = "end", e3.NUM = "num", e3.START = "start";
          }(Ie || (Ie = {})), function(e3) {
            e3.DOT = "dot", e3.HYPHEN = "hyphen", e3.MIDDLE_DOT = "middleDot", e3.NONE = "none", e3.UNDERSCORE = "underscore";
          }(Re || (Re = {})), function(e3) {
            e3[e3.MAX = 9026] = "MAX";
          }(Ne || (Ne = {}));
          class yr extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { val: "w:val", pos: "w:pos", leader: "w:leader" };
            }
          }
          class br extends s {
            constructor({ type: e3, position: t3, leader: r2 }) {
              super("w:tab"), this.root.push(new yr({ val: e3, pos: t3, leader: r2 }));
            }
          }
          class xr extends s {
            constructor(e3, t3) {
              super("w:numPr"), this.root.push(new vr(t3)), this.root.push(new _r(e3));
            }
          }
          class vr extends s {
            constructor(e3) {
              if (super("w:ilvl"), e3 > 9) throw new Error("Level cannot be greater than 9. Read more here: https://answers.microsoft.com/en-us/msoffice/forum/all/does-word-support-more-than-9-list-levels/d130fdcd-1781-446d-8c84-c6c79124e4d7");
              this.root.push(new a({ val: e3 }));
            }
          }
          class _r extends s {
            constructor(e3) {
              super("w:numId"), this.root.push(new a({ val: "string" == typeof e3 ? `{${e3}}` : e3 }));
            }
          }
          class Er extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { id: "Id", type: "Type", target: "Target", targetMode: "TargetMode" };
            }
          }
          !function(e3) {
            e3.EXTERNAL = "External";
          }(Ce || (Ce = {}));
          class Tr extends s {
            constructor(e3, t3, r2, n2) {
              super("Relationship"), this.root.push(new Er({ id: e3, type: t3, target: r2, targetMode: n2 }));
            }
          }
          class Ar extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { id: "r:id", history: "w:history", anchor: "w:anchor" };
            }
          }
          !function(e3) {
            e3.INTERNAL = "INTERNAL", e3.EXTERNAL = "EXTERNAL";
          }(Oe || (Oe = {}));
          class Sr extends s {
            constructor(e3, t3, r2) {
              super("w:hyperlink"), this.linkId = t3;
              const n2 = { history: 1, anchor: r2 || void 0, id: r2 ? void 0 : `rId${this.linkId}` }, s2 = new Ar(n2);
              this.root.push(s2), e3.forEach((e4) => {
                this.root.push(e4);
              });
            }
          }
          class Ir extends Sr {
            constructor(e3) {
              super(e3.children, (0, Ke.EL)(), e3.anchor);
            }
          }
          class Rr extends s {
            constructor(e3) {
              super("w:externalHyperlink"), this.options = e3;
            }
          }
          class Nr extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { id: "w:id", name: "w:name" };
            }
          }
          class Cr extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { id: "w:id" };
            }
          }
          class Or {
            constructor(e3) {
              const t3 = (0, Ke.NY)();
              this.start = new kr(e3.id, t3), this.children = e3.children, this.end = new Lr(t3);
            }
          }
          class kr extends s {
            constructor(e3, t3) {
              super("w:bookmarkStart");
              const r2 = new Nr({ name: e3, id: t3 });
              this.root.push(r2);
            }
          }
          class Lr extends s {
            constructor(e3) {
              super("w:bookmarkEnd");
              const t3 = new Cr({ id: e3 });
              this.root.push(t3);
            }
          }
          class Dr extends s {
            constructor(e3) {
              super("w:outlineLvl"), this.level = e3, this.root.push(new a({ val: e3 }));
            }
          }
          class Pr extends s {
            constructor(e3, t3 = {}) {
              super("w:instrText"), this.root.push(new V({ space: v.PRESERVE }));
              let r2 = `PAGEREF ${e3}`;
              t3.hyperlink && (r2 = `${r2} \\h`), t3.useRelativePosition && (r2 = `${r2} \\p`), this.root.push(r2);
            }
          }
          class Fr extends me {
            constructor(e3, t3 = {}) {
              super({ children: [new W(true), new Pr(e3, t3), new G()] });
            }
          }
          !function(e3) {
            e3.BOTTOM = "bottom", e3.CENTER = "center", e3.TOP = "top";
          }(ke || (ke = {}));
          class Br extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { verticalAlign: "w:val" };
            }
          }
          class Mr extends s {
            constructor(e3) {
              super("w:vAlign"), this.root.push(new Br({ verticalAlign: e3 }));
            }
          }
          !function(e3) {
            e3.DEFAULT = "default", e3.FIRST = "first", e3.EVEN = "even";
          }(Le || (Le = {}));
          class Ur extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { type: "w:type", id: "r:id" };
            }
          }
          !function(e3) {
            e3.HEADER = "w:headerReference", e3.FOOTER = "w:footerReference";
          }(De || (De = {}));
          class Hr extends s {
            constructor(e3, t3) {
              super(e3), this.root.push(new Ur({ type: t3.type || Le.DEFAULT, id: `rId${t3.id}` }));
            }
          }
          class zr extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { space: "w:space", count: "w:num", separate: "w:sep", equalWidth: "w:equalWidth" };
            }
          }
          class jr extends s {
            constructor({ space: e3, count: t3, separate: r2, equalWidth: n2, children: s2 }) {
              super("w:cols"), this.root.push(new zr({ space: void 0 === e3 ? void 0 : (0, S.Jd)(e3), count: void 0 === t3 ? void 0 : (0, S.vH)(t3), separate: r2, equalWidth: n2 })), !n2 && s2 && s2.forEach((e4) => this.addChildElement(e4));
            }
          }
          !function(e3) {
            e3.DEFAULT = "default", e3.LINES = "lines", e3.LINES_AND_CHARS = "linesAndChars", e3.SNAP_TO_CHARS = "snapToChars";
          }(Pe || (Pe = {}));
          class Wr extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { type: "w:type", linePitch: "w:linePitch", charSpace: "w:charSpace" };
            }
          }
          class Kr extends s {
            constructor(e3, t3, r2) {
              super("w:docGrid"), this.root.push(new Wr({ type: r2, linePitch: (0, S.vH)(e3), charSpace: t3 ? (0, S.vH)(t3) : void 0 }));
            }
          }
          !function(e3) {
            e3.NEW_PAGE = "newPage", e3.NEW_SECTION = "newSection", e3.CONTINUOUS = "continuous";
          }(Fe || (Fe = {}));
          class Gr extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { countBy: "w:countBy", start: "w:start", restart: "w:restart", distance: "w:distance" };
            }
          }
          class Vr extends s {
            constructor({ countBy: e3, start: t3, restart: r2, distance: n2 }) {
              super("w:lnNumType"), this.root.push(new Gr({ countBy: void 0 === e3 ? void 0 : (0, S.vH)(e3), start: void 0 === t3 ? void 0 : (0, S.vH)(t3), restart: r2, distance: void 0 === n2 ? void 0 : (0, S.Jd)(n2) }));
            }
          }
          !function(e3) {
            e3.ALL_PAGES = "allPages", e3.FIRST_PAGE = "firstPage", e3.NOT_FIRST_PAGE = "notFirstPage";
          }(Be || (Be = {})), function(e3) {
            e3.PAGE = "page", e3.TEXT = "text";
          }(Me || (Me = {})), function(e3) {
            e3.BACK = "back", e3.FRONT = "front";
          }(Ue || (Ue = {}));
          class $r extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { display: "w:display", offsetFrom: "w:offsetFrom", zOrder: "w:zOrder" };
            }
          }
          class Xr extends i {
            constructor(e3) {
              if (super("w:pgBorders"), !e3) return this;
              e3.pageBorders ? this.root.push(new $r({ display: e3.pageBorders.display, offsetFrom: e3.pageBorders.offsetFrom, zOrder: e3.pageBorders.zOrder })) : this.root.push(new $r({})), e3.pageBorderTop && this.root.push(new P("w:top", e3.pageBorderTop)), e3.pageBorderLeft && this.root.push(new P("w:left", e3.pageBorderLeft)), e3.pageBorderBottom && this.root.push(new P("w:bottom", e3.pageBorderBottom)), e3.pageBorderRight && this.root.push(new P("w:right", e3.pageBorderRight));
            }
          }
          class qr extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { top: "w:top", right: "w:right", bottom: "w:bottom", left: "w:left", header: "w:header", footer: "w:footer", gutter: "w:gutter" };
            }
          }
          class Zr extends s {
            constructor(e3, t3, r2, n2, s2, i2, o2) {
              super("w:pgMar"), this.root.push(new qr({ top: (0, S.xb)(e3), right: (0, S.Jd)(t3), bottom: (0, S.xb)(r2), left: (0, S.Jd)(n2), header: (0, S.Jd)(s2), footer: (0, S.Jd)(i2), gutter: (0, S.Jd)(o2) }));
            }
          }
          !function(e3) {
            e3.HYPHEN = "hyphen", e3.PERIOD = "period", e3.COLON = "colon", e3.EM_DASH = "emDash", e3.EN_DASH = "endash";
          }(He || (He = {}));
          class Yr extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { start: "w:start", formatType: "w:fmt", separator: "w:chapSep" };
            }
          }
          class Jr extends s {
            constructor({ start: e3, formatType: t3, separator: r2 }) {
              super("w:pgNumType"), this.root.push(new Yr({ start: void 0 === e3 ? void 0 : (0, S.vH)(e3), formatType: t3, separator: r2 }));
            }
          }
          !function(e3) {
            e3.PORTRAIT = "portrait", e3.LANDSCAPE = "landscape";
          }(ze || (ze = {}));
          class Qr extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { width: "w:w", height: "w:h", orientation: "w:orient" };
            }
          }
          class en extends s {
            constructor(e3, t3, r2) {
              super("w:pgSz");
              const n2 = r2 === ze.LANDSCAPE, s2 = (0, S.Jd)(e3), i2 = (0, S.Jd)(t3);
              this.root.push(new Qr({ width: n2 ? i2 : s2, height: n2 ? s2 : i2, orientation: r2 }));
            }
          }
          !function(e3) {
            e3.LEFT_TO_RIGHT_TOP_TO_BOTTOM = "lrTb", e3.TOP_TO_BOTTOM_RIGHT_TO_LEFT = "tbRl";
          }(je || (je = {}));
          class tn extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { val: "w:val" };
            }
          }
          class rn extends s {
            constructor(e3) {
              super("w:textDirection"), this.root.push(new tn({ val: e3 }));
            }
          }
          !function(e3) {
            e3.NEXT_PAGE = "nextPage", e3.NEXT_COLUMN = "nextColumn", e3.CONTINUOUS = "continuous", e3.EVEN_PAGE = "evenPage", e3.ODD_PAGE = "oddPage";
          }(We || (We = {}));
          class nn extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { val: "w:val" };
            }
          }
          class sn extends s {
            constructor(e3) {
              super("w:type"), this.root.push(new nn({ val: e3 }));
            }
          }
          const on = { TOP: "1in", RIGHT: "1in", BOTTOM: "1in", LEFT: "1in", HEADER: 708, FOOTER: 708, GUTTER: 0 }, an = { WIDTH: 11906, HEIGHT: 16838, ORIENTATION: ze.PORTRAIT };
          class cn extends s {
            constructor({ page: { size: { width: e3 = an.WIDTH, height: t3 = an.HEIGHT, orientation: r2 = an.ORIENTATION } = {}, margin: { top: n2 = on.TOP, right: s2 = on.RIGHT, bottom: i2 = on.BOTTOM, left: o2 = on.LEFT, header: a2 = on.HEADER, footer: c2 = on.FOOTER, gutter: u2 = on.GUTTER } = {}, pageNumbers: l3 = {}, borders: h2, textDirection: p2 } = {}, grid: { linePitch: d2 = 360, charSpace: f2, type: m2 } = {}, headerWrapperGroup: w2 = {}, footerWrapperGroup: g2 = {}, lineNumbers: y2, titlePage: b2, verticalAlign: x2, column: v2, type: _2 } = {}) {
              super("w:sectPr"), this.addHeaderFooterGroup(De.HEADER, w2), this.addHeaderFooterGroup(De.FOOTER, g2), _2 && this.root.push(new sn(_2)), this.root.push(new en(e3, t3, r2)), this.root.push(new Zr(n2, s2, i2, o2, a2, c2, u2)), h2 && this.root.push(new Xr(h2)), y2 && this.root.push(new Vr(y2)), this.root.push(new Jr(l3)), v2 && this.root.push(new jr(v2)), x2 && this.root.push(new Mr(x2)), void 0 !== b2 && this.root.push(new I("w:titlePg", b2)), p2 && this.root.push(new rn(p2)), this.root.push(new Kr(d2, f2, m2));
            }
            addHeaderFooterGroup(e3, t3) {
              t3.default && this.root.push(new Hr(e3, { type: Le.DEFAULT, id: t3.default.View.ReferenceId })), t3.first && this.root.push(new Hr(e3, { type: Le.FIRST, id: t3.first.View.ReferenceId })), t3.even && this.root.push(new Hr(e3, { type: Le.EVEN, id: t3.even.View.ReferenceId }));
            }
          }
          class un extends s {
            constructor() {
              super("w:body"), this.sections = [];
            }
            addSection(e3) {
              const t3 = this.sections.pop();
              this.root.push(this.createSectionParagraph(t3)), this.sections.push(new cn(e3));
            }
            prepForXml(e3) {
              return 1 === this.sections.length && (this.root.splice(0, 1), this.root.push(this.sections.pop())), super.prepForXml(e3);
            }
            push(e3) {
              this.root.push(e3);
            }
            createSectionParagraph(e3) {
              const t3 = new In({}), r2 = new Sn({});
              return r2.push(e3), t3.addChildElement(r2), t3;
            }
          }
          class ln extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { width: "w:w", space: "w:space" };
            }
          }
          class hn extends s {
            constructor({ width: e3, space: t3 }) {
              super("w:col"), this.root.push(new ln({ width: (0, S.Jd)(e3), space: void 0 === t3 ? void 0 : (0, S.Jd)(t3) }));
            }
          }
          class pn extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { wpc: "xmlns:wpc", mc: "xmlns:mc", o: "xmlns:o", r: "xmlns:r", m: "xmlns:m", v: "xmlns:v", wp14: "xmlns:wp14", wp: "xmlns:wp", w10: "xmlns:w10", w: "xmlns:w", w14: "xmlns:w14", w15: "xmlns:w15", wpg: "xmlns:wpg", wpi: "xmlns:wpi", wne: "xmlns:wne", wps: "xmlns:wps", Ignorable: "mc:Ignorable", cp: "xmlns:cp", dc: "xmlns:dc", dcterms: "xmlns:dcterms", dcmitype: "xmlns:dcmitype", xsi: "xmlns:xsi", type: "xsi:type", cx: "xmlns:cx", cx1: "xmlns:cx1", cx2: "xmlns:cx2", cx3: "xmlns:cx3", cx4: "xmlns:cx4", cx5: "xmlns:cx5", cx6: "xmlns:cx6", cx7: "xmlns:cx7", cx8: "xmlns:cx8", aink: "xmlns:aink", am3d: "xmlns:am3d", w16cex: "xmlns:w16cex", w16cid: "xmlns:w16cid", w16: "xmlns:w16", w16sdtdh: "xmlns:w16sdtdh", w16se: "xmlns:w16se" };
            }
          }
          class dn extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { color: "w:color", themeColor: "w:themeColor", themeShade: "w:themeShade", themeTint: "w:themeTint" };
            }
          }
          class fn extends s {
            constructor(e3) {
              super("w:background"), this.root.push(new dn({ color: void 0 === e3.color ? void 0 : (0, S.dg)(e3.color), themeColor: e3.themeColor, themeShade: void 0 === e3.themeShade ? void 0 : (0, S.xD)(e3.themeShade), themeTint: void 0 === e3.themeTint ? void 0 : (0, S.xD)(e3.themeTint) }));
            }
          }
          class mn extends s {
            constructor(e3) {
              super("w:document"), this.root.push(new pn({ wpc: "http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas", mc: "http://schemas.openxmlformats.org/markup-compatibility/2006", o: "urn:schemas-microsoft-com:office:office", r: "http://schemas.openxmlformats.org/officeDocument/2006/relationships", m: "http://schemas.openxmlformats.org/officeDocument/2006/math", v: "urn:schemas-microsoft-com:vml", wp14: "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing", wp: "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing", w10: "urn:schemas-microsoft-com:office:word", w: "http://schemas.openxmlformats.org/wordprocessingml/2006/main", w14: "http://schemas.microsoft.com/office/word/2010/wordml", w15: "http://schemas.microsoft.com/office/word/2012/wordml", wpg: "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup", wpi: "http://schemas.microsoft.com/office/word/2010/wordprocessingInk", wne: "http://schemas.microsoft.com/office/word/2006/wordml", wps: "http://schemas.microsoft.com/office/word/2010/wordprocessingShape", cx: "http://schemas.microsoft.com/office/drawing/2014/chartex", cx1: "http://schemas.microsoft.com/office/drawing/2015/9/8/chartex", cx2: "http://schemas.microsoft.com/office/drawing/2015/10/21/chartex", cx3: "http://schemas.microsoft.com/office/drawing/2016/5/9/chartex", cx4: "http://schemas.microsoft.com/office/drawing/2016/5/10/chartex", cx5: "http://schemas.microsoft.com/office/drawing/2016/5/11/chartex", cx6: "http://schemas.microsoft.com/office/drawing/2016/5/12/chartex", cx7: "http://schemas.microsoft.com/office/drawing/2016/5/13/chartex", cx8: "http://schemas.microsoft.com/office/drawing/2016/5/14/chartex", aink: "http://schemas.microsoft.com/office/drawing/2016/ink", am3d: "http://schemas.microsoft.com/office/drawing/2017/model3d", w16cex: "http://schemas.microsoft.com/office/word/2018/wordml/cex", w16cid: "http://schemas.microsoft.com/office/word/2016/wordml/cid", w16: "http://schemas.microsoft.com/office/word/2018/wordml", w16sdtdh: "http://schemas.microsoft.com/office/word/2020/wordml/sdtdatahash", w16se: "http://schemas.microsoft.com/office/word/2015/wordml/symex", Ignorable: "w14 w15 wp14" })), this.body = new un(), e3.background && this.root.push(new fn(e3.background)), this.root.push(this.body);
            }
            add(e3) {
              return this.body.push(e3), this;
            }
            get Body() {
              return this.body;
            }
          }
          class wn extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { xmlns: "xmlns" };
            }
          }
          class gn extends s {
            constructor() {
              super("Relationships"), this.root.push(new wn({ xmlns: "http://schemas.openxmlformats.org/package/2006/relationships" }));
            }
            addRelationship(e3) {
              this.root.push(e3);
            }
            createRelationship(e3, t3, r2, n2) {
              const s2 = new Tr(`rId${e3}`, t3, r2, n2);
              return this.addRelationship(s2), s2;
            }
            get RelationshipCount() {
              return this.root.length - 1;
            }
          }
          class yn {
            constructor(e3) {
              this.document = new mn(e3), this.relationships = new gn();
            }
            get View() {
              return this.document;
            }
            get Relationships() {
              return this.relationships;
            }
          }
          class bn extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { val: "w:val" };
            }
          }
          class xn extends s {
            constructor() {
              super("w:wordWrap"), this.root.push(new bn({ val: 0 }));
            }
          }
          var vn, _n, En;
          !function(e3) {
            e3.NONE = "none", e3.DROP = "drop", e3.MARGIN = "margin";
          }(vn || (vn = {})), function(e3) {
            e3.MARGIN = "margin", e3.PAGE = "page", e3.TEXT = "text";
          }(_n || (_n = {})), function(e3) {
            e3.AROUND = "around", e3.AUTO = "auto", e3.NONE = "none", e3.NOT_BESIDE = "notBeside", e3.THROUGH = "through", e3.TIGHT = "tight";
          }(En || (En = {}));
          class Tn extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { anchorLock: "w:anchorLock", dropCap: "w:dropCap", width: "w:w", height: "w:h", x: "w:x", y: "w:y", anchorHorizontal: "w:hAnchor", anchorVertical: "w:vAnchor", spaceHorizontal: "w:hSpace", spaceVertical: "w:vSpace", rule: "w:hRule", alignmentX: "w:xAlign", alignmentY: "w:yAlign", lines: "w:lines", wrap: "w:wrap" };
            }
          }
          class An extends s {
            constructor(e3) {
              var t3, r2;
              super("w:framePr"), this.root.push(new Tn({ anchorLock: e3.anchorLock, dropCap: e3.dropCap, width: e3.width, height: e3.height, x: e3.position ? e3.position.x : void 0, y: e3.position ? e3.position.y : void 0, anchorHorizontal: e3.anchor.horizontal, anchorVertical: e3.anchor.vertical, spaceHorizontal: null === (t3 = e3.space) || void 0 === t3 ? void 0 : t3.horizontal, spaceVertical: null === (r2 = e3.space) || void 0 === r2 ? void 0 : r2.vertical, rule: e3.rule, alignmentX: e3.alignment ? e3.alignment.x : void 0, alignmentY: e3.alignment ? e3.alignment.y : void 0, lines: e3.lines, wrap: e3.wrap }));
            }
          }
          class Sn extends i {
            constructor(e3) {
              var t3, r2;
              if (super("w:pPr"), this.numberingReferences = [], !e3) return this;
              e3.heading && this.push(new wr(e3.heading)), e3.bullet && this.push(new wr("ListParagraph")), e3.numbering && (e3.style || e3.heading || e3.numbering.custom || this.push(new wr("ListParagraph"))), e3.style && this.push(new wr(e3.style)), void 0 !== e3.keepNext && this.push(new I("w:keepNext", e3.keepNext)), void 0 !== e3.keepLines && this.push(new I("w:keepLines", e3.keepLines)), e3.pageBreakBefore && this.push(new dr()), e3.frame && this.push(new An(e3.frame)), void 0 !== e3.widowControl && this.push(new I("w:widowControl", e3.widowControl)), e3.bullet && this.push(new xr(1, e3.bullet.level)), e3.numbering && (this.numberingReferences.push({ reference: e3.numbering.reference, instance: null !== (t3 = e3.numbering.instance) && void 0 !== t3 ? t3 : 0 }), this.push(new xr(`${e3.numbering.reference}-${null !== (r2 = e3.numbering.instance) && void 0 !== r2 ? r2 : 0}`, e3.numbering.level))), e3.border && this.push(new B(e3.border)), e3.thematicBreak && this.push(new M()), e3.shading && this.push(new Y(e3.shading)), e3.wordWrap && this.push(new xn());
              const n2 = [...e3.rightTabStop ? [{ type: Ie.RIGHT, position: e3.rightTabStop }] : [], ...e3.tabStops ? e3.tabStops : [], ...e3.leftTabStop ? [{ type: Ie.LEFT, position: e3.leftTabStop }] : []];
              n2.length > 0 && this.push(new gr(n2)), void 0 !== e3.bidirectional && this.push(new I("w:bidi", e3.bidirectional)), e3.spacing && this.push(new mr(e3.spacing)), e3.indent && this.push(new H(e3.indent)), void 0 !== e3.contextualSpacing && this.push(new I("w:contextualSpacing", e3.contextualSpacing)), e3.alignment && this.push(new D(e3.alignment)), void 0 !== e3.outlineLevel && this.push(new Dr(e3.outlineLevel)), void 0 !== e3.suppressLineNumbers && this.push(new I("w:suppressLineNumbers", e3.suppressLineNumbers));
            }
            push(e3) {
              this.root.push(e3);
            }
            prepForXml(e3) {
              if (e3.viewWrapper instanceof yn) for (const t3 of this.numberingReferences) e3.file.Numbering.createConcreteNumberingInstance(t3.reference, t3.instance);
              return super.prepForXml(e3);
            }
          }
          class In extends s {
            constructor(e3) {
              if (super("w:p"), "string" == typeof e3) return this.properties = new Sn({}), this.root.push(this.properties), this.root.push(new we(e3)), this;
              if (this.properties = new Sn(e3), this.root.push(this.properties), e3.text && this.root.push(new we(e3.text)), e3.children) for (const t3 of e3.children) if (t3 instanceof Or) {
                this.root.push(t3.start);
                for (const e4 of t3.children) this.root.push(e4);
                this.root.push(t3.end);
              } else this.root.push(t3);
            }
            prepForXml(e3) {
              for (const t3 of this.root) if (t3 instanceof Rr) {
                const r2 = this.root.indexOf(t3), n2 = new Sr(t3.options.children, (0, Ke.EL)());
                e3.viewWrapper.Relationships.createRelationship(n2.linkId, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink", t3.options.link, Ce.EXTERNAL), this.root[r2] = n2;
              }
              return super.prepForXml(e3);
            }
            addRunToFront(e3) {
              return this.root.splice(1, 0, e3), this;
            }
          }
          class Rn extends s {
            constructor(e3) {
              super("m:oMath");
              for (const t3 of e3.children) this.root.push(t3);
            }
          }
          class Nn extends s {
            constructor(e3) {
              super("m:t"), this.root.push(e3);
            }
          }
          class Cn extends s {
            constructor(e3) {
              super("m:r"), this.root.push(new Nn(e3));
            }
          }
          class On extends s {
            constructor(e3) {
              super("m:den");
              for (const t3 of e3) this.root.push(t3);
            }
          }
          class kn extends s {
            constructor(e3) {
              super("m:num");
              for (const t3 of e3) this.root.push(t3);
            }
          }
          class Ln extends s {
            constructor(e3) {
              super("m:f"), this.root.push(new kn(e3.numerator)), this.root.push(new On(e3.denominator));
            }
          }
          class Dn extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { accent: "m:val" };
            }
          }
          class Pn extends s {
            constructor(e3) {
              super("m:chr"), this.root.push(new Dn({ accent: e3 }));
            }
          }
          class Fn extends s {
            constructor(e3) {
              super("m:e");
              for (const t3 of e3) this.root.push(t3);
            }
          }
          class Bn extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { value: "m:val" };
            }
          }
          class Mn extends s {
            constructor() {
              super("m:limLoc"), this.root.push(new Bn({ value: "undOvr" }));
            }
          }
          class Un extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { hide: "m:val" };
            }
          }
          class Hn extends s {
            constructor() {
              super("m:subHide"), this.root.push(new Un({ hide: 1 }));
            }
          }
          class zn extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { hide: "m:val" };
            }
          }
          class jn extends s {
            constructor() {
              super("m:supHide"), this.root.push(new zn({ hide: 1 }));
            }
          }
          class Wn extends s {
            constructor(e3, t3, r2) {
              super("m:naryPr"), e3 && this.root.push(new Pn(e3)), this.root.push(new Mn()), t3 || this.root.push(new jn()), r2 || this.root.push(new Hn());
            }
          }
          class Kn extends s {
            constructor(e3) {
              super("m:sub");
              for (const t3 of e3) this.root.push(t3);
            }
          }
          class Gn extends s {
            constructor(e3) {
              super("m:sup");
              for (const t3 of e3) this.root.push(t3);
            }
          }
          class Vn extends s {
            constructor(e3) {
              super("m:nary"), this.root.push(new Wn("\u2211", !!e3.superScript, !!e3.subScript)), e3.subScript && this.root.push(new Kn(e3.subScript)), e3.superScript && this.root.push(new Gn(e3.superScript)), this.root.push(new Fn(e3.children));
            }
          }
          class $n extends s {
            constructor(e3) {
              super("m:nary"), this.root.push(new Wn("", !!e3.superScript, !!e3.subScript)), e3.subScript && this.root.push(new Kn(e3.subScript)), e3.superScript && this.root.push(new Gn(e3.superScript)), this.root.push(new Fn(e3.children));
            }
          }
          class Xn extends s {
            constructor() {
              super("m:sSupPr");
            }
          }
          class qn extends s {
            constructor(e3) {
              super("m:sSup"), this.root.push(new Xn()), this.root.push(new Fn(e3.children)), this.root.push(new Gn(e3.superScript));
            }
          }
          class Zn extends s {
            constructor() {
              super("m:sSubPr");
            }
          }
          class Yn extends s {
            constructor(e3) {
              super("m:sSub"), this.root.push(new Zn()), this.root.push(new Fn(e3.children)), this.root.push(new Kn(e3.subScript));
            }
          }
          class Jn extends s {
            constructor() {
              super("m:sSubSupPr");
            }
          }
          class Qn extends s {
            constructor(e3) {
              super("m:sSubSup"), this.root.push(new Jn()), this.root.push(new Fn(e3.children)), this.root.push(new Kn(e3.subScript)), this.root.push(new Gn(e3.superScript));
            }
          }
          class es extends s {
            constructor() {
              super("m:sPrePr");
            }
          }
          class ts extends s {
            constructor(e3) {
              super("m:sPre"), this.root.push(new es()), this.root.push(new Fn(e3.children)), this.root.push(new Kn(e3.subScript)), this.root.push(new Gn(e3.superScript));
            }
          }
          const rs = "";
          class ns extends s {
            constructor(e3) {
              if (super("m:deg"), e3) for (const t3 of e3) this.root.push(t3);
            }
          }
          class ss extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { hide: "m:val" };
            }
          }
          class is extends s {
            constructor() {
              super("m:degHide"), this.root.push(new ss({ hide: 1 }));
            }
          }
          class os extends s {
            constructor(e3) {
              super("m:radPr"), e3 || this.root.push(new is());
            }
          }
          class as extends s {
            constructor(e3) {
              super("m:rad"), this.root.push(new os(!!e3.degree)), this.root.push(new ns(e3.degree)), this.root.push(new Fn(e3.children));
            }
          }
          class cs extends s {
            constructor(e3) {
              super("m:fName");
              for (const t3 of e3) this.root.push(t3);
            }
          }
          class us extends s {
            constructor() {
              super("m:funcPr");
            }
          }
          class ls extends s {
            constructor(e3) {
              super("m:func"), this.root.push(new us()), this.root.push(new cs(e3.name)), this.root.push(new Fn(e3.children));
            }
          }
          class hs extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { character: "m:val" };
            }
          }
          class ps extends s {
            constructor(e3) {
              super("m:begChr"), this.root.push(new hs({ character: e3 }));
            }
          }
          class ds extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { character: "m:val" };
            }
          }
          class fs extends s {
            constructor(e3) {
              super("m:endChr"), this.root.push(new ds({ character: e3 }));
            }
          }
          class ms extends s {
            constructor(e3) {
              super("m:dPr"), e3 && (this.root.push(new ps(e3.beginningCharacter)), this.root.push(new fs(e3.endingCharacter)));
            }
          }
          class ws extends s {
            constructor(e3) {
              super("m:d"), this.root.push(new ms()), this.root.push(new Fn(e3.children));
            }
          }
          class gs extends s {
            constructor(e3) {
              super("m:d"), this.root.push(new ms({ beginningCharacter: "[", endingCharacter: "]" })), this.root.push(new Fn(e3.children));
            }
          }
          class ys extends s {
            constructor(e3) {
              super("m:d"), this.root.push(new ms({ beginningCharacter: "{", endingCharacter: "}" })), this.root.push(new Fn(e3.children));
            }
          }
          class bs extends s {
            constructor(e3) {
              super("m:d"), this.root.push(new ms({ beginningCharacter: "\u2329", endingCharacter: "\u232A" })), this.root.push(new Fn(e3.children));
            }
          }
          class xs extends s {
            constructor(e3) {
              super("w:tblGrid");
              for (const t3 of e3) this.root.push(new _s(t3));
            }
          }
          class vs extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { w: "w:w" };
            }
          }
          class _s extends s {
            constructor(e3) {
              super("w:gridCol"), void 0 !== e3 && this.root.push(new vs({ w: (0, S.Jd)(e3) }));
            }
          }
          var Es, Ts, As, Ss;
          !function(e3) {
            e3.AUTO = "auto", e3.DXA = "dxa", e3.NIL = "nil", e3.PERCENTAGE = "pct";
          }(Es || (Es = {}));
          class Is extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { type: "w:type", size: "w:w" };
            }
          }
          class Rs extends s {
            constructor(e3, { type: t3 = Es.AUTO, size: r2 }) {
              super(e3);
              let n2 = r2;
              t3 === Es.PERCENTAGE && "number" == typeof r2 && (n2 = `${r2}%`), this.root.push(new Is({ type: t3, size: (0, S.aB)(n2) }));
            }
          }
          !function(e3) {
            e3.TABLE = "w:tblCellMar", e3.TABLE_CELL = "w:tcMar";
          }(Ts || (Ts = {}));
          class Ns extends i {
            constructor(e3, { marginUnitType: t3 = Es.DXA, top: r2, left: n2, bottom: s2, right: i2 }) {
              super(e3), void 0 !== r2 && this.root.push(new Rs("w:top", { type: t3, size: r2 })), void 0 !== n2 && this.root.push(new Rs("w:left", { type: t3, size: n2 })), void 0 !== s2 && this.root.push(new Rs("w:bottom", { type: t3, size: s2 })), void 0 !== i2 && this.root.push(new Rs("w:right", { type: t3, size: i2 }));
            }
          }
          class Cs extends i {
            constructor(e3) {
              super("w:tcBorders"), e3.top && this.root.push(new P("w:top", e3.top)), e3.start && this.root.push(new P("w:start", e3.start)), e3.left && this.root.push(new P("w:left", e3.left)), e3.bottom && this.root.push(new P("w:bottom", e3.bottom)), e3.end && this.root.push(new P("w:end", e3.end)), e3.right && this.root.push(new P("w:right", e3.right));
            }
          }
          class Os extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { val: "w:val" };
            }
          }
          class ks extends s {
            constructor(e3) {
              super("w:gridSpan"), this.root.push(new Os({ val: (0, S.vH)(e3) }));
            }
          }
          !function(e3) {
            e3.CONTINUE = "continue", e3.RESTART = "restart";
          }(As || (As = {}));
          class Ls extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { val: "w:val" };
            }
          }
          class Ds extends s {
            constructor(e3) {
              super("w:vMerge"), this.root.push(new Ls({ val: e3 }));
            }
          }
          !function(e3) {
            e3.BOTTOM_TO_TOP_LEFT_TO_RIGHT = "btLr", e3.LEFT_TO_RIGHT_TOP_TO_BOTTOM = "lrTb", e3.TOP_TO_BOTTOM_RIGHT_TO_LEFT = "tbRl";
          }(Ss || (Ss = {}));
          class Ps extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { val: "w:val" };
            }
          }
          class Fs extends s {
            constructor(e3) {
              super("w:textDirection"), this.root.push(new Ps({ val: e3 }));
            }
          }
          class Bs extends i {
            constructor(e3) {
              super("w:tcPr"), e3.width && this.root.push(new Rs("w:tcW", e3.width)), e3.columnSpan && this.root.push(new ks(e3.columnSpan)), e3.verticalMerge ? this.root.push(new Ds(e3.verticalMerge)) : e3.rowSpan && e3.rowSpan > 1 && this.root.push(new Ds(As.RESTART)), e3.borders && this.root.push(new Cs(e3.borders)), e3.shading && this.root.push(new Y(e3.shading)), e3.margins && this.root.push(new Ns(Ts.TABLE_CELL, e3.margins)), e3.textDirection && this.root.push(new Fs(e3.textDirection)), e3.verticalAlign && this.root.push(new Mr(e3.verticalAlign));
            }
          }
          class Ms extends s {
            constructor(e3) {
              super("w:tc"), this.options = e3, this.root.push(new Bs(e3));
              for (const t3 of e3.children) this.root.push(t3);
            }
            prepForXml(e3) {
              return this.root[this.root.length - 1] instanceof In || this.root.push(new In({})), super.prepForXml(e3);
            }
          }
          const Us = { style: w.NONE, size: 0, color: "auto" }, Hs = { style: w.SINGLE, size: 4, color: "auto" };
          class zs extends s {
            constructor(e3) {
              super("w:tblBorders"), e3.top ? this.root.push(new P("w:top", e3.top)) : this.root.push(new P("w:top", Hs)), e3.left ? this.root.push(new P("w:left", e3.left)) : this.root.push(new P("w:left", Hs)), e3.bottom ? this.root.push(new P("w:bottom", e3.bottom)) : this.root.push(new P("w:bottom", Hs)), e3.right ? this.root.push(new P("w:right", e3.right)) : this.root.push(new P("w:right", Hs)), e3.insideHorizontal ? this.root.push(new P("w:insideH", e3.insideHorizontal)) : this.root.push(new P("w:insideH", Hs)), e3.insideVertical ? this.root.push(new P("w:insideV", e3.insideVertical)) : this.root.push(new P("w:insideV", Hs));
            }
          }
          zs.NONE = { top: Us, bottom: Us, left: Us, right: Us, insideHorizontal: Us, insideVertical: Us };
          var js, Ws, Ks, Gs, Vs, $s, Xs;
          !function(e3) {
            e3.MARGIN = "margin", e3.PAGE = "page", e3.TEXT = "text";
          }(js || (js = {})), function(e3) {
            e3.CENTER = "center", e3.INSIDE = "inside", e3.LEFT = "left", e3.OUTSIDE = "outside", e3.RIGHT = "right";
          }(Ws || (Ws = {})), function(e3) {
            e3.CENTER = "center", e3.INSIDE = "inside", e3.BOTTOM = "bottom", e3.OUTSIDE = "outside", e3.INLINE = "inline", e3.TOP = "top";
          }(Ks || (Ks = {})), function(e3) {
            e3.NEVER = "never", e3.OVERLAP = "overlap";
          }(Gs || (Gs = {}));
          class qs extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { horizontalAnchor: "w:horzAnchor", verticalAnchor: "w:vertAnchor", absoluteHorizontalPosition: "w:tblpX", relativeHorizontalPosition: "w:tblpXSpec", absoluteVerticalPosition: "w:tblpY", relativeVerticalPosition: "w:tblpYSpec", bottomFromText: "w:bottomFromText", topFromText: "w:topFromText", leftFromText: "w:leftFromText", rightFromText: "w:rightFromText" };
            }
          }
          class Zs extends s {
            constructor(e3) {
              var { leftFromText: t3, rightFromText: r2, topFromText: n2, bottomFromText: s2, absoluteHorizontalPosition: i2, absoluteVerticalPosition: o2 } = e3, a2 = function(e4, t4) {
                var r3 = {};
                for (var n3 in e4) Object.prototype.hasOwnProperty.call(e4, n3) && t4.indexOf(n3) < 0 && (r3[n3] = e4[n3]);
                if (null != e4 && "function" == typeof Object.getOwnPropertySymbols) {
                  var s3 = 0;
                  for (n3 = Object.getOwnPropertySymbols(e4); s3 < n3.length; s3++) t4.indexOf(n3[s3]) < 0 && Object.prototype.propertyIsEnumerable.call(e4, n3[s3]) && (r3[n3[s3]] = e4[n3[s3]]);
                }
                return r3;
              }(e3, ["leftFromText", "rightFromText", "topFromText", "bottomFromText", "absoluteHorizontalPosition", "absoluteVerticalPosition"]);
              super("w:tblpPr"), this.root.push(new qs(Object.assign({ leftFromText: void 0 === t3 ? void 0 : (0, S.Jd)(t3), rightFromText: void 0 === r2 ? void 0 : (0, S.Jd)(r2), topFromText: void 0 === n2 ? void 0 : (0, S.Jd)(n2), bottomFromText: void 0 === s2 ? void 0 : (0, S.Jd)(s2), absoluteHorizontalPosition: void 0 === i2 ? void 0 : (0, S.xb)(i2), absoluteVerticalPosition: void 0 === o2 ? void 0 : (0, S.xb)(o2) }, a2))), a2.overlap && this.root.push(new O("w:tblOverlap", a2.overlap));
            }
          }
          !function(e3) {
            e3.AUTOFIT = "autofit", e3.FIXED = "fixed";
          }(Vs || (Vs = {}));
          class Ys extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { type: "w:type" };
            }
          }
          class Js extends s {
            constructor(e3) {
              super("w:tblLayout"), this.root.push(new Ys({ type: e3 }));
            }
          }
          class Qs extends i {
            constructor(e3) {
              super("w:tblPr"), e3.style && this.root.push(new N("w:tblStyle", e3.style)), e3.float && this.root.push(new Zs(e3.float)), void 0 !== e3.visuallyRightToLeft && this.root.push(new I("w:bidiVisual", e3.visuallyRightToLeft)), e3.width && this.root.push(new Rs("w:tblW", e3.width)), e3.alignment && this.root.push(new D(e3.alignment)), e3.indent && this.root.push(new Rs("w:tblInd", e3.indent)), e3.borders && this.root.push(new zs(e3.borders)), e3.shading && this.root.push(new Y(e3.shading)), e3.layout && this.root.push(new Js(e3.layout)), e3.cellMargin && this.root.push(new Ns(Ts.TABLE, e3.cellMargin));
            }
          }
          class ei extends s {
            constructor({ rows: e3, width: t3, columnWidths: r2 = Array(Math.max(...e3.map((e4) => e4.CellCount))).fill(100), margins: n2, indent: s2, float: i2, layout: o2, style: a2, borders: c2, alignment: u2, visuallyRightToLeft: l3 }) {
              super("w:tbl"), this.root.push(new Qs({ borders: null != c2 ? c2 : {}, width: null != t3 ? t3 : { size: 100 }, indent: s2, float: i2, layout: o2, style: a2, alignment: u2, cellMargin: n2, visuallyRightToLeft: l3 })), this.root.push(new xs(r2));
              for (const t4 of e3) this.root.push(t4);
              e3.forEach((t4, r3) => {
                if (r3 === e3.length - 1) return;
                let n3 = 0;
                t4.cells.forEach((t5) => {
                  if (t5.options.rowSpan && t5.options.rowSpan > 1) {
                    const s3 = new Ms({ rowSpan: t5.options.rowSpan - 1, columnSpan: t5.options.columnSpan, borders: t5.options.borders, children: [], verticalMerge: As.CONTINUE });
                    e3[r3 + 1].addCellToColumnIndex(s3, n3);
                  }
                  n3 += t5.options.columnSpan || 1;
                });
              });
            }
          }
          !function(e3) {
            e3.AUTO = "auto", e3.ATLEAST = "atLeast", e3.EXACT = "exact";
          }($s || ($s = {}));
          class ti extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { value: "w:val", rule: "w:hRule" };
            }
          }
          class ri extends s {
            constructor(e3, t3) {
              super("w:trHeight"), this.root.push(new ti({ value: (0, S.Jd)(e3), rule: t3 }));
            }
          }
          class ni extends i {
            constructor(e3) {
              super("w:trPr"), void 0 !== e3.cantSplit && this.root.push(new I("w:cantSplit", e3.cantSplit)), void 0 !== e3.tableHeader && this.root.push(new I("w:tblHeader", e3.tableHeader)), e3.height && this.root.push(new ri(e3.height.value, e3.height.rule));
            }
          }
          class si extends s {
            constructor(e3) {
              super("w:tr"), this.options = e3, this.root.push(new ni(e3));
              for (const t3 of e3.children) this.root.push(t3);
            }
            get CellCount() {
              return this.options.children.length;
            }
            get cells() {
              return this.root.filter((e3) => e3 instanceof Ms);
            }
            addCellToIndex(e3, t3) {
              this.root.splice(t3 + 1, 0, e3);
            }
            addCellToColumnIndex(e3, t3) {
              const r2 = this.columnIndexToRootIndex(t3, true);
              this.addCellToIndex(e3, r2 - 1);
            }
            rootIndexToColumnIndex(e3) {
              if (e3 < 1 || e3 >= this.root.length) throw new Error("cell 'rootIndex' should between 1 to " + (this.root.length - 1));
              let t3 = 0;
              for (let r2 = 1; r2 < e3; r2++) t3 += this.root[r2].options.columnSpan || 1;
              return t3;
            }
            columnIndexToRootIndex(e3, t3 = false) {
              if (e3 < 0) throw new Error("cell 'columnIndex' should not less than zero");
              let r2 = 0, n2 = 1;
              for (; r2 <= e3; ) {
                if (n2 >= this.root.length) {
                  if (t3) return this.root.length;
                  throw new Error("cell 'columnIndex' should not great than " + (r2 - 1));
                }
                const e4 = this.root[n2];
                n2 += 1, r2 += e4 && e4.options.columnSpan || 1;
              }
              return n2 - 1;
            }
          }
          class ii extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { xmlns: "xmlns", vt: "xmlns:vt" };
            }
          }
          class oi extends s {
            constructor() {
              super("Properties"), this.root.push(new ii({ xmlns: "http://schemas.openxmlformats.org/officeDocument/2006/extended-properties", vt: "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes" }));
            }
          }
          class ai extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { xmlns: "xmlns" };
            }
          }
          class ci extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { contentType: "ContentType", extension: "Extension" };
            }
          }
          class ui extends s {
            constructor(e3, t3) {
              super("Default"), this.root.push(new ci({ contentType: e3, extension: t3 }));
            }
          }
          class li extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { contentType: "ContentType", partName: "PartName" };
            }
          }
          class hi extends s {
            constructor(e3, t3) {
              super("Override"), this.root.push(new li({ contentType: e3, partName: t3 }));
            }
          }
          class pi extends s {
            constructor() {
              super("Types"), this.root.push(new ai({ xmlns: "http://schemas.openxmlformats.org/package/2006/content-types" })), this.root.push(new ui("image/png", "png")), this.root.push(new ui("image/jpeg", "jpeg")), this.root.push(new ui("image/jpeg", "jpg")), this.root.push(new ui("image/bmp", "bmp")), this.root.push(new ui("image/gif", "gif")), this.root.push(new ui("application/vnd.openxmlformats-package.relationships+xml", "rels")), this.root.push(new ui("application/xml", "xml")), this.root.push(new hi("application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml", "/word/document.xml")), this.root.push(new hi("application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml", "/word/styles.xml")), this.root.push(new hi("application/vnd.openxmlformats-package.core-properties+xml", "/docProps/core.xml")), this.root.push(new hi("application/vnd.openxmlformats-officedocument.custom-properties+xml", "/docProps/custom.xml")), this.root.push(new hi("application/vnd.openxmlformats-officedocument.extended-properties+xml", "/docProps/app.xml")), this.root.push(new hi("application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml", "/word/numbering.xml")), this.root.push(new hi("application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml", "/word/footnotes.xml")), this.root.push(new hi("application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml", "/word/settings.xml")), this.root.push(new hi("application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml", "/word/comments.xml"));
            }
            addFooter(e3) {
              this.root.push(new hi("application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml", `/word/footer${e3}.xml`));
            }
            addHeader(e3) {
              this.root.push(new hi("application/vnd.openxmlformats-officedocument.wordprocessingml.header+xml", `/word/header${e3}.xml`));
            }
          }
          class di extends s {
            constructor(e3) {
              super("cp:coreProperties"), this.root.push(new pn({ cp: "http://schemas.openxmlformats.org/package/2006/metadata/core-properties", dc: "http://purl.org/dc/elements/1.1/", dcterms: "http://purl.org/dc/terms/", dcmitype: "http://purl.org/dc/dcmitype/", xsi: "http://www.w3.org/2001/XMLSchema-instance" })), e3.title && this.root.push(new k("dc:title", e3.title)), e3.subject && this.root.push(new k("dc:subject", e3.subject)), e3.creator && this.root.push(new k("dc:creator", e3.creator)), e3.keywords && this.root.push(new k("cp:keywords", e3.keywords)), e3.description && this.root.push(new k("dc:description", e3.description)), e3.lastModifiedBy && this.root.push(new k("cp:lastModifiedBy", e3.lastModifiedBy)), e3.revision && this.root.push(new k("cp:revision", String(e3.revision))), this.root.push(new fi("dcterms:created")), this.root.push(new fi("dcterms:modified"));
            }
          }
          class fi extends s {
            constructor(e3) {
              super(e3), this.root.push(new pn({ type: "dcterms:W3CDTF" })), this.root.push((0, S.sF)(/* @__PURE__ */ new Date()));
            }
          }
          class mi extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { xmlns: "xmlns", vt: "xmlns:vt" };
            }
          }
          class wi extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { fmtid: "fmtid", pid: "pid", name: "name" };
            }
          }
          class gi extends s {
            constructor(e3, t3) {
              super("property"), this.root.push(new wi({ fmtid: "{D5CDD505-2E9C-101B-9397-08002B2CF9AE}", pid: e3.toString(), name: t3.name })), this.root.push(new yi(t3.value));
            }
          }
          class yi extends s {
            constructor(e3) {
              super("vt:lpwstr"), this.root.push(e3);
            }
          }
          class bi extends s {
            constructor(e3) {
              super("Properties"), this.properties = [], this.root.push(new mi({ xmlns: "http://schemas.openxmlformats.org/officeDocument/2006/custom-properties", vt: "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes" })), this.nextId = 2;
              for (const t3 of e3) this.addCustomProperty(t3);
            }
            prepForXml(e3) {
              return this.properties.forEach((e4) => this.root.push(e4)), super.prepForXml(e3);
            }
            addCustomProperty(e3) {
              this.properties.push(new gi(this.nextId++, e3));
            }
          }
          class xi extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { wpc: "xmlns:wpc", mc: "xmlns:mc", o: "xmlns:o", r: "xmlns:r", m: "xmlns:m", v: "xmlns:v", wp14: "xmlns:wp14", wp: "xmlns:wp", w10: "xmlns:w10", w: "xmlns:w", w14: "xmlns:w14", w15: "xmlns:w15", wpg: "xmlns:wpg", wpi: "xmlns:wpi", wne: "xmlns:wne", wps: "xmlns:wps", cp: "xmlns:cp", dc: "xmlns:dc", dcterms: "xmlns:dcterms", dcmitype: "xmlns:dcmitype", xsi: "xmlns:xsi", type: "xsi:type" };
            }
          }
          class vi extends f {
            constructor(e3, t3) {
              super("w:ftr", t3), this.refId = e3, t3 || this.root.push(new xi({ wpc: "http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas", mc: "http://schemas.openxmlformats.org/markup-compatibility/2006", o: "urn:schemas-microsoft-com:office:office", r: "http://schemas.openxmlformats.org/officeDocument/2006/relationships", m: "http://schemas.openxmlformats.org/officeDocument/2006/math", v: "urn:schemas-microsoft-com:vml", wp14: "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing", wp: "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing", w10: "urn:schemas-microsoft-com:office:word", w: "http://schemas.openxmlformats.org/wordprocessingml/2006/main", w14: "http://schemas.microsoft.com/office/word/2010/wordml", w15: "http://schemas.microsoft.com/office/word/2012/wordml", wpg: "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup", wpi: "http://schemas.microsoft.com/office/word/2010/wordprocessingInk", wne: "http://schemas.microsoft.com/office/word/2006/wordml", wps: "http://schemas.microsoft.com/office/word/2010/wordprocessingShape" }));
            }
            get ReferenceId() {
              return this.refId;
            }
            add(e3) {
              this.root.push(e3);
            }
          }
          class _i {
            constructor(e3, t3, r2) {
              this.media = e3, this.footer = new vi(t3, r2), this.relationships = new gn();
            }
            add(e3) {
              this.footer.add(e3);
            }
            addChildElement(e3) {
              this.footer.addChildElement(e3);
            }
            get View() {
              return this.footer;
            }
            get Relationships() {
              return this.relationships;
            }
            get Media() {
              return this.media;
            }
          }
          class Ei extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { type: "w:type", id: "w:id" };
            }
          }
          class Ti extends s {
            constructor() {
              super("w:footnoteRef");
            }
          }
          class Ai extends me {
            constructor() {
              super({ style: "FootnoteReference" }), this.root.push(new Ti());
            }
          }
          !function(e3) {
            e3.SEPERATOR = "separator", e3.CONTINUATION_SEPERATOR = "continuationSeparator";
          }(Xs || (Xs = {}));
          class Si extends s {
            constructor(e3) {
              super("w:footnote"), this.root.push(new Ei({ type: e3.type, id: e3.id }));
              for (let t3 = 0; t3 < e3.children.length; t3++) {
                const r2 = e3.children[t3];
                0 === t3 && r2.addRunToFront(new Ai()), this.root.push(r2);
              }
            }
          }
          class Ii extends s {
            constructor() {
              super("w:continuationSeparator");
            }
          }
          class Ri extends me {
            constructor() {
              super({}), this.root.push(new Ii());
            }
          }
          class Ni extends s {
            constructor() {
              super("w:separator");
            }
          }
          class Ci extends me {
            constructor() {
              super({}), this.root.push(new Ni());
            }
          }
          class Oi extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { wpc: "xmlns:wpc", mc: "xmlns:mc", o: "xmlns:o", r: "xmlns:r", m: "xmlns:m", v: "xmlns:v", wp14: "xmlns:wp14", wp: "xmlns:wp", w10: "xmlns:w10", w: "xmlns:w", w14: "xmlns:w14", w15: "xmlns:w15", wpg: "xmlns:wpg", wpi: "xmlns:wpi", wne: "xmlns:wne", wps: "xmlns:wps", Ignorable: "mc:Ignorable" };
            }
          }
          class ki extends s {
            constructor() {
              super("w:footnotes"), this.root.push(new Oi({ wpc: "http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas", mc: "http://schemas.openxmlformats.org/markup-compatibility/2006", o: "urn:schemas-microsoft-com:office:office", r: "http://schemas.openxmlformats.org/officeDocument/2006/relationships", m: "http://schemas.openxmlformats.org/officeDocument/2006/math", v: "urn:schemas-microsoft-com:vml", wp14: "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing", wp: "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing", w10: "urn:schemas-microsoft-com:office:word", w: "http://schemas.openxmlformats.org/wordprocessingml/2006/main", w14: "http://schemas.microsoft.com/office/word/2010/wordml", w15: "http://schemas.microsoft.com/office/word/2012/wordml", wpg: "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup", wpi: "http://schemas.microsoft.com/office/word/2010/wordprocessingInk", wne: "http://schemas.microsoft.com/office/word/2006/wordml", wps: "http://schemas.microsoft.com/office/word/2010/wordprocessingShape", Ignorable: "w14 w15 wp14" }));
              const e3 = new Si({ id: -1, type: Xs.SEPERATOR, children: [new In({ spacing: { after: 0, line: 240, lineRule: Ae.AUTO }, children: [new Ci()] })] });
              this.root.push(e3);
              const t3 = new Si({ id: 0, type: Xs.CONTINUATION_SEPERATOR, children: [new In({ spacing: { after: 0, line: 240, lineRule: Ae.AUTO }, children: [new Ri()] })] });
              this.root.push(t3);
            }
            createFootNote(e3, t3) {
              const r2 = new Si({ id: e3, children: t3 });
              this.root.push(r2);
            }
          }
          class Li {
            constructor() {
              this.footnotess = new ki(), this.relationships = new gn();
            }
            get View() {
              return this.footnotess;
            }
            get Relationships() {
              return this.relationships;
            }
          }
          class Di extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { wpc: "xmlns:wpc", mc: "xmlns:mc", o: "xmlns:o", r: "xmlns:r", m: "xmlns:m", v: "xmlns:v", wp14: "xmlns:wp14", wp: "xmlns:wp", w10: "xmlns:w10", w: "xmlns:w", w14: "xmlns:w14", w15: "xmlns:w15", wpg: "xmlns:wpg", wpi: "xmlns:wpi", wne: "xmlns:wne", wps: "xmlns:wps", cp: "xmlns:cp", dc: "xmlns:dc", dcterms: "xmlns:dcterms", dcmitype: "xmlns:dcmitype", xsi: "xmlns:xsi", type: "xsi:type", cx: "xmlns:cx", cx1: "xmlns:cx1", cx2: "xmlns:cx2", cx3: "xmlns:cx3", cx4: "xmlns:cx4", cx5: "xmlns:cx5", cx6: "xmlns:cx6", cx7: "xmlns:cx7", cx8: "xmlns:cx8", w16cid: "xmlns:w16cid", w16se: "xmlns:w16se" };
            }
          }
          class Pi extends f {
            constructor(e3, t3) {
              super("w:hdr", t3), this.refId = e3, t3 || this.root.push(new Di({ wpc: "http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas", mc: "http://schemas.openxmlformats.org/markup-compatibility/2006", o: "urn:schemas-microsoft-com:office:office", r: "http://schemas.openxmlformats.org/officeDocument/2006/relationships", m: "http://schemas.openxmlformats.org/officeDocument/2006/math", v: "urn:schemas-microsoft-com:vml", wp14: "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing", wp: "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing", w10: "urn:schemas-microsoft-com:office:word", w: "http://schemas.openxmlformats.org/wordprocessingml/2006/main", w14: "http://schemas.microsoft.com/office/word/2010/wordml", w15: "http://schemas.microsoft.com/office/word/2012/wordml", wpg: "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup", wpi: "http://schemas.microsoft.com/office/word/2010/wordprocessingInk", wne: "http://schemas.microsoft.com/office/word/2006/wordml", wps: "http://schemas.microsoft.com/office/word/2010/wordprocessingShape", cx: "http://schemas.microsoft.com/office/drawing/2014/chartex", cx1: "http://schemas.microsoft.com/office/drawing/2015/9/8/chartex", cx2: "http://schemas.microsoft.com/office/drawing/2015/10/21/chartex", cx3: "http://schemas.microsoft.com/office/drawing/2016/5/9/chartex", cx4: "http://schemas.microsoft.com/office/drawing/2016/5/10/chartex", cx5: "http://schemas.microsoft.com/office/drawing/2016/5/11/chartex", cx6: "http://schemas.microsoft.com/office/drawing/2016/5/12/chartex", cx7: "http://schemas.microsoft.com/office/drawing/2016/5/13/chartex", cx8: "http://schemas.microsoft.com/office/drawing/2016/5/14/chartex", w16cid: "http://schemas.microsoft.com/office/word/2016/wordml/cid", w16se: "http://schemas.microsoft.com/office/word/2015/wordml/symex" }));
            }
            get ReferenceId() {
              return this.refId;
            }
            add(e3) {
              this.root.push(e3);
            }
          }
          class Fi {
            constructor(e3, t3, r2) {
              this.media = e3, this.header = new Pi(t3, r2), this.relationships = new gn();
            }
            add(e3) {
              return this.header.add(e3), this;
            }
            addChildElement(e3) {
              this.header.addChildElement(e3);
            }
            get View() {
              return this.header;
            }
            get Relationships() {
              return this.relationships;
            }
            get Media() {
              return this.media;
            }
          }
          class Bi {
            constructor() {
              this.map = /* @__PURE__ */ new Map();
            }
            addMedia(e3, t3) {
              const r2 = `${(0, Ke.EL)()}.png`, n2 = { stream: "string" == typeof e3 ? this.convertDataURIToBinary(e3) : e3, fileName: r2, transformation: { pixels: { x: Math.round(t3.width), y: Math.round(t3.height) }, emus: { x: Math.round(9525 * t3.width), y: Math.round(9525 * t3.height) }, flip: t3.flip, rotation: t3.rotation ? 6e4 * t3.rotation : void 0 } };
              return this.map.set(r2, n2), n2;
            }
            addImage(e3, t3) {
              this.map.set(e3, t3);
            }
            get Array() {
              return Array.from(this.map.values());
            }
            convertDataURIToBinary(e3) {
              const t3 = ";base64,", n2 = e3.indexOf(t3) + t3.length;
              return "function" == typeof atob ? new Uint8Array(atob(e3.substring(n2)).split("").map((e4) => e4.charCodeAt(0))) : new (r(8764)).Buffer(e3, "base64");
            }
          }
          const Mi = "";
          var Ui, Hi;
          !function(e3) {
            e3.DECIMAL = "decimal", e3.UPPER_ROMAN = "upperRoman", e3.LOWER_ROMAN = "lowerRoman", e3.UPPER_LETTER = "upperLetter", e3.LOWER_LETTER = "lowerLetter", e3.ORDINAL = "ordinal", e3.CARDINAL_TEXT = "cardinalText", e3.ORDINAL_TEXT = "ordinalText", e3.HEX = "hex", e3.CHICAGO = "chicago", e3.IDEOGRAPH__DIGITAL = "ideographDigital", e3.JAPANESE_COUNTING = "japaneseCounting", e3.AIUEO = "aiueo", e3.IROHA = "iroha", e3.DECIMAL_FULL_WIDTH = "decimalFullWidth", e3.DECIMAL_HALF_WIDTH = "decimalHalfWidth", e3.JAPANESE_LEGAL = "japaneseLegal", e3.JAPANESE_DIGITAL_TEN_THOUSAND = "japaneseDigitalTenThousand", e3.DECIMAL_ENCLOSED_CIRCLE = "decimalEnclosedCircle", e3.DECIMAL_FULL_WIDTH2 = "decimalFullWidth2", e3.AIUEO_FULL_WIDTH = "aiueoFullWidth", e3.IROHA_FULL_WIDTH = "irohaFullWidth", e3.DECIMAL_ZERO = "decimalZero", e3.BULLET = "bullet", e3.GANADA = "ganada", e3.CHOSUNG = "chosung", e3.DECIMAL_ENCLOSED_FULLSTOP = "decimalEnclosedFullstop", e3.DECIMAL_ENCLOSED_PARENTHESES = "decimalEnclosedParen", e3.DECIMAL_ENCLOSED_CIRCLE_CHINESE = "decimalEnclosedCircleChinese", e3.IDEOGRAPH_ENCLOSED_CIRCLE = "ideographEnclosedCircle", e3.IDEOGRAPH_TRADITIONAL = "ideographTraditional", e3.IDEOGRAPH_ZODIAC = "ideographZodiac", e3.IDEOGRAPH_ZODIAC_TRADITIONAL = "ideographZodiacTraditional", e3.TAIWANESE_COUNTING = "taiwaneseCounting", e3.IDEOGRAPH_LEGAL_TRADITIONAL = "ideographLegalTraditional", e3.TAIWANESE_COUNTING_THOUSAND = "taiwaneseCountingThousand", e3.TAIWANESE_DIGITAL = "taiwaneseDigital", e3.CHINESE_COUNTING = "chineseCounting", e3.CHINESE_LEGAL_SIMPLIFIED = "chineseLegalSimplified", e3.CHINESE_COUNTING_THOUSAND = "chineseCountingThousand", e3.KOREAN_DIGITAL = "koreanDigital", e3.KOREAN_COUNTING = "koreanCounting", e3.KOREAN_LEGAL = "koreanLegal", e3.KOREAN_DIGITAL2 = "koreanDigital2", e3.VIETNAMESE_COUNTING = "vietnameseCounting", e3.RUSSIAN_LOWER = "russianLower", e3.RUSSIAN_UPPER = "russianUpper", e3.NONE = "none", e3.NUMBER_IN_DASH = "numberInDash", e3.HEBREW1 = "hebrew1", e3.HEBREW2 = "hebrew2", e3.ARABIC_ALPHA = "arabicAlpha", e3.ARABIC_ABJAD = "arabicAbjad", e3.HINDI_VOWELS = "hindiVowels", e3.HINDI_CONSONANTS = "hindiConsonants", e3.HINDI_NUMBERS = "hindiNumbers", e3.HINDI_COUNTING = "hindiCounting", e3.THAI_LETTERS = "thaiLetters", e3.THAI_NUMBERS = "thaiNumbers", e3.THAI_COUNTING = "thaiCounting", e3.BAHT_TEXT = "bahtText", e3.DOLLAR_TEXT = "dollarText", e3.CUSTOM = "custom";
          }(Ui || (Ui = {}));
          class zi extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { ilvl: "w:ilvl", tentative: "w15:tentative" };
            }
          }
          class ji extends s {
            constructor(e3) {
              super("w:numFmt"), this.root.push(new a({ val: e3 }));
            }
          }
          class Wi extends s {
            constructor(e3) {
              super("w:lvlText"), this.root.push(new a({ val: e3 }));
            }
          }
          class Ki extends s {
            constructor(e3) {
              super("w:lvlJc"), this.root.push(new a({ val: e3 }));
            }
          }
          !function(e3) {
            e3.NOTHING = "nothing", e3.SPACE = "space", e3.TAB = "tab";
          }(Hi || (Hi = {}));
          class Gi extends s {
            constructor(e3) {
              super("w:suff"), this.root.push(new a({ val: e3 }));
            }
          }
          class Vi extends s {
            constructor() {
              super("w:isLgl");
            }
          }
          class $i extends s {
            constructor({ level: e3, format: t3, text: r2, alignment: n2 = m.START, start: s2 = 1, style: i2, suffix: o2, isLegalNumberingStyle: a2 }) {
              if (super("w:lvl"), this.root.push(new C("w:start", (0, S.vH)(s2))), t3 && this.root.push(new ji(t3)), o2 && this.root.push(new Gi(o2)), a2 && this.root.push(new Vi()), r2 && this.root.push(new Wi(r2)), this.root.push(new Ki(n2)), this.paragraphProperties = new Sn(i2 && i2.paragraph), this.runProperties = new pe(i2 && i2.run), this.root.push(this.paragraphProperties), this.root.push(this.runProperties), e3 > 9) throw new Error("Level cannot be greater than 9. Read more here: https://answers.microsoft.com/en-us/msoffice/forum/all/does-word-support-more-than-9-list-levels/d130fdcd-1781-446d-8c84-c6c79124e4d7");
              this.root.push(new zi({ ilvl: (0, S.vH)(e3), tentative: 1 }));
            }
          }
          class Xi extends $i {
          }
          class qi extends $i {
          }
          class Zi extends s {
            constructor(e3) {
              super("w:multiLevelType"), this.root.push(new a({ val: e3 }));
            }
          }
          class Yi extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { abstractNumId: "w:abstractNumId", restartNumberingAfterBreak: "w15:restartNumberingAfterBreak" };
            }
          }
          class Ji extends s {
            constructor(e3, t3) {
              super("w:abstractNum"), this.root.push(new Yi({ abstractNumId: (0, S.vH)(e3), restartNumberingAfterBreak: 0 })), this.root.push(new Zi("hybridMultilevel")), this.id = e3;
              for (const e4 of t3) this.root.push(new Xi(e4));
            }
          }
          class Qi extends s {
            constructor(e3) {
              super("w:abstractNumId"), this.root.push(new a({ val: e3 }));
            }
          }
          class eo extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { numId: "w:numId" };
            }
          }
          class to extends s {
            constructor(e3) {
              super("w:num"), this.numId = e3.numId, this.reference = e3.reference, this.instance = e3.instance, this.root.push(new eo({ numId: (0, S.vH)(e3.numId) })), this.root.push(new Qi((0, S.vH)(e3.abstractNumId))), e3.overrideLevel && this.root.push(new no(e3.overrideLevel.num, e3.overrideLevel.start));
            }
          }
          class ro extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { ilvl: "w:ilvl" };
            }
          }
          class no extends s {
            constructor(e3, t3) {
              super("w:lvlOverride"), this.root.push(new ro({ ilvl: e3 })), void 0 !== t3 && this.root.push(new io(t3));
            }
          }
          class so extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { val: "w:val" };
            }
          }
          class io extends s {
            constructor(e3) {
              super("w:startOverride"), this.root.push(new so({ val: e3 }));
            }
          }
          class oo extends s {
            constructor(e3) {
              super("w:numbering"), this.abstractNumberingMap = /* @__PURE__ */ new Map(), this.concreteNumberingMap = /* @__PURE__ */ new Map(), this.referenceConfigMap = /* @__PURE__ */ new Map(), this.root.push(new pn({ wpc: "http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas", mc: "http://schemas.openxmlformats.org/markup-compatibility/2006", o: "urn:schemas-microsoft-com:office:office", r: "http://schemas.openxmlformats.org/officeDocument/2006/relationships", m: "http://schemas.openxmlformats.org/officeDocument/2006/math", v: "urn:schemas-microsoft-com:vml", wp14: "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing", wp: "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing", w10: "urn:schemas-microsoft-com:office:word", w: "http://schemas.openxmlformats.org/wordprocessingml/2006/main", w14: "http://schemas.microsoft.com/office/word/2010/wordml", w15: "http://schemas.microsoft.com/office/word/2012/wordml", wpg: "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup", wpi: "http://schemas.microsoft.com/office/word/2010/wordprocessingInk", wne: "http://schemas.microsoft.com/office/word/2006/wordml", wps: "http://schemas.microsoft.com/office/word/2010/wordprocessingShape", Ignorable: "w14 w15 wp14" }));
              const t3 = new Ji((0, Ke.NY)(), [{ level: 0, format: Ui.BULLET, text: "\u25CF", alignment: m.LEFT, style: { paragraph: { indent: { left: (0, Ke.vw)(0.5), hanging: (0, Ke.vw)(0.25) } } } }, { level: 1, format: Ui.BULLET, text: "\u25CB", alignment: m.LEFT, style: { paragraph: { indent: { left: (0, Ke.vw)(1), hanging: (0, Ke.vw)(0.25) } } } }, { level: 2, format: Ui.BULLET, text: "\u25A0", alignment: m.LEFT, style: { paragraph: { indent: { left: 2160, hanging: (0, Ke.vw)(0.25) } } } }, { level: 3, format: Ui.BULLET, text: "\u25CF", alignment: m.LEFT, style: { paragraph: { indent: { left: 2880, hanging: (0, Ke.vw)(0.25) } } } }, { level: 4, format: Ui.BULLET, text: "\u25CB", alignment: m.LEFT, style: { paragraph: { indent: { left: 3600, hanging: (0, Ke.vw)(0.25) } } } }, { level: 5, format: Ui.BULLET, text: "\u25A0", alignment: m.LEFT, style: { paragraph: { indent: { left: 4320, hanging: (0, Ke.vw)(0.25) } } } }, { level: 6, format: Ui.BULLET, text: "\u25CF", alignment: m.LEFT, style: { paragraph: { indent: { left: 5040, hanging: (0, Ke.vw)(0.25) } } } }, { level: 7, format: Ui.BULLET, text: "\u25CF", alignment: m.LEFT, style: { paragraph: { indent: { left: 5760, hanging: (0, Ke.vw)(0.25) } } } }, { level: 8, format: Ui.BULLET, text: "\u25CF", alignment: m.LEFT, style: { paragraph: { indent: { left: 6480, hanging: (0, Ke.vw)(0.25) } } } }]);
              this.concreteNumberingMap.set("default-bullet-numbering", new to({ numId: 1, abstractNumId: t3.id, reference: "default-bullet-numbering", instance: 0, overrideLevel: { num: 0, start: 1 } })), this.abstractNumberingMap.set("default-bullet-numbering", t3);
              for (const t4 of e3.config) this.abstractNumberingMap.set(t4.reference, new Ji((0, Ke.NY)(), t4.levels)), this.referenceConfigMap.set(t4.reference, t4.levels);
            }
            prepForXml(e3) {
              for (const e4 of this.abstractNumberingMap.values()) this.root.push(e4);
              for (const e4 of this.concreteNumberingMap.values()) this.root.push(e4);
              return super.prepForXml(e3);
            }
            createConcreteNumberingInstance(e3, t3) {
              const r2 = this.abstractNumberingMap.get(e3);
              if (!r2) return;
              const n2 = `${e3}-${t3}`;
              if (this.concreteNumberingMap.has(n2)) return;
              const s2 = this.referenceConfigMap.get(e3), i2 = s2 && s2[0].start, o2 = { numId: (0, Ke.NY)(), abstractNumId: r2.id, reference: e3, instance: t3, overrideLevel: i2 && Number.isInteger(i2) ? { num: 0, start: i2 } : { num: 0, start: 1 } };
              this.concreteNumberingMap.set(n2, new to(o2));
            }
            get ConcreteNumbering() {
              return Array.from(this.concreteNumberingMap.values());
            }
            get ReferenceConfig() {
              return Array.from(this.referenceConfigMap.values());
            }
          }
          class ao extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { version: "w:val", name: "w:name", uri: "w:uri" };
            }
          }
          class co extends s {
            constructor(e3) {
              super("w:compatSetting"), this.root.push(new ao({ version: e3, uri: "http://schemas.microsoft.com/office/word", name: "compatibilityMode" }));
            }
          }
          class uo extends s {
            constructor(e3) {
              super("w:compat"), e3.version && this.root.push(new co(e3.version)), e3.useSingleBorderforContiguousCells && this.root.push(new I("w:useSingleBorderforContiguousCells", e3.useSingleBorderforContiguousCells)), e3.wordPerfectJustification && this.root.push(new I("w:wpJustification", e3.wordPerfectJustification)), e3.noTabStopForHangingIndent && this.root.push(new I("w:noTabHangInd", e3.noTabStopForHangingIndent)), e3.noLeading && this.root.push(new I("w:noLeading", e3.noLeading)), e3.spaceForUnderline && this.root.push(new I("w:spaceForUL", e3.spaceForUnderline)), e3.noColumnBalance && this.root.push(new I("w:noColumnBalance", e3.noColumnBalance)), e3.balanceSingleByteDoubleByteWidth && this.root.push(new I("w:balanceSingleByteDoubleByteWidth", e3.balanceSingleByteDoubleByteWidth)), e3.noExtraLineSpacing && this.root.push(new I("w:noExtraLineSpacing", e3.noExtraLineSpacing)), e3.doNotLeaveBackslashAlone && this.root.push(new I("w:doNotLeaveBackslashAlone", e3.doNotLeaveBackslashAlone)), e3.underlineTrailingSpaces && this.root.push(new I("w:ulTrailSpace", e3.underlineTrailingSpaces)), e3.doNotExpandShiftReturn && this.root.push(new I("w:doNotExpandShiftReturn", e3.doNotExpandShiftReturn)), e3.spacingInWholePoints && this.root.push(new I("w:spacingInWholePoints", e3.spacingInWholePoints)), e3.lineWrapLikeWord6 && this.root.push(new I("w:lineWrapLikeWord6", e3.lineWrapLikeWord6)), e3.printBodyTextBeforeHeader && this.root.push(new I("w:printBodyTextBeforeHeader", e3.printBodyTextBeforeHeader)), e3.printColorsBlack && this.root.push(new I("w:printColBlack", e3.printColorsBlack)), e3.spaceWidth && this.root.push(new I("w:wpSpaceWidth", e3.spaceWidth)), e3.showBreaksInFrames && this.root.push(new I("w:showBreaksInFrames", e3.showBreaksInFrames)), e3.subFontBySize && this.root.push(new I("w:subFontBySize", e3.subFontBySize)), e3.suppressBottomSpacing && this.root.push(new I("w:suppressBottomSpacing", e3.suppressBottomSpacing)), e3.suppressTopSpacing && this.root.push(new I("w:suppressTopSpacing", e3.suppressTopSpacing)), e3.suppressSpacingAtTopOfPage && this.root.push(new I("w:suppressSpacingAtTopOfPage", e3.suppressSpacingAtTopOfPage)), e3.suppressTopSpacingWP && this.root.push(new I("w:suppressTopSpacingWP", e3.suppressTopSpacingWP)), e3.suppressSpBfAfterPgBrk && this.root.push(new I("w:suppressSpBfAfterPgBrk", e3.suppressSpBfAfterPgBrk)), e3.swapBordersFacingPages && this.root.push(new I("w:swapBordersFacingPages", e3.swapBordersFacingPages)), e3.convertMailMergeEsc && this.root.push(new I("w:convMailMergeEsc", e3.convertMailMergeEsc)), e3.truncateFontHeightsLikeWP6 && this.root.push(new I("w:truncateFontHeightsLikeWP6", e3.truncateFontHeightsLikeWP6)), e3.macWordSmallCaps && this.root.push(new I("w:mwSmallCaps", e3.macWordSmallCaps)), e3.usePrinterMetrics && this.root.push(new I("w:usePrinterMetrics", e3.usePrinterMetrics)), e3.doNotSuppressParagraphBorders && this.root.push(new I("w:doNotSuppressParagraphBorders", e3.doNotSuppressParagraphBorders)), e3.wrapTrailSpaces && this.root.push(new I("w:wrapTrailSpaces", e3.wrapTrailSpaces)), e3.footnoteLayoutLikeWW8 && this.root.push(new I("w:footnoteLayoutLikeWW8", e3.footnoteLayoutLikeWW8)), e3.shapeLayoutLikeWW8 && this.root.push(new I("w:shapeLayoutLikeWW8", e3.shapeLayoutLikeWW8)), e3.alignTablesRowByRow && this.root.push(new I("w:alignTablesRowByRow", e3.alignTablesRowByRow)), e3.forgetLastTabAlignment && this.root.push(new I("w:forgetLastTabAlignment", e3.forgetLastTabAlignment)), e3.adjustLineHeightInTable && this.root.push(new I("w:adjustLineHeightInTable", e3.adjustLineHeightInTable)), e3.autoSpaceLikeWord95 && this.root.push(new I("w:autoSpaceLikeWord95", e3.autoSpaceLikeWord95)), e3.noSpaceRaiseLower && this.root.push(new I("w:noSpaceRaiseLower", e3.noSpaceRaiseLower)), e3.doNotUseHTMLParagraphAutoSpacing && this.root.push(new I("w:doNotUseHTMLParagraphAutoSpacing", e3.doNotUseHTMLParagraphAutoSpacing)), e3.layoutRawTableWidth && this.root.push(new I("w:layoutRawTableWidth", e3.layoutRawTableWidth)), e3.layoutTableRowsApart && this.root.push(new I("w:layoutTableRowsApart", e3.layoutTableRowsApart)), e3.useWord97LineBreakRules && this.root.push(new I("w:useWord97LineBreakRules", e3.useWord97LineBreakRules)), e3.doNotBreakWrappedTables && this.root.push(new I("w:doNotBreakWrappedTables", e3.doNotBreakWrappedTables)), e3.doNotSnapToGridInCell && this.root.push(new I("w:doNotSnapToGridInCell", e3.doNotSnapToGridInCell)), e3.selectFieldWithFirstOrLastCharacter && this.root.push(new I("w:selectFldWithFirstOrLastChar", e3.selectFieldWithFirstOrLastCharacter)), e3.applyBreakingRules && this.root.push(new I("w:applyBreakingRules", e3.applyBreakingRules)), e3.doNotWrapTextWithPunctuation && this.root.push(new I("w:doNotWrapTextWithPunct", e3.doNotWrapTextWithPunctuation)), e3.doNotUseEastAsianBreakRules && this.root.push(new I("w:doNotUseEastAsianBreakRules", e3.doNotUseEastAsianBreakRules)), e3.useWord2002TableStyleRules && this.root.push(new I("w:useWord2002TableStyleRules", e3.useWord2002TableStyleRules)), e3.growAutofit && this.root.push(new I("w:growAutofit", e3.growAutofit)), e3.useFELayout && this.root.push(new I("w:useFELayout", e3.useFELayout)), e3.useNormalStyleForList && this.root.push(new I("w:useNormalStyleForList", e3.useNormalStyleForList)), e3.doNotUseIndentAsNumberingTabStop && this.root.push(new I("w:doNotUseIndentAsNumberingTabStop", e3.doNotUseIndentAsNumberingTabStop)), e3.useAlternateEastAsianLineBreakRules && this.root.push(new I("w:useAltKinsokuLineBreakRules", e3.useAlternateEastAsianLineBreakRules)), e3.allowSpaceOfSameStyleInTable && this.root.push(new I("w:allowSpaceOfSameStyleInTable", e3.allowSpaceOfSameStyleInTable)), e3.doNotSuppressIndentation && this.root.push(new I("w:doNotSuppressIndentation", e3.doNotSuppressIndentation)), e3.doNotAutofitConstrainedTables && this.root.push(new I("w:doNotAutofitConstrainedTables", e3.doNotAutofitConstrainedTables)), e3.autofitToFirstFixedWidthCell && this.root.push(new I("w:autofitToFirstFixedWidthCell", e3.autofitToFirstFixedWidthCell)), e3.underlineTabInNumberingList && this.root.push(new I("w:underlineTabInNumList", e3.underlineTabInNumberingList)), e3.displayHangulFixedWidth && this.root.push(new I("w:displayHangulFixedWidth", e3.displayHangulFixedWidth)), e3.splitPgBreakAndParaMark && this.root.push(new I("w:splitPgBreakAndParaMark", e3.splitPgBreakAndParaMark)), e3.doNotVerticallyAlignCellWithSp && this.root.push(new I("w:doNotVertAlignCellWithSp", e3.doNotVerticallyAlignCellWithSp)), e3.doNotBreakConstrainedForcedTable && this.root.push(new I("w:doNotBreakConstrainedForcedTable", e3.doNotBreakConstrainedForcedTable)), e3.ignoreVerticalAlignmentInTextboxes && this.root.push(new I("w:doNotVertAlignInTxbx", e3.ignoreVerticalAlignmentInTextboxes)), e3.useAnsiKerningPairs && this.root.push(new I("w:useAnsiKerningPairs", e3.useAnsiKerningPairs)), e3.cachedColumnBalance && this.root.push(new I("w:cachedColBalance", e3.cachedColumnBalance));
            }
          }
          class lo extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { wpc: "xmlns:wpc", mc: "xmlns:mc", o: "xmlns:o", r: "xmlns:r", m: "xmlns:m", v: "xmlns:v", wp14: "xmlns:wp14", wp: "xmlns:wp", w10: "xmlns:w10", w: "xmlns:w", w14: "xmlns:w14", w15: "xmlns:w15", wpg: "xmlns:wpg", wpi: "xmlns:wpi", wne: "xmlns:wne", wps: "xmlns:wps", Ignorable: "mc:Ignorable" };
            }
          }
          class ho extends s {
            constructor(e3) {
              var t3, r2, n2, s2;
              super("w:settings"), this.root.push(new lo({ wpc: "http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas", mc: "http://schemas.openxmlformats.org/markup-compatibility/2006", o: "urn:schemas-microsoft-com:office:office", r: "http://schemas.openxmlformats.org/officeDocument/2006/relationships", m: "http://schemas.openxmlformats.org/officeDocument/2006/math", v: "urn:schemas-microsoft-com:vml", wp14: "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing", wp: "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing", w10: "urn:schemas-microsoft-com:office:word", w: "http://schemas.openxmlformats.org/wordprocessingml/2006/main", w14: "http://schemas.microsoft.com/office/word/2010/wordml", w15: "http://schemas.microsoft.com/office/word/2012/wordml", wpg: "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup", wpi: "http://schemas.microsoft.com/office/word/2010/wordprocessingInk", wne: "http://schemas.microsoft.com/office/word/2006/wordml", wps: "http://schemas.microsoft.com/office/word/2010/wordprocessingShape", Ignorable: "w14 w15 wp14" })), this.root.push(new I("w:displayBackgroundShape", true)), void 0 !== e3.trackRevisions && this.root.push(new I("w:trackRevisions", e3.trackRevisions)), void 0 !== e3.evenAndOddHeaders && this.root.push(new I("w:evenAndOddHeaders", e3.evenAndOddHeaders)), void 0 !== e3.updateFields && this.root.push(new I("w:updateFields", e3.updateFields)), this.root.push(new uo(Object.assign(Object.assign({}, null !== (t3 = e3.compatibility) && void 0 !== t3 ? t3 : {}), { version: null !== (s2 = null !== (n2 = null === (r2 = e3.compatibility) || void 0 === r2 ? void 0 : r2.version) && void 0 !== n2 ? n2 : e3.compatibilityModeVersion) && void 0 !== s2 ? s2 : 15 })));
            }
          }
          class po extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { val: "w:val" };
            }
          }
          class fo extends s {
            constructor(e3) {
              super("w:name"), this.root.push(new po({ val: e3 }));
            }
          }
          class mo extends s {
            constructor(e3) {
              super("w:uiPriority"), this.root.push(new po({ val: (0, S.vH)(e3) }));
            }
          }
          class wo extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { type: "w:type", styleId: "w:styleId", default: "w:default", customStyle: "w:customStyle" };
            }
          }
          class go extends s {
            constructor(e3, t3) {
              super("w:style"), this.root.push(new wo(e3)), t3.name && this.root.push(new fo(t3.name)), t3.basedOn && this.root.push(new N("w:basedOn", t3.basedOn)), t3.next && this.root.push(new N("w:next", t3.next)), t3.link && this.root.push(new N("w:link", t3.link)), void 0 !== t3.uiPriority && this.root.push(new mo(t3.uiPriority)), void 0 !== t3.semiHidden && this.root.push(new I("w:semiHidden", t3.semiHidden)), void 0 !== t3.unhideWhenUsed && this.root.push(new I("w:unhideWhenUsed", t3.unhideWhenUsed)), void 0 !== t3.quickFormat && this.root.push(new I("w:qFormat", t3.quickFormat));
            }
          }
          class yo extends go {
            constructor(e3) {
              super({ type: "paragraph", styleId: e3.id }, e3), this.paragraphProperties = new Sn(e3.paragraph), this.runProperties = new pe(e3.run), this.root.push(this.paragraphProperties), this.root.push(this.runProperties);
            }
          }
          class bo extends go {
            constructor(e3) {
              super({ type: "character", styleId: e3.id }, Object.assign({ uiPriority: 99, unhideWhenUsed: true }, e3)), this.runProperties = new pe(e3.run), this.root.push(this.runProperties);
            }
          }
          class xo extends yo {
            constructor(e3) {
              super(Object.assign(Object.assign({}, e3), { basedOn: "Normal", next: "Normal", quickFormat: true }));
            }
          }
          class vo extends xo {
            constructor(e3) {
              super(Object.assign(Object.assign({}, e3), { id: "Title", name: "Title" }));
            }
          }
          class _o extends xo {
            constructor(e3) {
              super(Object.assign(Object.assign({}, e3), { id: "Heading1", name: "Heading 1" }));
            }
          }
          class Eo extends xo {
            constructor(e3) {
              super(Object.assign(Object.assign({}, e3), { id: "Heading2", name: "Heading 2" }));
            }
          }
          class To extends xo {
            constructor(e3) {
              super(Object.assign(Object.assign({}, e3), { id: "Heading3", name: "Heading 3" }));
            }
          }
          class Ao extends xo {
            constructor(e3) {
              super(Object.assign(Object.assign({}, e3), { id: "Heading4", name: "Heading 4" }));
            }
          }
          class So extends xo {
            constructor(e3) {
              super(Object.assign(Object.assign({}, e3), { id: "Heading5", name: "Heading 5" }));
            }
          }
          class Io extends xo {
            constructor(e3) {
              super(Object.assign(Object.assign({}, e3), { id: "Heading6", name: "Heading 6" }));
            }
          }
          class Ro extends xo {
            constructor(e3) {
              super(Object.assign(Object.assign({}, e3), { id: "Strong", name: "Strong" }));
            }
          }
          class No extends yo {
            constructor(e3) {
              super(Object.assign(Object.assign({}, e3), { id: "ListParagraph", name: "List Paragraph", basedOn: "Normal", quickFormat: true }));
            }
          }
          class Co extends yo {
            constructor(e3) {
              super(Object.assign(Object.assign({}, e3), { id: "FootnoteText", name: "footnote text", link: "FootnoteTextChar", basedOn: "Normal", uiPriority: 99, semiHidden: true, unhideWhenUsed: true, paragraph: { spacing: { after: 0, line: 240, lineRule: Ae.AUTO } }, run: { size: 20 } }));
            }
          }
          class Oo extends bo {
            constructor(e3) {
              super(Object.assign(Object.assign({}, e3), { id: "FootnoteReference", name: "footnote reference", basedOn: "DefaultParagraphFont", semiHidden: true, run: { superScript: true } }));
            }
          }
          class ko extends bo {
            constructor(e3) {
              super(Object.assign(Object.assign({}, e3), { id: "FootnoteTextChar", name: "Footnote Text Char", basedOn: "DefaultParagraphFont", link: "FootnoteText", semiHidden: true, run: { size: 20 } }));
            }
          }
          class Lo extends bo {
            constructor(e3) {
              super(Object.assign(Object.assign({}, e3), { id: "Hyperlink", name: "Hyperlink", basedOn: "DefaultParagraphFont", run: { color: "0563C1", underline: { type: T.SINGLE } } }));
            }
          }
          class Do extends s {
            constructor(e3) {
              if (super("w:styles"), e3.initialStyles && this.root.push(e3.initialStyles), e3.importedStyles) for (const t3 of e3.importedStyles) this.root.push(t3);
              if (e3.paragraphStyles) for (const t3 of e3.paragraphStyles) this.root.push(new yo(t3));
              if (e3.characterStyles) for (const t3 of e3.characterStyles) this.root.push(new bo(t3));
            }
          }
          class Po extends s {
            constructor(e3) {
              super("w:pPrDefault"), this.root.push(new Sn(e3));
            }
          }
          class Fo extends s {
            constructor(e3) {
              super("w:rPrDefault"), this.root.push(new pe(e3));
            }
          }
          class Bo extends s {
            constructor(e3) {
              super("w:docDefaults"), this.runPropertiesDefaults = new Fo(e3.run), this.paragraphPropertiesDefaults = new Po(e3.paragraph), this.root.push(this.runPropertiesDefaults), this.root.push(this.paragraphPropertiesDefaults);
            }
          }
          class Mo {
            newInstance(e3) {
              const t3 = (0, c.xml2js)(e3, { compact: false });
              let r2;
              for (const e4 of t3.elements || []) "w:styles" === e4.name && (r2 = e4);
              if (void 0 === r2) throw new Error("can not find styles element");
              const n2 = r2.elements || [];
              return new Do({ initialStyles: new p(r2.attributes), importedStyles: n2.map((e4) => u(e4)) });
            }
          }
          class Uo {
            newInstance(e3 = {}) {
              var t3;
              return { initialStyles: new pn({ mc: "http://schemas.openxmlformats.org/markup-compatibility/2006", r: "http://schemas.openxmlformats.org/officeDocument/2006/relationships", w: "http://schemas.openxmlformats.org/wordprocessingml/2006/main", w14: "http://schemas.microsoft.com/office/word/2010/wordml", w15: "http://schemas.microsoft.com/office/word/2012/wordml", Ignorable: "w14 w15" }), importedStyles: [new Bo(null !== (t3 = e3.document) && void 0 !== t3 ? t3 : {}), new vo(Object.assign({ run: { size: 56 } }, e3.title)), new _o(Object.assign({ run: { color: "2E74B5", size: 32 } }, e3.heading1)), new Eo(Object.assign({ run: { color: "2E74B5", size: 26 } }, e3.heading2)), new To(Object.assign({ run: { color: "1F4D78", size: 24 } }, e3.heading3)), new Ao(Object.assign({ run: { color: "2E74B5", italics: true } }, e3.heading4)), new So(Object.assign({ run: { color: "2E74B5" } }, e3.heading5)), new Io(Object.assign({ run: { color: "1F4D78" } }, e3.heading6)), new Ro(Object.assign({ run: { bold: true } }, e3.strong)), new No(e3.listParagraph || {}), new Lo(e3.hyperlink || {}), new Oo(e3.footnoteReference || {}), new Co(e3.footnoteText || {}), new ko(e3.footnoteTextChar || {})] };
            }
          }
          class Ho {
            constructor(e3, t3 = {}) {
              var r2, n2, s2, i2, o2, a2, c2;
              if (this.currentRelationshipId = 1, this.headers = [], this.footers = [], this.coreProperties = new di(Object.assign(Object.assign({}, e3), { creator: null !== (r2 = e3.creator) && void 0 !== r2 ? r2 : "Un-named", revision: null !== (n2 = e3.revision) && void 0 !== n2 ? n2 : 1, lastModifiedBy: null !== (s2 = e3.lastModifiedBy) && void 0 !== s2 ? s2 : "Un-named" })), this.numbering = new oo(e3.numbering ? e3.numbering : { config: [] }), this.comments = new ur(null !== (i2 = e3.comments) && void 0 !== i2 ? i2 : { children: [] }), this.fileRelationships = new gn(), this.customProperties = new bi(null !== (o2 = e3.customProperties) && void 0 !== o2 ? o2 : []), this.appProperties = new oi(), this.footnotesWrapper = new Li(), this.contentTypes = new pi(), this.documentWrapper = new yn({ background: e3.background }), this.settings = new ho({ compatibilityModeVersion: e3.compatabilityModeVersion, compatibility: e3.compatibility, evenAndOddHeaders: !!e3.evenAndOddHeaderAndFooters, trackRevisions: null === (a2 = e3.features) || void 0 === a2 ? void 0 : a2.trackRevisions, updateFields: null === (c2 = e3.features) || void 0 === c2 ? void 0 : c2.updateFields }), this.media = t3.template && t3.template.media ? t3.template.media : new Bi(), t3.template && (this.currentRelationshipId = t3.template.currentRelationshipId + 1), t3.template && e3.externalStyles) throw Error("can not use both template and external styles");
              if (t3.template && t3.template.styles) {
                const e4 = new Mo();
                this.styles = e4.newInstance(t3.template.styles);
              } else if (e3.externalStyles) {
                const t4 = new Mo();
                this.styles = t4.newInstance(e3.externalStyles);
              } else if (e3.styles) {
                const t4 = new Uo().newInstance(e3.styles.default);
                this.styles = new Do(Object.assign(Object.assign({}, t4), e3.styles));
              } else {
                const e4 = new Uo();
                this.styles = new Do(e4.newInstance());
              }
              if (this.addDefaultRelationships(), t3.template && t3.template.headers) for (const e4 of t3.template.headers) this.addHeaderToDocument(e4.header, e4.type);
              if (t3.template && t3.template.footers) for (const e4 of t3.template.footers) this.addFooterToDocument(e4.footer, e4.type);
              for (const t4 of e3.sections) this.addSection(t4);
              if (e3.footnotes) for (const t4 in e3.footnotes) this.footnotesWrapper.View.createFootNote(parseFloat(t4), e3.footnotes[t4].children);
            }
            addSection({ headers: e3 = {}, footers: t3 = {}, children: r2, properties: n2 }) {
              this.documentWrapper.View.Body.addSection(Object.assign(Object.assign({}, n2), { headerWrapperGroup: { default: e3.default ? this.createHeader(e3.default) : void 0, first: e3.first ? this.createHeader(e3.first) : void 0, even: e3.even ? this.createHeader(e3.even) : void 0 }, footerWrapperGroup: { default: t3.default ? this.createFooter(t3.default) : void 0, first: t3.first ? this.createFooter(t3.first) : void 0, even: t3.even ? this.createFooter(t3.even) : void 0 } }));
              for (const e4 of r2) this.documentWrapper.View.add(e4);
            }
            createHeader(e3) {
              const t3 = new Fi(this.media, this.currentRelationshipId++);
              for (const r2 of e3.options.children) t3.add(r2);
              return this.addHeaderToDocument(t3), t3;
            }
            createFooter(e3) {
              const t3 = new _i(this.media, this.currentRelationshipId++);
              for (const r2 of e3.options.children) t3.add(r2);
              return this.addFooterToDocument(t3), t3;
            }
            addHeaderToDocument(e3, t3 = Le.DEFAULT) {
              this.headers.push({ header: e3, type: t3 }), this.documentWrapper.Relationships.createRelationship(e3.View.ReferenceId, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/header", `header${this.headers.length}.xml`), this.contentTypes.addHeader(this.headers.length);
            }
            addFooterToDocument(e3, t3 = Le.DEFAULT) {
              this.footers.push({ footer: e3, type: t3 }), this.documentWrapper.Relationships.createRelationship(e3.View.ReferenceId, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer", `footer${this.footers.length}.xml`), this.contentTypes.addFooter(this.footers.length);
            }
            addDefaultRelationships() {
              this.fileRelationships.createRelationship(1, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument", "word/document.xml"), this.fileRelationships.createRelationship(2, "http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties", "docProps/core.xml"), this.fileRelationships.createRelationship(3, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties", "docProps/app.xml"), this.fileRelationships.createRelationship(4, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties", "docProps/custom.xml"), this.documentWrapper.Relationships.createRelationship(this.currentRelationshipId++, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles", "styles.xml"), this.documentWrapper.Relationships.createRelationship(this.currentRelationshipId++, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering", "numbering.xml"), this.documentWrapper.Relationships.createRelationship(this.currentRelationshipId++, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/footnotes", "footnotes.xml"), this.documentWrapper.Relationships.createRelationship(this.currentRelationshipId++, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings", "settings.xml"), this.documentWrapper.Relationships.createRelationship(this.currentRelationshipId++, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments", "comments.xml");
            }
            get Document() {
              return this.documentWrapper;
            }
            get Styles() {
              return this.styles;
            }
            get CoreProperties() {
              return this.coreProperties;
            }
            get Numbering() {
              return this.numbering;
            }
            get Media() {
              return this.media;
            }
            get FileRelationships() {
              return this.fileRelationships;
            }
            get Headers() {
              return this.headers.map((e3) => e3.header);
            }
            get Footers() {
              return this.footers.map((e3) => e3.footer);
            }
            get ContentTypes() {
              return this.contentTypes;
            }
            get CustomProperties() {
              return this.customProperties;
            }
            get AppProperties() {
              return this.appProperties;
            }
            get FootNotes() {
              return this.footnotesWrapper;
            }
            get Settings() {
              return this.settings;
            }
            get Comments() {
              return this.comments;
            }
          }
          const zo = "";
          class jo extends s {
            constructor(e3 = {}) {
              super("w:instrText"), this.properties = e3, this.root.push(new V({ space: v.PRESERVE }));
              let t3 = "TOC";
              this.properties.captionLabel && (t3 = `${t3} \\a "${this.properties.captionLabel}"`), this.properties.entriesFromBookmark && (t3 = `${t3} \\b "${this.properties.entriesFromBookmark}"`), this.properties.captionLabelIncludingNumbers && (t3 = `${t3} \\c "${this.properties.captionLabelIncludingNumbers}"`), this.properties.sequenceAndPageNumbersSeparator && (t3 = `${t3} \\d "${this.properties.sequenceAndPageNumbersSeparator}"`), this.properties.tcFieldIdentifier && (t3 = `${t3} \\f "${this.properties.tcFieldIdentifier}"`), this.properties.hyperlink && (t3 = `${t3} \\h`), this.properties.tcFieldLevelRange && (t3 = `${t3} \\l "${this.properties.tcFieldLevelRange}"`), this.properties.pageNumbersEntryLevelsRange && (t3 = `${t3} \\n "${this.properties.pageNumbersEntryLevelsRange}"`), this.properties.headingStyleRange && (t3 = `${t3} \\o "${this.properties.headingStyleRange}"`), this.properties.entryAndPageNumberSeparator && (t3 = `${t3} \\p "${this.properties.entryAndPageNumberSeparator}"`), this.properties.seqFieldIdentifierForPrefix && (t3 = `${t3} \\s "${this.properties.seqFieldIdentifierForPrefix}"`), this.properties.stylesWithLevels && this.properties.stylesWithLevels.length && (t3 = `${t3} \\t "${this.properties.stylesWithLevels.map((e4) => `${e4.styleName},${e4.level}`).join(",")}"`), this.properties.useAppliedParagraphOutlineLevel && (t3 = `${t3} \\u`), this.properties.preserveTabInEntries && (t3 = `${t3} \\w`), this.properties.preserveNewLineInEntries && (t3 = `${t3} \\x`), this.properties.hideTabAndPageNumbersInWebView && (t3 = `${t3} \\z`), this.root.push(t3);
            }
          }
          class Wo extends s {
            constructor() {
              super("w:sdtContent");
            }
          }
          class Ko extends s {
            constructor(e3) {
              super("w:sdtPr"), this.root.push(new N("w:alias", e3));
            }
          }
          class Go extends s {
            constructor(e3 = "Table of Contents", t3) {
              super("w:sdt"), this.root.push(new Ko(e3));
              const r2 = new Wo(), n2 = new In({ children: [new me({ children: [new W(true), new jo(t3), new K()] })] });
              r2.addChildElement(n2);
              const s2 = new In({ children: [new me({ children: [new G()] })] });
              r2.addChildElement(s2), this.root.push(r2);
            }
          }
          class Vo {
            constructor(e3, t3) {
              this.styleName = e3, this.level = t3;
            }
          }
          class $o {
            constructor(e3 = { children: [] }) {
              this.options = e3;
            }
          }
          class Xo {
            constructor(e3 = { children: [] }) {
              this.options = e3;
            }
          }
          class qo extends o {
            constructor() {
              super(...arguments), this.xmlKeys = { id: "w:id" };
            }
          }
          class Zo extends s {
            constructor(e3) {
              super("w:footnoteReference"), this.root.push(new qo({ id: e3 }));
            }
          }
          class Yo extends me {
            constructor(e3) {
              super({ style: "FootnoteReference" }), this.root.push(new Zo(e3));
            }
          }
          class Jo extends s {
            constructor(e3) {
              super("w:ins"), this.root.push(new J({ id: e3.id, author: e3.author, date: e3.date })), this.addChildElement(new we(e3));
            }
          }
          class Qo extends s {
            constructor() {
              super("w:delInstrText"), this.root.push(new V({ space: v.PRESERVE })), this.root.push("PAGE");
            }
          }
          class ea extends s {
            constructor() {
              super("w:delInstrText"), this.root.push(new V({ space: v.PRESERVE })), this.root.push("NUMPAGES");
            }
          }
          class ta extends s {
            constructor() {
              super("w:delInstrText"), this.root.push(new V({ space: v.PRESERVE })), this.root.push("SECTIONPAGES");
            }
          }
          class ra extends s {
            constructor(e3) {
              super("w:delText"), this.root.push(new V({ space: v.PRESERVE })), this.root.push(e3);
            }
          }
          class na extends s {
            constructor(e3) {
              super("w:del"), this.root.push(new J({ id: e3.id, author: e3.author, date: e3.date })), this.deletedTextRunWrapper = new sa(e3), this.addChildElement(this.deletedTextRunWrapper);
            }
          }
          class sa extends s {
            constructor(e3) {
              if (super("w:r"), this.root.push(new pe(e3)), e3.children) for (const t3 of e3.children) if ("string" != typeof t3) this.root.push(t3);
              else switch (t3) {
                case A.CURRENT:
                  this.root.push(new W()), this.root.push(new Qo()), this.root.push(new K()), this.root.push(new G());
                  break;
                case A.TOTAL_PAGES:
                  this.root.push(new W()), this.root.push(new ea()), this.root.push(new K()), this.root.push(new G());
                  break;
                case A.TOTAL_PAGES_IN_SECTION:
                  this.root.push(new W()), this.root.push(new ta()), this.root.push(new K()), this.root.push(new G());
                  break;
                default:
                  this.root.push(new ra(t3));
              }
              else e3.text && this.root.push(new ra(e3.text));
              if (e3.break) for (let t3 = 0; t3 < e3.break; t3++) this.root.splice(1, 0, new z());
            }
          }
          var ia = r(6085), oa = r(3479);
          class aa {
            format(e3, t3 = {}) {
              const r2 = e3.prepForXml(t3);
              if (r2) return r2;
              throw Error("XMLComponent did not format correctly");
            }
          }
          class ca {
            replace(e3, t3, r2) {
              let n2 = e3;
              return t3.forEach((e4, t4) => {
                n2 = n2.replace(new RegExp(`{${e4.fileName}}`, "g"), (r2 + t4).toString());
              }), n2;
            }
            getMediaData(e3, t3) {
              return t3.Array.filter((t4) => e3.search(`{${t4.fileName}}`) > 0);
            }
          }
          class ua {
            replace(e3, t3) {
              let r2 = e3;
              for (const e4 of t3) r2 = r2.replace(new RegExp(`{${e4.reference}-${e4.instance}}`, "g"), e4.numId.toString());
              return r2;
            }
          }
          var la, ha = function(e3, t3, r2, n2) {
            return new (r2 || (r2 = Promise))(function(s2, i2) {
              function o2(e4) {
                try {
                  c2(n2.next(e4));
                } catch (e5) {
                  i2(e5);
                }
              }
              function a2(e4) {
                try {
                  c2(n2.throw(e4));
                } catch (e5) {
                  i2(e5);
                }
              }
              function c2(e4) {
                var t4;
                e4.done ? s2(e4.value) : (t4 = e4.value, t4 instanceof r2 ? t4 : new r2(function(e5) {
                  e5(t4);
                })).then(o2, a2);
              }
              c2((n2 = n2.apply(e3, t3 || [])).next());
            });
          };
          !function(e3) {
            e3.NONE = "", e3.WITH_2_BLANKS = "  ", e3.WITH_4_BLANKS = "    ", e3.WITH_TAB = "	";
          }(la || (la = {}));
          class pa {
            static toString(e3, t3) {
              return ha(this, void 0, void 0, function* () {
                const r2 = this.compiler.compile(e3, t3);
                return yield r2.generateAsync({ type: "string", mimeType: "application/vnd.openxmlformats-officedocument.wordprocessingml.document", compression: "DEFLATE" });
              });
            }
            static toBuffer(e3, t3) {
              return ha(this, void 0, void 0, function* () {
                const r2 = this.compiler.compile(e3, t3);
                return yield r2.generateAsync({ type: "nodebuffer", mimeType: "application/vnd.openxmlformats-officedocument.wordprocessingml.document", compression: "DEFLATE" });
              });
            }
            static toBase64String(e3, t3) {
              return ha(this, void 0, void 0, function* () {
                const r2 = this.compiler.compile(e3, t3);
                return yield r2.generateAsync({ type: "base64", mimeType: "application/vnd.openxmlformats-officedocument.wordprocessingml.document", compression: "DEFLATE" });
              });
            }
            static toBlob(e3, t3) {
              return ha(this, void 0, void 0, function* () {
                const r2 = this.compiler.compile(e3, t3);
                return yield r2.generateAsync({ type: "blob", mimeType: "application/vnd.openxmlformats-officedocument.wordprocessingml.document", compression: "DEFLATE" });
              });
            }
            static toStream(e3, t3) {
              return this.compiler.compile(e3, t3).generateNodeStream({ type: "nodebuffer", streamFiles: true, mimeType: "application/vnd.openxmlformats-officedocument.wordprocessingml.document", compression: "DEFLATE" });
            }
          }
          pa.compiler = new class {
            constructor() {
              this.formatter = new aa(), this.imageReplacer = new ca(), this.numberingReplacer = new ua();
            }
            compile(e3, t3) {
              const r2 = new ia(), n2 = this.xmlifyFile(e3, t3), s2 = new Map(Object.entries(n2));
              for (const [, e4] of s2) if (Array.isArray(e4)) for (const t4 of e4) r2.file(t4.path, t4.data);
              else r2.file(e4.path, e4.data);
              for (const t4 of e3.Media.Array) {
                const e4 = t4.stream;
                r2.file(`word/media/${t4.fileName}`, e4);
              }
              return r2;
            }
            xmlifyFile(e3, t3) {
              const r2 = e3.Document.Relationships.RelationshipCount + 1, n2 = oa(this.formatter.format(e3.Document.View, { viewWrapper: e3.Document, file: e3 }), { indent: t3, declaration: { standalone: "yes", encoding: "UTF-8" } }), s2 = this.imageReplacer.getMediaData(n2, e3.Media);
              return { Relationships: { data: (() => (s2.forEach((t4, n3) => {
                e3.Document.Relationships.createRelationship(r2 + n3, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image", `media/${t4.fileName}`);
              }), oa(this.formatter.format(e3.Document.Relationships, { viewWrapper: e3.Document, file: e3 }), { indent: t3, declaration: { encoding: "UTF-8" } })))(), path: "word/_rels/document.xml.rels" }, Document: { data: (() => {
                const t4 = this.imageReplacer.replace(n2, s2, r2);
                return this.numberingReplacer.replace(t4, e3.Numbering.ConcreteNumbering);
              })(), path: "word/document.xml" }, Styles: { data: (() => {
                const r3 = oa(this.formatter.format(e3.Styles, { viewWrapper: e3.Document, file: e3 }), { indent: t3, declaration: { standalone: "yes", encoding: "UTF-8" } });
                return this.numberingReplacer.replace(r3, e3.Numbering.ConcreteNumbering);
              })(), path: "word/styles.xml" }, Properties: { data: oa(this.formatter.format(e3.CoreProperties, { viewWrapper: e3.Document, file: e3 }), { indent: t3, declaration: { standalone: "yes", encoding: "UTF-8" } }), path: "docProps/core.xml" }, Numbering: { data: oa(this.formatter.format(e3.Numbering, { viewWrapper: e3.Document, file: e3 }), { indent: t3, declaration: { standalone: "yes", encoding: "UTF-8" } }), path: "word/numbering.xml" }, FileRelationships: { data: oa(this.formatter.format(e3.FileRelationships, { viewWrapper: e3.Document, file: e3 }), { indent: t3, declaration: { encoding: "UTF-8" } }), path: "_rels/.rels" }, HeaderRelationships: e3.Headers.map((r3, n3) => {
                const s3 = oa(this.formatter.format(r3.View, { viewWrapper: r3, file: e3 }), { indent: t3, declaration: { encoding: "UTF-8" } });
                return this.imageReplacer.getMediaData(s3, e3.Media).forEach((e4, t4) => {
                  r3.Relationships.createRelationship(t4, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image", `media/${e4.fileName}`);
                }), { data: oa(this.formatter.format(r3.Relationships, { viewWrapper: r3, file: e3 }), { indent: t3, declaration: { encoding: "UTF-8" } }), path: `word/_rels/header${n3 + 1}.xml.rels` };
              }), FooterRelationships: e3.Footers.map((r3, n3) => {
                const s3 = oa(this.formatter.format(r3.View, { viewWrapper: r3, file: e3 }), { indent: t3, declaration: { encoding: "UTF-8" } });
                return this.imageReplacer.getMediaData(s3, e3.Media).forEach((e4, t4) => {
                  r3.Relationships.createRelationship(t4, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image", `media/${e4.fileName}`);
                }), { data: oa(this.formatter.format(r3.Relationships, { viewWrapper: r3, file: e3 }), { indent: t3, declaration: { encoding: "UTF-8" } }), path: `word/_rels/footer${n3 + 1}.xml.rels` };
              }), Headers: e3.Headers.map((r3, n3) => {
                const s3 = oa(this.formatter.format(r3.View, { viewWrapper: r3, file: e3 }), { indent: t3, declaration: { encoding: "UTF-8" } }), i2 = this.imageReplacer.getMediaData(s3, e3.Media), o2 = this.imageReplacer.replace(s3, i2, 0);
                return { data: this.numberingReplacer.replace(o2, e3.Numbering.ConcreteNumbering), path: `word/header${n3 + 1}.xml` };
              }), Footers: e3.Footers.map((r3, n3) => {
                const s3 = oa(this.formatter.format(r3.View, { viewWrapper: r3, file: e3 }), { indent: t3, declaration: { encoding: "UTF-8" } }), i2 = this.imageReplacer.getMediaData(s3, e3.Media), o2 = this.imageReplacer.replace(s3, i2, 0);
                return { data: this.numberingReplacer.replace(o2, e3.Numbering.ConcreteNumbering), path: `word/footer${n3 + 1}.xml` };
              }), ContentTypes: { data: oa(this.formatter.format(e3.ContentTypes, { viewWrapper: e3.Document, file: e3 }), { indent: t3, declaration: { encoding: "UTF-8" } }), path: "[Content_Types].xml" }, CustomProperties: { data: oa(this.formatter.format(e3.CustomProperties, { viewWrapper: e3.Document, file: e3 }), { indent: t3, declaration: { standalone: "yes", encoding: "UTF-8" } }), path: "docProps/custom.xml" }, AppProperties: { data: oa(this.formatter.format(e3.AppProperties, { viewWrapper: e3.Document, file: e3 }), { indent: t3, declaration: { standalone: "yes", encoding: "UTF-8" } }), path: "docProps/app.xml" }, FootNotes: { data: oa(this.formatter.format(e3.FootNotes.View, { viewWrapper: e3.FootNotes, file: e3 }), { indent: t3, declaration: { encoding: "UTF-8" } }), path: "word/footnotes.xml" }, FootNotesRelationships: { data: oa(this.formatter.format(e3.FootNotes.Relationships, { viewWrapper: e3.FootNotes, file: e3 }), { indent: t3, declaration: { encoding: "UTF-8" } }), path: "word/_rels/footnotes.xml.rels" }, Settings: { data: oa(this.formatter.format(e3.Settings, { viewWrapper: e3.Document, file: e3 }), { indent: t3, declaration: { standalone: "yes", encoding: "UTF-8" } }), path: "word/settings.xml" }, Comments: { data: oa(this.formatter.format(e3.Comments, { viewWrapper: e3.Document, file: e3 }), { indent: t3, declaration: { standalone: "yes", encoding: "UTF-8" } }), path: "word/comments.xml" } };
            }
          }();
          var da = function(e3, t3, r2, n2) {
            return new (r2 || (r2 = Promise))(function(s2, i2) {
              function o2(e4) {
                try {
                  c2(n2.next(e4));
                } catch (e5) {
                  i2(e5);
                }
              }
              function a2(e4) {
                try {
                  c2(n2.throw(e4));
                } catch (e5) {
                  i2(e5);
                }
              }
              function c2(e4) {
                var t4;
                e4.done ? s2(e4.value) : (t4 = e4.value, t4 instanceof r2 ? t4 : new r2(function(e5) {
                  e5(t4);
                })).then(o2, a2);
              }
              c2((n2 = n2.apply(e3, t3 || [])).next());
            });
          };
          const fa = { "http://schemas.openxmlformats.org/officeDocument/2006/relationships/header": "header", "http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer": "footer", "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image": "image", "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink": "hyperlink" };
          var ma;
          !function(e3) {
            e3.HEADER = "header", e3.FOOTER = "footer", e3.IMAGE = "image", e3.HYPERLINK = "hyperlink";
          }(ma || (ma = {}));
          class wa {
            extract(e3) {
              return da(this, void 0, void 0, function* () {
                const t3 = yield ia.loadAsync(e3), r2 = yield t3.files["word/document.xml"].async("text"), n2 = yield t3.files["word/_rels/document.xml.rels"].async("text"), s2 = this.extractDocumentRefs(r2), i2 = this.findReferenceFiles(n2), o2 = new Bi();
                return { headers: yield this.createHeaders(t3, s2, i2, o2, 0), footers: yield this.createFooters(t3, s2, i2, o2, s2.headers.length), currentRelationshipId: s2.footers.length + s2.headers.length, styles: yield t3.files["word/styles.xml"].async("text"), titlePageIsDefined: this.checkIfTitlePageIsDefined(r2), media: o2 };
              });
            }
            createFooters(e3, t3, r2, n2, s2) {
              return da(this, void 0, void 0, function* () {
                const i2 = t3.footers.map((t4, i3) => da(this, void 0, void 0, function* () {
                  const o2 = r2.find((e4) => e4.id === t4.id);
                  if (null === o2 || !o2) throw new Error(`Can not find target file for id ${t4.id}`);
                  const a2 = yield e3.files[`word/${o2.target}`].async("text"), l3 = (0, c.xml2js)(a2, { compact: false, captureSpacesBetweenElements: true });
                  if (!l3.elements) return;
                  const h2 = l3.elements.reduce((e4, t5) => "w:ftr" === t5.name ? t5 : e4), p2 = u(h2), d2 = new _i(n2, s2 + i3, p2);
                  return yield this.addRelationshipToWrapper(o2, e3, d2, n2), { type: t4.type, footer: d2 };
                })).filter((e4) => !!e4);
                return Promise.all(i2);
              });
            }
            createHeaders(e3, t3, r2, n2, s2) {
              return da(this, void 0, void 0, function* () {
                const i2 = t3.headers.map((t4, i3) => da(this, void 0, void 0, function* () {
                  const o2 = r2.find((e4) => e4.id === t4.id);
                  if (null === o2 || !o2) throw new Error(`Can not find target file for id ${t4.id}`);
                  const a2 = yield e3.files[`word/${o2.target}`].async("text"), l3 = (0, c.xml2js)(a2, { compact: false, captureSpacesBetweenElements: true });
                  if (!l3.elements) return;
                  const h2 = l3.elements.reduce((e4, t5) => "w:hdr" === t5.name ? t5 : e4), p2 = u(h2), d2 = new Fi(n2, s2 + i3, p2);
                  return yield this.addRelationshipToWrapper(o2, e3, d2, n2), { type: t4.type, header: d2 };
                })).filter((e4) => !!e4);
                return Promise.all(i2);
              });
            }
            addRelationshipToWrapper(e3, t3, r2, n2) {
              return da(this, void 0, void 0, function* () {
                const s2 = t3.files[`word/_rels/${e3.target}.rels`];
                if (!s2) return;
                const i2 = yield s2.async("text"), o2 = this.findReferenceFiles(i2).filter((e4) => e4.type === ma.IMAGE), a2 = this.findReferenceFiles(i2).filter((e4) => e4.type === ma.HYPERLINK);
                for (const e4 of o2) {
                  const s3 = ia.support.arraybuffer ? "arraybuffer" : "nodebuffer", i3 = yield t3.files[`word/${e4.target}`].async(s3), o3 = n2.addMedia(i3, { width: 100, height: 100 });
                  r2.Relationships.createRelationship(e4.id, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image", `media/${o3.fileName}`);
                }
                for (const e4 of a2) r2.Relationships.createRelationship(e4.id, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink", e4.target, Ce.EXTERNAL);
              });
            }
            findReferenceFiles(e3) {
              const t3 = (0, c.xml2js)(e3, { compact: true });
              return (Array.isArray(t3.Relationships.Relationship) ? t3.Relationships.Relationship : [t3.Relationships.Relationship]).map((e4) => {
                if (void 0 === e4._attributes) throw Error("relationship element has no attributes");
                return { id: this.parseRefId(e4._attributes.Id), type: fa[e4._attributes.Type], target: e4._attributes.Target };
              }).filter((e4) => null !== e4.type);
            }
            extractDocumentRefs(e3) {
              const t3 = (0, c.xml2js)(e3, { compact: true })["w:document"]["w:body"]["w:sectPr"], r2 = t3["w:headerReference"];
              let n2;
              n2 = void 0 === r2 ? [] : Array.isArray(r2) ? r2 : [r2];
              const s2 = n2.map((e4) => {
                if (void 0 === e4._attributes) throw Error("header reference element has no attributes");
                return { type: e4._attributes["w:type"], id: this.parseRefId(e4._attributes["r:id"]) };
              }), i2 = t3["w:footerReference"];
              let o2;
              return o2 = void 0 === i2 ? [] : Array.isArray(i2) ? i2 : [i2], { headers: s2, footers: o2.map((e4) => {
                if (void 0 === e4._attributes) throw Error("footer reference element has no attributes");
                return { type: e4._attributes["w:type"], id: this.parseRefId(e4._attributes["r:id"]) };
              }) };
            }
            checkIfTitlePageIsDefined(e3) {
              return void 0 !== (0, c.xml2js)(e3, { compact: true })["w:document"]["w:body"]["w:sectPr"]["w:titlePg"];
            }
            parseRefId(e3) {
              const t3 = /^rId(\d+)$/.exec(e3);
              if (null === t3) throw new Error("Invalid ref id");
              return parseInt(t3[1], 10);
            }
          }
          var ga = r(5575);
        })(), n;
      })());
    }
  });

  // node_modules/base64-js/index.js
  var require_base64_js = __commonJS({
    "node_modules/base64-js/index.js"(exports2) {
      "use strict";
      exports2.byteLength = byteLength;
      exports2.toByteArray = toByteArray;
      exports2.fromByteArray = fromByteArray;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
      var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      for (i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }
      var i;
      var len;
      revLookup["-".charCodeAt(0)] = 62;
      revLookup["_".charCodeAt(0)] = 63;
      function getLens(b64) {
        var len2 = b64.length;
        if (len2 % 4 > 0) {
          throw new Error("Invalid string. Length must be a multiple of 4");
        }
        var validLen = b64.indexOf("=");
        if (validLen === -1) validLen = len2;
        var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
        return [validLen, placeHoldersLen];
      }
      function byteLength(b64) {
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function _byteLength(b64, validLen, placeHoldersLen) {
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function toByteArray(b64) {
        var tmp;
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
        var curByte = 0;
        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
        var i2;
        for (i2 = 0; i2 < len2; i2 += 4) {
          tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
          arr[curByte++] = tmp >> 16 & 255;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 2) {
          tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 1) {
          tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        return arr;
      }
      function tripletToBase64(num) {
        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
      }
      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];
        for (var i2 = start; i2 < end; i2 += 3) {
          tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
          output.push(tripletToBase64(tmp));
        }
        return output.join("");
      }
      function fromByteArray(uint8) {
        var tmp;
        var len2 = uint8.length;
        var extraBytes = len2 % 3;
        var parts = [];
        var maxChunkLength = 16383;
        for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
          parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
        }
        if (extraBytes === 1) {
          tmp = uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
          );
        } else if (extraBytes === 2) {
          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
          );
        }
        return parts.join("");
      }
    }
  });

  // node_modules/ieee754/index.js
  var require_ieee754 = __commonJS({
    "node_modules/ieee754/index.js"(exports2) {
      exports2.read = function(buffer, offset, isLE, mLen, nBytes) {
        var e, m;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE ? nBytes - 1 : 0;
        var d = isLE ? -1 : 1;
        var s = buffer[offset + i];
        i += d;
        e = s & (1 << -nBits) - 1;
        s >>= -nBits;
        nBits += eLen;
        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        m = e & (1 << -nBits) - 1;
        e >>= -nBits;
        nBits += mLen;
        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m ? NaN : (s ? -1 : 1) * Infinity;
        } else {
          m = m + Math.pow(2, mLen);
          e = e - eBias;
        }
        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
      };
      exports2.write = function(buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i = isLE ? 0 : nBytes - 1;
        var d = isLE ? 1 : -1;
        var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
        value = Math.abs(value);
        if (isNaN(value) || value === Infinity) {
          m = isNaN(value) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value) / Math.LN2);
          if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }
          if (e + eBias >= 1) {
            value += rt / c;
          } else {
            value += rt * Math.pow(2, 1 - eBias);
          }
          if (value * c >= 2) {
            e++;
            c /= 2;
          }
          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
          } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }
        for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
        }
        e = e << mLen | m;
        eLen += mLen;
        for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
        }
        buffer[offset + i - d] |= s * 128;
      };
    }
  });

  // node_modules/buffer/index.js
  var require_buffer = __commonJS({
    "node_modules/buffer/index.js"(exports2) {
      "use strict";
      var base64 = require_base64_js();
      var ieee754 = require_ieee754();
      var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
      exports2.Buffer = Buffer3;
      exports2.SlowBuffer = SlowBuffer;
      exports2.INSPECT_MAX_BYTES = 50;
      var K_MAX_LENGTH = 2147483647;
      exports2.kMaxLength = K_MAX_LENGTH;
      Buffer3.TYPED_ARRAY_SUPPORT = typedArraySupport();
      if (!Buffer3.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
        console.error(
          "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
        );
      }
      function typedArraySupport() {
        try {
          const arr = new Uint8Array(1);
          const proto = { foo: function() {
            return 42;
          } };
          Object.setPrototypeOf(proto, Uint8Array.prototype);
          Object.setPrototypeOf(arr, proto);
          return arr.foo() === 42;
        } catch (e) {
          return false;
        }
      }
      Object.defineProperty(Buffer3.prototype, "parent", {
        enumerable: true,
        get: function() {
          if (!Buffer3.isBuffer(this)) return void 0;
          return this.buffer;
        }
      });
      Object.defineProperty(Buffer3.prototype, "offset", {
        enumerable: true,
        get: function() {
          if (!Buffer3.isBuffer(this)) return void 0;
          return this.byteOffset;
        }
      });
      function createBuffer(length) {
        if (length > K_MAX_LENGTH) {
          throw new RangeError('The value "' + length + '" is invalid for option "size"');
        }
        const buf = new Uint8Array(length);
        Object.setPrototypeOf(buf, Buffer3.prototype);
        return buf;
      }
      function Buffer3(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          if (typeof encodingOrOffset === "string") {
            throw new TypeError(
              'The "string" argument must be of type string. Received type number'
            );
          }
          return allocUnsafe(arg);
        }
        return from(arg, encodingOrOffset, length);
      }
      Buffer3.poolSize = 8192;
      function from(value, encodingOrOffset, length) {
        if (typeof value === "string") {
          return fromString(value, encodingOrOffset);
        }
        if (ArrayBuffer.isView(value)) {
          return fromArrayView(value);
        }
        if (value == null) {
          throw new TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
          );
        }
        if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof value === "number") {
          throw new TypeError(
            'The "value" argument must not be of type number. Received type number'
          );
        }
        const valueOf = value.valueOf && value.valueOf();
        if (valueOf != null && valueOf !== value) {
          return Buffer3.from(valueOf, encodingOrOffset, length);
        }
        const b = fromObject(value);
        if (b) return b;
        if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
          return Buffer3.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
        }
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      Buffer3.from = function(value, encodingOrOffset, length) {
        return from(value, encodingOrOffset, length);
      };
      Object.setPrototypeOf(Buffer3.prototype, Uint8Array.prototype);
      Object.setPrototypeOf(Buffer3, Uint8Array);
      function assertSize(size) {
        if (typeof size !== "number") {
          throw new TypeError('"size" argument must be of type number');
        } else if (size < 0) {
          throw new RangeError('The value "' + size + '" is invalid for option "size"');
        }
      }
      function alloc(size, fill, encoding) {
        assertSize(size);
        if (size <= 0) {
          return createBuffer(size);
        }
        if (fill !== void 0) {
          return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
        }
        return createBuffer(size);
      }
      Buffer3.alloc = function(size, fill, encoding) {
        return alloc(size, fill, encoding);
      };
      function allocUnsafe(size) {
        assertSize(size);
        return createBuffer(size < 0 ? 0 : checked(size) | 0);
      }
      Buffer3.allocUnsafe = function(size) {
        return allocUnsafe(size);
      };
      Buffer3.allocUnsafeSlow = function(size) {
        return allocUnsafe(size);
      };
      function fromString(string, encoding) {
        if (typeof encoding !== "string" || encoding === "") {
          encoding = "utf8";
        }
        if (!Buffer3.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        const length = byteLength(string, encoding) | 0;
        let buf = createBuffer(length);
        const actual = buf.write(string, encoding);
        if (actual !== length) {
          buf = buf.slice(0, actual);
        }
        return buf;
      }
      function fromArrayLike(array) {
        const length = array.length < 0 ? 0 : checked(array.length) | 0;
        const buf = createBuffer(length);
        for (let i = 0; i < length; i += 1) {
          buf[i] = array[i] & 255;
        }
        return buf;
      }
      function fromArrayView(arrayView) {
        if (isInstance(arrayView, Uint8Array)) {
          const copy = new Uint8Array(arrayView);
          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
        }
        return fromArrayLike(arrayView);
      }
      function fromArrayBuffer(array, byteOffset, length) {
        if (byteOffset < 0 || array.byteLength < byteOffset) {
          throw new RangeError('"offset" is outside of buffer bounds');
        }
        if (array.byteLength < byteOffset + (length || 0)) {
          throw new RangeError('"length" is outside of buffer bounds');
        }
        let buf;
        if (byteOffset === void 0 && length === void 0) {
          buf = new Uint8Array(array);
        } else if (length === void 0) {
          buf = new Uint8Array(array, byteOffset);
        } else {
          buf = new Uint8Array(array, byteOffset, length);
        }
        Object.setPrototypeOf(buf, Buffer3.prototype);
        return buf;
      }
      function fromObject(obj2) {
        if (Buffer3.isBuffer(obj2)) {
          const len = checked(obj2.length) | 0;
          const buf = createBuffer(len);
          if (buf.length === 0) {
            return buf;
          }
          obj2.copy(buf, 0, 0, len);
          return buf;
        }
        if (obj2.length !== void 0) {
          if (typeof obj2.length !== "number" || numberIsNaN(obj2.length)) {
            return createBuffer(0);
          }
          return fromArrayLike(obj2);
        }
        if (obj2.type === "Buffer" && Array.isArray(obj2.data)) {
          return fromArrayLike(obj2.data);
        }
      }
      function checked(length) {
        if (length >= K_MAX_LENGTH) {
          throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
        }
        return length | 0;
      }
      function SlowBuffer(length) {
        if (+length != length) {
          length = 0;
        }
        return Buffer3.alloc(+length);
      }
      Buffer3.isBuffer = function isBuffer(b) {
        return b != null && b._isBuffer === true && b !== Buffer3.prototype;
      };
      Buffer3.compare = function compare(a, b) {
        if (isInstance(a, Uint8Array)) a = Buffer3.from(a, a.offset, a.byteLength);
        if (isInstance(b, Uint8Array)) b = Buffer3.from(b, b.offset, b.byteLength);
        if (!Buffer3.isBuffer(a) || !Buffer3.isBuffer(b)) {
          throw new TypeError(
            'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
          );
        }
        if (a === b) return 0;
        let x = a.length;
        let y = b.length;
        for (let i = 0, len = Math.min(x, y); i < len; ++i) {
          if (a[i] !== b[i]) {
            x = a[i];
            y = b[i];
            break;
          }
        }
        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      };
      Buffer3.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return true;
          default:
            return false;
        }
      };
      Buffer3.concat = function concat(list, length) {
        if (!Array.isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        if (list.length === 0) {
          return Buffer3.alloc(0);
        }
        let i;
        if (length === void 0) {
          length = 0;
          for (i = 0; i < list.length; ++i) {
            length += list[i].length;
          }
        }
        const buffer = Buffer3.allocUnsafe(length);
        let pos = 0;
        for (i = 0; i < list.length; ++i) {
          let buf = list[i];
          if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
              if (!Buffer3.isBuffer(buf)) buf = Buffer3.from(buf);
              buf.copy(buffer, pos);
            } else {
              Uint8Array.prototype.set.call(
                buffer,
                buf,
                pos
              );
            }
          } else if (!Buffer3.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          } else {
            buf.copy(buffer, pos);
          }
          pos += buf.length;
        }
        return buffer;
      };
      function byteLength(string, encoding) {
        if (Buffer3.isBuffer(string)) {
          return string.length;
        }
        if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
          return string.byteLength;
        }
        if (typeof string !== "string") {
          throw new TypeError(
            'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
          );
        }
        const len = string.length;
        const mustMatch = arguments.length > 2 && arguments[2] === true;
        if (!mustMatch && len === 0) return 0;
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "ascii":
            case "latin1":
            case "binary":
              return len;
            case "utf8":
            case "utf-8":
              return utf8ToBytes(string).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return len * 2;
            case "hex":
              return len >>> 1;
            case "base64":
              return base64ToBytes(string).length;
            default:
              if (loweredCase) {
                return mustMatch ? -1 : utf8ToBytes(string).length;
              }
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer3.byteLength = byteLength;
      function slowToString(encoding, start, end) {
        let loweredCase = false;
        if (start === void 0 || start < 0) {
          start = 0;
        }
        if (start > this.length) {
          return "";
        }
        if (end === void 0 || end > this.length) {
          end = this.length;
        }
        if (end <= 0) {
          return "";
        }
        end >>>= 0;
        start >>>= 0;
        if (end <= start) {
          return "";
        }
        if (!encoding) encoding = "utf8";
        while (true) {
          switch (encoding) {
            case "hex":
              return hexSlice(this, start, end);
            case "utf8":
            case "utf-8":
              return utf8Slice(this, start, end);
            case "ascii":
              return asciiSlice(this, start, end);
            case "latin1":
            case "binary":
              return latin1Slice(this, start, end);
            case "base64":
              return base64Slice(this, start, end);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return utf16leSlice(this, start, end);
            default:
              if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
              encoding = (encoding + "").toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer3.prototype._isBuffer = true;
      function swap(b, n, m) {
        const i = b[n];
        b[n] = b[m];
        b[m] = i;
      }
      Buffer3.prototype.swap16 = function swap16() {
        const len = this.length;
        if (len % 2 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        }
        for (let i = 0; i < len; i += 2) {
          swap(this, i, i + 1);
        }
        return this;
      };
      Buffer3.prototype.swap32 = function swap32() {
        const len = this.length;
        if (len % 4 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        }
        for (let i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }
        return this;
      };
      Buffer3.prototype.swap64 = function swap64() {
        const len = this.length;
        if (len % 8 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        }
        for (let i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }
        return this;
      };
      Buffer3.prototype.toString = function toString() {
        const length = this.length;
        if (length === 0) return "";
        if (arguments.length === 0) return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };
      Buffer3.prototype.toLocaleString = Buffer3.prototype.toString;
      Buffer3.prototype.equals = function equals(b) {
        if (!Buffer3.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
        if (this === b) return true;
        return Buffer3.compare(this, b) === 0;
      };
      Buffer3.prototype.inspect = function inspect() {
        let str = "";
        const max = exports2.INSPECT_MAX_BYTES;
        str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
        if (this.length > max) str += " ... ";
        return "<Buffer " + str + ">";
      };
      if (customInspectSymbol) {
        Buffer3.prototype[customInspectSymbol] = Buffer3.prototype.inspect;
      }
      Buffer3.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
        if (isInstance(target, Uint8Array)) {
          target = Buffer3.from(target, target.offset, target.byteLength);
        }
        if (!Buffer3.isBuffer(target)) {
          throw new TypeError(
            'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
          );
        }
        if (start === void 0) {
          start = 0;
        }
        if (end === void 0) {
          end = target ? target.length : 0;
        }
        if (thisStart === void 0) {
          thisStart = 0;
        }
        if (thisEnd === void 0) {
          thisEnd = this.length;
        }
        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
          throw new RangeError("out of range index");
        }
        if (thisStart >= thisEnd && start >= end) {
          return 0;
        }
        if (thisStart >= thisEnd) {
          return -1;
        }
        if (start >= end) {
          return 1;
        }
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target) return 0;
        let x = thisEnd - thisStart;
        let y = end - start;
        const len = Math.min(x, y);
        const thisCopy = this.slice(thisStart, thisEnd);
        const targetCopy = target.slice(start, end);
        for (let i = 0; i < len; ++i) {
          if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];
            y = targetCopy[i];
            break;
          }
        }
        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      };
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        if (buffer.length === 0) return -1;
        if (typeof byteOffset === "string") {
          encoding = byteOffset;
          byteOffset = 0;
        } else if (byteOffset > 2147483647) {
          byteOffset = 2147483647;
        } else if (byteOffset < -2147483648) {
          byteOffset = -2147483648;
        }
        byteOffset = +byteOffset;
        if (numberIsNaN(byteOffset)) {
          byteOffset = dir ? 0 : buffer.length - 1;
        }
        if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
        if (byteOffset >= buffer.length) {
          if (dir) return -1;
          else byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (dir) byteOffset = 0;
          else return -1;
        }
        if (typeof val === "string") {
          val = Buffer3.from(val, encoding);
        }
        if (Buffer3.isBuffer(val)) {
          if (val.length === 0) {
            return -1;
          }
          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        } else if (typeof val === "number") {
          val = val & 255;
          if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) {
              return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
              return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
            }
          }
          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
        }
        throw new TypeError("val must be string, number or Buffer");
      }
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        let indexSize = 1;
        let arrLength = arr.length;
        let valLength = val.length;
        if (encoding !== void 0) {
          encoding = String(encoding).toLowerCase();
          if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) {
              return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }
        function read(buf, i2) {
          if (indexSize === 1) {
            return buf[i2];
          } else {
            return buf.readUInt16BE(i2 * indexSize);
          }
        }
        let i;
        if (dir) {
          let foundIndex = -1;
          for (i = byteOffset; i < arrLength; i++) {
            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
              if (foundIndex === -1) foundIndex = i;
              if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
            } else {
              if (foundIndex !== -1) i -= i - foundIndex;
              foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
          for (i = byteOffset; i >= 0; i--) {
            let found = true;
            for (let j = 0; j < valLength; j++) {
              if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
              }
            }
            if (found) return i;
          }
        }
        return -1;
      }
      Buffer3.prototype.includes = function includes(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };
      Buffer3.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };
      Buffer3.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };
      function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;
        const remaining = buf.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = Number(length);
          if (length > remaining) {
            length = remaining;
          }
        }
        const strLen = string.length;
        if (length > strLen / 2) {
          length = strLen / 2;
        }
        let i;
        for (i = 0; i < length; ++i) {
          const parsed = parseInt(string.substr(i * 2, 2), 16);
          if (numberIsNaN(parsed)) return i;
          buf[offset + i] = parsed;
        }
        return i;
      }
      function utf8Write(buf, string, offset, length) {
        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
      }
      function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
      }
      function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
      }
      function ucs2Write(buf, string, offset, length) {
        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
      }
      Buffer3.prototype.write = function write(string, offset, length, encoding) {
        if (offset === void 0) {
          encoding = "utf8";
          length = this.length;
          offset = 0;
        } else if (length === void 0 && typeof offset === "string") {
          encoding = offset;
          length = this.length;
          offset = 0;
        } else if (isFinite(offset)) {
          offset = offset >>> 0;
          if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === void 0) encoding = "utf8";
          } else {
            encoding = length;
            length = void 0;
          }
        } else {
          throw new Error(
            "Buffer.write(string, encoding, offset[, length]) is no longer supported"
          );
        }
        const remaining = this.length - offset;
        if (length === void 0 || length > remaining) length = remaining;
        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
          throw new RangeError("Attempt to write outside buffer bounds");
        }
        if (!encoding) encoding = "utf8";
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "hex":
              return hexWrite(this, string, offset, length);
            case "utf8":
            case "utf-8":
              return utf8Write(this, string, offset, length);
            case "ascii":
            case "latin1":
            case "binary":
              return asciiWrite(this, string, offset, length);
            case "base64":
              return base64Write(this, string, offset, length);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return ucs2Write(this, string, offset, length);
            default:
              if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      };
      Buffer3.prototype.toJSON = function toJSON() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      function base64Slice(buf, start, end) {
        if (start === 0 && end === buf.length) {
          return base64.fromByteArray(buf);
        } else {
          return base64.fromByteArray(buf.slice(start, end));
        }
      }
      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        const res = [];
        let i = start;
        while (i < end) {
          const firstByte = buf[i];
          let codePoint = null;
          let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
          if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 128) {
                  codePoint = firstByte;
                }
                break;
              case 2:
                secondByte = buf[i + 1];
                if ((secondByte & 192) === 128) {
                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                  if (tempCodePoint > 127) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 3:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 4:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                fourthByte = buf[i + 3];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                    codePoint = tempCodePoint;
                  }
                }
            }
          }
          if (codePoint === null) {
            codePoint = 65533;
            bytesPerSequence = 1;
          } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
          }
          res.push(codePoint);
          i += bytesPerSequence;
        }
        return decodeCodePointsArray(res);
      }
      var MAX_ARGUMENTS_LENGTH = 4096;
      function decodeCodePointsArray(codePoints) {
        const len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) {
          return String.fromCharCode.apply(String, codePoints);
        }
        let res = "";
        let i = 0;
        while (i < len) {
          res += String.fromCharCode.apply(
            String,
            codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
          );
        }
        return res;
      }
      function asciiSlice(buf, start, end) {
        let ret2 = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret2 += String.fromCharCode(buf[i] & 127);
        }
        return ret2;
      }
      function latin1Slice(buf, start, end) {
        let ret2 = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret2 += String.fromCharCode(buf[i]);
        }
        return ret2;
      }
      function hexSlice(buf, start, end) {
        const len = buf.length;
        if (!start || start < 0) start = 0;
        if (!end || end < 0 || end > len) end = len;
        let out = "";
        for (let i = start; i < end; ++i) {
          out += hexSliceLookupTable[buf[i]];
        }
        return out;
      }
      function utf16leSlice(buf, start, end) {
        const bytes = buf.slice(start, end);
        let res = "";
        for (let i = 0; i < bytes.length - 1; i += 2) {
          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
        }
        return res;
      }
      Buffer3.prototype.slice = function slice(start, end) {
        const len = this.length;
        start = ~~start;
        end = end === void 0 ? len : ~~end;
        if (start < 0) {
          start += len;
          if (start < 0) start = 0;
        } else if (start > len) {
          start = len;
        }
        if (end < 0) {
          end += len;
          if (end < 0) end = 0;
        } else if (end > len) {
          end = len;
        }
        if (end < start) end = start;
        const newBuf = this.subarray(start, end);
        Object.setPrototypeOf(newBuf, Buffer3.prototype);
        return newBuf;
      };
      function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
        if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
      }
      Buffer3.prototype.readUintLE = Buffer3.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        return val;
      };
      Buffer3.prototype.readUintBE = Buffer3.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          checkOffset(offset, byteLength2, this.length);
        }
        let val = this[offset + --byteLength2];
        let mul = 1;
        while (byteLength2 > 0 && (mul *= 256)) {
          val += this[offset + --byteLength2] * mul;
        }
        return val;
      };
      Buffer3.prototype.readUint8 = Buffer3.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 1, this.length);
        return this[offset];
      };
      Buffer3.prototype.readUint16LE = Buffer3.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 2, this.length);
        return this[offset] | this[offset + 1] << 8;
      };
      Buffer3.prototype.readUint16BE = Buffer3.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 2, this.length);
        return this[offset] << 8 | this[offset + 1];
      };
      Buffer3.prototype.readUint32LE = Buffer3.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
      };
      Buffer3.prototype.readUint32BE = Buffer3.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
      };
      Buffer3.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
        const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
        return BigInt(lo) + (BigInt(hi) << BigInt(32));
      });
      Buffer3.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
        return (BigInt(hi) << BigInt(32)) + BigInt(lo);
      });
      Buffer3.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        mul *= 128;
        if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer3.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) checkOffset(offset, byteLength2, this.length);
        let i = byteLength2;
        let mul = 1;
        let val = this[offset + --i];
        while (i > 0 && (mul *= 256)) {
          val += this[offset + --i] * mul;
        }
        mul *= 128;
        if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer3.prototype.readInt8 = function readInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 1, this.length);
        if (!(this[offset] & 128)) return this[offset];
        return (255 - this[offset] + 1) * -1;
      };
      Buffer3.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 2, this.length);
        const val = this[offset] | this[offset + 1] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer3.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 2, this.length);
        const val = this[offset + 1] | this[offset] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer3.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
      };
      Buffer3.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
      };
      Buffer3.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
        return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
      });
      Buffer3.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = (first << 24) + // Overflow
        this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
      });
      Buffer3.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, true, 23, 4);
      };
      Buffer3.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, false, 23, 4);
      };
      Buffer3.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, true, 52, 8);
      };
      Buffer3.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, false, 52, 8);
      };
      function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer3.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
        if (offset + ext > buf.length) throw new RangeError("Index out of range");
      }
      Buffer3.prototype.writeUintLE = Buffer3.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let mul = 1;
        let i = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer3.prototype.writeUintBE = Buffer3.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer3.prototype.writeUint8 = Buffer3.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer3.prototype.writeUint16LE = Buffer3.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer3.prototype.writeUint16BE = Buffer3.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer3.prototype.writeUint32LE = Buffer3.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 255;
        return offset + 4;
      };
      Buffer3.prototype.writeUint32BE = Buffer3.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      function wrtBigUInt64LE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        return offset;
      }
      function wrtBigUInt64BE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset + 7] = lo;
        lo = lo >> 8;
        buf[offset + 6] = lo;
        lo = lo >> 8;
        buf[offset + 5] = lo;
        lo = lo >> 8;
        buf[offset + 4] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset + 3] = hi;
        hi = hi >> 8;
        buf[offset + 2] = hi;
        hi = hi >> 8;
        buf[offset + 1] = hi;
        hi = hi >> 8;
        buf[offset] = hi;
        return offset + 8;
      }
      Buffer3.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer3.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer3.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = 0;
        let mul = 1;
        let sub = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer3.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        let sub = 0;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer3.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
        if (value < 0) value = 255 + value + 1;
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer3.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer3.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer3.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
        return offset + 4;
      };
      Buffer3.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
        if (value < 0) value = 4294967295 + value + 1;
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      Buffer3.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      Buffer3.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length) throw new RangeError("Index out of range");
        if (offset < 0) throw new RangeError("Index out of range");
      }
      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
        }
        ieee754.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
      }
      Buffer3.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert);
      };
      Buffer3.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert);
      };
      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
        }
        ieee754.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
      }
      Buffer3.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert);
      };
      Buffer3.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert);
      };
      Buffer3.prototype.copy = function copy(target, targetStart, start, end) {
        if (!Buffer3.isBuffer(target)) throw new TypeError("argument should be a Buffer");
        if (!start) start = 0;
        if (!end && end !== 0) end = this.length;
        if (targetStart >= target.length) targetStart = target.length;
        if (!targetStart) targetStart = 0;
        if (end > 0 && end < start) end = start;
        if (end === start) return 0;
        if (target.length === 0 || this.length === 0) return 0;
        if (targetStart < 0) {
          throw new RangeError("targetStart out of bounds");
        }
        if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
        if (end < 0) throw new RangeError("sourceEnd out of bounds");
        if (end > this.length) end = this.length;
        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }
        const len = end - start;
        if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
          this.copyWithin(targetStart, start, end);
        } else {
          Uint8Array.prototype.set.call(
            target,
            this.subarray(start, end),
            targetStart
          );
        }
        return len;
      };
      Buffer3.prototype.fill = function fill(val, start, end, encoding) {
        if (typeof val === "string") {
          if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
          }
          if (encoding !== void 0 && typeof encoding !== "string") {
            throw new TypeError("encoding must be a string");
          }
          if (typeof encoding === "string" && !Buffer3.isEncoding(encoding)) {
            throw new TypeError("Unknown encoding: " + encoding);
          }
          if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") {
              val = code;
            }
          }
        } else if (typeof val === "number") {
          val = val & 255;
        } else if (typeof val === "boolean") {
          val = Number(val);
        }
        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError("Out of range index");
        }
        if (end <= start) {
          return this;
        }
        start = start >>> 0;
        end = end === void 0 ? this.length : end >>> 0;
        if (!val) val = 0;
        let i;
        if (typeof val === "number") {
          for (i = start; i < end; ++i) {
            this[i] = val;
          }
        } else {
          const bytes = Buffer3.isBuffer(val) ? val : Buffer3.from(val, encoding);
          const len = bytes.length;
          if (len === 0) {
            throw new TypeError('The value "' + val + '" is invalid for argument "value"');
          }
          for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes[i % len];
          }
        }
        return this;
      };
      var errors = {};
      function E(sym, getMessage, Base) {
        errors[sym] = class NodeError extends Base {
          constructor() {
            super();
            Object.defineProperty(this, "message", {
              value: getMessage.apply(this, arguments),
              writable: true,
              configurable: true
            });
            this.name = `${this.name} [${sym}]`;
            this.stack;
            delete this.name;
          }
          get code() {
            return sym;
          }
          set code(value) {
            Object.defineProperty(this, "code", {
              configurable: true,
              enumerable: true,
              value,
              writable: true
            });
          }
          toString() {
            return `${this.name} [${sym}]: ${this.message}`;
          }
        };
      }
      E(
        "ERR_BUFFER_OUT_OF_BOUNDS",
        function(name) {
          if (name) {
            return `${name} is outside of buffer bounds`;
          }
          return "Attempt to access memory outside buffer bounds";
        },
        RangeError
      );
      E(
        "ERR_INVALID_ARG_TYPE",
        function(name, actual) {
          return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
        },
        TypeError
      );
      E(
        "ERR_OUT_OF_RANGE",
        function(str, range, input) {
          let msg = `The value of "${str}" is out of range.`;
          let received = input;
          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
            received = addNumericalSeparator(String(input));
          } else if (typeof input === "bigint") {
            received = String(input);
            if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
              received = addNumericalSeparator(received);
            }
            received += "n";
          }
          msg += ` It must be ${range}. Received ${received}`;
          return msg;
        },
        RangeError
      );
      function addNumericalSeparator(val) {
        let res = "";
        let i = val.length;
        const start = val[0] === "-" ? 1 : 0;
        for (; i >= start + 4; i -= 3) {
          res = `_${val.slice(i - 3, i)}${res}`;
        }
        return `${val.slice(0, i)}${res}`;
      }
      function checkBounds(buf, offset, byteLength2) {
        validateNumber(offset, "offset");
        if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
          boundsError(offset, buf.length - (byteLength2 + 1));
        }
      }
      function checkIntBI(value, min, max, buf, offset, byteLength2) {
        if (value > max || value < min) {
          const n = typeof min === "bigint" ? "n" : "";
          let range;
          if (byteLength2 > 3) {
            if (min === 0 || min === BigInt(0)) {
              range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;
            } else {
              range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;
            }
          } else {
            range = `>= ${min}${n} and <= ${max}${n}`;
          }
          throw new errors.ERR_OUT_OF_RANGE("value", range, value);
        }
        checkBounds(buf, offset, byteLength2);
      }
      function validateNumber(value, name) {
        if (typeof value !== "number") {
          throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
        }
      }
      function boundsError(value, length, type) {
        if (Math.floor(value) !== value) {
          validateNumber(value, type);
          throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
        }
        if (length < 0) {
          throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
        }
        throw new errors.ERR_OUT_OF_RANGE(
          type || "offset",
          `>= ${type ? 1 : 0} and <= ${length}`,
          value
        );
      }
      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
      function base64clean(str) {
        str = str.split("=")[0];
        str = str.trim().replace(INVALID_BASE64_RE, "");
        if (str.length < 2) return "";
        while (str.length % 4 !== 0) {
          str = str + "=";
        }
        return str;
      }
      function utf8ToBytes(string, units) {
        units = units || Infinity;
        let codePoint;
        const length = string.length;
        let leadSurrogate = null;
        const bytes = [];
        for (let i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i);
          if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
              if (codePoint > 56319) {
                if ((units -= 3) > -1) bytes.push(239, 191, 189);
                continue;
              } else if (i + 1 === length) {
                if ((units -= 3) > -1) bytes.push(239, 191, 189);
                continue;
              }
              leadSurrogate = codePoint;
              continue;
            }
            if (codePoint < 56320) {
              if ((units -= 3) > -1) bytes.push(239, 191, 189);
              leadSurrogate = codePoint;
              continue;
            }
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
          } else if (leadSurrogate) {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
          }
          leadSurrogate = null;
          if (codePoint < 128) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
          } else if (codePoint < 2048) {
            if ((units -= 2) < 0) break;
            bytes.push(
              codePoint >> 6 | 192,
              codePoint & 63 | 128
            );
          } else if (codePoint < 65536) {
            if ((units -= 3) < 0) break;
            bytes.push(
              codePoint >> 12 | 224,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else if (codePoint < 1114112) {
            if ((units -= 4) < 0) break;
            bytes.push(
              codePoint >> 18 | 240,
              codePoint >> 12 & 63 | 128,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else {
            throw new Error("Invalid code point");
          }
        }
        return bytes;
      }
      function asciiToBytes(str) {
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          byteArray.push(str.charCodeAt(i) & 255);
        }
        return byteArray;
      }
      function utf16leToBytes(str, units) {
        let c, hi, lo;
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0) break;
          c = str.charCodeAt(i);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }
        return byteArray;
      }
      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }
      function blitBuffer(src, dst, offset, length) {
        let i;
        for (i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length) break;
          dst[i + offset] = src[i];
        }
        return i;
      }
      function isInstance(obj2, type) {
        return obj2 instanceof type || obj2 != null && obj2.constructor != null && obj2.constructor.name != null && obj2.constructor.name === type.name;
      }
      function numberIsNaN(obj2) {
        return obj2 !== obj2;
      }
      var hexSliceLookupTable = function() {
        const alphabet = "0123456789abcdef";
        const table = new Array(256);
        for (let i = 0; i < 16; ++i) {
          const i16 = i * 16;
          for (let j = 0; j < 16; ++j) {
            table[i16 + j] = alphabet[i] + alphabet[j];
          }
        }
        return table;
      }();
      function defineBigIntMethod(fn) {
        return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
      }
      function BufferBigIntNotDefined() {
        throw new Error("BigInt not supported");
      }
    }
  });

  // mammoth/mammoth.browser.js
  var require_mammoth_browser = __commonJS({
    "mammoth/mammoth.browser.js"(exports, module) {
      (function(f) {
        if (typeof exports === "object" && typeof module !== "undefined") {
          module.exports = f();
        } else if (typeof define === "function" && define.amd) {
          define([], f);
        } else {
          var g;
          if (typeof window !== "undefined") {
            g = window;
          } else if (typeof global !== "undefined") {
            g = global;
          } else if (typeof self !== "undefined") {
            g = self;
          } else {
            g = this;
          }
          g.mammoth = f();
        }
      })(function() {
        var define, module, exports;
        return function e(t, n, r) {
          function s(o2, u) {
            if (!n[o2]) {
              if (!t[o2]) {
                var a = typeof __require == "function" && __require;
                if (!u && a) return a(o2, true);
                if (i) return i(o2, true);
                var f = new Error("Cannot find module '" + o2 + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
              }
              var l2 = n[o2] = { exports: {} };
              t[o2][0].call(l2.exports, function(e2) {
                var n2 = t[o2][1][e2];
                return s(n2 ? n2 : e2);
              }, l2, l2.exports, e, t, n, r);
            }
            return n[o2].exports;
          }
          var i = typeof __require == "function" && __require;
          for (var o = 0; o < r.length; o++) s(r[o]);
          return s;
        }({ 1: [function(require2, module2, exports2) {
          var promises = require2("../../lib/promises");
          exports2.Files = Files;
          function Files() {
            function read(uri) {
              return promises.reject(new Error("could not open external image: '" + uri + "'\ncannot open linked files from a web browser"));
            }
            return {
              read
            };
          }
        }, { "../../lib/promises": 23 }], 2: [function(require2, module2, exports2) {
          var promises = require2("../lib/promises");
          var zipfile = require2("../lib/zipfile");
          exports2.openZip = openZip;
          function openZip(options2) {
            if (options2.arrayBuffer) {
              return promises.resolve(zipfile.openArrayBuffer(options2.arrayBuffer));
            } else {
              return promises.reject(new Error("Could not find file in options"));
            }
          }
        }, { "../lib/promises": 23, "../lib/zipfile": 38 }], 3: [function(require2, module2, exports2) {
          var _ = require2("underscore");
          var promises = require2("./promises");
          var documents = require2("./documents");
          var htmlPaths = require2("./styles/html-paths");
          var results = require2("./results");
          var images = require2("./images");
          var Html = require2("./html");
          var writers = require2("./writers");
          exports2.DocumentConverter = DocumentConverter;
          function DocumentConverter(options2) {
            return {
              convertToHtml: function(element) {
                var comments = _.indexBy(
                  element.type === documents.types.document ? element.comments : [],
                  "commentId"
                );
                var conversion = new DocumentConversion(options2, comments);
                return conversion.convertToHtml(element);
              }
            };
          }
          function DocumentConversion(options2, comments) {
            var noteNumber = 1;
            var noteReferences = [];
            var referencedComments = [];
            options2 = _.extend({ ignoreEmptyParagraphs: true }, options2);
            var idPrefix = options2.idPrefix === void 0 ? "" : options2.idPrefix;
            var ignoreEmptyParagraphs = options2.ignoreEmptyParagraphs;
            var defaultParagraphStyle = htmlPaths.topLevelElement("p");
            var styleMap = options2.styleMap || [];
            var preserveColors = options2.preserveColors || options2.preserveColours;
            var preserveFonts = options2.preserveFonts;
            function convertToHtml(document2) {
              var messages = [];
              var html = elementToHtml(document2, messages, {});
              var deferredNodes = [];
              walkHtml(html, function(node) {
                if (node.type === "deferred") {
                  deferredNodes.push(node);
                }
              });
              var deferredValues = {};
              return promises.mapSeries(deferredNodes, function(deferred) {
                return deferred.value().then(function(value) {
                  deferredValues[deferred.id] = value;
                });
              }).then(function() {
                function replaceDeferred(nodes) {
                  return flatMap(nodes, function(node) {
                    if (node.type === "deferred") {
                      return deferredValues[node.id];
                    } else if (node.children) {
                      return [
                        _.extend({}, node, {
                          children: replaceDeferred(node.children)
                        })
                      ];
                    } else {
                      return [node];
                    }
                  });
                }
                var writer = writers.writer({
                  prettyPrint: options2.prettyPrint,
                  outputFormat: options2.outputFormat
                });
                Html.write(writer, Html.simplify(replaceDeferred(html)));
                return new results.Result(writer.asString(), messages);
              });
            }
            function convertElements(elements, messages, options3) {
              return flatMap(elements, function(element) {
                return elementToHtml(element, messages, options3);
              });
            }
            function elementToHtml(element, messages, options3) {
              if (!options3) {
                throw new Error("options not set");
              }
              var handler = elementConverters[element.type];
              if (handler) {
                return handler(element, messages, options3);
              } else {
                return [];
              }
            }
            function convertParagraph(element, messages, options3) {
              return htmlPathForParagraph(element, messages).wrap(function() {
                var content = convertElements(element.children, messages, options3);
                if (ignoreEmptyParagraphs) {
                  return content;
                } else {
                  return [Html.forceWrite].concat(content);
                }
              });
            }
            function htmlPathForParagraph(element, messages) {
              var style = findStyle(element);
              var css_style = [];
              if (element.alignment) {
                css_style.push("text-align:" + element.alignment);
              }
              if (!isNaN(parseInt(element.indent.start))) {
                css_style.push("padding-left:" + Math.floor(parseInt(element.indent.start) / 20) + "pt");
              }
              if (element.topBorder) {
                css_style.push("border-top:" + element.topBorder);
              }
              if (element.rightBorder) {
                css_style.push("border-right:" + element.rightBorder);
              }
              if (element.bottomBorder) {
                css_style.push("border-bottom:" + element.bottomBorder);
              }
              if (element.leftBorder) {
                css_style.push("border-left:" + element.leftBorder);
              }
              if (style) {
                var elm = style.to;
                if (elm._elements[0] != null && ["h1", "h2", "h3", "h4", "h5", "h6"].includes(elm._elements[0].tagName)) {
                  elm._elements[0].attributes["style"] = css_style.join(";");
                }
                return elm;
              } else {
                if (element.styleId) {
                  messages.push(unrecognisedStyleWarning("paragraph", element));
                }
                return htmlPaths.topLevelElement("p", { style: css_style.join(";") });
              }
            }
            function convertRun(run, messages, options3) {
              var nodes = function() {
                return convertElements(run.children, messages, options3);
              };
              var paths = [];
              var styleProps = [];
              if (run.color) {
                styleProps.push("color: " + formatColor(run.color));
              }
              if (run.highlight) {
                styleProps.push("background-color: " + formatColor(run.highlight));
              }
              if (run.shading) {
                styleProps.push("background-color: " + formatColor(run.shading));
              }
              if (run.font) {
                styleProps.push("font-family: " + run.font);
              }
              if (run.fontSize) {
                styleProps.push("font-size: " + Math.floor(parseInt(run.fontSize)) + "pt");
              }
              if (run.isSmallCaps) {
                styleProps.push("text-transform: capitalize");
              }
              if (run.isAllCaps) {
                styleProps.push("text-transform: uppercase");
              }
              if (run.isStrikethrough) {
                styleProps.push("text-decoration: line-through");
              }
              if (run.isUnderline) {
                styleProps.push("text-decoration: underline");
              }
              if (run.isItalic) {
                styleProps.push("font-style: italic");
              }
              if (run.isBold) {
                styleProps.push("font-weight: bold");
              }
              paths.push(htmlPaths.element("span", { style: styleProps.join("; ") }, { fresh: false }));
              if (run.verticalAlignment === documents.verticalAlignment.subscript) {
                paths.push(htmlPaths.element("sub", {}, { fresh: false }));
              }
              if (run.verticalAlignment === documents.verticalAlignment.superscript) {
                paths.push(htmlPaths.element("sup", {}, { fresh: false }));
              }
              var stylePath = htmlPaths.empty;
              var style = findStyle(run);
              if (style) {
                stylePath = style.to;
              } else if (run.styleId) {
                messages.push(unrecognisedStyleWarning("run", run));
              }
              paths.push(stylePath);
              paths.forEach(function(path) {
                nodes = path.wrap.bind(path, nodes);
              });
              return nodes();
            }
            function formatColor(maybeHex) {
              if (/^[0-9A-F]{3,8}$/i.test(maybeHex)) {
                return "#" + maybeHex;
              }
              return maybeHex;
            }
            function findHtmlPathForRunProperty(elementType, defaultTagName) {
              var path = findHtmlPath({ type: elementType });
              if (path) {
                return path;
              } else if (defaultTagName) {
                return htmlPaths.element(defaultTagName, {}, { fresh: false });
              } else {
                return htmlPaths.empty;
              }
            }
            function findHtmlPath(element, defaultPath) {
              var style = findStyle(element);
              return style ? style.to : defaultPath;
            }
            function findStyle(element) {
              for (var i = 0; i < styleMap.length; i++) {
                if (styleMap[i].from.matches(element)) {
                  return styleMap[i];
                }
              }
            }
            function recoveringConvertImage(convertImage) {
              return function(image, messages) {
                return promises.attempt(function() {
                  return convertImage(image, messages);
                }).caught(function(error) {
                  messages.push(results.error(error));
                  return [];
                });
              };
            }
            function noteHtmlId(note) {
              return referentHtmlId(note.noteType, note.noteId);
            }
            function noteRefHtmlId(note) {
              return referenceHtmlId(note.noteType, note.noteId);
            }
            function referentHtmlId(referenceType, referenceId) {
              return htmlId(referenceType + "-" + referenceId);
            }
            function referenceHtmlId(referenceType, referenceId) {
              return htmlId(referenceType + "-ref-" + referenceId);
            }
            function htmlId(suffix) {
              return idPrefix + suffix;
            }
            var defaultTablePath = htmlPaths.elements([
              htmlPaths.element("table", {}, { fresh: true })
            ]);
            function convertTable(element, messages, options3) {
              return findHtmlPath(element, defaultTablePath).wrap(function() {
                return convertTableChildren(element, messages, options3);
              });
            }
            function convertTableChildren(element, messages, options3) {
              var bodyIndex = _.findIndex(element.children, function(child) {
                return !child.type === documents.types.tableRow || !child.isHeader;
              });
              if (bodyIndex === -1) {
                bodyIndex = element.children.length;
              }
              var children;
              if (bodyIndex === 0) {
                children = convertElements(
                  element.children,
                  messages,
                  _.extend({}, options3, { isTableHeader: false })
                );
              } else {
                var headRows = convertElements(
                  element.children.slice(0, bodyIndex),
                  messages,
                  _.extend({}, options3, { isTableHeader: true })
                );
                var bodyRows = convertElements(
                  element.children.slice(bodyIndex),
                  messages,
                  _.extend({}, options3, { isTableHeader: false })
                );
                children = [
                  Html.freshElement("thead", {}, headRows),
                  Html.freshElement("tbody", {}, bodyRows)
                ];
              }
              return [Html.forceWrite].concat(children);
            }
            function convertTableRow(element, messages, options3) {
              var children = convertElements(element.children, messages, options3);
              return [
                Html.freshElement("tr", {}, [Html.forceWrite].concat(children))
              ];
            }
            function convertTableCell(element, messages, options3) {
              var tagName = options3.isTableHeader ? "th" : "td";
              var children = convertElements(element.children, messages, options3);
              var attributes = {};
              if (element.colSpan !== 1) {
                attributes.colspan = element.colSpan.toString();
              }
              if (element.rowSpan !== 1) {
                attributes.rowspan = element.rowSpan.toString();
              }
              return [
                Html.freshElement(tagName, attributes, [Html.forceWrite].concat(children))
              ];
            }
            function convertCommentReference(reference, messages, options3) {
              return findHtmlPath(reference, htmlPaths.ignore).wrap(function() {
                var comment = comments[reference.commentId];
                var count = referencedComments.length + 1;
                var label = "[" + commentAuthorLabel(comment) + count + "]";
                referencedComments.push({ label, comment });
                return [
                  Html.freshElement("a", {
                    href: "#" + referentHtmlId("comment", reference.commentId),
                    id: referenceHtmlId("comment", reference.commentId)
                  }, [Html.text(label)])
                ];
              });
            }
            function convertComment(referencedComment, messages, options3) {
              var label = referencedComment.label;
              var comment = referencedComment.comment;
              var body = convertElements(comment.body, messages, options3).concat([
                Html.nonFreshElement("p", {}, [
                  Html.text(" "),
                  Html.freshElement("a", { "href": "#" + referenceHtmlId("comment", comment.commentId) }, [
                    Html.text("\u2191")
                  ])
                ])
              ]);
              return [
                Html.freshElement(
                  "dt",
                  { "id": referentHtmlId("comment", comment.commentId) },
                  [Html.text("Comment " + label)]
                ),
                Html.freshElement("dd", {}, body)
              ];
            }
            function convertBreak(element, messages, options3) {
              return htmlPathForBreak(element).wrap(function() {
                return [];
              });
            }
            function htmlPathForBreak(element) {
              var style = findStyle(element);
              if (style) {
                return style.to;
              } else if (element.breakType === "line") {
                return htmlPaths.topLevelElement("br");
              } else {
                return htmlPaths.empty;
              }
            }
            var elementConverters = {
              "document": function(document2, messages, options3) {
                var children = convertElements(document2.children, messages, options3);
                var notes = noteReferences.map(function(noteReference) {
                  return document2.notes.resolve(noteReference);
                });
                var notesNodes = convertElements(notes, messages, options3);
                return children.concat([
                  Html.freshElement("ol", {}, notesNodes),
                  Html.freshElement("dl", {}, flatMap(referencedComments, function(referencedComment) {
                    return convertComment(referencedComment, messages, options3);
                  }))
                ]);
              },
              "paragraph": convertParagraph,
              "run": convertRun,
              "text": function(element, messages, options3) {
                return [Html.text(element.value)];
              },
              "tab": function(element, messages, options3) {
                return [Html.text("	")];
              },
              "hyperlink": function(element, messages, options3) {
                var href = element.anchor ? "#" + htmlId(element.anchor) : element.href;
                var attributes = { href };
                if (element.targetFrame != null) {
                  attributes.target = element.targetFrame;
                }
                var children = convertElements(element.children, messages, options3);
                return [Html.nonFreshElement("a", attributes, children)];
              },
              "bookmarkStart": function(element, messages, options3) {
                var anchor = Html.freshElement("a", {
                  id: htmlId(element.name)
                }, [Html.forceWrite]);
                return [anchor];
              },
              "noteReference": function(element, messages, options3) {
                noteReferences.push(element);
                var anchor = Html.freshElement("a", {
                  href: "#" + noteHtmlId(element),
                  id: noteRefHtmlId(element)
                }, [Html.text("[" + noteNumber++ + "]")]);
                return [Html.freshElement("sup", {}, [anchor])];
              },
              "note": function(element, messages, options3) {
                var children = convertElements(element.body, messages, options3);
                var backLink = Html.elementWithTag(htmlPaths.element("p", {}, { fresh: false }), [
                  Html.text(" "),
                  Html.freshElement("a", { href: "#" + noteRefHtmlId(element) }, [Html.text("\u2191")])
                ]);
                var body = children.concat([backLink]);
                return Html.freshElement("li", { id: noteHtmlId(element) }, body);
              },
              "commentReference": convertCommentReference,
              "comment": convertComment,
              "image": deferredConversion(recoveringConvertImage(options2.convertImage || images.dataUri)),
              "table": convertTable,
              "tableRow": convertTableRow,
              "tableCell": convertTableCell,
              "break": convertBreak
            };
            return {
              convertToHtml
            };
          }
          var deferredId = 1;
          function deferredConversion(func) {
            return function(element, messages, options2) {
              return [
                {
                  type: "deferred",
                  id: deferredId++,
                  value: function() {
                    return func(element, messages, options2);
                  }
                }
              ];
            };
          }
          function unrecognisedStyleWarning(type, element) {
            return results.warning(
              "Unrecognised " + type + " style: '" + element.styleName + "' (Style ID: " + element.styleId + ")"
            );
          }
          function flatMap(values, func) {
            return _.flatten(values.map(func), true);
          }
          function walkHtml(nodes, callback) {
            nodes.forEach(function(node) {
              callback(node);
              if (node.children) {
                walkHtml(node.children, callback);
              }
            });
          }
          var commentAuthorLabel = exports2.commentAuthorLabel = function commentAuthorLabel2(comment) {
            return comment.authorInitials || "";
          };
        }, { "./documents": 4, "./html": 18, "./images": 20, "./promises": 23, "./results": 24, "./styles/html-paths": 27, "./writers": 32, "underscore": 154 }], 4: [function(require2, module2, exports2) {
          var _ = require2("underscore");
          var types = exports2.types = {
            document: "document",
            paragraph: "paragraph",
            run: "run",
            text: "text",
            tab: "tab",
            hyperlink: "hyperlink",
            noteReference: "noteReference",
            image: "image",
            note: "note",
            commentReference: "commentReference",
            comment: "comment",
            table: "table",
            tableRow: "tableRow",
            tableCell: "tableCell",
            "break": "break",
            bookmarkStart: "bookmarkStart"
          };
          function Document2(children, options2) {
            options2 = options2 || {};
            return {
              type: types.document,
              children,
              notes: options2.notes || new Notes({}),
              comments: options2.comments || []
            };
          }
          function Paragraph2(children, properties) {
            properties = properties || {};
            var indent = properties.indent || {};
            return {
              type: types.paragraph,
              children,
              styleId: properties.styleId || null,
              styleName: properties.styleName || null,
              numbering: properties.numbering || null,
              alignment: properties.alignment || null,
              indent: {
                start: indent.start || null,
                end: indent.end || null,
                firstLine: indent.firstLine || null,
                hanging: indent.hanging || null
              },
              topBorder: properties.topBorder,
              rightBorder: properties.rightBorder,
              bottomBorder: properties.bottomBorder,
              leftBorder: properties.leftBorder
            };
          }
          function Run(children, properties) {
            properties = properties || {};
            return {
              type: types.run,
              children,
              styleId: properties.styleId || null,
              styleName: properties.styleName || null,
              isBold: properties.isBold,
              isUnderline: properties.isUnderline,
              isItalic: properties.isItalic,
              isStrikethrough: properties.isStrikethrough,
              isAllCaps: properties.isAllCaps,
              isSmallCaps: properties.isSmallCaps,
              verticalAlignment: properties.verticalAlignment || verticalAlignment.baseline,
              font: properties.font || null,
              fontSize: properties.fontSize || null,
              color: properties.color || null,
              highlight: properties.highlight || null,
              shading: properties.shading || null,
              border: properties.border || null
            };
          }
          var verticalAlignment = {
            baseline: "baseline",
            superscript: "superscript",
            subscript: "subscript"
          };
          function Text(value) {
            return {
              type: types.text,
              value
            };
          }
          function Tab() {
            return {
              type: types.tab
            };
          }
          function Hyperlink(children, options2) {
            return {
              type: types.hyperlink,
              children,
              href: options2.href,
              anchor: options2.anchor,
              targetFrame: options2.targetFrame
            };
          }
          function NoteReference(options2) {
            return {
              type: types.noteReference,
              noteType: options2.noteType,
              noteId: options2.noteId
            };
          }
          function Notes(notes) {
            this._notes = _.indexBy(notes, function(note) {
              return noteKey(note.noteType, note.noteId);
            });
          }
          Notes.prototype.resolve = function(reference) {
            return this.findNoteByKey(noteKey(reference.noteType, reference.noteId));
          };
          Notes.prototype.findNoteByKey = function(key) {
            return this._notes[key] || null;
          };
          function Note(options2) {
            return {
              type: types.note,
              noteType: options2.noteType,
              noteId: options2.noteId,
              body: options2.body
            };
          }
          function commentReference(options2) {
            return {
              type: types.commentReference,
              commentId: options2.commentId
            };
          }
          function comment(options2) {
            return {
              type: types.comment,
              commentId: options2.commentId,
              body: options2.body,
              authorName: options2.authorName,
              authorInitials: options2.authorInitials
            };
          }
          function noteKey(noteType, id) {
            return noteType + "-" + id;
          }
          function Image2(options2) {
            return {
              type: types.image,
              read: options2.readImage,
              altText: options2.altText,
              contentType: options2.contentType
            };
          }
          function Table2(children, properties) {
            properties = properties || {};
            return {
              type: types.table,
              children,
              styleId: properties.styleId || null,
              styleName: properties.styleName || null
            };
          }
          function TableRow2(children, options2) {
            options2 = options2 || {};
            return {
              type: types.tableRow,
              children,
              isHeader: options2.isHeader || false
            };
          }
          function TableCell2(children, options2) {
            options2 = options2 || {};
            return {
              type: types.tableCell,
              children,
              colSpan: options2.colSpan == null ? 1 : options2.colSpan,
              rowSpan: options2.rowSpan == null ? 1 : options2.rowSpan
            };
          }
          function Break(breakType) {
            return {
              type: types["break"],
              breakType
            };
          }
          function BookmarkStart(options2) {
            return {
              type: types.bookmarkStart,
              name: options2.name
            };
          }
          exports2.document = exports2.Document = Document2;
          exports2.paragraph = exports2.Paragraph = Paragraph2;
          exports2.run = exports2.Run = Run;
          exports2.Text = Text;
          exports2.tab = exports2.Tab = Tab;
          exports2.Hyperlink = Hyperlink;
          exports2.noteReference = exports2.NoteReference = NoteReference;
          exports2.Notes = Notes;
          exports2.Note = Note;
          exports2.commentReference = commentReference;
          exports2.comment = comment;
          exports2.Image = Image2;
          exports2.Table = Table2;
          exports2.TableRow = TableRow2;
          exports2.TableCell = TableCell2;
          exports2.lineBreak = Break("line");
          exports2.pageBreak = Break("page");
          exports2.columnBreak = Break("column");
          exports2.BookmarkStart = BookmarkStart;
          exports2.verticalAlignment = verticalAlignment;
        }, { "underscore": 154 }], 5: [function(require2, module2, exports2) {
          exports2.createBodyReader = createBodyReader;
          exports2._readNumberingProperties = readNumberingProperties;
          var dingbatToUnicode = require2("dingbat-to-unicode");
          var _ = require2("underscore");
          var documents = require2("../documents");
          var Result = require2("../results").Result;
          var warning = require2("../results").warning;
          var uris = require2("./uris");
          function createBodyReader(options2) {
            return {
              readXmlElement: function(element) {
                return new BodyReader(options2).readXmlElement(element);
              },
              readXmlElements: function(elements) {
                return new BodyReader(options2).readXmlElements(elements);
              }
            };
          }
          function BodyReader(options2) {
            var complexFieldStack = [];
            var currentInstrText = [];
            var relationships = options2.relationships;
            var contentTypes = options2.contentTypes;
            var docxFile = options2.docxFile;
            var files = options2.files;
            var numbering = options2.numbering;
            var styles = options2.styles;
            function readXmlElements(elements) {
              var results = elements.map(readXmlElement);
              return combineResults(results);
            }
            function readXmlElement(element) {
              if (element.type === "element") {
                var handler = xmlElementReaders[element.name];
                if (handler) {
                  return handler(element);
                } else if (!Object.prototype.hasOwnProperty.call(ignoreElements, element.name)) {
                  var message = warning("An unrecognised element was ignored: " + element.name);
                  return emptyResultWithMessages([message]);
                }
              }
              return emptyResult();
            }
            function readParagraphIndent(element) {
              return {
                start: element.attributes["w:start"] || element.attributes["w:left"],
                end: element.attributes["w:end"] || element.attributes["w:right"],
                firstLine: element.attributes["w:firstLine"],
                hanging: element.attributes["w:hanging"]
              };
            }
            function readRunProperties(element) {
              return readRunStyle(element).map(function(style) {
                var fontSizeString = element.firstOrEmpty("w:sz").attributes["w:val"];
                var fontSize = /^[0-9]+$/.test(fontSizeString) ? parseInt(fontSizeString, 10) / 2 : null;
                var border = readBorder(element.firstOrEmpty("w:bdr"));
                return {
                  type: "runProperties",
                  styleId: style.styleId,
                  styleName: style.name,
                  verticalAlignment: element.firstOrEmpty("w:vertAlign").attributes["w:val"],
                  font: element.firstOrEmpty("w:rFonts").attributes["w:ascii"],
                  fontSize,
                  isBold: readBooleanElement(element.first("w:b")),
                  isUnderline: readUnderline(element.first("w:u")),
                  isItalic: readBooleanElement(element.first("w:i")),
                  isStrikethrough: readBooleanElement(element.first("w:strike")),
                  isAllCaps: readBooleanElement(element.first("w:caps")),
                  isSmallCaps: readBooleanElement(element.first("w:smallCaps")),
                  color: element.firstOrEmpty("w:color").attributes["w:val"],
                  highlight: element.firstOrEmpty("w:highlight").attributes["w:val"],
                  shading: element.firstOrEmpty("w:shd").attributes["w:fill"],
                  border
                };
              });
            }
            function readBorder(element) {
              var width = Math.ceil(parseInt(element.attributes["w:sz"]) / 8);
              var color = element.attributes["w:color"];
              if (isNaN(width) || color == null) {
                return null;
              } else {
                return width + "pt solid #" + color;
              }
            }
            function readUnderline(element) {
              if (element) {
                var value = element.attributes["w:val"];
                return value !== "false" && value !== "0" && value !== "none";
              } else {
                return false;
              }
            }
            function readBooleanElement(element) {
              if (element) {
                var value = element.attributes["w:val"];
                return value !== "false" && value !== "0";
              } else {
                return false;
              }
            }
            function readParagraphStyle(element) {
              return readStyle(element, "w:pStyle", "Paragraph", styles.findParagraphStyleById);
            }
            function readRunStyle(element) {
              return readStyle(element, "w:rStyle", "Run", styles.findCharacterStyleById);
            }
            function readTableStyle(element) {
              return readStyle(element, "w:tblStyle", "Table", styles.findTableStyleById);
            }
            function readStyle(element, styleTagName, styleType, findStyleById) {
              var messages = [];
              var styleElement = element.first(styleTagName);
              var styleId = null;
              var name = null;
              if (styleElement) {
                styleId = styleElement.attributes["w:val"];
                if (styleId) {
                  var style = findStyleById(styleId);
                  if (style) {
                    name = style.name;
                  } else {
                    messages.push(undefinedStyleWarning(styleType, styleId));
                  }
                }
              }
              return elementResultWithMessages({ styleId, name }, messages);
            }
            var unknownComplexField = { type: "unknown" };
            function readFldChar(element) {
              var type = element.attributes["w:fldCharType"];
              if (type === "begin") {
                complexFieldStack.push(unknownComplexField);
                currentInstrText = [];
              } else if (type === "end") {
                complexFieldStack.pop();
              } else if (type === "separate") {
                var href = parseHyperlinkFieldCode(currentInstrText.join(""));
                var complexField = href === null ? unknownComplexField : { type: "hyperlink", href };
                complexFieldStack.pop();
                complexFieldStack.push(complexField);
              }
              return emptyResult();
            }
            function currentHyperlinkHref() {
              var topHyperlink = _.last(complexFieldStack.filter(function(complexField) {
                return complexField.type === "hyperlink";
              }));
              return topHyperlink ? topHyperlink.href : null;
            }
            function parseHyperlinkFieldCode(code) {
              var result = /\s*HYPERLINK "(.*)"/.exec(code);
              if (result) {
                return result[1];
              } else {
                return null;
              }
            }
            function readInstrText(element) {
              currentInstrText.push(element.text());
              return emptyResult();
            }
            function readSymbol(element) {
              var font = element.attributes["w:font"];
              var char = element.attributes["w:char"];
              var unicodeCharacter = dingbatToUnicode.hex(font, char);
              if (unicodeCharacter == null && /^F0..$/.test(char)) {
                unicodeCharacter = dingbatToUnicode.hex(font, char.substring(2));
              }
              if (unicodeCharacter == null) {
                return emptyResultWithMessages([warning(
                  "A w:sym element with an unsupported character was ignored: char " + char + " in font " + font
                )]);
              } else {
                return elementResult(new documents.Text(unicodeCharacter.string));
              }
            }
            function noteReferenceReader(noteType) {
              return function(element) {
                var noteId = element.attributes["w:id"];
                return elementResult(new documents.NoteReference({
                  noteType,
                  noteId
                }));
              };
            }
            function readCommentReference(element) {
              return elementResult(documents.commentReference({
                commentId: element.attributes["w:id"]
              }));
            }
            function readChildElements(element) {
              return readXmlElements(element.children);
            }
            var xmlElementReaders = {
              "w:p": function(element) {
                return readXmlElements(element.children).map(function(children) {
                  var properties = _.find(children, isParagraphProperties);
                  return new documents.Paragraph(
                    children.filter(negate(isParagraphProperties)),
                    properties
                  );
                }).insertExtra();
              },
              "w:pPr": function(element) {
                return readParagraphStyle(element).map(function(style) {
                  var topBorder, rightBorder, bottomBorder, leftBorder;
                  var borderElm = element.firstOrEmpty("w:pBdr");
                  topBorder = readBorder(borderElm.firstOrEmpty("w:top"));
                  rightBorder = readBorder(borderElm.firstOrEmpty("w:right"));
                  bottomBorder = readBorder(borderElm.firstOrEmpty("w:bottom"));
                  leftBorder = readBorder(borderElm.firstOrEmpty("w:left"));
                  return {
                    type: "paragraphProperties",
                    styleId: style.styleId,
                    styleName: style.name,
                    alignment: element.firstOrEmpty("w:jc").attributes["w:val"],
                    numbering: readNumberingProperties(style.styleId, element.firstOrEmpty("w:numPr"), numbering),
                    indent: readParagraphIndent(element.firstOrEmpty("w:ind")),
                    topBorder,
                    rightBorder,
                    bottomBorder,
                    leftBorder
                  };
                });
              },
              "w:r": function(element) {
                return readXmlElements(element.children).map(function(children) {
                  var properties = _.find(children, isRunProperties);
                  children = children.filter(negate(isRunProperties));
                  var hyperlinkHref = currentHyperlinkHref();
                  if (hyperlinkHref !== null) {
                    children = [new documents.Hyperlink(children, { href: hyperlinkHref })];
                  }
                  return new documents.Run(children, properties);
                });
              },
              "w:rPr": readRunProperties,
              "w:fldChar": readFldChar,
              "w:instrText": readInstrText,
              "w:t": function(element) {
                return elementResult(new documents.Text(element.text()));
              },
              "w:tab": function(element) {
                return elementResult(new documents.Tab());
              },
              "w:noBreakHyphen": function() {
                return elementResult(new documents.Text("\u2011"));
              },
              "w:softHyphen": function(element) {
                return elementResult(new documents.Text("\xAD"));
              },
              "w:sym": readSymbol,
              "w:hyperlink": function(element) {
                var relationshipId = element.attributes["r:id"];
                var anchor = element.attributes["w:anchor"];
                return readXmlElements(element.children).map(function(children) {
                  function create(options3) {
                    var targetFrame = element.attributes["w:tgtFrame"] || null;
                    return new documents.Hyperlink(
                      children,
                      _.extend({ targetFrame }, options3)
                    );
                  }
                  if (relationshipId) {
                    var href = relationships.findTargetByRelationshipId(relationshipId);
                    if (anchor) {
                      href = uris.replaceFragment(href, anchor);
                    }
                    return create({ href });
                  } else if (anchor) {
                    return create({ anchor });
                  } else {
                    return children;
                  }
                });
              },
              "w:tbl": readTable,
              "w:tr": readTableRow,
              "w:tc": readTableCell,
              "w:footnoteReference": noteReferenceReader("footnote"),
              "w:endnoteReference": noteReferenceReader("endnote"),
              "w:commentReference": readCommentReference,
              "w:br": function(element) {
                var breakType = element.attributes["w:type"];
                if (breakType == null || breakType === "textWrapping") {
                  return elementResult(documents.lineBreak);
                } else if (breakType === "page") {
                  return elementResult(documents.pageBreak);
                } else if (breakType === "column") {
                  return elementResult(documents.columnBreak);
                } else {
                  return emptyResultWithMessages([warning("Unsupported break type: " + breakType)]);
                }
              },
              "w:bookmarkStart": function(element) {
                var name = element.attributes["w:name"];
                if (name === "_GoBack") {
                  return emptyResult();
                } else {
                  return elementResult(new documents.BookmarkStart({ name }));
                }
              },
              "mc:AlternateContent": function(element) {
                return readChildElements(element.first("mc:Fallback"));
              },
              "w:sdt": function(element) {
                return readXmlElements(element.firstOrEmpty("w:sdtContent").children);
              },
              "w:ins": readChildElements,
              "w:object": readChildElements,
              "w:smartTag": readChildElements,
              "w:drawing": readChildElements,
              "w:pict": function(element) {
                return readChildElements(element).toExtra();
              },
              "v:roundrect": readChildElements,
              "v:shape": readChildElements,
              "v:textbox": readChildElements,
              "w:txbxContent": readChildElements,
              "wp:inline": readDrawingElement,
              "wp:anchor": readDrawingElement,
              "v:imagedata": readImageData,
              "v:group": readChildElements,
              "v:rect": readChildElements
            };
            return {
              readXmlElement,
              readXmlElements
            };
            function readTable(element) {
              var propertiesResult = readTableProperties(element.firstOrEmpty("w:tblPr"));
              return readXmlElements(element.children).flatMap(calculateRowSpans).flatMap(function(children) {
                return propertiesResult.map(function(properties) {
                  return documents.Table(children, properties);
                });
              });
            }
            function readTableProperties(element) {
              return readTableStyle(element).map(function(style) {
                return {
                  styleId: style.styleId,
                  styleName: style.name
                };
              });
            }
            function readTableRow(element) {
              var properties = element.firstOrEmpty("w:trPr");
              var isHeader = !!properties.first("w:tblHeader");
              return readXmlElements(element.children).map(function(children) {
                return documents.TableRow(children, { isHeader });
              });
            }
            function readTableCell(element) {
              return readXmlElements(element.children).map(function(children) {
                var properties = element.firstOrEmpty("w:tcPr");
                var gridSpan = properties.firstOrEmpty("w:gridSpan").attributes["w:val"];
                var colSpan = gridSpan ? parseInt(gridSpan, 10) : 1;
                var cell = documents.TableCell(children, { colSpan });
                cell._vMerge = readVMerge(properties);
                return cell;
              });
            }
            function readVMerge(properties) {
              var element = properties.first("w:vMerge");
              if (element) {
                var val = element.attributes["w:val"];
                return val === "continue" || !val;
              } else {
                return null;
              }
            }
            function calculateRowSpans(rows) {
              var unexpectedNonRows = _.any(rows, function(row) {
                return row.type !== documents.types.tableRow;
              });
              if (unexpectedNonRows) {
                return elementResultWithMessages(rows, [warning(
                  "unexpected non-row element in table, cell merging may be incorrect"
                )]);
              }
              var unexpectedNonCells = _.any(rows, function(row) {
                return _.any(row.children, function(cell) {
                  return cell.type !== documents.types.tableCell;
                });
              });
              if (unexpectedNonCells) {
                return elementResultWithMessages(rows, [warning(
                  "unexpected non-cell element in table row, cell merging may be incorrect"
                )]);
              }
              var columns = {};
              rows.forEach(function(row) {
                var cellIndex = 0;
                row.children.forEach(function(cell) {
                  if (cell._vMerge && columns[cellIndex]) {
                    columns[cellIndex].rowSpan++;
                  } else {
                    columns[cellIndex] = cell;
                    cell._vMerge = false;
                  }
                  cellIndex += cell.colSpan;
                });
              });
              rows.forEach(function(row) {
                row.children = row.children.filter(function(cell) {
                  return !cell._vMerge;
                });
                row.children.forEach(function(cell) {
                  delete cell._vMerge;
                });
              });
              return elementResult(rows);
            }
            function readDrawingElement(element) {
              var blips = element.getElementsByTagName("a:graphic").getElementsByTagName("a:graphicData").getElementsByTagName("pic:pic").getElementsByTagName("pic:blipFill").getElementsByTagName("a:blip");
              return combineResults(blips.map(readBlip.bind(null, element)));
            }
            function readBlip(element, blip) {
              var float = element.firstOrEmpty("wp:positionH").firstOrEmpty("wp:align").firstOrEmpty().value;
              var cx = element.first("wp:extent").attributes.cx;
              var cy = element.first("wp:extent").attributes.cy;
              var width = Math.floor(96 * parseInt(cx) / 914400).toString();
              var height = Math.floor(96 * parseInt(cy) / 914400).toString();
              var properties = element.first("wp:docPr").attributes;
              var altText = isBlank(properties.descr) ? properties.title : properties.descr;
              return readImage(findBlipImageFile(blip), altText, width, height, float);
            }
            function isBlank(value) {
              return value == null || /^\s*$/.test(value);
            }
            function findBlipImageFile(blip) {
              var embedRelationshipId = blip.attributes["r:embed"];
              var linkRelationshipId = blip.attributes["r:link"];
              if (embedRelationshipId) {
                return findEmbeddedImageFile(embedRelationshipId);
              } else {
                var imagePath = relationships.findTargetByRelationshipId(linkRelationshipId);
                return {
                  path: imagePath,
                  read: files.read.bind(files, imagePath)
                };
              }
            }
            function readImageData(element) {
              var relationshipId = element.attributes["r:id"];
              if (relationshipId) {
                return readImage(
                  findEmbeddedImageFile(relationshipId),
                  element.attributes["o:title"]
                );
              } else {
                return emptyResultWithMessages([warning("A v:imagedata element without a relationship ID was ignored")]);
              }
            }
            function findEmbeddedImageFile(relationshipId) {
              var path = uris.uriToZipEntryName("word", relationships.findTargetByRelationshipId(relationshipId));
              return {
                path,
                read: docxFile.read.bind(docxFile, path)
              };
            }
            function readImage(imageFile, altText, width, height, float) {
              var contentType = contentTypes.findContentType(imageFile.path);
              var image = documents.Image({
                readImage: imageFile.read,
                altText,
                contentType
              });
              image.width = width;
              image.height = height;
              if (float == "center") {
                image.style = "margin-left: auto;margin-right: auto;display: block;";
              } else if (float == "left") {
                image.style = "float: left;";
              } else if (float == "right") {
                image.style = "float: right;";
              } else {
                image.style = null;
              }
              var warnings = supportedImageTypes[contentType] ? [] : warning("Image of type " + contentType + " is unlikely to display in web browsers");
              return elementResultWithMessages(image, warnings);
            }
            function undefinedStyleWarning(type, styleId) {
              return warning(
                type + " style with ID " + styleId + " was referenced but not defined in the document"
              );
            }
          }
          function readNumberingProperties(styleId, element, numbering) {
            if (styleId != null) {
              var levelByStyleId = numbering.findLevelByParagraphStyleId(styleId);
              if (levelByStyleId != null) {
                return levelByStyleId;
              }
            }
            var level = element.firstOrEmpty("w:ilvl").attributes["w:val"];
            var numId = element.firstOrEmpty("w:numId").attributes["w:val"];
            if (level === void 0 || numId === void 0) {
              return null;
            } else {
              return numbering.findLevel(numId, level);
            }
          }
          var supportedImageTypes = {
            "image/png": true,
            "image/gif": true,
            "image/jpeg": true,
            "image/svg+xml": true,
            "image/tiff": true
          };
          var ignoreElements = {
            "office-word:wrap": true,
            "v:shadow": true,
            "v:shapetype": true,
            "w:annotationRef": true,
            "w:bookmarkEnd": true,
            "w:sectPr": true,
            "w:proofErr": true,
            "w:lastRenderedPageBreak": true,
            "w:commentRangeStart": true,
            "w:commentRangeEnd": true,
            "w:del": true,
            "w:footnoteRef": true,
            "w:endnoteRef": true,
            "w:tblPr": true,
            "w:tblGrid": true,
            "w:trPr": true,
            "w:tcPr": true
          };
          function isParagraphProperties(element) {
            return element.type === "paragraphProperties";
          }
          function isRunProperties(element) {
            return element.type === "runProperties";
          }
          function negate(predicate) {
            return function(value) {
              return !predicate(value);
            };
          }
          function emptyResultWithMessages(messages) {
            return new ReadResult(null, null, messages);
          }
          function emptyResult() {
            return new ReadResult(null);
          }
          function elementResult(element) {
            return new ReadResult(element);
          }
          function elementResultWithMessages(element, messages) {
            return new ReadResult(element, null, messages);
          }
          function ReadResult(element, extra, messages) {
            this.value = element || [];
            this.extra = extra;
            this._result = new Result({
              element: this.value,
              extra
            }, messages);
            this.messages = this._result.messages;
          }
          ReadResult.prototype.toExtra = function() {
            return new ReadResult(null, joinElements(this.extra, this.value), this.messages);
          };
          ReadResult.prototype.insertExtra = function() {
            var extra = this.extra;
            if (extra && extra.length) {
              return new ReadResult(joinElements(this.value, extra), null, this.messages);
            } else {
              return this;
            }
          };
          ReadResult.prototype.map = function(func) {
            var result = this._result.map(function(value) {
              return func(value.element);
            });
            return new ReadResult(result.value, this.extra, result.messages);
          };
          ReadResult.prototype.flatMap = function(func) {
            var result = this._result.flatMap(function(value) {
              return func(value.element)._result;
            });
            return new ReadResult(result.value.element, joinElements(this.extra, result.value.extra), result.messages);
          };
          function combineResults(results) {
            var result = Result.combine(_.pluck(results, "_result"));
            return new ReadResult(
              _.flatten(_.pluck(result.value, "element")),
              _.filter(_.flatten(_.pluck(result.value, "extra")), identity),
              result.messages
            );
          }
          function joinElements(first, second) {
            return _.flatten([first, second]);
          }
          function identity(value) {
            return value;
          }
        }, { "../documents": 4, "../results": 24, "./uris": 16, "dingbat-to-unicode": 80, "underscore": 154 }], 6: [function(require2, module2, exports2) {
          var documents = require2("../documents");
          var Result = require2("../results").Result;
          function createCommentsReader(bodyReader) {
            function readCommentsXml(element) {
              return Result.combine(element.getElementsByTagName("w:comment").map(readCommentElement));
            }
            function readCommentElement(element) {
              var id = element.attributes["w:id"];
              function readOptionalAttribute(name) {
                return (element.attributes[name] || "").trim() || null;
              }
              return bodyReader.readXmlElements(element.children).map(function(body) {
                return documents.comment({
                  commentId: id,
                  body,
                  authorName: readOptionalAttribute("w:author"),
                  authorInitials: readOptionalAttribute("w:initials")
                });
              });
            }
            return readCommentsXml;
          }
          exports2.createCommentsReader = createCommentsReader;
        }, { "../documents": 4, "../results": 24 }], 7: [function(require2, module2, exports2) {
          exports2.readContentTypesFromXml = readContentTypesFromXml;
          var fallbackContentTypes = {
            "png": "png",
            "gif": "gif",
            "jpeg": "jpeg",
            "jpg": "jpeg",
            "tif": "tiff",
            "tiff": "tiff",
            "bmp": "bmp"
          };
          exports2.defaultContentTypes = contentTypes({}, {});
          function readContentTypesFromXml(element) {
            var extensionDefaults = {};
            var overrides = {};
            element.children.forEach(function(child) {
              if (child.name === "content-types:Default") {
                extensionDefaults[child.attributes.Extension] = child.attributes.ContentType;
              }
              if (child.name === "content-types:Override") {
                var name = child.attributes.PartName;
                if (name.charAt(0) === "/") {
                  name = name.substring(1);
                }
                overrides[name] = child.attributes.ContentType;
              }
            });
            return contentTypes(overrides, extensionDefaults);
          }
          function contentTypes(overrides, extensionDefaults) {
            return {
              findContentType: function(path) {
                var overrideContentType = overrides[path];
                if (overrideContentType) {
                  return overrideContentType;
                } else {
                  var pathParts = path.split(".");
                  var extension = pathParts[pathParts.length - 1];
                  if (extensionDefaults.hasOwnProperty(extension)) {
                    return extensionDefaults[extension];
                  } else {
                    var fallback = fallbackContentTypes[extension.toLowerCase()];
                    if (fallback) {
                      return "image/" + fallback;
                    } else {
                      return null;
                    }
                  }
                }
              }
            };
          }
        }, {}], 8: [function(require2, module2, exports2) {
          exports2.DocumentXmlReader = DocumentXmlReader;
          var documents = require2("../documents");
          var Result = require2("../results").Result;
          function DocumentXmlReader(options2) {
            var bodyReader = options2.bodyReader;
            function convertXmlToDocument(element) {
              var body = element.first("w:body");
              var result = bodyReader.readXmlElements(body.children).map(function(children) {
                return new documents.Document(children, {
                  notes: options2.notes,
                  comments: options2.comments
                });
              });
              return new Result(result.value, result.messages);
            }
            return {
              convertXmlToDocument
            };
          }
        }, { "../documents": 4, "../results": 24 }], 9: [function(require2, module2, exports2) {
          exports2.read = read;
          exports2._findPartPaths = findPartPaths;
          var path = require2("path");
          var promises = require2("../promises");
          var documents = require2("../documents");
          var Result = require2("../results").Result;
          var zipfile = require2("../zipfile");
          var readXmlFromZipFile = require2("./office-xml-reader").readXmlFromZipFile;
          var createBodyReader = require2("./body-reader").createBodyReader;
          var DocumentXmlReader = require2("./document-xml-reader").DocumentXmlReader;
          var relationshipsReader = require2("./relationships-reader");
          var contentTypesReader = require2("./content-types-reader");
          var numberingXml = require2("./numbering-xml");
          var stylesReader = require2("./styles-reader");
          var notesReader = require2("./notes-reader");
          var commentsReader = require2("./comments-reader");
          var Files = require2("./files").Files;
          function read(docxFile, input) {
            input = input || {};
            return promises.props({
              contentTypes: readContentTypesFromZipFile(docxFile),
              partPaths: findPartPaths(docxFile),
              docxFile,
              files: new Files(input.path ? path.dirname(input.path) : null)
            }).also(function(result) {
              return {
                styles: readStylesFromZipFile(docxFile, result.partPaths.styles)
              };
            }).also(function(result) {
              return {
                numbering: readNumberingFromZipFile(docxFile, result.partPaths.numbering, result.styles)
              };
            }).also(function(result) {
              return {
                footnotes: readXmlFileWithBody(result.partPaths.footnotes, result, function(bodyReader, xml) {
                  if (xml) {
                    return notesReader.createFootnotesReader(bodyReader)(xml);
                  } else {
                    return new Result([]);
                  }
                }),
                endnotes: readXmlFileWithBody(result.partPaths.endnotes, result, function(bodyReader, xml) {
                  if (xml) {
                    return notesReader.createEndnotesReader(bodyReader)(xml);
                  } else {
                    return new Result([]);
                  }
                }),
                comments: readXmlFileWithBody(result.partPaths.comments, result, function(bodyReader, xml) {
                  if (xml) {
                    return commentsReader.createCommentsReader(bodyReader)(xml);
                  } else {
                    return new Result([]);
                  }
                })
              };
            }).also(function(result) {
              return {
                notes: result.footnotes.flatMap(function(footnotes) {
                  return result.endnotes.map(function(endnotes) {
                    return new documents.Notes(footnotes.concat(endnotes));
                  });
                })
              };
            }).then(function(result) {
              return readXmlFileWithBody(result.partPaths.mainDocument, result, function(bodyReader, xml) {
                return result.notes.flatMap(function(notes) {
                  return result.comments.flatMap(function(comments) {
                    var reader = new DocumentXmlReader({
                      bodyReader,
                      notes,
                      comments
                    });
                    return reader.convertXmlToDocument(xml);
                  });
                });
              });
            });
          }
          function findPartPaths(docxFile) {
            return readPackageRelationships(docxFile).then(function(packageRelationships) {
              var mainDocumentPath = findPartPath({
                docxFile,
                relationships: packageRelationships,
                relationshipType: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
                basePath: "",
                fallbackPath: "word/document.xml"
              });
              if (!docxFile.exists(mainDocumentPath)) {
                throw new Error("Could not find main document part. Are you sure this is a valid .docx file?");
              }
              return xmlFileReader({
                filename: relationshipsFilename(mainDocumentPath),
                readElement: relationshipsReader.readRelationships,
                defaultValue: relationshipsReader.defaultValue
              })(docxFile).then(function(documentRelationships) {
                function findPartRelatedToMainDocument(name) {
                  return findPartPath({
                    docxFile,
                    relationships: documentRelationships,
                    relationshipType: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/" + name,
                    basePath: zipfile.splitPath(mainDocumentPath).dirname,
                    fallbackPath: "word/" + name + ".xml"
                  });
                }
                return {
                  mainDocument: mainDocumentPath,
                  comments: findPartRelatedToMainDocument("comments"),
                  endnotes: findPartRelatedToMainDocument("endnotes"),
                  footnotes: findPartRelatedToMainDocument("footnotes"),
                  numbering: findPartRelatedToMainDocument("numbering"),
                  styles: findPartRelatedToMainDocument("styles")
                };
              });
            });
          }
          function findPartPath(options2) {
            var docxFile = options2.docxFile;
            var relationships = options2.relationships;
            var relationshipType = options2.relationshipType;
            var basePath = options2.basePath;
            var fallbackPath = options2.fallbackPath;
            var targets = relationships.findTargetsByType(relationshipType);
            var normalisedTargets = targets.map(function(target) {
              return stripPrefix(zipfile.joinPath(basePath, target), "/");
            });
            var validTargets = normalisedTargets.filter(function(target) {
              return docxFile.exists(target);
            });
            if (validTargets.length === 0) {
              return fallbackPath;
            } else {
              return validTargets[0];
            }
          }
          function stripPrefix(value, prefix) {
            if (value.substring(0, prefix.length) === prefix) {
              return value.substring(prefix.length);
            } else {
              return value;
            }
          }
          function xmlFileReader(options2) {
            return function(zipFile) {
              return readXmlFromZipFile(zipFile, options2.filename).then(function(element) {
                return element ? options2.readElement(element) : options2.defaultValue;
              });
            };
          }
          function readXmlFileWithBody(filename, options2, func) {
            var readRelationshipsFromZipFile = xmlFileReader({
              filename: relationshipsFilename(filename),
              readElement: relationshipsReader.readRelationships,
              defaultValue: relationshipsReader.defaultValue
            });
            return readRelationshipsFromZipFile(options2.docxFile).then(function(relationships) {
              var bodyReader = new createBodyReader({
                relationships,
                contentTypes: options2.contentTypes,
                docxFile: options2.docxFile,
                numbering: options2.numbering,
                styles: options2.styles,
                files: options2.files
              });
              return readXmlFromZipFile(options2.docxFile, filename).then(function(xml) {
                return func(bodyReader, xml);
              });
            });
          }
          function relationshipsFilename(filename) {
            var split = zipfile.splitPath(filename);
            return zipfile.joinPath(split.dirname, "_rels", split.basename + ".rels");
          }
          var readContentTypesFromZipFile = xmlFileReader({
            filename: "[Content_Types].xml",
            readElement: contentTypesReader.readContentTypesFromXml,
            defaultValue: contentTypesReader.defaultContentTypes
          });
          function readNumberingFromZipFile(zipFile, path2, styles) {
            return xmlFileReader({
              filename: path2,
              readElement: function(element) {
                return numberingXml.readNumberingXml(element, { styles });
              },
              defaultValue: numberingXml.defaultNumbering
            })(zipFile);
          }
          function readStylesFromZipFile(zipFile, path2) {
            return xmlFileReader({
              filename: path2,
              readElement: stylesReader.readStylesXml,
              defaultValue: stylesReader.defaultStyles
            })(zipFile);
          }
          var readPackageRelationships = xmlFileReader({
            filename: "_rels/.rels",
            readElement: relationshipsReader.readRelationships,
            defaultValue: relationshipsReader.defaultValue
          });
        }, { "../documents": 4, "../promises": 23, "../results": 24, "../zipfile": 38, "./body-reader": 5, "./comments-reader": 6, "./content-types-reader": 7, "./document-xml-reader": 8, "./files": 1, "./notes-reader": 10, "./numbering-xml": 11, "./office-xml-reader": 12, "./relationships-reader": 13, "./styles-reader": 15, "path": 137 }], 10: [function(require2, module2, exports2) {
          var documents = require2("../documents");
          var Result = require2("../results").Result;
          exports2.createFootnotesReader = createReader.bind(this, "footnote");
          exports2.createEndnotesReader = createReader.bind(this, "endnote");
          function createReader(noteType, bodyReader) {
            function readNotesXml(element) {
              return Result.combine(element.getElementsByTagName("w:" + noteType).filter(isFootnoteElement).map(readFootnoteElement));
            }
            function isFootnoteElement(element) {
              var type = element.attributes["w:type"];
              return type !== "continuationSeparator" && type !== "separator";
            }
            function readFootnoteElement(footnoteElement) {
              var id = footnoteElement.attributes["w:id"];
              return bodyReader.readXmlElements(footnoteElement.children).map(function(body) {
                return documents.Note({ noteType, noteId: id, body });
              });
            }
            return readNotesXml;
          }
        }, { "../documents": 4, "../results": 24 }], 11: [function(require2, module2, exports2) {
          var _ = require2("underscore");
          exports2.readNumberingXml = readNumberingXml;
          exports2.Numbering = Numbering2;
          exports2.defaultNumbering = new Numbering2({}, {});
          function Numbering2(nums, abstractNums, styles) {
            var allLevels = _.flatten(_.values(abstractNums).map(function(abstractNum) {
              return _.values(abstractNum.levels);
            }));
            var levelsByParagraphStyleId = _.indexBy(
              allLevels.filter(function(level) {
                return level.paragraphStyleId != null;
              }),
              "paragraphStyleId"
            );
            function findLevel(numId, level) {
              var num = nums[numId];
              if (num) {
                var abstractNum = abstractNums[num.abstractNumId];
                if (!abstractNum) {
                  return null;
                } else if (abstractNum.numStyleLink == null) {
                  return abstractNums[num.abstractNumId].levels[level];
                } else {
                  var style = styles.findNumberingStyleById(abstractNum.numStyleLink);
                  return findLevel(style.numId, level);
                }
              } else {
                return null;
              }
            }
            function findLevelByParagraphStyleId(styleId) {
              return levelsByParagraphStyleId[styleId] || null;
            }
            return {
              findLevel,
              findLevelByParagraphStyleId
            };
          }
          function readNumberingXml(root, options2) {
            if (!options2 || !options2.styles) {
              throw new Error("styles is missing");
            }
            var abstractNums = readAbstractNums(root);
            var nums = readNums(root, abstractNums);
            return new Numbering2(nums, abstractNums, options2.styles);
          }
          function readAbstractNums(root) {
            var abstractNums = {};
            root.getElementsByTagName("w:abstractNum").forEach(function(element) {
              var id = element.attributes["w:abstractNumId"];
              abstractNums[id] = readAbstractNum(element);
            });
            return abstractNums;
          }
          function readAbstractNum(element) {
            var levels = {};
            element.getElementsByTagName("w:lvl").forEach(function(levelElement) {
              var levelIndex = levelElement.attributes["w:ilvl"];
              var numFmt = levelElement.first("w:numFmt").attributes["w:val"];
              var paragraphStyleId = levelElement.firstOrEmpty("w:pStyle").attributes["w:val"];
              levels[levelIndex] = {
                isOrdered: numFmt !== "bullet",
                level: levelIndex,
                paragraphStyleId
              };
            });
            var numStyleLink = element.firstOrEmpty("w:numStyleLink").attributes["w:val"];
            return { levels, numStyleLink };
          }
          function readNums(root) {
            var nums = {};
            root.getElementsByTagName("w:num").forEach(function(element) {
              var numId = element.attributes["w:numId"];
              var abstractNumId = element.first("w:abstractNumId").attributes["w:val"];
              nums[numId] = { abstractNumId };
            });
            return nums;
          }
        }, { "underscore": 154 }], 12: [function(require2, module2, exports2) {
          var _ = require2("underscore");
          var promises = require2("../promises");
          var xml = require2("../xml");
          exports2.read = read;
          exports2.readXmlFromZipFile = readXmlFromZipFile;
          var xmlNamespaceMap = {
            "http://schemas.openxmlformats.org/wordprocessingml/2006/main": "w",
            "http://schemas.openxmlformats.org/officeDocument/2006/relationships": "r",
            "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing": "wp",
            "http://schemas.openxmlformats.org/drawingml/2006/main": "a",
            "http://schemas.openxmlformats.org/drawingml/2006/picture": "pic",
            "http://schemas.openxmlformats.org/package/2006/content-types": "content-types",
            "urn:schemas-microsoft-com:vml": "v",
            "http://schemas.openxmlformats.org/markup-compatibility/2006": "mc",
            "urn:schemas-microsoft-com:office:word": "office-word"
          };
          function read(xmlString) {
            return xml.readString(xmlString, xmlNamespaceMap).then(function(document2) {
              return collapseAlternateContent(document2)[0];
            });
          }
          function readXmlFromZipFile(docxFile, path) {
            if (docxFile.exists(path)) {
              return docxFile.read(path, "utf-8").then(stripUtf8Bom).then(read);
            } else {
              return promises.resolve(null);
            }
          }
          function stripUtf8Bom(xmlString) {
            return xmlString.replace(/^\uFEFF/g, "");
          }
          function collapseAlternateContent(node) {
            if (node.type === "element") {
              if (node.name === "mc:AlternateContent") {
                return node.first("mc:Fallback").children;
              } else {
                node.children = _.flatten(node.children.map(collapseAlternateContent, true));
                return [node];
              }
            } else {
              return [node];
            }
          }
        }, { "../promises": 23, "../xml": 34, "underscore": 154 }], 13: [function(require2, module2, exports2) {
          exports2.readRelationships = readRelationships;
          exports2.defaultValue = new Relationships([]);
          exports2.Relationships = Relationships;
          function readRelationships(element) {
            var relationships = [];
            element.children.forEach(function(child) {
              if (child.name === "{http://schemas.openxmlformats.org/package/2006/relationships}Relationship") {
                var relationship = {
                  relationshipId: child.attributes.Id,
                  target: child.attributes.Target,
                  type: child.attributes.Type
                };
                relationships.push(relationship);
              }
            });
            return new Relationships(relationships);
          }
          function Relationships(relationships) {
            var targetsByRelationshipId = {};
            relationships.forEach(function(relationship) {
              targetsByRelationshipId[relationship.relationshipId] = relationship.target;
            });
            var targetsByType = {};
            relationships.forEach(function(relationship) {
              if (!targetsByType[relationship.type]) {
                targetsByType[relationship.type] = [];
              }
              targetsByType[relationship.type].push(relationship.target);
            });
            return {
              findTargetByRelationshipId: function(relationshipId) {
                return targetsByRelationshipId[relationshipId];
              },
              findTargetsByType: function(type) {
                return targetsByType[type] || [];
              }
            };
          }
        }, {}], 14: [function(require2, module2, exports2) {
          var _ = require2("underscore");
          var promises = require2("../promises");
          var xml = require2("../xml");
          exports2.writeStyleMap = writeStyleMap;
          exports2.readStyleMap = readStyleMap;
          var schema = "http://schemas.zwobble.org/mammoth/style-map";
          var styleMapPath = "mammoth/style-map";
          var styleMapAbsolutePath = "/" + styleMapPath;
          function writeStyleMap(docxFile, styleMap) {
            docxFile.write(styleMapPath, styleMap);
            return updateRelationships(docxFile).then(function() {
              return updateContentTypes(docxFile);
            });
          }
          function updateRelationships(docxFile) {
            var path = "word/_rels/document.xml.rels";
            var relationshipsUri = "http://schemas.openxmlformats.org/package/2006/relationships";
            var relationshipElementName = "{" + relationshipsUri + "}Relationship";
            return docxFile.read(path, "utf8").then(xml.readString).then(function(relationshipsContainer) {
              var relationships = relationshipsContainer.children;
              addOrUpdateElement(relationships, relationshipElementName, "Id", {
                "Id": "rMammothStyleMap",
                "Type": schema,
                "Target": styleMapAbsolutePath
              });
              var namespaces = { "": relationshipsUri };
              return docxFile.write(path, xml.writeString(relationshipsContainer, namespaces));
            });
          }
          function updateContentTypes(docxFile) {
            var path = "[Content_Types].xml";
            var contentTypesUri = "http://schemas.openxmlformats.org/package/2006/content-types";
            var overrideName = "{" + contentTypesUri + "}Override";
            return docxFile.read(path, "utf8").then(xml.readString).then(function(typesElement) {
              var children = typesElement.children;
              addOrUpdateElement(children, overrideName, "PartName", {
                "PartName": styleMapAbsolutePath,
                "ContentType": "text/prs.mammoth.style-map"
              });
              var namespaces = { "": contentTypesUri };
              return docxFile.write(path, xml.writeString(typesElement, namespaces));
            });
          }
          function addOrUpdateElement(elements, name, identifyingAttribute, attributes) {
            var existingElement = _.find(elements, function(element) {
              return element.name === name && element.attributes[identifyingAttribute] === attributes[identifyingAttribute];
            });
            if (existingElement) {
              existingElement.attributes = attributes;
            } else {
              elements.push(xml.element(name, attributes));
            }
          }
          function readStyleMap(docxFile) {
            if (docxFile.exists(styleMapPath)) {
              return docxFile.read(styleMapPath, "utf8");
            } else {
              return promises.resolve(null);
            }
          }
        }, { "../promises": 23, "../xml": 34, "underscore": 154 }], 15: [function(require2, module2, exports2) {
          exports2.readStylesXml = readStylesXml;
          exports2.Styles = Styles;
          exports2.defaultStyles = new Styles({}, {});
          function Styles(paragraphStyles, characterStyles, tableStyles, numberingStyles) {
            return {
              findParagraphStyleById: function(styleId) {
                return paragraphStyles[styleId];
              },
              findCharacterStyleById: function(styleId) {
                return characterStyles[styleId];
              },
              findTableStyleById: function(styleId) {
                return tableStyles[styleId];
              },
              findNumberingStyleById: function(styleId) {
                return numberingStyles[styleId];
              }
            };
          }
          Styles.EMPTY = new Styles({}, {}, {}, {});
          function readStylesXml(root) {
            var paragraphStyles = {};
            var characterStyles = {};
            var tableStyles = {};
            var numberingStyles = {};
            var styles = {
              "paragraph": paragraphStyles,
              "character": characterStyles,
              "table": tableStyles
            };
            root.getElementsByTagName("w:style").forEach(function(styleElement) {
              var style = readStyleElement(styleElement);
              if (style.type === "numbering") {
                numberingStyles[style.styleId] = readNumberingStyleElement(styleElement);
              } else {
                var styleSet = styles[style.type];
                if (styleSet) {
                  styleSet[style.styleId] = style;
                }
              }
            });
            return new Styles(paragraphStyles, characterStyles, tableStyles, numberingStyles);
          }
          function readStyleElement(styleElement) {
            var type = styleElement.attributes["w:type"];
            var styleId = styleElement.attributes["w:styleId"];
            var name = styleName(styleElement);
            return { type, styleId, name };
          }
          function styleName(styleElement) {
            var nameElement = styleElement.first("w:name");
            return nameElement ? nameElement.attributes["w:val"] : null;
          }
          function readNumberingStyleElement(styleElement) {
            var numId = styleElement.firstOrEmpty("w:pPr").firstOrEmpty("w:numPr").firstOrEmpty("w:numId").attributes["w:val"];
            return { numId };
          }
        }, {}], 16: [function(require2, module2, exports2) {
          exports2.uriToZipEntryName = uriToZipEntryName;
          exports2.replaceFragment = replaceFragment;
          function uriToZipEntryName(base, uri) {
            if (uri.charAt(0) === "/") {
              return uri.substr(1);
            } else {
              return base + "/" + uri;
            }
          }
          function replaceFragment(uri, fragment) {
            var hashIndex = uri.indexOf("#");
            if (hashIndex !== -1) {
              uri = uri.substring(0, hashIndex);
            }
            return uri + "#" + fragment;
          }
        }, {}], 17: [function(require2, module2, exports2) {
          var htmlPaths = require2("../styles/html-paths");
          function nonFreshElement(tagName, attributes, children) {
            return elementWithTag(
              htmlPaths.element(tagName, attributes, { fresh: false }),
              children
            );
          }
          function freshElement(tagName, attributes, children) {
            var tag = htmlPaths.element(tagName, attributes, { fresh: true });
            return elementWithTag(tag, children);
          }
          function elementWithTag(tag, children) {
            return {
              type: "element",
              tag,
              children: children || []
            };
          }
          function text(value) {
            return {
              type: "text",
              value
            };
          }
          var forceWrite = {
            type: "forceWrite"
          };
          exports2.freshElement = freshElement;
          exports2.nonFreshElement = nonFreshElement;
          exports2.elementWithTag = elementWithTag;
          exports2.text = text;
          exports2.forceWrite = forceWrite;
          var voidTagNames = {
            "br": true,
            "hr": true,
            "img": true
          };
          function isVoidElement(node) {
            return node.children.length === 0 && voidTagNames[node.tag.tagName];
          }
          exports2.isVoidElement = isVoidElement;
        }, { "../styles/html-paths": 27 }], 18: [function(require2, module2, exports2) {
          var ast = require2("./ast");
          exports2.freshElement = ast.freshElement;
          exports2.nonFreshElement = ast.nonFreshElement;
          exports2.elementWithTag = ast.elementWithTag;
          exports2.text = ast.text;
          exports2.forceWrite = ast.forceWrite;
          exports2.simplify = require2("./simplify");
          function write(writer, nodes) {
            nodes.forEach(function(node) {
              writeNode(writer, node);
            });
          }
          function writeNode(writer, node) {
            toStrings[node.type](writer, node);
          }
          var toStrings = {
            element: generateElementString,
            text: generateTextString,
            forceWrite: function() {
            }
          };
          function generateElementString(writer, node) {
            if (ast.isVoidElement(node)) {
              writer.selfClosing(node.tag.tagName, node.tag.attributes);
            } else {
              writer.open(node.tag.tagName, node.tag.attributes);
              write(writer, node.children);
              writer.close(node.tag.tagName);
            }
          }
          function generateTextString(writer, node) {
            writer.text(node.value);
          }
          exports2.write = write;
        }, { "./ast": 17, "./simplify": 19 }], 19: [function(require2, module2, exports2) {
          var _ = require2("underscore");
          var ast = require2("./ast");
          function simplify(nodes) {
            return collapse(removeEmpty(nodes));
          }
          function collapse(nodes) {
            var children = [];
            nodes.map(collapseNode).forEach(function(child) {
              appendChild(children, child);
            });
            return children;
          }
          function collapseNode(node) {
            return collapsers[node.type](node);
          }
          var collapsers = {
            element: collapseElement,
            text: identity,
            forceWrite: identity
          };
          function collapseElement(node) {
            return ast.elementWithTag(node.tag, collapse(node.children));
          }
          function identity(value) {
            return value;
          }
          function appendChild(children, child) {
            var lastChild = children[children.length - 1];
            if (child.type === "element" && !child.tag.fresh && lastChild && lastChild.type === "element" && child.tag.matchesElement(lastChild.tag)) {
              if (child.tag.separator) {
                appendChild(lastChild.children, ast.text(child.tag.separator));
              }
              child.children.forEach(function(grandChild) {
                appendChild(lastChild.children, grandChild);
              });
            } else {
              children.push(child);
            }
          }
          function removeEmpty(nodes) {
            return flatMap(nodes, function(node) {
              return emptiers[node.type](node);
            });
          }
          function flatMap(values, func) {
            return _.flatten(_.map(values, func), true);
          }
          var emptiers = {
            element: elementEmptier,
            text: textEmptier,
            forceWrite: neverEmpty
          };
          function neverEmpty(node) {
            return [node];
          }
          function elementEmptier(element) {
            var children = removeEmpty(element.children);
            if (children.length === 0 && !ast.isVoidElement(element)) {
              return [];
            } else {
              return [ast.elementWithTag(element.tag, children)];
            }
          }
          function textEmptier(node) {
            if (node.value.length === 0) {
              return [];
            } else {
              return [node];
            }
          }
          module2.exports = simplify;
        }, { "./ast": 17, "underscore": 154 }], 20: [function(require2, module2, exports2) {
          var _ = require2("underscore");
          var promises = require2("./promises");
          var Html = require2("./html");
          exports2.imgElement = imgElement;
          function imgElement(func) {
            return function(element, messages) {
              return promises.when(func(element)).then(function(result) {
                var attributes = _.clone(result);
                if (element.altText) {
                  attributes.alt = element.altText;
                }
                return [Html.freshElement("img", attributes)];
              });
            };
          }
          exports2.inline = exports2.imgElement;
          exports2.dataUri = imgElement(function(element) {
            return element.read("base64").then(function(imageBuffer) {
              return {
                src: "data:" + element.contentType + ";base64," + imageBuffer,
                width: element.width,
                height: element.height,
                style: element.style
              };
            });
          });
        }, { "./html": 18, "./promises": 23, "underscore": 154 }], 21: [function(require2, module2, exports2) {
          var _ = require2("underscore");
          var docxReader = require2("./docx/docx-reader");
          var docxStyleMap = require2("./docx/style-map");
          var DocumentConverter = require2("./document-to-html").DocumentConverter;
          var readStyle = require2("./style-reader").readStyle;
          var readOptions = require2("./options-reader").readOptions;
          var unzip = require2("./unzip");
          var Result = require2("./results").Result;
          exports2.convertToHtml = convertToHtml;
          exports2.convertToMarkdown = convertToMarkdown;
          exports2.convert = convert;
          exports2.extractRawText = extractRawText;
          exports2.images = require2("./images");
          exports2.transforms = require2("./transforms");
          exports2.underline = require2("./underline");
          exports2.embedStyleMap = embedStyleMap;
          exports2.readEmbeddedStyleMap = readEmbeddedStyleMap;
          function convertToHtml(input, options2) {
            return convert(input, options2);
          }
          function convertToMarkdown(input, options2) {
            var markdownOptions = Object.create(options2 || {});
            markdownOptions.outputFormat = "markdown";
            return convert(input, markdownOptions);
          }
          function convert(input, options2) {
            options2 = readOptions(options2);
            return unzip.openZip(input).tap(function(docxFile) {
              return docxStyleMap.readStyleMap(docxFile).then(function(styleMap) {
                options2.embeddedStyleMap = styleMap;
              });
            }).then(function(docxFile) {
              return docxReader.read(docxFile, input).then(function(documentResult) {
                return documentResult.map(options2.transformDocument);
              }).then(function(documentResult) {
                return convertDocumentToHtml(documentResult, options2);
              });
            });
          }
          function readEmbeddedStyleMap(input) {
            return unzip.openZip(input).then(docxStyleMap.readStyleMap);
          }
          function convertDocumentToHtml(documentResult, options2) {
            var styleMapResult = parseStyleMap(options2.readStyleMap());
            var parsedOptions = _.extend({}, options2, {
              styleMap: styleMapResult.value
            });
            var documentConverter = new DocumentConverter(parsedOptions);
            return documentResult.flatMapThen(function(document2) {
              return styleMapResult.flatMapThen(function(styleMap) {
                return documentConverter.convertToHtml(document2);
              });
            });
          }
          function parseStyleMap(styleMap) {
            return Result.combine((styleMap || []).map(readStyle)).map(function(styleMap2) {
              return styleMap2.filter(function(styleMapping) {
                return !!styleMapping;
              });
            });
          }
          function extractRawText(input) {
            return unzip.openZip(input).then(docxReader.read).then(function(documentResult) {
              return documentResult.map(convertElementToRawText);
            });
          }
          function convertElementToRawText(element) {
            if (element.type === "text") {
              return element.value;
            } else {
              var tail = element.type === "paragraph" ? "\n\n" : "";
              return (element.children || []).map(convertElementToRawText).join("") + tail;
            }
          }
          function embedStyleMap(input, styleMap) {
            return unzip.openZip(input).tap(function(docxFile) {
              return docxStyleMap.writeStyleMap(docxFile, styleMap);
            }).then(function(docxFile) {
              return {
                toBuffer: docxFile.toBuffer
              };
            });
          }
          exports2.styleMapping = function() {
            throw new Error(`Use a raw string instead of mammoth.styleMapping e.g. "p[style-name='Title'] => h1" instead of mammoth.styleMapping("p[style-name='Title'] => h1")`);
          };
        }, { "./document-to-html": 3, "./docx/docx-reader": 9, "./docx/style-map": 14, "./images": 20, "./options-reader": 22, "./results": 24, "./style-reader": 25, "./transforms": 29, "./underline": 30, "./unzip": 2, "underscore": 154 }], 22: [function(require2, module2, exports2) {
          exports2.readOptions = readOptions;
          var _ = require2("underscore");
          var defaultStyleMap = exports2._defaultStyleMap = [
            "p.Heading1 => h1:fresh",
            "p.Heading2 => h2:fresh",
            "p.Heading3 => h3:fresh",
            "p.Heading4 => h4:fresh",
            "p.Heading5 => h5:fresh",
            "p.Heading6 => h6:fresh",
            "p[style-name='Heading 1'] => h1:fresh",
            "p[style-name='Heading 2'] => h2:fresh",
            "p[style-name='Heading 3'] => h3:fresh",
            "p[style-name='Heading 4'] => h4:fresh",
            "p[style-name='Heading 5'] => h5:fresh",
            "p[style-name='Heading 6'] => h6:fresh",
            "p[style-name='heading 1'] => h1:fresh",
            "p[style-name='heading 2'] => h2:fresh",
            "p[style-name='heading 3'] => h3:fresh",
            "p[style-name='heading 4'] => h4:fresh",
            "p[style-name='heading 5'] => h5:fresh",
            "p[style-name='heading 6'] => h6:fresh",
            "r[style-name='Strong'] => strong",
            "p[style-name='footnote text'] => p:fresh",
            "r[style-name='footnote reference'] =>",
            "p[style-name='endnote text'] => p:fresh",
            "r[style-name='endnote reference'] =>",
            "p[style-name='annotation text'] => p:fresh",
            "r[style-name='annotation reference'] =>",
            // LibreOffice
            "p[style-name='Footnote'] => p:fresh",
            "r[style-name='Footnote anchor'] =>",
            "p[style-name='Endnote'] => p:fresh",
            "r[style-name='Endnote anchor'] =>",
            "p:unordered-list(1) => ul > li:fresh",
            "p:unordered-list(2) => ul|ol > li > ul > li:fresh",
            "p:unordered-list(3) => ul|ol > li > ul|ol > li > ul > li:fresh",
            "p:unordered-list(4) => ul|ol > li > ul|ol > li > ul|ol > li > ul > li:fresh",
            "p:unordered-list(5) => ul|ol > li > ul|ol > li > ul|ol > li > ul|ol > li > ul > li:fresh",
            "p:ordered-list(1) => ol > li:fresh",
            "p:ordered-list(2) => ul|ol > li > ol > li:fresh",
            "p:ordered-list(3) => ul|ol > li > ul|ol > li > ol > li:fresh",
            "p:ordered-list(4) => ul|ol > li > ul|ol > li > ul|ol > li > ol > li:fresh",
            "p:ordered-list(5) => ul|ol > li > ul|ol > li > ul|ol > li > ul|ol > li > ol > li:fresh",
            "r[style-name='Hyperlink'] =>",
            "p[style-name='Normal'] => p:fresh"
          ];
          var standardOptions = exports2._standardOptions = {
            transformDocument: identity,
            includeDefaultStyleMap: true,
            includeEmbeddedStyleMap: true
          };
          function readOptions(options2) {
            options2 = options2 || {};
            return _.extend({}, standardOptions, options2, {
              customStyleMap: readStyleMap(options2.styleMap),
              readStyleMap: function() {
                var styleMap = this.customStyleMap;
                if (this.includeEmbeddedStyleMap) {
                  styleMap = styleMap.concat(readStyleMap(this.embeddedStyleMap));
                }
                if (this.includeDefaultStyleMap) {
                  styleMap = styleMap.concat(defaultStyleMap);
                }
                return styleMap;
              }
            });
          }
          function readStyleMap(styleMap) {
            if (!styleMap) {
              return [];
            } else if (_.isString(styleMap)) {
              return styleMap.split("\n").map(function(line) {
                return line.trim();
              }).filter(function(line) {
                return line !== "" && line.charAt(0) !== "#";
              });
            } else {
              return styleMap;
            }
          }
          function identity(value) {
            return value;
          }
        }, { "underscore": 154 }], 23: [function(require2, module2, exports2) {
          var _ = require2("underscore");
          var bluebird = require2("bluebird/js/release/promise")();
          exports2.defer = defer;
          exports2.when = bluebird.resolve;
          exports2.resolve = bluebird.resolve;
          exports2.all = bluebird.all;
          exports2.props = bluebird.props;
          exports2.reject = bluebird.reject;
          exports2.promisify = bluebird.promisify;
          exports2.mapSeries = bluebird.mapSeries;
          exports2.attempt = bluebird.attempt;
          exports2.nfcall = function(func) {
            var args = Array.prototype.slice.call(arguments, 1);
            var promisedFunc = bluebird.promisify(func);
            return promisedFunc.apply(null, args);
          };
          bluebird.prototype.fail = bluebird.prototype.caught;
          bluebird.prototype.also = function(func) {
            return this.then(function(value) {
              var returnValue = _.extend({}, value, func(value));
              return bluebird.props(returnValue);
            });
          };
          function defer() {
            var resolve;
            var reject;
            var promise = new bluebird.Promise(function(resolveArg, rejectArg) {
              resolve = resolveArg;
              reject = rejectArg;
            });
            return {
              resolve,
              reject,
              promise
            };
          }
        }, { "bluebird/js/release/promise": 60, "underscore": 154 }], 24: [function(require2, module2, exports2) {
          var _ = require2("underscore");
          exports2.Result = Result;
          exports2.success = success;
          exports2.warning = warning;
          exports2.error = error;
          function Result(value, messages) {
            this.value = value;
            this.messages = messages || [];
          }
          Result.prototype.map = function(func) {
            return new Result(func(this.value), this.messages);
          };
          Result.prototype.flatMap = function(func) {
            var funcResult = func(this.value);
            return new Result(funcResult.value, combineMessages([this, funcResult]));
          };
          Result.prototype.flatMapThen = function(func) {
            var that = this;
            return func(this.value).then(function(otherResult) {
              return new Result(otherResult.value, combineMessages([that, otherResult]));
            });
          };
          Result.combine = function(results) {
            var values = _.flatten(_.pluck(results, "value"));
            var messages = combineMessages(results);
            return new Result(values, messages);
          };
          function success(value) {
            return new Result(value, []);
          }
          function warning(message) {
            return {
              type: "warning",
              message
            };
          }
          function error(exception) {
            return {
              type: "error",
              message: exception.message,
              error: exception
            };
          }
          function combineMessages(results) {
            var messages = [];
            _.flatten(_.pluck(results, "messages"), true).forEach(function(message) {
              if (!containsMessage(messages, message)) {
                messages.push(message);
              }
            });
            return messages;
          }
          function containsMessage(messages, message) {
            return _.find(messages, isSameMessage.bind(null, message)) !== void 0;
          }
          function isSameMessage(first, second) {
            return first.type === second.type && first.message === second.message;
          }
        }, { "underscore": 154 }], 25: [function(require2, module2, exports2) {
          var _ = require2("underscore");
          var lop = require2("lop");
          var documentMatchers = require2("./styles/document-matchers");
          var htmlPaths = require2("./styles/html-paths");
          var tokenise = require2("./styles/parser/tokeniser").tokenise;
          var results = require2("./results");
          exports2.readHtmlPath = readHtmlPath;
          exports2.readDocumentMatcher = readDocumentMatcher;
          exports2.readStyle = readStyle;
          function readStyle(string) {
            return parseString(styleRule, string);
          }
          function createStyleRule() {
            return lop.rules.sequence(
              lop.rules.sequence.capture(documentMatcherRule()),
              lop.rules.tokenOfType("whitespace"),
              lop.rules.tokenOfType("arrow"),
              lop.rules.sequence.capture(lop.rules.optional(lop.rules.sequence(
                lop.rules.tokenOfType("whitespace"),
                lop.rules.sequence.capture(htmlPathRule())
              ).head())),
              lop.rules.tokenOfType("end")
            ).map(function(documentMatcher, htmlPath) {
              return {
                from: documentMatcher,
                to: htmlPath.valueOrElse(htmlPaths.empty)
              };
            });
          }
          function readDocumentMatcher(string) {
            return parseString(documentMatcherRule(), string);
          }
          function documentMatcherRule() {
            var sequence = lop.rules.sequence;
            var identifierToConstant = function(identifier, constant) {
              return lop.rules.then(
                lop.rules.token("identifier", identifier),
                function() {
                  return constant;
                }
              );
            };
            var paragraphRule = identifierToConstant("p", documentMatchers.paragraph);
            var runRule = identifierToConstant("r", documentMatchers.run);
            var elementTypeRule = lop.rules.firstOf(
              "p or r or table",
              paragraphRule,
              runRule
            );
            var styleIdRule = lop.rules.then(
              classRule,
              function(styleId) {
                return { styleId };
              }
            );
            var styleNameMatcherRule = lop.rules.firstOf(
              "style name matcher",
              lop.rules.then(
                lop.rules.sequence(
                  lop.rules.tokenOfType("equals"),
                  lop.rules.sequence.cut(),
                  lop.rules.sequence.capture(stringRule)
                ).head(),
                function(styleName) {
                  return { styleName: documentMatchers.equalTo(styleName) };
                }
              ),
              lop.rules.then(
                lop.rules.sequence(
                  lop.rules.tokenOfType("startsWith"),
                  lop.rules.sequence.cut(),
                  lop.rules.sequence.capture(stringRule)
                ).head(),
                function(styleName) {
                  return { styleName: documentMatchers.startsWith(styleName) };
                }
              )
            );
            var styleNameRule = lop.rules.sequence(
              lop.rules.tokenOfType("open-square-bracket"),
              lop.rules.sequence.cut(),
              lop.rules.token("identifier", "style-name"),
              lop.rules.sequence.capture(styleNameMatcherRule),
              lop.rules.tokenOfType("close-square-bracket")
            ).head();
            var listTypeRule = lop.rules.firstOf(
              "list type",
              identifierToConstant("ordered-list", { isOrdered: true }),
              identifierToConstant("unordered-list", { isOrdered: false })
            );
            var listRule = sequence(
              lop.rules.tokenOfType("colon"),
              sequence.capture(listTypeRule),
              sequence.cut(),
              lop.rules.tokenOfType("open-paren"),
              sequence.capture(integerRule),
              lop.rules.tokenOfType("close-paren")
            ).map(function(listType, levelNumber) {
              return {
                list: {
                  isOrdered: listType.isOrdered,
                  levelIndex: levelNumber - 1
                }
              };
            });
            function createMatcherSuffixesRule(rules) {
              var matcherSuffix = lop.rules.firstOf.apply(
                lop.rules.firstOf,
                ["matcher suffix"].concat(rules)
              );
              var matcherSuffixes = lop.rules.zeroOrMore(matcherSuffix);
              return lop.rules.then(matcherSuffixes, function(suffixes) {
                var matcherOptions = {};
                suffixes.forEach(function(suffix) {
                  _.extend(matcherOptions, suffix);
                });
                return matcherOptions;
              });
            }
            var paragraphOrRun = sequence(
              sequence.capture(elementTypeRule),
              sequence.capture(createMatcherSuffixesRule([
                styleIdRule,
                styleNameRule,
                listRule
              ]))
            ).map(function(createMatcher, matcherOptions) {
              return createMatcher(matcherOptions);
            });
            var table = sequence(
              lop.rules.token("identifier", "table"),
              sequence.capture(createMatcherSuffixesRule([
                styleIdRule,
                styleNameRule
              ]))
            ).map(function(options2) {
              return documentMatchers.table(options2);
            });
            var bold = identifierToConstant("b", documentMatchers.bold);
            var italic = identifierToConstant("i", documentMatchers.italic);
            var underline = identifierToConstant("u", documentMatchers.underline);
            var strikethrough = identifierToConstant("strike", documentMatchers.strikethrough);
            var allCaps = identifierToConstant("all-caps", documentMatchers.allCaps);
            var smallCaps = identifierToConstant("small-caps", documentMatchers.smallCaps);
            var commentReference = identifierToConstant("comment-reference", documentMatchers.commentReference);
            var breakMatcher = sequence(
              lop.rules.token("identifier", "br"),
              sequence.cut(),
              lop.rules.tokenOfType("open-square-bracket"),
              lop.rules.token("identifier", "type"),
              lop.rules.tokenOfType("equals"),
              sequence.capture(stringRule),
              lop.rules.tokenOfType("close-square-bracket")
            ).map(function(breakType) {
              switch (breakType) {
                case "line":
                  return documentMatchers.lineBreak;
                case "page":
                  return documentMatchers.pageBreak;
                case "column":
                  return documentMatchers.columnBreak;
                default:
              }
            });
            return lop.rules.firstOf(
              "element type",
              paragraphOrRun,
              table,
              bold,
              italic,
              underline,
              strikethrough,
              allCaps,
              smallCaps,
              commentReference,
              breakMatcher
            );
          }
          function readHtmlPath(string) {
            return parseString(htmlPathRule(), string);
          }
          function htmlPathRule() {
            var capture = lop.rules.sequence.capture;
            var whitespaceRule = lop.rules.tokenOfType("whitespace");
            var freshRule = lop.rules.then(
              lop.rules.optional(lop.rules.sequence(
                lop.rules.tokenOfType("colon"),
                lop.rules.token("identifier", "fresh")
              )),
              function(option) {
                return option.map(function() {
                  return true;
                }).valueOrElse(false);
              }
            );
            var separatorRule = lop.rules.then(
              lop.rules.optional(lop.rules.sequence(
                lop.rules.tokenOfType("colon"),
                lop.rules.token("identifier", "separator"),
                lop.rules.tokenOfType("open-paren"),
                capture(stringRule),
                lop.rules.tokenOfType("close-paren")
              ).head()),
              function(option) {
                return option.valueOrElse("");
              }
            );
            var tagNamesRule = lop.rules.oneOrMoreWithSeparator(
              identifierRule,
              lop.rules.tokenOfType("choice")
            );
            var styleElementRule = lop.rules.sequence(
              capture(tagNamesRule),
              capture(lop.rules.zeroOrMore(classRule)),
              capture(freshRule),
              capture(separatorRule)
            ).map(function(tagName, classNames, fresh, separator) {
              var attributes = {};
              var options2 = {};
              if (classNames.length > 0) {
                attributes["class"] = classNames.join(" ");
              }
              if (fresh) {
                options2.fresh = true;
              }
              if (separator) {
                options2.separator = separator;
              }
              return htmlPaths.element(tagName, attributes, options2);
            });
            return lop.rules.firstOf(
              "html path",
              lop.rules.then(lop.rules.tokenOfType("bang"), function() {
                return htmlPaths.ignore;
              }),
              lop.rules.then(
                lop.rules.zeroOrMoreWithSeparator(
                  styleElementRule,
                  lop.rules.sequence(
                    whitespaceRule,
                    lop.rules.tokenOfType("gt"),
                    whitespaceRule
                  )
                ),
                htmlPaths.elements
              )
            );
          }
          var identifierRule = lop.rules.then(
            lop.rules.tokenOfType("identifier"),
            decodeEscapeSequences
          );
          var integerRule = lop.rules.tokenOfType("integer");
          var stringRule = lop.rules.then(
            lop.rules.tokenOfType("string"),
            decodeEscapeSequences
          );
          var escapeSequences = {
            "n": "\n",
            "r": "\r",
            "t": "	"
          };
          function decodeEscapeSequences(value) {
            return value.replace(/\\(.)/g, function(match, code) {
              return escapeSequences[code] || code;
            });
          }
          var classRule = lop.rules.sequence(
            lop.rules.tokenOfType("dot"),
            lop.rules.sequence.cut(),
            lop.rules.sequence.capture(identifierRule)
          ).head();
          function parseString(rule, string) {
            var tokens = tokenise(string);
            var parser = lop.Parser();
            var parseResult = parser.parseTokens(rule, tokens);
            if (parseResult.isSuccess()) {
              return results.success(parseResult.value());
            } else {
              return new results.Result(null, [results.warning(describeFailure(string, parseResult))]);
            }
          }
          function describeFailure(input, parseResult) {
            return "Did not understand this style mapping, so ignored it: " + input + "\n" + parseResult.errors().map(describeError).join("\n");
          }
          function describeError(error) {
            return "Error was at character number " + error.characterNumber() + ": Expected " + error.expected + " but got " + error.actual;
          }
          var styleRule = createStyleRule();
        }, { "./results": 24, "./styles/document-matchers": 26, "./styles/html-paths": 27, "./styles/parser/tokeniser": 28, "lop": 109, "underscore": 154 }], 26: [function(require2, module2, exports2) {
          exports2.paragraph = paragraph;
          exports2.run = run;
          exports2.table = table;
          exports2.bold = new Matcher("bold");
          exports2.italic = new Matcher("italic");
          exports2.underline = new Matcher("underline");
          exports2.strikethrough = new Matcher("strikethrough");
          exports2.allCaps = new Matcher("allCaps");
          exports2.smallCaps = new Matcher("smallCaps");
          exports2.commentReference = new Matcher("commentReference");
          exports2.lineBreak = new Matcher("break", { breakType: "line" });
          exports2.pageBreak = new Matcher("break", { breakType: "page" });
          exports2.columnBreak = new Matcher("break", { breakType: "column" });
          exports2.equalTo = equalTo;
          exports2.startsWith = startsWith;
          function paragraph(options2) {
            return new Matcher("paragraph", options2);
          }
          function run(options2) {
            return new Matcher("run", options2);
          }
          function table(options2) {
            return new Matcher("table", options2);
          }
          function Matcher(elementType, options2) {
            options2 = options2 || {};
            this._elementType = elementType;
            this._styleId = options2.styleId;
            this._styleName = options2.styleName;
            if (options2.list) {
              this._listIndex = options2.list.levelIndex;
              this._listIsOrdered = options2.list.isOrdered;
            }
          }
          Matcher.prototype.matches = function(element) {
            return element.type === this._elementType && (this._styleId === void 0 || element.styleId === this._styleId) && (this._styleName === void 0 || element.styleName && this._styleName.operator(this._styleName.operand, element.styleName)) && (this._listIndex === void 0 || isList(element, this._listIndex, this._listIsOrdered)) && (this._breakType === void 0 || this._breakType === element.breakType);
          };
          function isList(element, levelIndex, isOrdered) {
            return element.numbering && element.numbering.level == levelIndex && element.numbering.isOrdered == isOrdered;
          }
          function equalTo(value) {
            return {
              operator: operatorEqualTo,
              operand: value
            };
          }
          function startsWith(value) {
            return {
              operator: operatorStartsWith,
              operand: value
            };
          }
          function operatorEqualTo(first, second) {
            return first.toUpperCase() === second.toUpperCase();
          }
          function operatorStartsWith(first, second) {
            return second.toUpperCase().indexOf(first.toUpperCase()) === 0;
          }
        }, {}], 27: [function(require2, module2, exports2) {
          var _ = require2("underscore");
          var html = require2("../html");
          exports2.topLevelElement = topLevelElement;
          exports2.elements = elements;
          exports2.element = element;
          function topLevelElement(tagName, attributes) {
            return elements([element(tagName, attributes, { fresh: true })]);
          }
          function elements(elementStyles) {
            return new HtmlPath(elementStyles.map(function(elementStyle) {
              if (_.isString(elementStyle)) {
                return element(elementStyle);
              } else {
                return elementStyle;
              }
            }));
          }
          function HtmlPath(elements2) {
            this._elements = elements2;
          }
          HtmlPath.prototype.wrap = function wrap(children) {
            var result = children();
            for (var index = this._elements.length - 1; index >= 0; index--) {
              result = this._elements[index].wrapNodes(result);
            }
            return result;
          };
          function element(tagName, attributes, options2) {
            options2 = options2 || {};
            return new Element(tagName, attributes, options2);
          }
          function Element(tagName, attributes, options2) {
            var tagNames = {};
            if (_.isArray(tagName)) {
              tagName.forEach(function(tagName2) {
                tagNames[tagName2] = true;
              });
              tagName = tagName[0];
            } else {
              tagNames[tagName] = true;
            }
            this.tagName = tagName;
            this.tagNames = tagNames;
            this.attributes = attributes || {};
            this.fresh = options2.fresh;
            this.separator = options2.separator;
          }
          Element.prototype.matchesElement = function(element2) {
            return this.tagNames[element2.tagName] && _.isEqual(this.attributes || {}, element2.attributes || {});
          };
          Element.prototype.wrap = function wrap(generateNodes) {
            return this.wrapNodes(generateNodes());
          };
          Element.prototype.wrapNodes = function wrapNodes(nodes) {
            return [html.elementWithTag(this, nodes)];
          };
          exports2.empty = elements([]);
          exports2.ignore = {
            wrap: function() {
              return [];
            }
          };
        }, { "../html": 18, "underscore": 154 }], 28: [function(require2, module2, exports2) {
          var lop = require2("lop");
          var RegexTokeniser = lop.RegexTokeniser;
          exports2.tokenise = tokenise;
          var stringPrefix = "'((?:\\\\.|[^'])*)";
          function tokenise(string) {
            var identifierCharacter = "(?:[a-zA-Z\\-_]|\\\\.)";
            var tokeniser = new RegexTokeniser([
              { name: "identifier", regex: new RegExp("(" + identifierCharacter + "(?:" + identifierCharacter + "|[0-9])*)") },
              { name: "dot", regex: /\./ },
              { name: "colon", regex: /:/ },
              { name: "gt", regex: />/ },
              { name: "whitespace", regex: /\s+/ },
              { name: "arrow", regex: /=>/ },
              { name: "equals", regex: /=/ },
              { name: "startsWith", regex: /\^=/ },
              { name: "open-paren", regex: /\(/ },
              { name: "close-paren", regex: /\)/ },
              { name: "open-square-bracket", regex: /\[/ },
              { name: "close-square-bracket", regex: /\]/ },
              { name: "string", regex: new RegExp(stringPrefix + "'") },
              { name: "unterminated-string", regex: new RegExp(stringPrefix) },
              { name: "integer", regex: /([0-9]+)/ },
              { name: "choice", regex: /\|/ },
              { name: "bang", regex: /(!)/ }
            ]);
            return tokeniser.tokenise(string);
          }
        }, { "lop": 109 }], 29: [function(require2, module2, exports2) {
          var _ = require2("underscore");
          exports2.paragraph = paragraph;
          exports2.run = run;
          exports2._elements = elements;
          exports2.getDescendantsOfType = getDescendantsOfType;
          exports2.getDescendants = getDescendants;
          function paragraph(transform) {
            return elementsOfType("paragraph", transform);
          }
          function run(transform) {
            return elementsOfType("run", transform);
          }
          function elementsOfType(elementType, transform) {
            return elements(function(element) {
              if (element.type === elementType) {
                return transform(element);
              } else {
                return element;
              }
            });
          }
          function elements(transform) {
            return function transformElement(element) {
              if (element.children) {
                var children = _.map(element.children, transformElement);
                element = _.extend(element, { children });
              }
              return transform(element);
            };
          }
          function getDescendantsOfType(element, type) {
            return getDescendants(element).filter(function(descendant) {
              return descendant.type === type;
            });
          }
          function getDescendants(element) {
            var descendants = [];
            visitDescendants(element, function(descendant) {
              descendants.push(descendant);
            });
            return descendants;
          }
          function visitDescendants(element, visit) {
            if (element.children) {
              element.children.forEach(function(child) {
                visitDescendants(child, visit);
                visit(child);
              });
            }
          }
        }, { "underscore": 154 }], 30: [function(require2, module2, exports2) {
          var htmlPaths = require2("./styles/html-paths");
          var Html = require2("./html");
          exports2.element = element;
          function element(name) {
            return function(html) {
              return Html.elementWithTag(htmlPaths.element(name), [html]);
            };
          }
        }, { "./html": 18, "./styles/html-paths": 27 }], 31: [function(require2, module2, exports2) {
          var util = require2("util");
          var _ = require2("underscore");
          exports2.writer = writer;
          function writer(options2) {
            options2 = options2 || {};
            if (options2.prettyPrint) {
              return prettyWriter();
            } else {
              return simpleWriter();
            }
          }
          var indentedElements = {
            div: true,
            p: true,
            ul: true,
            li: true
          };
          function prettyWriter() {
            var indentationLevel = 0;
            var indentation = "  ";
            var stack = [];
            var start = true;
            var inText = false;
            var writer2 = simpleWriter();
            function open(tagName, attributes) {
              if (indentedElements[tagName]) {
                indent();
              }
              stack.push(tagName);
              writer2.open(tagName, attributes);
              if (indentedElements[tagName]) {
                indentationLevel++;
              }
              start = false;
            }
            function close(tagName) {
              if (indentedElements[tagName]) {
                indentationLevel--;
                indent();
              }
              stack.pop();
              writer2.close(tagName);
            }
            function text(value) {
              startText();
              var text2 = isInPre() ? value : value.replace("\n", "\n" + indentation);
              writer2.text(text2);
            }
            function selfClosing(tagName, attributes) {
              indent();
              writer2.selfClosing(tagName, attributes);
            }
            function insideIndentedElement() {
              return stack.length === 0 || indentedElements[stack[stack.length - 1]];
            }
            function startText() {
              if (!inText) {
                indent();
                inText = true;
              }
            }
            function indent() {
              inText = false;
              if (!start && insideIndentedElement() && !isInPre()) {
                writer2._append("\n");
                for (var i = 0; i < indentationLevel; i++) {
                  writer2._append(indentation);
                }
              }
            }
            function isInPre() {
              return _.some(stack, function(tagName) {
                return tagName === "pre";
              });
            }
            return {
              asString: writer2.asString,
              open,
              close,
              text,
              selfClosing
            };
          }
          function simpleWriter() {
            var fragments = [];
            function open(tagName, attributes) {
              var attributeString = generateAttributeString(attributes);
              fragments.push(util.format("<%s%s>", tagName, attributeString));
            }
            function close(tagName) {
              fragments.push(util.format("</%s>", tagName));
            }
            function selfClosing(tagName, attributes) {
              var attributeString = generateAttributeString(attributes);
              fragments.push(util.format("<%s%s />", tagName, attributeString));
            }
            function generateAttributeString(attributes) {
              return _.map(attributes, function(value, key) {
                return util.format(' %s="%s"', key, escapeHtmlAttribute(value));
              }).join("");
            }
            function text(value) {
              fragments.push(escapeHtmlText(value));
            }
            function append(html) {
              fragments.push(html);
            }
            function asString() {
              return fragments.join("");
            }
            return {
              asString,
              open,
              close,
              text,
              selfClosing,
              _append: append
            };
          }
          function escapeHtmlText(value) {
            return value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
          }
          function escapeHtmlAttribute(value) {
            if (value == null) return value;
            return value.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
          }
        }, { "underscore": 154, "util": 158 }], 32: [function(require2, module2, exports2) {
          var htmlWriter = require2("./html-writer");
          var markdownWriter = require2("./markdown-writer");
          exports2.writer = writer;
          function writer(options2) {
            options2 = options2 || {};
            if (options2.outputFormat === "markdown") {
              return markdownWriter.writer();
            } else {
              return htmlWriter.writer(options2);
            }
          }
        }, { "./html-writer": 31, "./markdown-writer": 33 }], 33: [function(require2, module2, exports2) {
          var _ = require2("underscore");
          function symmetricMarkdownElement(end) {
            return markdownElement(end, end);
          }
          function markdownElement(start, end) {
            return function() {
              return { start, end };
            };
          }
          function markdownLink(attributes) {
            var href = attributes.href || "";
            if (href) {
              return {
                start: "[",
                end: "](" + href + ")",
                anchorPosition: "before"
              };
            } else {
              return {};
            }
          }
          function markdownImage(attributes) {
            var src = attributes.src || "";
            var altText = attributes.alt || "";
            if (src || altText) {
              return { start: "![" + altText + "](" + src + ")" };
            } else {
              return {};
            }
          }
          function markdownList(options2) {
            return function(attributes, list) {
              return {
                start: list ? "\n" : "",
                end: list ? "" : "\n",
                list: {
                  isOrdered: options2.isOrdered,
                  indent: list ? list.indent + 1 : 0,
                  count: 0
                }
              };
            };
          }
          function markdownListItem(attributes, list, listItem) {
            list = list || { indent: 0, isOrdered: false, count: 0 };
            list.count++;
            listItem.hasClosed = false;
            var bullet = list.isOrdered ? list.count + "." : "-";
            var start = repeatString("	", list.indent) + bullet + " ";
            return {
              start,
              end: function() {
                if (!listItem.hasClosed) {
                  listItem.hasClosed = true;
                  return "\n";
                }
              }
            };
          }
          var htmlToMarkdown = {
            "p": markdownElement("", "\n\n"),
            "br": markdownElement("", "  \n"),
            "ul": markdownList({ isOrdered: false }),
            "ol": markdownList({ isOrdered: true }),
            "li": markdownListItem,
            "strong": symmetricMarkdownElement("__"),
            "em": symmetricMarkdownElement("*"),
            "a": markdownLink,
            "img": markdownImage
          };
          (function() {
            for (var i = 1; i <= 6; i++) {
              htmlToMarkdown["h" + i] = markdownElement(repeatString("#", i) + " ", "\n\n");
            }
          })();
          function repeatString(value, count) {
            return new Array(count + 1).join(value);
          }
          function markdownWriter() {
            var fragments = [];
            var elementStack = [];
            var list = null;
            var listItem = {};
            function open(tagName, attributes) {
              attributes = attributes || {};
              var createElement = htmlToMarkdown[tagName] || function() {
                return {};
              };
              var element = createElement(attributes, list, listItem);
              elementStack.push({ end: element.end, list });
              if (element.list) {
                list = element.list;
              }
              var anchorBeforeStart = element.anchorPosition === "before";
              if (anchorBeforeStart) {
                writeAnchor(attributes);
              }
              fragments.push(element.start || "");
              if (!anchorBeforeStart) {
                writeAnchor(attributes);
              }
            }
            function writeAnchor(attributes) {
              if (attributes.id) {
                fragments.push('<a id="' + attributes.id + '"></a>');
              }
            }
            function close(tagName) {
              var element = elementStack.pop();
              list = element.list;
              var end = _.isFunction(element.end) ? element.end() : element.end;
              fragments.push(end || "");
            }
            function selfClosing(tagName, attributes) {
              open(tagName, attributes);
              close(tagName);
            }
            function text(value) {
              fragments.push(escapeMarkdown(value));
            }
            function asString() {
              return fragments.join("");
            }
            return {
              asString,
              open,
              close,
              text,
              selfClosing
            };
          }
          exports2.writer = markdownWriter;
          function escapeMarkdown(value) {
            return value.replace(/\\/g, "\\\\").replace(/([\`\*_\{\}\[\]\(\)\#\+\-\.\!])/g, "\\$1");
          }
        }, { "underscore": 154 }], 34: [function(require2, module2, exports2) {
          var nodes = require2("./nodes");
          exports2.Element = nodes.Element;
          exports2.element = nodes.element;
          exports2.text = nodes.text;
          exports2.readString = require2("./reader").readString;
          exports2.writeString = require2("./writer").writeString;
        }, { "./nodes": 35, "./reader": 36, "./writer": 37 }], 35: [function(require2, module2, exports2) {
          var _ = require2("underscore");
          exports2.Element = Element;
          exports2.element = function(name, attributes, children) {
            return new Element(name, attributes, children);
          };
          exports2.text = function(value) {
            return {
              type: "text",
              value
            };
          };
          var emptyElement = {
            first: function() {
              return null;
            },
            firstOrEmpty: function() {
              return emptyElement;
            },
            attributes: {}
          };
          function Element(name, attributes, children) {
            this.type = "element";
            this.name = name;
            this.attributes = attributes || {};
            this.children = children || [];
          }
          Element.prototype.first = function(name) {
            return _.find(this.children, function(child) {
              return child.name === name;
            });
          };
          Element.prototype.firstOrEmpty = function(name) {
            return this.first(name) || emptyElement;
          };
          Element.prototype.getElementsByTagName = function(name) {
            var elements = _.filter(this.children, function(child) {
              return child.name === name;
            });
            return toElementList(elements);
          };
          Element.prototype.text = function() {
            if (this.children.length === 0) {
              return "";
            } else if (this.children.length !== 1 || this.children[0].type !== "text") {
              throw new Error("Not implemented");
            }
            return this.children[0].value;
          };
          var elementListPrototype = {
            getElementsByTagName: function(name) {
              return toElementList(_.flatten(this.map(function(element) {
                return element.getElementsByTagName(name);
              }, true)));
            }
          };
          function toElementList(array) {
            return _.extend(array, elementListPrototype);
          }
        }, { "underscore": 154 }], 36: [function(require2, module2, exports2) {
          var promises = require2("../promises");
          var sax = require2("sax");
          var _ = require2("underscore");
          var nodes = require2("./nodes");
          var Element = nodes.Element;
          exports2.readString = readString;
          function readString(xmlString, namespaceMap) {
            namespaceMap = namespaceMap || {};
            var finished = false;
            var parser = sax.parser(true, { xmlns: true, position: false });
            var rootElement = { children: [] };
            var currentElement = rootElement;
            var stack = [];
            var deferred = promises.defer();
            parser.onopentag = function(node) {
              var attributes = mapObject(node.attributes, function(attribute) {
                return attribute.value;
              }, mapName);
              var element = new Element(mapName(node), attributes);
              currentElement.children.push(element);
              stack.push(currentElement);
              currentElement = element;
            };
            function mapName(node) {
              if (node.uri) {
                var mappedPrefix = namespaceMap[node.uri];
                var prefix;
                if (mappedPrefix) {
                  prefix = mappedPrefix + ":";
                } else {
                  prefix = "{" + node.uri + "}";
                }
                return prefix + node.local;
              } else {
                return node.local;
              }
            }
            parser.onclosetag = function(node) {
              currentElement = stack.pop();
            };
            parser.ontext = function(text) {
              if (currentElement !== rootElement) {
                currentElement.children.push(nodes.text(text));
              }
            };
            parser.onend = function() {
              if (!finished) {
                finished = true;
                deferred.resolve(rootElement.children[0]);
              }
            };
            parser.onerror = function(error) {
              if (!finished) {
                finished = true;
                deferred.reject(error);
              }
            };
            parser.write(xmlString).close();
            return deferred.promise;
          }
          function mapObject(input, valueFunc, keyFunc) {
            return _.reduce(input, function(result, value, key) {
              var mappedKey = keyFunc(value, key, input);
              result[mappedKey] = valueFunc(value, key, input);
              return result;
            }, {});
          }
        }, { "../promises": 23, "./nodes": 35, "sax": 151, "underscore": 154 }], 37: [function(require2, module2, exports2) {
          var _ = require2("underscore");
          var xmlbuilder = require2("xmlbuilder");
          exports2.writeString = writeString;
          function writeString(root, namespaces) {
            var uriToPrefix = _.invert(namespaces);
            var nodeWriters = {
              element: writeElement,
              text: writeTextNode
            };
            function writeNode(builder, node) {
              return nodeWriters[node.type](builder, node);
            }
            function writeElement(builder, element) {
              var elementBuilder = builder.element(mapElementName(element.name), element.attributes);
              element.children.forEach(function(child) {
                writeNode(elementBuilder, child);
              });
            }
            function mapElementName(name) {
              var longFormMatch = /^\{(.*)\}(.*)$/.exec(name);
              if (longFormMatch) {
                var prefix = uriToPrefix[longFormMatch[1]];
                return prefix + (prefix === "" ? "" : ":") + longFormMatch[2];
              } else {
                return name;
              }
            }
            function writeDocument(root2) {
              var builder = xmlbuilder.create(mapElementName(root2.name), {
                version: "1.0",
                encoding: "UTF-8",
                standalone: true
              });
              _.forEach(namespaces, function(uri, prefix) {
                var key = "xmlns" + (prefix === "" ? "" : ":" + prefix);
                builder.attribute(key, uri);
              });
              root2.children.forEach(function(child) {
                writeNode(builder, child);
              });
              return builder.end();
            }
            return writeDocument(root);
          }
          function writeTextNode(builder, node) {
            builder.text(node.value);
          }
        }, { "underscore": 154, "xmlbuilder": 180 }], 38: [function(require2, module2, exports2) {
          (function(Buffer3) {
            var JSZip = require2("jszip");
            var promises = require2("./promises");
            exports2.openArrayBuffer = openArrayBuffer;
            exports2.splitPath = splitPath;
            exports2.joinPath = joinPath;
            function openArrayBuffer(arrayBuffer) {
              var zipFile = new JSZip(arrayBuffer);
              function exists(name) {
                return zipFile.file(name) !== null;
              }
              function read(name, encoding) {
                var array = zipFile.file(name).asUint8Array();
                var buffer = uint8ArrayToBuffer(array);
                if (encoding) {
                  return promises.when(buffer.toString(encoding));
                } else {
                  return promises.when(buffer);
                }
              }
              function write(name, contents) {
                zipFile.file(name, contents);
              }
              function toBuffer() {
                return zipFile.generate({ type: "nodebuffer" });
              }
              return {
                exists,
                read,
                write,
                toBuffer
              };
            }
            function uint8ArrayToBuffer(array) {
              if (Buffer3.from && Buffer3.from !== Uint8Array.from) {
                return Buffer3.from(array);
              } else {
                return new Buffer3(array);
              }
            }
            function splitPath(path) {
              var lastIndex = path.lastIndexOf("/");
              if (lastIndex === -1) {
                return { dirname: "", basename: path };
              } else {
                return {
                  dirname: path.substring(0, lastIndex),
                  basename: path.substring(lastIndex + 1)
                };
              }
            }
            function joinPath() {
              var nonEmptyPaths = Array.prototype.filter.call(arguments, function(path) {
                return path;
              });
              var relevantPaths = [];
              nonEmptyPaths.forEach(function(path) {
                if (/^\//.test(path)) {
                  relevantPaths = [path];
                } else {
                  relevantPaths.push(path);
                }
              });
              return relevantPaths.join("/");
            }
          }).call(this, require2("buffer").Buffer);
        }, { "./promises": 23, "buffer": 77, "jszip": 94 }], 39: [function(require2, module2, exports2) {
          "use strict";
          exports2.byteLength = byteLength;
          exports2.toByteArray = toByteArray;
          exports2.fromByteArray = fromByteArray;
          var lookup = [];
          var revLookup = [];
          var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
          var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
          for (var i = 0, len = code.length; i < len; ++i) {
            lookup[i] = code[i];
            revLookup[code.charCodeAt(i)] = i;
          }
          revLookup["-".charCodeAt(0)] = 62;
          revLookup["_".charCodeAt(0)] = 63;
          function placeHoldersCount(b64) {
            var len2 = b64.length;
            if (len2 % 4 > 0) {
              throw new Error("Invalid string. Length must be a multiple of 4");
            }
            return b64[len2 - 2] === "=" ? 2 : b64[len2 - 1] === "=" ? 1 : 0;
          }
          function byteLength(b64) {
            return b64.length * 3 / 4 - placeHoldersCount(b64);
          }
          function toByteArray(b64) {
            var i2, j, l2, tmp, placeHolders, arr;
            var len2 = b64.length;
            placeHolders = placeHoldersCount(b64);
            arr = new Arr(len2 * 3 / 4 - placeHolders);
            l2 = placeHolders > 0 ? len2 - 4 : len2;
            var L = 0;
            for (i2 = 0, j = 0; i2 < l2; i2 += 4, j += 3) {
              tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
              arr[L++] = tmp >> 16 & 255;
              arr[L++] = tmp >> 8 & 255;
              arr[L++] = tmp & 255;
            }
            if (placeHolders === 2) {
              tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
              arr[L++] = tmp & 255;
            } else if (placeHolders === 1) {
              tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
              arr[L++] = tmp >> 8 & 255;
              arr[L++] = tmp & 255;
            }
            return arr;
          }
          function tripletToBase64(num) {
            return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
          }
          function encodeChunk(uint8, start, end) {
            var tmp;
            var output = [];
            for (var i2 = start; i2 < end; i2 += 3) {
              tmp = (uint8[i2] << 16) + (uint8[i2 + 1] << 8) + uint8[i2 + 2];
              output.push(tripletToBase64(tmp));
            }
            return output.join("");
          }
          function fromByteArray(uint8) {
            var tmp;
            var len2 = uint8.length;
            var extraBytes = len2 % 3;
            var output = "";
            var parts = [];
            var maxChunkLength = 16383;
            for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
              parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
            }
            if (extraBytes === 1) {
              tmp = uint8[len2 - 1];
              output += lookup[tmp >> 2];
              output += lookup[tmp << 4 & 63];
              output += "==";
            } else if (extraBytes === 2) {
              tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
              output += lookup[tmp >> 10];
              output += lookup[tmp >> 4 & 63];
              output += lookup[tmp << 2 & 63];
              output += "=";
            }
            parts.push(output);
            return parts.join("");
          }
        }, {}], 40: [function(require2, module2, exports2) {
          "use strict";
          module2.exports = function(Promise2) {
            var SomePromiseArray = Promise2._SomePromiseArray;
            function any(promises) {
              var ret2 = new SomePromiseArray(promises);
              var promise = ret2.promise();
              ret2.setHowMany(1);
              ret2.setUnwrap();
              ret2.init();
              return promise;
            }
            Promise2.any = function(promises) {
              return any(promises);
            };
            Promise2.prototype.any = function() {
              return any(this);
            };
          };
        }, {}], 41: [function(require2, module2, exports2) {
          (function(process2) {
            "use strict";
            var firstLineError;
            try {
              throw new Error();
            } catch (e) {
              firstLineError = e;
            }
            var schedule = require2("./schedule");
            var Queue = require2("./queue");
            var util = require2("./util");
            function Async() {
              this._customScheduler = false;
              this._isTickUsed = false;
              this._lateQueue = new Queue(16);
              this._normalQueue = new Queue(16);
              this._haveDrainedQueues = false;
              this._trampolineEnabled = true;
              var self2 = this;
              this.drainQueues = function() {
                self2._drainQueues();
              };
              this._schedule = schedule;
            }
            Async.prototype.setScheduler = function(fn) {
              var prev = this._schedule;
              this._schedule = fn;
              this._customScheduler = true;
              return prev;
            };
            Async.prototype.hasCustomScheduler = function() {
              return this._customScheduler;
            };
            Async.prototype.enableTrampoline = function() {
              this._trampolineEnabled = true;
            };
            Async.prototype.disableTrampolineIfNecessary = function() {
              if (util.hasDevTools) {
                this._trampolineEnabled = false;
              }
            };
            Async.prototype.haveItemsQueued = function() {
              return this._isTickUsed || this._haveDrainedQueues;
            };
            Async.prototype.fatalError = function(e, isNode2) {
              if (isNode2) {
                process2.stderr.write("Fatal " + (e instanceof Error ? e.stack : e) + "\n");
                process2.exit(2);
              } else {
                this.throwLater(e);
              }
            };
            Async.prototype.throwLater = function(fn, arg) {
              if (arguments.length === 1) {
                arg = fn;
                fn = function() {
                  throw arg;
                };
              }
              if (typeof setTimeout !== "undefined") {
                setTimeout(function() {
                  fn(arg);
                }, 0);
              } else try {
                this._schedule(function() {
                  fn(arg);
                });
              } catch (e) {
                throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n");
              }
            };
            function AsyncInvokeLater(fn, receiver, arg) {
              this._lateQueue.push(fn, receiver, arg);
              this._queueTick();
            }
            function AsyncInvoke(fn, receiver, arg) {
              this._normalQueue.push(fn, receiver, arg);
              this._queueTick();
            }
            function AsyncSettlePromises(promise) {
              this._normalQueue._pushOne(promise);
              this._queueTick();
            }
            if (!util.hasDevTools) {
              Async.prototype.invokeLater = AsyncInvokeLater;
              Async.prototype.invoke = AsyncInvoke;
              Async.prototype.settlePromises = AsyncSettlePromises;
            } else {
              Async.prototype.invokeLater = function(fn, receiver, arg) {
                if (this._trampolineEnabled) {
                  AsyncInvokeLater.call(this, fn, receiver, arg);
                } else {
                  this._schedule(function() {
                    setTimeout(function() {
                      fn.call(receiver, arg);
                    }, 100);
                  });
                }
              };
              Async.prototype.invoke = function(fn, receiver, arg) {
                if (this._trampolineEnabled) {
                  AsyncInvoke.call(this, fn, receiver, arg);
                } else {
                  this._schedule(function() {
                    fn.call(receiver, arg);
                  });
                }
              };
              Async.prototype.settlePromises = function(promise) {
                if (this._trampolineEnabled) {
                  AsyncSettlePromises.call(this, promise);
                } else {
                  this._schedule(function() {
                    promise._settlePromises();
                  });
                }
              };
            }
            Async.prototype._drainQueue = function(queue) {
              while (queue.length() > 0) {
                var fn = queue.shift();
                if (typeof fn !== "function") {
                  fn._settlePromises();
                  continue;
                }
                var receiver = queue.shift();
                var arg = queue.shift();
                fn.call(receiver, arg);
              }
            };
            Async.prototype._drainQueues = function() {
              this._drainQueue(this._normalQueue);
              this._reset();
              this._haveDrainedQueues = true;
              this._drainQueue(this._lateQueue);
            };
            Async.prototype._queueTick = function() {
              if (!this._isTickUsed) {
                this._isTickUsed = true;
                this._schedule(this.drainQueues);
              }
            };
            Async.prototype._reset = function() {
              this._isTickUsed = false;
            };
            module2.exports = Async;
            module2.exports.firstLineError = firstLineError;
          }).call(this, require2("_process"));
        }, { "./queue": 64, "./schedule": 67, "./util": 74, "_process": 139 }], 42: [function(require2, module2, exports2) {
          "use strict";
          module2.exports = function(Promise2, INTERNAL, tryConvertToPromise, debug) {
            var calledBind = false;
            var rejectThis = function(_, e) {
              this._reject(e);
            };
            var targetRejected = function(e, context) {
              context.promiseRejectionQueued = true;
              context.bindingPromise._then(rejectThis, rejectThis, null, this, e);
            };
            var bindingResolved = function(thisArg, context) {
              if ((this._bitField & 50397184) === 0) {
                this._resolveCallback(context.target);
              }
            };
            var bindingRejected = function(e, context) {
              if (!context.promiseRejectionQueued) this._reject(e);
            };
            Promise2.prototype.bind = function(thisArg) {
              if (!calledBind) {
                calledBind = true;
                Promise2.prototype._propagateFrom = debug.propagateFromFunction();
                Promise2.prototype._boundValue = debug.boundValueFunction();
              }
              var maybePromise = tryConvertToPromise(thisArg);
              var ret2 = new Promise2(INTERNAL);
              ret2._propagateFrom(this, 1);
              var target = this._target();
              ret2._setBoundTo(maybePromise);
              if (maybePromise instanceof Promise2) {
                var context = {
                  promiseRejectionQueued: false,
                  promise: ret2,
                  target,
                  bindingPromise: maybePromise
                };
                target._then(INTERNAL, targetRejected, void 0, ret2, context);
                maybePromise._then(
                  bindingResolved,
                  bindingRejected,
                  void 0,
                  ret2,
                  context
                );
                ret2._setOnCancel(maybePromise);
              } else {
                ret2._resolveCallback(target);
              }
              return ret2;
            };
            Promise2.prototype._setBoundTo = function(obj2) {
              if (obj2 !== void 0) {
                this._bitField = this._bitField | 2097152;
                this._boundTo = obj2;
              } else {
                this._bitField = this._bitField & ~2097152;
              }
            };
            Promise2.prototype._isBound = function() {
              return (this._bitField & 2097152) === 2097152;
            };
            Promise2.bind = function(thisArg, value) {
              return Promise2.resolve(value).bind(thisArg);
            };
          };
        }, {}], 43: [function(require2, module2, exports2) {
          "use strict";
          var cr = Object.create;
          if (cr) {
            var callerCache = cr(null);
            var getterCache = cr(null);
            callerCache[" size"] = getterCache[" size"] = 0;
          }
          module2.exports = function(Promise2) {
            var util = require2("./util");
            var canEvaluate2 = util.canEvaluate;
            var isIdentifier2 = util.isIdentifier;
            var getMethodCaller;
            var getGetter;
            if (true) {
              var makeMethodCaller = function(methodName) {
                return new Function("ensureMethod", "                                    \n        return function(obj) {                                               \n            'use strict'                                                     \n            var len = this.length;                                           \n            ensureMethod(obj, 'methodName');                                 \n            switch(len) {                                                    \n                case 1: return obj.methodName(this[0]);                      \n                case 2: return obj.methodName(this[0], this[1]);             \n                case 3: return obj.methodName(this[0], this[1], this[2]);    \n                case 0: return obj.methodName();                             \n                default:                                                     \n                    return obj.methodName.apply(obj, this);                  \n            }                                                                \n        };                                                                   \n        ".replace(/methodName/g, methodName))(ensureMethod);
              };
              var makeGetter = function(propertyName) {
                return new Function("obj", "                                             \n        'use strict';                                                        \n        return obj.propertyName;                                             \n        ".replace("propertyName", propertyName));
              };
              var getCompiled = function(name, compiler, cache) {
                var ret2 = cache[name];
                if (typeof ret2 !== "function") {
                  if (!isIdentifier2(name)) {
                    return null;
                  }
                  ret2 = compiler(name);
                  cache[name] = ret2;
                  cache[" size"]++;
                  if (cache[" size"] > 512) {
                    var keys = Object.keys(cache);
                    for (var i = 0; i < 256; ++i) delete cache[keys[i]];
                    cache[" size"] = keys.length - 256;
                  }
                }
                return ret2;
              };
              getMethodCaller = function(name) {
                return getCompiled(name, makeMethodCaller, callerCache);
              };
              getGetter = function(name) {
                return getCompiled(name, makeGetter, getterCache);
              };
            }
            function ensureMethod(obj2, methodName) {
              var fn;
              if (obj2 != null) fn = obj2[methodName];
              if (typeof fn !== "function") {
                var message = "Object " + util.classString(obj2) + " has no method '" + util.toString(methodName) + "'";
                throw new Promise2.TypeError(message);
              }
              return fn;
            }
            function caller(obj2) {
              var methodName = this.pop();
              var fn = ensureMethod(obj2, methodName);
              return fn.apply(obj2, this);
            }
            Promise2.prototype.call = function(methodName) {
              var $_len = arguments.length;
              var args = new Array(Math.max($_len - 1, 0));
              for (var $_i = 1; $_i < $_len; ++$_i) {
                args[$_i - 1] = arguments[$_i];
              }
              ;
              if (true) {
                if (canEvaluate2) {
                  var maybeCaller = getMethodCaller(methodName);
                  if (maybeCaller !== null) {
                    return this._then(
                      maybeCaller,
                      void 0,
                      void 0,
                      args,
                      void 0
                    );
                  }
                }
              }
              args.push(methodName);
              return this._then(caller, void 0, void 0, args, void 0);
            };
            function namedGetter(obj2) {
              return obj2[this];
            }
            function indexedGetter(obj2) {
              var index = +this;
              if (index < 0) index = Math.max(0, index + obj2.length);
              return obj2[index];
            }
            Promise2.prototype.get = function(propertyName) {
              var isIndex = typeof propertyName === "number";
              var getter;
              if (!isIndex) {
                if (canEvaluate2) {
                  var maybeGetter = getGetter(propertyName);
                  getter = maybeGetter !== null ? maybeGetter : namedGetter;
                } else {
                  getter = namedGetter;
                }
              } else {
                getter = indexedGetter;
              }
              return this._then(getter, void 0, void 0, propertyName, void 0);
            };
          };
        }, { "./util": 74 }], 44: [function(require2, module2, exports2) {
          "use strict";
          module2.exports = function(Promise2, PromiseArray, apiRejection, debug) {
            var util = require2("./util");
            var tryCatch2 = util.tryCatch;
            var errorObj2 = util.errorObj;
            var async = Promise2._async;
            Promise2.prototype["break"] = Promise2.prototype.cancel = function() {
              if (!debug.cancellation()) return this._warn("cancellation is disabled");
              var promise = this;
              var child = promise;
              while (promise._isCancellable()) {
                if (!promise._cancelBy(child)) {
                  if (child._isFollowing()) {
                    child._followee().cancel();
                  } else {
                    child._cancelBranched();
                  }
                  break;
                }
                var parent = promise._cancellationParent;
                if (parent == null || !parent._isCancellable()) {
                  if (promise._isFollowing()) {
                    promise._followee().cancel();
                  } else {
                    promise._cancelBranched();
                  }
                  break;
                } else {
                  if (promise._isFollowing()) promise._followee().cancel();
                  promise._setWillBeCancelled();
                  child = promise;
                  promise = parent;
                }
              }
            };
            Promise2.prototype._branchHasCancelled = function() {
              this._branchesRemainingToCancel--;
            };
            Promise2.prototype._enoughBranchesHaveCancelled = function() {
              return this._branchesRemainingToCancel === void 0 || this._branchesRemainingToCancel <= 0;
            };
            Promise2.prototype._cancelBy = function(canceller) {
              if (canceller === this) {
                this._branchesRemainingToCancel = 0;
                this._invokeOnCancel();
                return true;
              } else {
                this._branchHasCancelled();
                if (this._enoughBranchesHaveCancelled()) {
                  this._invokeOnCancel();
                  return true;
                }
              }
              return false;
            };
            Promise2.prototype._cancelBranched = function() {
              if (this._enoughBranchesHaveCancelled()) {
                this._cancel();
              }
            };
            Promise2.prototype._cancel = function() {
              if (!this._isCancellable()) return;
              this._setCancelled();
              async.invoke(this._cancelPromises, this, void 0);
            };
            Promise2.prototype._cancelPromises = function() {
              if (this._length() > 0) this._settlePromises();
            };
            Promise2.prototype._unsetOnCancel = function() {
              this._onCancelField = void 0;
            };
            Promise2.prototype._isCancellable = function() {
              return this.isPending() && !this._isCancelled();
            };
            Promise2.prototype.isCancellable = function() {
              return this.isPending() && !this.isCancelled();
            };
            Promise2.prototype._doInvokeOnCancel = function(onCancelCallback, internalOnly) {
              if (util.isArray(onCancelCallback)) {
                for (var i = 0; i < onCancelCallback.length; ++i) {
                  this._doInvokeOnCancel(onCancelCallback[i], internalOnly);
                }
              } else if (onCancelCallback !== void 0) {
                if (typeof onCancelCallback === "function") {
                  if (!internalOnly) {
                    var e = tryCatch2(onCancelCallback).call(this._boundValue());
                    if (e === errorObj2) {
                      this._attachExtraTrace(e.e);
                      async.throwLater(e.e);
                    }
                  }
                } else {
                  onCancelCallback._resultCancelled(this);
                }
              }
            };
            Promise2.prototype._invokeOnCancel = function() {
              var onCancelCallback = this._onCancel();
              this._unsetOnCancel();
              async.invoke(this._doInvokeOnCancel, this, onCancelCallback);
            };
            Promise2.prototype._invokeInternalOnCancel = function() {
              if (this._isCancellable()) {
                this._doInvokeOnCancel(this._onCancel(), true);
                this._unsetOnCancel();
              }
            };
            Promise2.prototype._resultCancelled = function() {
              this.cancel();
            };
          };
        }, { "./util": 74 }], 45: [function(require2, module2, exports2) {
          "use strict";
          module2.exports = function(NEXT_FILTER) {
            var util = require2("./util");
            var getKeys = require2("./es5").keys;
            var tryCatch2 = util.tryCatch;
            var errorObj2 = util.errorObj;
            function catchFilter(instances, cb, promise) {
              return function(e) {
                var boundTo = promise._boundValue();
                predicateLoop: for (var i = 0; i < instances.length; ++i) {
                  var item = instances[i];
                  if (item === Error || item != null && item.prototype instanceof Error) {
                    if (e instanceof item) {
                      return tryCatch2(cb).call(boundTo, e);
                    }
                  } else if (typeof item === "function") {
                    var matchesPredicate = tryCatch2(item).call(boundTo, e);
                    if (matchesPredicate === errorObj2) {
                      return matchesPredicate;
                    } else if (matchesPredicate) {
                      return tryCatch2(cb).call(boundTo, e);
                    }
                  } else if (util.isObject(e)) {
                    var keys = getKeys(item);
                    for (var j = 0; j < keys.length; ++j) {
                      var key = keys[j];
                      if (item[key] != e[key]) {
                        continue predicateLoop;
                      }
                    }
                    return tryCatch2(cb).call(boundTo, e);
                  }
                }
                return NEXT_FILTER;
              };
            }
            return catchFilter;
          };
        }, { "./es5": 51, "./util": 74 }], 46: [function(require2, module2, exports2) {
          "use strict";
          module2.exports = function(Promise2) {
            var longStackTraces = false;
            var contextStack = [];
            Promise2.prototype._promiseCreated = function() {
            };
            Promise2.prototype._pushContext = function() {
            };
            Promise2.prototype._popContext = function() {
              return null;
            };
            Promise2._peekContext = Promise2.prototype._peekContext = function() {
            };
            function Context() {
              this._trace = new Context.CapturedTrace(peekContext());
            }
            Context.prototype._pushContext = function() {
              if (this._trace !== void 0) {
                this._trace._promiseCreated = null;
                contextStack.push(this._trace);
              }
            };
            Context.prototype._popContext = function() {
              if (this._trace !== void 0) {
                var trace = contextStack.pop();
                var ret2 = trace._promiseCreated;
                trace._promiseCreated = null;
                return ret2;
              }
              return null;
            };
            function createContext() {
              if (longStackTraces) return new Context();
            }
            function peekContext() {
              var lastIndex = contextStack.length - 1;
              if (lastIndex >= 0) {
                return contextStack[lastIndex];
              }
              return void 0;
            }
            Context.CapturedTrace = null;
            Context.create = createContext;
            Context.deactivateLongStackTraces = function() {
            };
            Context.activateLongStackTraces = function() {
              var Promise_pushContext = Promise2.prototype._pushContext;
              var Promise_popContext = Promise2.prototype._popContext;
              var Promise_PeekContext = Promise2._peekContext;
              var Promise_peekContext = Promise2.prototype._peekContext;
              var Promise_promiseCreated = Promise2.prototype._promiseCreated;
              Context.deactivateLongStackTraces = function() {
                Promise2.prototype._pushContext = Promise_pushContext;
                Promise2.prototype._popContext = Promise_popContext;
                Promise2._peekContext = Promise_PeekContext;
                Promise2.prototype._peekContext = Promise_peekContext;
                Promise2.prototype._promiseCreated = Promise_promiseCreated;
                longStackTraces = false;
              };
              longStackTraces = true;
              Promise2.prototype._pushContext = Context.prototype._pushContext;
              Promise2.prototype._popContext = Context.prototype._popContext;
              Promise2._peekContext = Promise2.prototype._peekContext = peekContext;
              Promise2.prototype._promiseCreated = function() {
                var ctx = this._peekContext();
                if (ctx && ctx._promiseCreated == null) ctx._promiseCreated = this;
              };
            };
            return Context;
          };
        }, {}], 47: [function(require2, module2, exports2) {
          (function(process2) {
            "use strict";
            module2.exports = function(Promise2, Context) {
              var getDomain = Promise2._getDomain;
              var async = Promise2._async;
              var Warning = require2("./errors").Warning;
              var util = require2("./util");
              var canAttachTrace2 = util.canAttachTrace;
              var unhandledRejectionHandled;
              var possiblyUnhandledRejection;
              var bluebirdFramePattern = /[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/;
              var nodeFramePattern = /\((?:timers\.js):\d+:\d+\)/;
              var parseLinePattern = /[\/<\(](.+?):(\d+):(\d+)\)?\s*$/;
              var stackFramePattern = null;
              var formatStack = null;
              var indentStackFrames = false;
              var printWarning;
              var debugging = !!(util.env("BLUEBIRD_DEBUG") != 0 && (util.env("BLUEBIRD_DEBUG") || util.env("NODE_ENV") === "development"));
              var warnings = !!(util.env("BLUEBIRD_WARNINGS") != 0 && (debugging || util.env("BLUEBIRD_WARNINGS")));
              var longStackTraces = !!(util.env("BLUEBIRD_LONG_STACK_TRACES") != 0 && (debugging || util.env("BLUEBIRD_LONG_STACK_TRACES")));
              var wForgottenReturn = util.env("BLUEBIRD_W_FORGOTTEN_RETURN") != 0 && (warnings || !!util.env("BLUEBIRD_W_FORGOTTEN_RETURN"));
              Promise2.prototype.suppressUnhandledRejections = function() {
                var target = this._target();
                target._bitField = target._bitField & ~1048576 | 524288;
              };
              Promise2.prototype._ensurePossibleRejectionHandled = function() {
                if ((this._bitField & 524288) !== 0) return;
                this._setRejectionIsUnhandled();
                async.invokeLater(this._notifyUnhandledRejection, this, void 0);
              };
              Promise2.prototype._notifyUnhandledRejectionIsHandled = function() {
                fireRejectionEvent(
                  "rejectionHandled",
                  unhandledRejectionHandled,
                  void 0,
                  this
                );
              };
              Promise2.prototype._setReturnedNonUndefined = function() {
                this._bitField = this._bitField | 268435456;
              };
              Promise2.prototype._returnedNonUndefined = function() {
                return (this._bitField & 268435456) !== 0;
              };
              Promise2.prototype._notifyUnhandledRejection = function() {
                if (this._isRejectionUnhandled()) {
                  var reason = this._settledValue();
                  this._setUnhandledRejectionIsNotified();
                  fireRejectionEvent(
                    "unhandledRejection",
                    possiblyUnhandledRejection,
                    reason,
                    this
                  );
                }
              };
              Promise2.prototype._setUnhandledRejectionIsNotified = function() {
                this._bitField = this._bitField | 262144;
              };
              Promise2.prototype._unsetUnhandledRejectionIsNotified = function() {
                this._bitField = this._bitField & ~262144;
              };
              Promise2.prototype._isUnhandledRejectionNotified = function() {
                return (this._bitField & 262144) > 0;
              };
              Promise2.prototype._setRejectionIsUnhandled = function() {
                this._bitField = this._bitField | 1048576;
              };
              Promise2.prototype._unsetRejectionIsUnhandled = function() {
                this._bitField = this._bitField & ~1048576;
                if (this._isUnhandledRejectionNotified()) {
                  this._unsetUnhandledRejectionIsNotified();
                  this._notifyUnhandledRejectionIsHandled();
                }
              };
              Promise2.prototype._isRejectionUnhandled = function() {
                return (this._bitField & 1048576) > 0;
              };
              Promise2.prototype._warn = function(message, shouldUseOwnTrace, promise) {
                return warn(message, shouldUseOwnTrace, promise || this);
              };
              Promise2.onPossiblyUnhandledRejection = function(fn) {
                var domain = getDomain();
                possiblyUnhandledRejection = typeof fn === "function" ? domain === null ? fn : util.domainBind(domain, fn) : void 0;
              };
              Promise2.onUnhandledRejectionHandled = function(fn) {
                var domain = getDomain();
                unhandledRejectionHandled = typeof fn === "function" ? domain === null ? fn : util.domainBind(domain, fn) : void 0;
              };
              var disableLongStackTraces = function() {
              };
              Promise2.longStackTraces = function() {
                if (async.haveItemsQueued() && !config.longStackTraces) {
                  throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");
                }
                if (!config.longStackTraces && longStackTracesIsSupported()) {
                  var Promise_captureStackTrace = Promise2.prototype._captureStackTrace;
                  var Promise_attachExtraTrace = Promise2.prototype._attachExtraTrace;
                  config.longStackTraces = true;
                  disableLongStackTraces = function() {
                    if (async.haveItemsQueued() && !config.longStackTraces) {
                      throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");
                    }
                    Promise2.prototype._captureStackTrace = Promise_captureStackTrace;
                    Promise2.prototype._attachExtraTrace = Promise_attachExtraTrace;
                    Context.deactivateLongStackTraces();
                    async.enableTrampoline();
                    config.longStackTraces = false;
                  };
                  Promise2.prototype._captureStackTrace = longStackTracesCaptureStackTrace;
                  Promise2.prototype._attachExtraTrace = longStackTracesAttachExtraTrace;
                  Context.activateLongStackTraces();
                  async.disableTrampolineIfNecessary();
                }
              };
              Promise2.hasLongStackTraces = function() {
                return config.longStackTraces && longStackTracesIsSupported();
              };
              var fireDomEvent = function() {
                try {
                  if (typeof CustomEvent === "function") {
                    var event = new CustomEvent("CustomEvent");
                    util.global.dispatchEvent(event);
                    return function(name, event2) {
                      var domEvent = new CustomEvent(name.toLowerCase(), {
                        detail: event2,
                        cancelable: true
                      });
                      return !util.global.dispatchEvent(domEvent);
                    };
                  } else if (typeof Event === "function") {
                    var event = new Event("CustomEvent");
                    util.global.dispatchEvent(event);
                    return function(name, event2) {
                      var domEvent = new Event(name.toLowerCase(), {
                        cancelable: true
                      });
                      domEvent.detail = event2;
                      return !util.global.dispatchEvent(domEvent);
                    };
                  } else {
                    var event = document.createEvent("CustomEvent");
                    event.initCustomEvent("testingtheevent", false, true, {});
                    util.global.dispatchEvent(event);
                    return function(name, event2) {
                      var domEvent = document.createEvent("CustomEvent");
                      domEvent.initCustomEvent(
                        name.toLowerCase(),
                        false,
                        true,
                        event2
                      );
                      return !util.global.dispatchEvent(domEvent);
                    };
                  }
                } catch (e) {
                }
                return function() {
                  return false;
                };
              }();
              var fireGlobalEvent = function() {
                if (util.isNode) {
                  return function() {
                    return process2.emit.apply(process2, arguments);
                  };
                } else {
                  if (!util.global) {
                    return function() {
                      return false;
                    };
                  }
                  return function(name) {
                    var methodName = "on" + name.toLowerCase();
                    var method = util.global[methodName];
                    if (!method) return false;
                    method.apply(util.global, [].slice.call(arguments, 1));
                    return true;
                  };
                }
              }();
              function generatePromiseLifecycleEventObject(name, promise) {
                return { promise };
              }
              var eventToObjectGenerator = {
                promiseCreated: generatePromiseLifecycleEventObject,
                promiseFulfilled: generatePromiseLifecycleEventObject,
                promiseRejected: generatePromiseLifecycleEventObject,
                promiseResolved: generatePromiseLifecycleEventObject,
                promiseCancelled: generatePromiseLifecycleEventObject,
                promiseChained: function(name, promise, child) {
                  return { promise, child };
                },
                warning: function(name, warning) {
                  return { warning };
                },
                unhandledRejection: function(name, reason, promise) {
                  return { reason, promise };
                },
                rejectionHandled: generatePromiseLifecycleEventObject
              };
              var activeFireEvent = function(name) {
                var globalEventFired = false;
                try {
                  globalEventFired = fireGlobalEvent.apply(null, arguments);
                } catch (e) {
                  async.throwLater(e);
                  globalEventFired = true;
                }
                var domEventFired = false;
                try {
                  domEventFired = fireDomEvent(
                    name,
                    eventToObjectGenerator[name].apply(null, arguments)
                  );
                } catch (e) {
                  async.throwLater(e);
                  domEventFired = true;
                }
                return domEventFired || globalEventFired;
              };
              Promise2.config = function(opts) {
                opts = Object(opts);
                if ("longStackTraces" in opts) {
                  if (opts.longStackTraces) {
                    Promise2.longStackTraces();
                  } else if (!opts.longStackTraces && Promise2.hasLongStackTraces()) {
                    disableLongStackTraces();
                  }
                }
                if ("warnings" in opts) {
                  var warningsOption = opts.warnings;
                  config.warnings = !!warningsOption;
                  wForgottenReturn = config.warnings;
                  if (util.isObject(warningsOption)) {
                    if ("wForgottenReturn" in warningsOption) {
                      wForgottenReturn = !!warningsOption.wForgottenReturn;
                    }
                  }
                }
                if ("cancellation" in opts && opts.cancellation && !config.cancellation) {
                  if (async.haveItemsQueued()) {
                    throw new Error(
                      "cannot enable cancellation after promises are in use"
                    );
                  }
                  Promise2.prototype._clearCancellationData = cancellationClearCancellationData;
                  Promise2.prototype._propagateFrom = cancellationPropagateFrom;
                  Promise2.prototype._onCancel = cancellationOnCancel;
                  Promise2.prototype._setOnCancel = cancellationSetOnCancel;
                  Promise2.prototype._attachCancellationCallback = cancellationAttachCancellationCallback;
                  Promise2.prototype._execute = cancellationExecute;
                  propagateFromFunction = cancellationPropagateFrom;
                  config.cancellation = true;
                }
                if ("monitoring" in opts) {
                  if (opts.monitoring && !config.monitoring) {
                    config.monitoring = true;
                    Promise2.prototype._fireEvent = activeFireEvent;
                  } else if (!opts.monitoring && config.monitoring) {
                    config.monitoring = false;
                    Promise2.prototype._fireEvent = defaultFireEvent;
                  }
                }
                return Promise2;
              };
              function defaultFireEvent() {
                return false;
              }
              Promise2.prototype._fireEvent = defaultFireEvent;
              Promise2.prototype._execute = function(executor, resolve, reject) {
                try {
                  executor(resolve, reject);
                } catch (e) {
                  return e;
                }
              };
              Promise2.prototype._onCancel = function() {
              };
              Promise2.prototype._setOnCancel = function(handler) {
                ;
              };
              Promise2.prototype._attachCancellationCallback = function(onCancel) {
                ;
              };
              Promise2.prototype._captureStackTrace = function() {
              };
              Promise2.prototype._attachExtraTrace = function() {
              };
              Promise2.prototype._clearCancellationData = function() {
              };
              Promise2.prototype._propagateFrom = function(parent, flags) {
                ;
                ;
              };
              function cancellationExecute(executor, resolve, reject) {
                var promise = this;
                try {
                  executor(resolve, reject, function(onCancel) {
                    if (typeof onCancel !== "function") {
                      throw new TypeError("onCancel must be a function, got: " + util.toString(onCancel));
                    }
                    promise._attachCancellationCallback(onCancel);
                  });
                } catch (e) {
                  return e;
                }
              }
              function cancellationAttachCancellationCallback(onCancel) {
                if (!this._isCancellable()) return this;
                var previousOnCancel = this._onCancel();
                if (previousOnCancel !== void 0) {
                  if (util.isArray(previousOnCancel)) {
                    previousOnCancel.push(onCancel);
                  } else {
                    this._setOnCancel([previousOnCancel, onCancel]);
                  }
                } else {
                  this._setOnCancel(onCancel);
                }
              }
              function cancellationOnCancel() {
                return this._onCancelField;
              }
              function cancellationSetOnCancel(onCancel) {
                this._onCancelField = onCancel;
              }
              function cancellationClearCancellationData() {
                this._cancellationParent = void 0;
                this._onCancelField = void 0;
              }
              function cancellationPropagateFrom(parent, flags) {
                if ((flags & 1) !== 0) {
                  this._cancellationParent = parent;
                  var branchesRemainingToCancel = parent._branchesRemainingToCancel;
                  if (branchesRemainingToCancel === void 0) {
                    branchesRemainingToCancel = 0;
                  }
                  parent._branchesRemainingToCancel = branchesRemainingToCancel + 1;
                }
                if ((flags & 2) !== 0 && parent._isBound()) {
                  this._setBoundTo(parent._boundTo);
                }
              }
              function bindingPropagateFrom(parent, flags) {
                if ((flags & 2) !== 0 && parent._isBound()) {
                  this._setBoundTo(parent._boundTo);
                }
              }
              var propagateFromFunction = bindingPropagateFrom;
              function boundValueFunction() {
                var ret2 = this._boundTo;
                if (ret2 !== void 0) {
                  if (ret2 instanceof Promise2) {
                    if (ret2.isFulfilled()) {
                      return ret2.value();
                    } else {
                      return void 0;
                    }
                  }
                }
                return ret2;
              }
              function longStackTracesCaptureStackTrace() {
                this._trace = new CapturedTrace(this._peekContext());
              }
              function longStackTracesAttachExtraTrace(error, ignoreSelf) {
                if (canAttachTrace2(error)) {
                  var trace = this._trace;
                  if (trace !== void 0) {
                    if (ignoreSelf) trace = trace._parent;
                  }
                  if (trace !== void 0) {
                    trace.attachExtraTrace(error);
                  } else if (!error.__stackCleaned__) {
                    var parsed = parseStackAndMessage(error);
                    util.notEnumerableProp(
                      error,
                      "stack",
                      parsed.message + "\n" + parsed.stack.join("\n")
                    );
                    util.notEnumerableProp(error, "__stackCleaned__", true);
                  }
                }
              }
              function checkForgottenReturns(returnValue, promiseCreated, name, promise, parent) {
                if (returnValue === void 0 && promiseCreated !== null && wForgottenReturn) {
                  if (parent !== void 0 && parent._returnedNonUndefined()) return;
                  if ((promise._bitField & 65535) === 0) return;
                  if (name) name = name + " ";
                  var handlerLine = "";
                  var creatorLine = "";
                  if (promiseCreated._trace) {
                    var traceLines = promiseCreated._trace.stack.split("\n");
                    var stack = cleanStack(traceLines);
                    for (var i = stack.length - 1; i >= 0; --i) {
                      var line = stack[i];
                      if (!nodeFramePattern.test(line)) {
                        var lineMatches = line.match(parseLinePattern);
                        if (lineMatches) {
                          handlerLine = "at " + lineMatches[1] + ":" + lineMatches[2] + ":" + lineMatches[3] + " ";
                        }
                        break;
                      }
                    }
                    if (stack.length > 0) {
                      var firstUserLine = stack[0];
                      for (var i = 0; i < traceLines.length; ++i) {
                        if (traceLines[i] === firstUserLine) {
                          if (i > 0) {
                            creatorLine = "\n" + traceLines[i - 1];
                          }
                          break;
                        }
                      }
                    }
                  }
                  var msg = "a promise was created in a " + name + "handler " + handlerLine + "but was not returned from it, see http://goo.gl/rRqMUw" + creatorLine;
                  promise._warn(msg, true, promiseCreated);
                }
              }
              function deprecated(name, replacement) {
                var message = name + " is deprecated and will be removed in a future version.";
                if (replacement) message += " Use " + replacement + " instead.";
                return warn(message);
              }
              function warn(message, shouldUseOwnTrace, promise) {
                if (!config.warnings) return;
                var warning = new Warning(message);
                var ctx;
                if (shouldUseOwnTrace) {
                  promise._attachExtraTrace(warning);
                } else if (config.longStackTraces && (ctx = Promise2._peekContext())) {
                  ctx.attachExtraTrace(warning);
                } else {
                  var parsed = parseStackAndMessage(warning);
                  warning.stack = parsed.message + "\n" + parsed.stack.join("\n");
                }
                if (!activeFireEvent("warning", warning)) {
                  formatAndLogError(warning, "", true);
                }
              }
              function reconstructStack(message, stacks) {
                for (var i = 0; i < stacks.length - 1; ++i) {
                  stacks[i].push("From previous event:");
                  stacks[i] = stacks[i].join("\n");
                }
                if (i < stacks.length) {
                  stacks[i] = stacks[i].join("\n");
                }
                return message + "\n" + stacks.join("\n");
              }
              function removeDuplicateOrEmptyJumps(stacks) {
                for (var i = 0; i < stacks.length; ++i) {
                  if (stacks[i].length === 0 || i + 1 < stacks.length && stacks[i][0] === stacks[i + 1][0]) {
                    stacks.splice(i, 1);
                    i--;
                  }
                }
              }
              function removeCommonRoots(stacks) {
                var current = stacks[0];
                for (var i = 1; i < stacks.length; ++i) {
                  var prev = stacks[i];
                  var currentLastIndex = current.length - 1;
                  var currentLastLine = current[currentLastIndex];
                  var commonRootMeetPoint = -1;
                  for (var j = prev.length - 1; j >= 0; --j) {
                    if (prev[j] === currentLastLine) {
                      commonRootMeetPoint = j;
                      break;
                    }
                  }
                  for (var j = commonRootMeetPoint; j >= 0; --j) {
                    var line = prev[j];
                    if (current[currentLastIndex] === line) {
                      current.pop();
                      currentLastIndex--;
                    } else {
                      break;
                    }
                  }
                  current = prev;
                }
              }
              function cleanStack(stack) {
                var ret2 = [];
                for (var i = 0; i < stack.length; ++i) {
                  var line = stack[i];
                  var isTraceLine = "    (No stack trace)" === line || stackFramePattern.test(line);
                  var isInternalFrame = isTraceLine && shouldIgnore(line);
                  if (isTraceLine && !isInternalFrame) {
                    if (indentStackFrames && line.charAt(0) !== " ") {
                      line = "    " + line;
                    }
                    ret2.push(line);
                  }
                }
                return ret2;
              }
              function stackFramesAsArray(error) {
                var stack = error.stack.replace(/\s+$/g, "").split("\n");
                for (var i = 0; i < stack.length; ++i) {
                  var line = stack[i];
                  if ("    (No stack trace)" === line || stackFramePattern.test(line)) {
                    break;
                  }
                }
                if (i > 0 && error.name != "SyntaxError") {
                  stack = stack.slice(i);
                }
                return stack;
              }
              function parseStackAndMessage(error) {
                var stack = error.stack;
                var message = error.toString();
                stack = typeof stack === "string" && stack.length > 0 ? stackFramesAsArray(error) : ["    (No stack trace)"];
                return {
                  message,
                  stack: error.name == "SyntaxError" ? stack : cleanStack(stack)
                };
              }
              function formatAndLogError(error, title, isSoft) {
                if (typeof console !== "undefined") {
                  var message;
                  if (util.isObject(error)) {
                    var stack = error.stack;
                    message = title + formatStack(stack, error);
                  } else {
                    message = title + String(error);
                  }
                  if (typeof printWarning === "function") {
                    printWarning(message, isSoft);
                  } else if (typeof console.log === "function" || typeof console.log === "object") {
                    console.log(message);
                  }
                }
              }
              function fireRejectionEvent(name, localHandler, reason, promise) {
                var localEventFired = false;
                try {
                  if (typeof localHandler === "function") {
                    localEventFired = true;
                    if (name === "rejectionHandled") {
                      localHandler(promise);
                    } else {
                      localHandler(reason, promise);
                    }
                  }
                } catch (e) {
                  async.throwLater(e);
                }
                if (name === "unhandledRejection") {
                  if (!activeFireEvent(name, reason, promise) && !localEventFired) {
                    formatAndLogError(reason, "Unhandled rejection ");
                  }
                } else {
                  activeFireEvent(name, promise);
                }
              }
              function formatNonError(obj2) {
                var str;
                if (typeof obj2 === "function") {
                  str = "[function " + (obj2.name || "anonymous") + "]";
                } else {
                  str = obj2 && typeof obj2.toString === "function" ? obj2.toString() : util.toString(obj2);
                  var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
                  if (ruselessToString.test(str)) {
                    try {
                      var newStr = JSON.stringify(obj2);
                      str = newStr;
                    } catch (e) {
                    }
                  }
                  if (str.length === 0) {
                    str = "(empty array)";
                  }
                }
                return "(<" + snip(str) + ">, no stack trace)";
              }
              function snip(str) {
                var maxChars = 41;
                if (str.length < maxChars) {
                  return str;
                }
                return str.substr(0, maxChars - 3) + "...";
              }
              function longStackTracesIsSupported() {
                return typeof captureStackTrace === "function";
              }
              var shouldIgnore = function() {
                return false;
              };
              var parseLineInfoRegex = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
              function parseLineInfo(line) {
                var matches = line.match(parseLineInfoRegex);
                if (matches) {
                  return {
                    fileName: matches[1],
                    line: parseInt(matches[2], 10)
                  };
                }
              }
              function setBounds(firstLineError, lastLineError) {
                if (!longStackTracesIsSupported()) return;
                var firstStackLines = firstLineError.stack.split("\n");
                var lastStackLines = lastLineError.stack.split("\n");
                var firstIndex = -1;
                var lastIndex = -1;
                var firstFileName;
                var lastFileName;
                for (var i = 0; i < firstStackLines.length; ++i) {
                  var result = parseLineInfo(firstStackLines[i]);
                  if (result) {
                    firstFileName = result.fileName;
                    firstIndex = result.line;
                    break;
                  }
                }
                for (var i = 0; i < lastStackLines.length; ++i) {
                  var result = parseLineInfo(lastStackLines[i]);
                  if (result) {
                    lastFileName = result.fileName;
                    lastIndex = result.line;
                    break;
                  }
                }
                if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName || firstFileName !== lastFileName || firstIndex >= lastIndex) {
                  return;
                }
                shouldIgnore = function(line) {
                  if (bluebirdFramePattern.test(line)) return true;
                  var info = parseLineInfo(line);
                  if (info) {
                    if (info.fileName === firstFileName && (firstIndex <= info.line && info.line <= lastIndex)) {
                      return true;
                    }
                  }
                  return false;
                };
              }
              function CapturedTrace(parent) {
                this._parent = parent;
                this._promisesCreated = 0;
                var length = this._length = 1 + (parent === void 0 ? 0 : parent._length);
                captureStackTrace(this, CapturedTrace);
                if (length > 32) this.uncycle();
              }
              util.inherits(CapturedTrace, Error);
              Context.CapturedTrace = CapturedTrace;
              CapturedTrace.prototype.uncycle = function() {
                var length = this._length;
                if (length < 2) return;
                var nodes = [];
                var stackToIndex = {};
                for (var i = 0, node = this; node !== void 0; ++i) {
                  nodes.push(node);
                  node = node._parent;
                }
                length = this._length = i;
                for (var i = length - 1; i >= 0; --i) {
                  var stack = nodes[i].stack;
                  if (stackToIndex[stack] === void 0) {
                    stackToIndex[stack] = i;
                  }
                }
                for (var i = 0; i < length; ++i) {
                  var currentStack = nodes[i].stack;
                  var index = stackToIndex[currentStack];
                  if (index !== void 0 && index !== i) {
                    if (index > 0) {
                      nodes[index - 1]._parent = void 0;
                      nodes[index - 1]._length = 1;
                    }
                    nodes[i]._parent = void 0;
                    nodes[i]._length = 1;
                    var cycleEdgeNode = i > 0 ? nodes[i - 1] : this;
                    if (index < length - 1) {
                      cycleEdgeNode._parent = nodes[index + 1];
                      cycleEdgeNode._parent.uncycle();
                      cycleEdgeNode._length = cycleEdgeNode._parent._length + 1;
                    } else {
                      cycleEdgeNode._parent = void 0;
                      cycleEdgeNode._length = 1;
                    }
                    var currentChildLength = cycleEdgeNode._length + 1;
                    for (var j = i - 2; j >= 0; --j) {
                      nodes[j]._length = currentChildLength;
                      currentChildLength++;
                    }
                    return;
                  }
                }
              };
              CapturedTrace.prototype.attachExtraTrace = function(error) {
                if (error.__stackCleaned__) return;
                this.uncycle();
                var parsed = parseStackAndMessage(error);
                var message = parsed.message;
                var stacks = [parsed.stack];
                var trace = this;
                while (trace !== void 0) {
                  stacks.push(cleanStack(trace.stack.split("\n")));
                  trace = trace._parent;
                }
                removeCommonRoots(stacks);
                removeDuplicateOrEmptyJumps(stacks);
                util.notEnumerableProp(error, "stack", reconstructStack(message, stacks));
                util.notEnumerableProp(error, "__stackCleaned__", true);
              };
              var captureStackTrace = function stackDetection() {
                var v8stackFramePattern = /^\s*at\s*/;
                var v8stackFormatter = function(stack, error) {
                  if (typeof stack === "string") return stack;
                  if (error.name !== void 0 && error.message !== void 0) {
                    return error.toString();
                  }
                  return formatNonError(error);
                };
                if (typeof Error.stackTraceLimit === "number" && typeof Error.captureStackTrace === "function") {
                  Error.stackTraceLimit += 6;
                  stackFramePattern = v8stackFramePattern;
                  formatStack = v8stackFormatter;
                  var captureStackTrace2 = Error.captureStackTrace;
                  shouldIgnore = function(line) {
                    return bluebirdFramePattern.test(line);
                  };
                  return function(receiver, ignoreUntil) {
                    Error.stackTraceLimit += 6;
                    captureStackTrace2(receiver, ignoreUntil);
                    Error.stackTraceLimit -= 6;
                  };
                }
                var err = new Error();
                if (typeof err.stack === "string" && err.stack.split("\n")[0].indexOf("stackDetection@") >= 0) {
                  stackFramePattern = /@/;
                  formatStack = v8stackFormatter;
                  indentStackFrames = true;
                  return function captureStackTrace3(o) {
                    o.stack = new Error().stack;
                  };
                }
                var hasStackAfterThrow;
                try {
                  throw new Error();
                } catch (e) {
                  hasStackAfterThrow = "stack" in e;
                }
                if (!("stack" in err) && hasStackAfterThrow && typeof Error.stackTraceLimit === "number") {
                  stackFramePattern = v8stackFramePattern;
                  formatStack = v8stackFormatter;
                  return function captureStackTrace3(o) {
                    Error.stackTraceLimit += 6;
                    try {
                      throw new Error();
                    } catch (e) {
                      o.stack = e.stack;
                    }
                    Error.stackTraceLimit -= 6;
                  };
                }
                formatStack = function(stack, error) {
                  if (typeof stack === "string") return stack;
                  if ((typeof error === "object" || typeof error === "function") && error.name !== void 0 && error.message !== void 0) {
                    return error.toString();
                  }
                  return formatNonError(error);
                };
                return null;
              }([]);
              if (typeof console !== "undefined" && typeof console.warn !== "undefined") {
                printWarning = function(message) {
                  console.warn(message);
                };
                if (util.isNode && process2.stderr.isTTY) {
                  printWarning = function(message, isSoft) {
                    var color = isSoft ? "\x1B[33m" : "\x1B[31m";
                    console.warn(color + message + "\x1B[0m\n");
                  };
                } else if (!util.isNode && typeof new Error().stack === "string") {
                  printWarning = function(message, isSoft) {
                    console.warn(
                      "%c" + message,
                      isSoft ? "color: darkorange" : "color: red"
                    );
                  };
                }
              }
              var config = {
                warnings,
                longStackTraces: false,
                cancellation: false,
                monitoring: false
              };
              if (longStackTraces) Promise2.longStackTraces();
              return {
                longStackTraces: function() {
                  return config.longStackTraces;
                },
                warnings: function() {
                  return config.warnings;
                },
                cancellation: function() {
                  return config.cancellation;
                },
                monitoring: function() {
                  return config.monitoring;
                },
                propagateFromFunction: function() {
                  return propagateFromFunction;
                },
                boundValueFunction: function() {
                  return boundValueFunction;
                },
                checkForgottenReturns,
                setBounds,
                warn,
                deprecated,
                CapturedTrace,
                fireDomEvent,
                fireGlobalEvent
              };
            };
          }).call(this, require2("_process"));
        }, { "./errors": 50, "./util": 74, "_process": 139 }], 48: [function(require2, module2, exports2) {
          "use strict";
          module2.exports = function(Promise2) {
            function returner() {
              return this.value;
            }
            function thrower2() {
              throw this.reason;
            }
            Promise2.prototype["return"] = Promise2.prototype.thenReturn = function(value) {
              if (value instanceof Promise2) value.suppressUnhandledRejections();
              return this._then(
                returner,
                void 0,
                void 0,
                { value },
                void 0
              );
            };
            Promise2.prototype["throw"] = Promise2.prototype.thenThrow = function(reason) {
              return this._then(
                thrower2,
                void 0,
                void 0,
                { reason },
                void 0
              );
            };
            Promise2.prototype.catchThrow = function(reason) {
              if (arguments.length <= 1) {
                return this._then(
                  void 0,
                  thrower2,
                  void 0,
                  { reason },
                  void 0
                );
              } else {
                var _reason = arguments[1];
                var handler = function() {
                  throw _reason;
                };
                return this.caught(reason, handler);
              }
            };
            Promise2.prototype.catchReturn = function(value) {
              if (arguments.length <= 1) {
                if (value instanceof Promise2) value.suppressUnhandledRejections();
                return this._then(
                  void 0,
                  returner,
                  void 0,
                  { value },
                  void 0
                );
              } else {
                var _value = arguments[1];
                if (_value instanceof Promise2) _value.suppressUnhandledRejections();
                var handler = function() {
                  return _value;
                };
                return this.caught(value, handler);
              }
            };
          };
        }, {}], 49: [function(require2, module2, exports2) {
          "use strict";
          module2.exports = function(Promise2, INTERNAL) {
            var PromiseReduce = Promise2.reduce;
            var PromiseAll = Promise2.all;
            function promiseAllThis() {
              return PromiseAll(this);
            }
            function PromiseMapSeries(promises, fn) {
              return PromiseReduce(promises, fn, INTERNAL, INTERNAL);
            }
            Promise2.prototype.each = function(fn) {
              return PromiseReduce(this, fn, INTERNAL, 0)._then(promiseAllThis, void 0, void 0, this, void 0);
            };
            Promise2.prototype.mapSeries = function(fn) {
              return PromiseReduce(this, fn, INTERNAL, INTERNAL);
            };
            Promise2.each = function(promises, fn) {
              return PromiseReduce(promises, fn, INTERNAL, 0)._then(promiseAllThis, void 0, void 0, promises, void 0);
            };
            Promise2.mapSeries = PromiseMapSeries;
          };
        }, {}], 50: [function(require2, module2, exports2) {
          "use strict";
          var es52 = require2("./es5");
          var Objectfreeze = es52.freeze;
          var util = require2("./util");
          var inherits2 = util.inherits;
          var notEnumerableProp2 = util.notEnumerableProp;
          function subError(nameProperty, defaultMessage) {
            function SubError(message) {
              if (!(this instanceof SubError)) return new SubError(message);
              notEnumerableProp2(
                this,
                "message",
                typeof message === "string" ? message : defaultMessage
              );
              notEnumerableProp2(this, "name", nameProperty);
              if (Error.captureStackTrace) {
                Error.captureStackTrace(this, this.constructor);
              } else {
                Error.call(this);
              }
            }
            inherits2(SubError, Error);
            return SubError;
          }
          var _TypeError, _RangeError;
          var Warning = subError("Warning", "warning");
          var CancellationError = subError("CancellationError", "cancellation error");
          var TimeoutError = subError("TimeoutError", "timeout error");
          var AggregateError = subError("AggregateError", "aggregate error");
          try {
            _TypeError = TypeError;
            _RangeError = RangeError;
          } catch (e) {
            _TypeError = subError("TypeError", "type error");
            _RangeError = subError("RangeError", "range error");
          }
          var methods = "join pop push shift unshift slice filter forEach some every map indexOf lastIndexOf reduce reduceRight sort reverse".split(" ");
          for (var i = 0; i < methods.length; ++i) {
            if (typeof Array.prototype[methods[i]] === "function") {
              AggregateError.prototype[methods[i]] = Array.prototype[methods[i]];
            }
          }
          es52.defineProperty(AggregateError.prototype, "length", {
            value: 0,
            configurable: false,
            writable: true,
            enumerable: true
          });
          AggregateError.prototype["isOperational"] = true;
          var level = 0;
          AggregateError.prototype.toString = function() {
            var indent = Array(level * 4 + 1).join(" ");
            var ret2 = "\n" + indent + "AggregateError of:\n";
            level++;
            indent = Array(level * 4 + 1).join(" ");
            for (var i2 = 0; i2 < this.length; ++i2) {
              var str = this[i2] === this ? "[Circular AggregateError]" : this[i2] + "";
              var lines = str.split("\n");
              for (var j = 0; j < lines.length; ++j) {
                lines[j] = indent + lines[j];
              }
              str = lines.join("\n");
              ret2 += str + "\n";
            }
            level--;
            return ret2;
          };
          function OperationalError(message) {
            if (!(this instanceof OperationalError))
              return new OperationalError(message);
            notEnumerableProp2(this, "name", "OperationalError");
            notEnumerableProp2(this, "message", message);
            this.cause = message;
            this["isOperational"] = true;
            if (message instanceof Error) {
              notEnumerableProp2(this, "message", message.message);
              notEnumerableProp2(this, "stack", message.stack);
            } else if (Error.captureStackTrace) {
              Error.captureStackTrace(this, this.constructor);
            }
          }
          inherits2(OperationalError, Error);
          var errorTypes = Error["__BluebirdErrorTypes__"];
          if (!errorTypes) {
            errorTypes = Objectfreeze({
              CancellationError,
              TimeoutError,
              OperationalError,
              RejectionError: OperationalError,
              AggregateError
            });
            es52.defineProperty(Error, "__BluebirdErrorTypes__", {
              value: errorTypes,
              writable: false,
              enumerable: false,
              configurable: false
            });
          }
          module2.exports = {
            Error,
            TypeError: _TypeError,
            RangeError: _RangeError,
            CancellationError: errorTypes.CancellationError,
            OperationalError: errorTypes.OperationalError,
            TimeoutError: errorTypes.TimeoutError,
            AggregateError: errorTypes.AggregateError,
            Warning
          };
        }, { "./es5": 51, "./util": 74 }], 51: [function(require2, module2, exports2) {
          var isES5 = function() {
            "use strict";
            return this === void 0;
          }();
          if (isES5) {
            module2.exports = {
              freeze: Object.freeze,
              defineProperty: Object.defineProperty,
              getDescriptor: Object.getOwnPropertyDescriptor,
              keys: Object.keys,
              names: Object.getOwnPropertyNames,
              getPrototypeOf: Object.getPrototypeOf,
              isArray: Array.isArray,
              isES5,
              propertyIsWritable: function(obj2, prop) {
                var descriptor = Object.getOwnPropertyDescriptor(obj2, prop);
                return !!(!descriptor || descriptor.writable || descriptor.set);
              }
            };
          } else {
            var has = {}.hasOwnProperty;
            var str = {}.toString;
            var proto = {}.constructor.prototype;
            var ObjectKeys = function(o) {
              var ret2 = [];
              for (var key in o) {
                if (has.call(o, key)) {
                  ret2.push(key);
                }
              }
              return ret2;
            };
            var ObjectGetDescriptor = function(o, key) {
              return { value: o[key] };
            };
            var ObjectDefineProperty = function(o, key, desc) {
              o[key] = desc.value;
              return o;
            };
            var ObjectFreeze = function(obj2) {
              return obj2;
            };
            var ObjectGetPrototypeOf = function(obj2) {
              try {
                return Object(obj2).constructor.prototype;
              } catch (e) {
                return proto;
              }
            };
            var ArrayIsArray = function(obj2) {
              try {
                return str.call(obj2) === "[object Array]";
              } catch (e) {
                return false;
              }
            };
            module2.exports = {
              isArray: ArrayIsArray,
              keys: ObjectKeys,
              names: ObjectKeys,
              defineProperty: ObjectDefineProperty,
              getDescriptor: ObjectGetDescriptor,
              freeze: ObjectFreeze,
              getPrototypeOf: ObjectGetPrototypeOf,
              isES5,
              propertyIsWritable: function() {
                return true;
              }
            };
          }
        }, {}], 52: [function(require2, module2, exports2) {
          "use strict";
          module2.exports = function(Promise2, INTERNAL) {
            var PromiseMap = Promise2.map;
            Promise2.prototype.filter = function(fn, options2) {
              return PromiseMap(this, fn, options2, INTERNAL);
            };
            Promise2.filter = function(promises, fn, options2) {
              return PromiseMap(promises, fn, options2, INTERNAL);
            };
          };
        }, {}], 53: [function(require2, module2, exports2) {
          "use strict";
          module2.exports = function(Promise2, tryConvertToPromise) {
            var util = require2("./util");
            var CancellationError = Promise2.CancellationError;
            var errorObj2 = util.errorObj;
            function PassThroughHandlerContext(promise, type, handler) {
              this.promise = promise;
              this.type = type;
              this.handler = handler;
              this.called = false;
              this.cancelPromise = null;
            }
            PassThroughHandlerContext.prototype.isFinallyHandler = function() {
              return this.type === 0;
            };
            function FinallyHandlerCancelReaction(finallyHandler2) {
              this.finallyHandler = finallyHandler2;
            }
            FinallyHandlerCancelReaction.prototype._resultCancelled = function() {
              checkCancel(this.finallyHandler);
            };
            function checkCancel(ctx, reason) {
              if (ctx.cancelPromise != null) {
                if (arguments.length > 1) {
                  ctx.cancelPromise._reject(reason);
                } else {
                  ctx.cancelPromise._cancel();
                }
                ctx.cancelPromise = null;
                return true;
              }
              return false;
            }
            function succeed() {
              return finallyHandler.call(this, this.promise._target()._settledValue());
            }
            function fail(reason) {
              if (checkCancel(this, reason)) return;
              errorObj2.e = reason;
              return errorObj2;
            }
            function finallyHandler(reasonOrValue) {
              var promise = this.promise;
              var handler = this.handler;
              if (!this.called) {
                this.called = true;
                var ret2 = this.isFinallyHandler() ? handler.call(promise._boundValue()) : handler.call(promise._boundValue(), reasonOrValue);
                if (ret2 !== void 0) {
                  promise._setReturnedNonUndefined();
                  var maybePromise = tryConvertToPromise(ret2, promise);
                  if (maybePromise instanceof Promise2) {
                    if (this.cancelPromise != null) {
                      if (maybePromise._isCancelled()) {
                        var reason = new CancellationError("late cancellation observer");
                        promise._attachExtraTrace(reason);
                        errorObj2.e = reason;
                        return errorObj2;
                      } else if (maybePromise.isPending()) {
                        maybePromise._attachCancellationCallback(
                          new FinallyHandlerCancelReaction(this)
                        );
                      }
                    }
                    return maybePromise._then(
                      succeed,
                      fail,
                      void 0,
                      this,
                      void 0
                    );
                  }
                }
              }
              if (promise.isRejected()) {
                checkCancel(this);
                errorObj2.e = reasonOrValue;
                return errorObj2;
              } else {
                checkCancel(this);
                return reasonOrValue;
              }
            }
            Promise2.prototype._passThrough = function(handler, type, success, fail2) {
              if (typeof handler !== "function") return this.then();
              return this._then(
                success,
                fail2,
                void 0,
                new PassThroughHandlerContext(this, type, handler),
                void 0
              );
            };
            Promise2.prototype.lastly = Promise2.prototype["finally"] = function(handler) {
              return this._passThrough(
                handler,
                0,
                finallyHandler,
                finallyHandler
              );
            };
            Promise2.prototype.tap = function(handler) {
              return this._passThrough(handler, 1, finallyHandler);
            };
            return PassThroughHandlerContext;
          };
        }, { "./util": 74 }], 54: [function(require2, module2, exports2) {
          "use strict";
          module2.exports = function(Promise2, apiRejection, INTERNAL, tryConvertToPromise, Proxyable, debug) {
            var errors = require2("./errors");
            var TypeError2 = errors.TypeError;
            var util = require2("./util");
            var errorObj2 = util.errorObj;
            var tryCatch2 = util.tryCatch;
            var yieldHandlers = [];
            function promiseFromYieldHandler(value, yieldHandlers2, traceParent) {
              for (var i = 0; i < yieldHandlers2.length; ++i) {
                traceParent._pushContext();
                var result = tryCatch2(yieldHandlers2[i])(value);
                traceParent._popContext();
                if (result === errorObj2) {
                  traceParent._pushContext();
                  var ret2 = Promise2.reject(errorObj2.e);
                  traceParent._popContext();
                  return ret2;
                }
                var maybePromise = tryConvertToPromise(result, traceParent);
                if (maybePromise instanceof Promise2) return maybePromise;
              }
              return null;
            }
            function PromiseSpawn(generatorFunction, receiver, yieldHandler, stack) {
              if (debug.cancellation()) {
                var internal = new Promise2(INTERNAL);
                var _finallyPromise = this._finallyPromise = new Promise2(INTERNAL);
                this._promise = internal.lastly(function() {
                  return _finallyPromise;
                });
                internal._captureStackTrace();
                internal._setOnCancel(this);
              } else {
                var promise = this._promise = new Promise2(INTERNAL);
                promise._captureStackTrace();
              }
              this._stack = stack;
              this._generatorFunction = generatorFunction;
              this._receiver = receiver;
              this._generator = void 0;
              this._yieldHandlers = typeof yieldHandler === "function" ? [yieldHandler].concat(yieldHandlers) : yieldHandlers;
              this._yieldedPromise = null;
              this._cancellationPhase = false;
            }
            util.inherits(PromiseSpawn, Proxyable);
            PromiseSpawn.prototype._isResolved = function() {
              return this._promise === null;
            };
            PromiseSpawn.prototype._cleanup = function() {
              this._promise = this._generator = null;
              if (debug.cancellation() && this._finallyPromise !== null) {
                this._finallyPromise._fulfill();
                this._finallyPromise = null;
              }
            };
            PromiseSpawn.prototype._promiseCancelled = function() {
              if (this._isResolved()) return;
              var implementsReturn = typeof this._generator["return"] !== "undefined";
              var result;
              if (!implementsReturn) {
                var reason = new Promise2.CancellationError(
                  "generator .return() sentinel"
                );
                Promise2.coroutine.returnSentinel = reason;
                this._promise._attachExtraTrace(reason);
                this._promise._pushContext();
                result = tryCatch2(this._generator["throw"]).call(
                  this._generator,
                  reason
                );
                this._promise._popContext();
              } else {
                this._promise._pushContext();
                result = tryCatch2(this._generator["return"]).call(
                  this._generator,
                  void 0
                );
                this._promise._popContext();
              }
              this._cancellationPhase = true;
              this._yieldedPromise = null;
              this._continue(result);
            };
            PromiseSpawn.prototype._promiseFulfilled = function(value) {
              this._yieldedPromise = null;
              this._promise._pushContext();
              var result = tryCatch2(this._generator.next).call(this._generator, value);
              this._promise._popContext();
              this._continue(result);
            };
            PromiseSpawn.prototype._promiseRejected = function(reason) {
              this._yieldedPromise = null;
              this._promise._attachExtraTrace(reason);
              this._promise._pushContext();
              var result = tryCatch2(this._generator["throw"]).call(this._generator, reason);
              this._promise._popContext();
              this._continue(result);
            };
            PromiseSpawn.prototype._resultCancelled = function() {
              if (this._yieldedPromise instanceof Promise2) {
                var promise = this._yieldedPromise;
                this._yieldedPromise = null;
                promise.cancel();
              }
            };
            PromiseSpawn.prototype.promise = function() {
              return this._promise;
            };
            PromiseSpawn.prototype._run = function() {
              this._generator = this._generatorFunction.call(this._receiver);
              this._receiver = this._generatorFunction = void 0;
              this._promiseFulfilled(void 0);
            };
            PromiseSpawn.prototype._continue = function(result) {
              var promise = this._promise;
              if (result === errorObj2) {
                this._cleanup();
                if (this._cancellationPhase) {
                  return promise.cancel();
                } else {
                  return promise._rejectCallback(result.e, false);
                }
              }
              var value = result.value;
              if (result.done === true) {
                this._cleanup();
                if (this._cancellationPhase) {
                  return promise.cancel();
                } else {
                  return promise._resolveCallback(value);
                }
              } else {
                var maybePromise = tryConvertToPromise(value, this._promise);
                if (!(maybePromise instanceof Promise2)) {
                  maybePromise = promiseFromYieldHandler(
                    maybePromise,
                    this._yieldHandlers,
                    this._promise
                  );
                  if (maybePromise === null) {
                    this._promiseRejected(
                      new TypeError2(
                        "A value %s was yielded that could not be treated as a promise\n\n    See http://goo.gl/MqrFmX\n\n".replace("%s", value) + "From coroutine:\n" + this._stack.split("\n").slice(1, -7).join("\n")
                      )
                    );
                    return;
                  }
                }
                maybePromise = maybePromise._target();
                var bitField = maybePromise._bitField;
                ;
                if ((bitField & 50397184) === 0) {
                  this._yieldedPromise = maybePromise;
                  maybePromise._proxy(this, null);
                } else if ((bitField & 33554432) !== 0) {
                  Promise2._async.invoke(
                    this._promiseFulfilled,
                    this,
                    maybePromise._value()
                  );
                } else if ((bitField & 16777216) !== 0) {
                  Promise2._async.invoke(
                    this._promiseRejected,
                    this,
                    maybePromise._reason()
                  );
                } else {
                  this._promiseCancelled();
                }
              }
            };
            Promise2.coroutine = function(generatorFunction, options2) {
              if (typeof generatorFunction !== "function") {
                throw new TypeError2("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n");
              }
              var yieldHandler = Object(options2).yieldHandler;
              var PromiseSpawn$ = PromiseSpawn;
              var stack = new Error().stack;
              return function() {
                var generator = generatorFunction.apply(this, arguments);
                var spawn = new PromiseSpawn$(
                  void 0,
                  void 0,
                  yieldHandler,
                  stack
                );
                var ret2 = spawn.promise();
                spawn._generator = generator;
                spawn._promiseFulfilled(void 0);
                return ret2;
              };
            };
            Promise2.coroutine.addYieldHandler = function(fn) {
              if (typeof fn !== "function") {
                throw new TypeError2("expecting a function but got " + util.classString(fn));
              }
              yieldHandlers.push(fn);
            };
            Promise2.spawn = function(generatorFunction) {
              debug.deprecated("Promise.spawn()", "Promise.coroutine()");
              if (typeof generatorFunction !== "function") {
                return apiRejection("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n");
              }
              var spawn = new PromiseSpawn(generatorFunction, this);
              var ret2 = spawn.promise();
              spawn._run(Promise2.spawn);
              return ret2;
            };
          };
        }, { "./errors": 50, "./util": 74 }], 55: [function(require2, module2, exports2) {
          "use strict";
          module2.exports = function(Promise2, PromiseArray, tryConvertToPromise, INTERNAL, async, getDomain) {
            var util = require2("./util");
            var canEvaluate2 = util.canEvaluate;
            var tryCatch2 = util.tryCatch;
            var errorObj2 = util.errorObj;
            var reject;
            if (true) {
              if (canEvaluate2) {
                var thenCallback = function(i2) {
                  return new Function("value", "holder", "                             \n            'use strict';                                                    \n            holder.pIndex = value;                                           \n            holder.checkFulfillment(this);                                   \n            ".replace(/Index/g, i2));
                };
                var promiseSetter = function(i2) {
                  return new Function("promise", "holder", "                           \n            'use strict';                                                    \n            holder.pIndex = promise;                                         \n            ".replace(/Index/g, i2));
                };
                var generateHolderClass = function(total) {
                  var props = new Array(total);
                  for (var i2 = 0; i2 < props.length; ++i2) {
                    props[i2] = "this.p" + (i2 + 1);
                  }
                  var assignment = props.join(" = ") + " = null;";
                  var cancellationCode = "var promise;\n" + props.map(function(prop) {
                    return "                                                         \n                promise = " + prop + ";                                      \n                if (promise instanceof Promise) {                            \n                    promise.cancel();                                        \n                }                                                            \n            ";
                  }).join("\n");
                  var passedArguments = props.join(", ");
                  var name = "Holder$" + total;
                  var code = "return function(tryCatch, errorObj, Promise, async) {    \n            'use strict';                                                    \n            function [TheName](fn) {                                         \n                [TheProperties]                                              \n                this.fn = fn;                                                \n                this.asyncNeeded = true;                                     \n                this.now = 0;                                                \n            }                                                                \n                                                                             \n            [TheName].prototype._callFunction = function(promise) {          \n                promise._pushContext();                                      \n                var ret = tryCatch(this.fn)([ThePassedArguments]);           \n                promise._popContext();                                       \n                if (ret === errorObj) {                                      \n                    promise._rejectCallback(ret.e, false);                   \n                } else {                                                     \n                    promise._resolveCallback(ret);                           \n                }                                                            \n            };                                                               \n                                                                             \n            [TheName].prototype.checkFulfillment = function(promise) {       \n                var now = ++this.now;                                        \n                if (now === [TheTotal]) {                                    \n                    if (this.asyncNeeded) {                                  \n                        async.invoke(this._callFunction, this, promise);     \n                    } else {                                                 \n                        this._callFunction(promise);                         \n                    }                                                        \n                                                                             \n                }                                                            \n            };                                                               \n                                                                             \n            [TheName].prototype._resultCancelled = function() {              \n                [CancellationCode]                                           \n            };                                                               \n                                                                             \n            return [TheName];                                                \n        }(tryCatch, errorObj, Promise, async);                               \n        ";
                  code = code.replace(/\[TheName\]/g, name).replace(/\[TheTotal\]/g, total).replace(/\[ThePassedArguments\]/g, passedArguments).replace(/\[TheProperties\]/g, assignment).replace(/\[CancellationCode\]/g, cancellationCode);
                  return new Function("tryCatch", "errorObj", "Promise", "async", code)(tryCatch2, errorObj2, Promise2, async);
                };
                var holderClasses = [];
                var thenCallbacks = [];
                var promiseSetters = [];
                for (var i = 0; i < 8; ++i) {
                  holderClasses.push(generateHolderClass(i + 1));
                  thenCallbacks.push(thenCallback(i + 1));
                  promiseSetters.push(promiseSetter(i + 1));
                }
                reject = function(reason) {
                  this._reject(reason);
                };
              }
            }
            Promise2.join = function() {
              var last = arguments.length - 1;
              var fn;
              if (last > 0 && typeof arguments[last] === "function") {
                fn = arguments[last];
                if (true) {
                  if (last <= 8 && canEvaluate2) {
                    var ret2 = new Promise2(INTERNAL);
                    ret2._captureStackTrace();
                    var HolderClass = holderClasses[last - 1];
                    var holder = new HolderClass(fn);
                    var callbacks = thenCallbacks;
                    for (var i2 = 0; i2 < last; ++i2) {
                      var maybePromise = tryConvertToPromise(arguments[i2], ret2);
                      if (maybePromise instanceof Promise2) {
                        maybePromise = maybePromise._target();
                        var bitField = maybePromise._bitField;
                        ;
                        if ((bitField & 50397184) === 0) {
                          maybePromise._then(
                            callbacks[i2],
                            reject,
                            void 0,
                            ret2,
                            holder
                          );
                          promiseSetters[i2](maybePromise, holder);
                          holder.asyncNeeded = false;
                        } else if ((bitField & 33554432) !== 0) {
                          callbacks[i2].call(
                            ret2,
                            maybePromise._value(),
                            holder
                          );
                        } else if ((bitField & 16777216) !== 0) {
                          ret2._reject(maybePromise._reason());
                        } else {
                          ret2._cancel();
                        }
                      } else {
                        callbacks[i2].call(ret2, maybePromise, holder);
                      }
                    }
                    if (!ret2._isFateSealed()) {
                      if (holder.asyncNeeded) {
                        var domain = getDomain();
                        if (domain !== null) {
                          holder.fn = util.domainBind(domain, holder.fn);
                        }
                      }
                      ret2._setAsyncGuaranteed();
                      ret2._setOnCancel(holder);
                    }
                    return ret2;
                  }
                }
              }
              var $_len = arguments.length;
              var args = new Array($_len);
              for (var $_i = 0; $_i < $_len; ++$_i) {
                args[$_i] = arguments[$_i];
              }
              ;
              if (fn) args.pop();
              var ret2 = new PromiseArray(args).promise();
              return fn !== void 0 ? ret2.spread(fn) : ret2;
            };
          };
        }, { "./util": 74 }], 56: [function(require2, module2, exports2) {
          "use strict";
          module2.exports = function(Promise2, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug) {
            var getDomain = Promise2._getDomain;
            var util = require2("./util");
            var tryCatch2 = util.tryCatch;
            var errorObj2 = util.errorObj;
            var async = Promise2._async;
            function MappingPromiseArray(promises, fn, limit, _filter) {
              this.constructor$(promises);
              this._promise._captureStackTrace();
              var domain = getDomain();
              this._callback = domain === null ? fn : util.domainBind(domain, fn);
              this._preservedValues = _filter === INTERNAL ? new Array(this.length()) : null;
              this._limit = limit;
              this._inFlight = 0;
              this._queue = [];
              async.invoke(this._asyncInit, this, void 0);
            }
            util.inherits(MappingPromiseArray, PromiseArray);
            MappingPromiseArray.prototype._asyncInit = function() {
              this._init$(void 0, -2);
            };
            MappingPromiseArray.prototype._init = function() {
            };
            MappingPromiseArray.prototype._promiseFulfilled = function(value, index) {
              var values = this._values;
              var length = this.length();
              var preservedValues = this._preservedValues;
              var limit = this._limit;
              if (index < 0) {
                index = index * -1 - 1;
                values[index] = value;
                if (limit >= 1) {
                  this._inFlight--;
                  this._drainQueue();
                  if (this._isResolved()) return true;
                }
              } else {
                if (limit >= 1 && this._inFlight >= limit) {
                  values[index] = value;
                  this._queue.push(index);
                  return false;
                }
                if (preservedValues !== null) preservedValues[index] = value;
                var promise = this._promise;
                var callback = this._callback;
                var receiver = promise._boundValue();
                promise._pushContext();
                var ret2 = tryCatch2(callback).call(receiver, value, index, length);
                var promiseCreated = promise._popContext();
                debug.checkForgottenReturns(
                  ret2,
                  promiseCreated,
                  preservedValues !== null ? "Promise.filter" : "Promise.map",
                  promise
                );
                if (ret2 === errorObj2) {
                  this._reject(ret2.e);
                  return true;
                }
                var maybePromise = tryConvertToPromise(ret2, this._promise);
                if (maybePromise instanceof Promise2) {
                  maybePromise = maybePromise._target();
                  var bitField = maybePromise._bitField;
                  ;
                  if ((bitField & 50397184) === 0) {
                    if (limit >= 1) this._inFlight++;
                    values[index] = maybePromise;
                    maybePromise._proxy(this, (index + 1) * -1);
                    return false;
                  } else if ((bitField & 33554432) !== 0) {
                    ret2 = maybePromise._value();
                  } else if ((bitField & 16777216) !== 0) {
                    this._reject(maybePromise._reason());
                    return true;
                  } else {
                    this._cancel();
                    return true;
                  }
                }
                values[index] = ret2;
              }
              var totalResolved = ++this._totalResolved;
              if (totalResolved >= length) {
                if (preservedValues !== null) {
                  this._filter(values, preservedValues);
                } else {
                  this._resolve(values);
                }
                return true;
              }
              return false;
            };
            MappingPromiseArray.prototype._drainQueue = function() {
              var queue = this._queue;
              var limit = this._limit;
              var values = this._values;
              while (queue.length > 0 && this._inFlight < limit) {
                if (this._isResolved()) return;
                var index = queue.pop();
                this._promiseFulfilled(values[index], index);
              }
            };
            MappingPromiseArray.prototype._filter = function(booleans, values) {
              var len = values.length;
              var ret2 = new Array(len);
              var j = 0;
              for (var i = 0; i < len; ++i) {
                if (booleans[i]) ret2[j++] = values[i];
              }
              ret2.length = j;
              this._resolve(ret2);
            };
            MappingPromiseArray.prototype.preservedValues = function() {
              return this._preservedValues;
            };
            function map(promises, fn, options2, _filter) {
              if (typeof fn !== "function") {
                return apiRejection("expecting a function but got " + util.classString(fn));
              }
              var limit = 0;
              if (options2 !== void 0) {
                if (typeof options2 === "object" && options2 !== null) {
                  if (typeof options2.concurrency !== "number") {
                    return Promise2.reject(
                      new TypeError("'concurrency' must be a number but it is " + util.classString(options2.concurrency))
                    );
                  }
                  limit = options2.concurrency;
                } else {
                  return Promise2.reject(new TypeError(
                    "options argument must be an object but it is " + util.classString(options2)
                  ));
                }
              }
              limit = typeof limit === "number" && isFinite(limit) && limit >= 1 ? limit : 0;
              return new MappingPromiseArray(promises, fn, limit, _filter).promise();
            }
            Promise2.prototype.map = function(fn, options2) {
              return map(this, fn, options2, null);
            };
            Promise2.map = function(promises, fn, options2, _filter) {
              return map(promises, fn, options2, _filter);
            };
          };
        }, { "./util": 74 }], 57: [function(require2, module2, exports2) {
          "use strict";
          module2.exports = function(Promise2, INTERNAL, tryConvertToPromise, apiRejection, debug) {
            var util = require2("./util");
            var tryCatch2 = util.tryCatch;
            Promise2.method = function(fn) {
              if (typeof fn !== "function") {
                throw new Promise2.TypeError("expecting a function but got " + util.classString(fn));
              }
              return function() {
                var ret2 = new Promise2(INTERNAL);
                ret2._captureStackTrace();
                ret2._pushContext();
                var value = tryCatch2(fn).apply(this, arguments);
                var promiseCreated = ret2._popContext();
                debug.checkForgottenReturns(
                  value,
                  promiseCreated,
                  "Promise.method",
                  ret2
                );
                ret2._resolveFromSyncValue(value);
                return ret2;
              };
            };
            Promise2.attempt = Promise2["try"] = function(fn) {
              if (typeof fn !== "function") {
                return apiRejection("expecting a function but got " + util.classString(fn));
              }
              var ret2 = new Promise2(INTERNAL);
              ret2._captureStackTrace();
              ret2._pushContext();
              var value;
              if (arguments.length > 1) {
                debug.deprecated("calling Promise.try with more than 1 argument");
                var arg = arguments[1];
                var ctx = arguments[2];
                value = util.isArray(arg) ? tryCatch2(fn).apply(ctx, arg) : tryCatch2(fn).call(ctx, arg);
              } else {
                value = tryCatch2(fn)();
              }
              var promiseCreated = ret2._popContext();
              debug.checkForgottenReturns(
                value,
                promiseCreated,
                "Promise.try",
                ret2
              );
              ret2._resolveFromSyncValue(value);
              return ret2;
            };
            Promise2.prototype._resolveFromSyncValue = function(value) {
              if (value === util.errorObj) {
                this._rejectCallback(value.e, false);
              } else {
                this._resolveCallback(value, true);
              }
            };
          };
        }, { "./util": 74 }], 58: [function(require2, module2, exports2) {
          "use strict";
          var util = require2("./util");
          var maybeWrapAsError2 = util.maybeWrapAsError;
          var errors = require2("./errors");
          var OperationalError = errors.OperationalError;
          var es52 = require2("./es5");
          function isUntypedError(obj2) {
            return obj2 instanceof Error && es52.getPrototypeOf(obj2) === Error.prototype;
          }
          var rErrorKey = /^(?:name|message|stack|cause)$/;
          function wrapAsOperationalError(obj2) {
            var ret2;
            if (isUntypedError(obj2)) {
              ret2 = new OperationalError(obj2);
              ret2.name = obj2.name;
              ret2.message = obj2.message;
              ret2.stack = obj2.stack;
              var keys = es52.keys(obj2);
              for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];
                if (!rErrorKey.test(key)) {
                  ret2[key] = obj2[key];
                }
              }
              return ret2;
            }
            util.markAsOriginatingFromRejection(obj2);
            return obj2;
          }
          function nodebackForPromise(promise, multiArgs) {
            return function(err, value) {
              if (promise === null) return;
              if (err) {
                var wrapped = wrapAsOperationalError(maybeWrapAsError2(err));
                promise._attachExtraTrace(wrapped);
                promise._reject(wrapped);
              } else if (!multiArgs) {
                promise._fulfill(value);
              } else {
                var $_len = arguments.length;
                var args = new Array(Math.max($_len - 1, 0));
                for (var $_i = 1; $_i < $_len; ++$_i) {
                  args[$_i - 1] = arguments[$_i];
                }
                ;
                promise._fulfill(args);
              }
              promise = null;
            };
          }
          module2.exports = nodebackForPromise;
        }, { "./errors": 50, "./es5": 51, "./util": 74 }], 59: [function(require2, module2, exports2) {
          "use strict";
          module2.exports = function(Promise2) {
            var util = require2("./util");
            var async = Promise2._async;
            var tryCatch2 = util.tryCatch;
            var errorObj2 = util.errorObj;
            function spreadAdapter(val, nodeback) {
              var promise = this;
              if (!util.isArray(val)) return successAdapter.call(promise, val, nodeback);
              var ret2 = tryCatch2(nodeback).apply(promise._boundValue(), [null].concat(val));
              if (ret2 === errorObj2) {
                async.throwLater(ret2.e);
              }
            }
            function successAdapter(val, nodeback) {
              var promise = this;
              var receiver = promise._boundValue();
              var ret2 = val === void 0 ? tryCatch2(nodeback).call(receiver, null) : tryCatch2(nodeback).call(receiver, null, val);
              if (ret2 === errorObj2) {
                async.throwLater(ret2.e);
              }
            }
            function errorAdapter(reason, nodeback) {
              var promise = this;
              if (!reason) {
                var newReason = new Error(reason + "");
                newReason.cause = reason;
                reason = newReason;
              }
              var ret2 = tryCatch2(nodeback).call(promise._boundValue(), reason);
              if (ret2 === errorObj2) {
                async.throwLater(ret2.e);
              }
            }
            Promise2.prototype.asCallback = Promise2.prototype.nodeify = function(nodeback, options2) {
              if (typeof nodeback == "function") {
                var adapter = successAdapter;
                if (options2 !== void 0 && Object(options2).spread) {
                  adapter = spreadAdapter;
                }
                this._then(
                  adapter,
                  errorAdapter,
                  void 0,
                  this,
                  nodeback
                );
              }
              return this;
            };
          };
        }, { "./util": 74 }], 60: [function(require2, module2, exports2) {
          (function(process2) {
            "use strict";
            module2.exports = function() {
              var makeSelfResolutionError = function() {
                return new TypeError2("circular promise resolution chain\n\n    See http://goo.gl/MqrFmX\n");
              };
              var reflectHandler = function() {
                return new Promise2.PromiseInspection(this._target());
              };
              var apiRejection = function(msg) {
                return Promise2.reject(new TypeError2(msg));
              };
              function Proxyable() {
              }
              var UNDEFINED_BINDING = {};
              var util = require2("./util");
              var getDomain;
              if (util.isNode) {
                getDomain = function() {
                  var ret2 = process2.domain;
                  if (ret2 === void 0) ret2 = null;
                  return ret2;
                };
              } else {
                getDomain = function() {
                  return null;
                };
              }
              util.notEnumerableProp(Promise2, "_getDomain", getDomain);
              var es52 = require2("./es5");
              var Async = require2("./async");
              var async = new Async();
              es52.defineProperty(Promise2, "_async", { value: async });
              var errors = require2("./errors");
              var TypeError2 = Promise2.TypeError = errors.TypeError;
              Promise2.RangeError = errors.RangeError;
              var CancellationError = Promise2.CancellationError = errors.CancellationError;
              Promise2.TimeoutError = errors.TimeoutError;
              Promise2.OperationalError = errors.OperationalError;
              Promise2.RejectionError = errors.OperationalError;
              Promise2.AggregateError = errors.AggregateError;
              var INTERNAL = function() {
              };
              var APPLY = {};
              var NEXT_FILTER = {};
              var tryConvertToPromise = require2("./thenables")(Promise2, INTERNAL);
              var PromiseArray = require2("./promise_array")(
                Promise2,
                INTERNAL,
                tryConvertToPromise,
                apiRejection,
                Proxyable
              );
              var Context = require2("./context")(Promise2);
              var createContext = Context.create;
              var debug = require2("./debuggability")(Promise2, Context);
              var CapturedTrace = debug.CapturedTrace;
              var PassThroughHandlerContext = require2("./finally")(Promise2, tryConvertToPromise);
              var catchFilter = require2("./catch_filter")(NEXT_FILTER);
              var nodebackForPromise = require2("./nodeback");
              var errorObj2 = util.errorObj;
              var tryCatch2 = util.tryCatch;
              function check(self2, executor) {
                if (typeof executor !== "function") {
                  throw new TypeError2("expecting a function but got " + util.classString(executor));
                }
                if (self2.constructor !== Promise2) {
                  throw new TypeError2("the promise constructor cannot be invoked directly\n\n    See http://goo.gl/MqrFmX\n");
                }
              }
              function Promise2(executor) {
                this._bitField = 0;
                this._fulfillmentHandler0 = void 0;
                this._rejectionHandler0 = void 0;
                this._promise0 = void 0;
                this._receiver0 = void 0;
                if (executor !== INTERNAL) {
                  check(this, executor);
                  this._resolveFromExecutor(executor);
                }
                this._promiseCreated();
                this._fireEvent("promiseCreated", this);
              }
              Promise2.prototype.toString = function() {
                return "[object Promise]";
              };
              Promise2.prototype.caught = Promise2.prototype["catch"] = function(fn) {
                var len = arguments.length;
                if (len > 1) {
                  var catchInstances = new Array(len - 1), j = 0, i;
                  for (i = 0; i < len - 1; ++i) {
                    var item = arguments[i];
                    if (util.isObject(item)) {
                      catchInstances[j++] = item;
                    } else {
                      return apiRejection("expecting an object but got A catch statement predicate " + util.classString(item));
                    }
                  }
                  catchInstances.length = j;
                  fn = arguments[i];
                  return this.then(void 0, catchFilter(catchInstances, fn, this));
                }
                return this.then(void 0, fn);
              };
              Promise2.prototype.reflect = function() {
                return this._then(
                  reflectHandler,
                  reflectHandler,
                  void 0,
                  this,
                  void 0
                );
              };
              Promise2.prototype.then = function(didFulfill, didReject) {
                if (debug.warnings() && arguments.length > 0 && typeof didFulfill !== "function" && typeof didReject !== "function") {
                  var msg = ".then() only accepts functions but was passed: " + util.classString(didFulfill);
                  if (arguments.length > 1) {
                    msg += ", " + util.classString(didReject);
                  }
                  this._warn(msg);
                }
                return this._then(didFulfill, didReject, void 0, void 0, void 0);
              };
              Promise2.prototype.done = function(didFulfill, didReject) {
                var promise = this._then(didFulfill, didReject, void 0, void 0, void 0);
                promise._setIsFinal();
              };
              Promise2.prototype.spread = function(fn) {
                if (typeof fn !== "function") {
                  return apiRejection("expecting a function but got " + util.classString(fn));
                }
                return this.all()._then(fn, void 0, void 0, APPLY, void 0);
              };
              Promise2.prototype.toJSON = function() {
                var ret2 = {
                  isFulfilled: false,
                  isRejected: false,
                  fulfillmentValue: void 0,
                  rejectionReason: void 0
                };
                if (this.isFulfilled()) {
                  ret2.fulfillmentValue = this.value();
                  ret2.isFulfilled = true;
                } else if (this.isRejected()) {
                  ret2.rejectionReason = this.reason();
                  ret2.isRejected = true;
                }
                return ret2;
              };
              Promise2.prototype.all = function() {
                if (arguments.length > 0) {
                  this._warn(".all() was passed arguments but it does not take any");
                }
                return new PromiseArray(this).promise();
              };
              Promise2.prototype.error = function(fn) {
                return this.caught(util.originatesFromRejection, fn);
              };
              Promise2.getNewLibraryCopy = module2.exports;
              Promise2.is = function(val) {
                return val instanceof Promise2;
              };
              Promise2.fromNode = Promise2.fromCallback = function(fn) {
                var ret2 = new Promise2(INTERNAL);
                ret2._captureStackTrace();
                var multiArgs = arguments.length > 1 ? !!Object(arguments[1]).multiArgs : false;
                var result = tryCatch2(fn)(nodebackForPromise(ret2, multiArgs));
                if (result === errorObj2) {
                  ret2._rejectCallback(result.e, true);
                }
                if (!ret2._isFateSealed()) ret2._setAsyncGuaranteed();
                return ret2;
              };
              Promise2.all = function(promises) {
                return new PromiseArray(promises).promise();
              };
              Promise2.cast = function(obj2) {
                var ret2 = tryConvertToPromise(obj2);
                if (!(ret2 instanceof Promise2)) {
                  ret2 = new Promise2(INTERNAL);
                  ret2._captureStackTrace();
                  ret2._setFulfilled();
                  ret2._rejectionHandler0 = obj2;
                }
                return ret2;
              };
              Promise2.resolve = Promise2.fulfilled = Promise2.cast;
              Promise2.reject = Promise2.rejected = function(reason) {
                var ret2 = new Promise2(INTERNAL);
                ret2._captureStackTrace();
                ret2._rejectCallback(reason, true);
                return ret2;
              };
              Promise2.setScheduler = function(fn) {
                if (typeof fn !== "function") {
                  throw new TypeError2("expecting a function but got " + util.classString(fn));
                }
                return async.setScheduler(fn);
              };
              Promise2.prototype._then = function(didFulfill, didReject, _, receiver, internalData) {
                var haveInternalData = internalData !== void 0;
                var promise = haveInternalData ? internalData : new Promise2(INTERNAL);
                var target = this._target();
                var bitField = target._bitField;
                if (!haveInternalData) {
                  promise._propagateFrom(this, 3);
                  promise._captureStackTrace();
                  if (receiver === void 0 && (this._bitField & 2097152) !== 0) {
                    if (!((bitField & 50397184) === 0)) {
                      receiver = this._boundValue();
                    } else {
                      receiver = target === this ? void 0 : this._boundTo;
                    }
                  }
                  this._fireEvent("promiseChained", this, promise);
                }
                var domain = getDomain();
                if (!((bitField & 50397184) === 0)) {
                  var handler, value, settler = target._settlePromiseCtx;
                  if ((bitField & 33554432) !== 0) {
                    value = target._rejectionHandler0;
                    handler = didFulfill;
                  } else if ((bitField & 16777216) !== 0) {
                    value = target._fulfillmentHandler0;
                    handler = didReject;
                    target._unsetRejectionIsUnhandled();
                  } else {
                    settler = target._settlePromiseLateCancellationObserver;
                    value = new CancellationError("late cancellation observer");
                    target._attachExtraTrace(value);
                    handler = didReject;
                  }
                  async.invoke(settler, target, {
                    handler: domain === null ? handler : typeof handler === "function" && util.domainBind(domain, handler),
                    promise,
                    receiver,
                    value
                  });
                } else {
                  target._addCallbacks(didFulfill, didReject, promise, receiver, domain);
                }
                return promise;
              };
              Promise2.prototype._length = function() {
                return this._bitField & 65535;
              };
              Promise2.prototype._isFateSealed = function() {
                return (this._bitField & 117506048) !== 0;
              };
              Promise2.prototype._isFollowing = function() {
                return (this._bitField & 67108864) === 67108864;
              };
              Promise2.prototype._setLength = function(len) {
                this._bitField = this._bitField & -65536 | len & 65535;
              };
              Promise2.prototype._setFulfilled = function() {
                this._bitField = this._bitField | 33554432;
                this._fireEvent("promiseFulfilled", this);
              };
              Promise2.prototype._setRejected = function() {
                this._bitField = this._bitField | 16777216;
                this._fireEvent("promiseRejected", this);
              };
              Promise2.prototype._setFollowing = function() {
                this._bitField = this._bitField | 67108864;
                this._fireEvent("promiseResolved", this);
              };
              Promise2.prototype._setIsFinal = function() {
                this._bitField = this._bitField | 4194304;
              };
              Promise2.prototype._isFinal = function() {
                return (this._bitField & 4194304) > 0;
              };
              Promise2.prototype._unsetCancelled = function() {
                this._bitField = this._bitField & ~65536;
              };
              Promise2.prototype._setCancelled = function() {
                this._bitField = this._bitField | 65536;
                this._fireEvent("promiseCancelled", this);
              };
              Promise2.prototype._setWillBeCancelled = function() {
                this._bitField = this._bitField | 8388608;
              };
              Promise2.prototype._setAsyncGuaranteed = function() {
                if (async.hasCustomScheduler()) return;
                this._bitField = this._bitField | 134217728;
              };
              Promise2.prototype._receiverAt = function(index) {
                var ret2 = index === 0 ? this._receiver0 : this[index * 4 - 4 + 3];
                if (ret2 === UNDEFINED_BINDING) {
                  return void 0;
                } else if (ret2 === void 0 && this._isBound()) {
                  return this._boundValue();
                }
                return ret2;
              };
              Promise2.prototype._promiseAt = function(index) {
                return this[index * 4 - 4 + 2];
              };
              Promise2.prototype._fulfillmentHandlerAt = function(index) {
                return this[index * 4 - 4 + 0];
              };
              Promise2.prototype._rejectionHandlerAt = function(index) {
                return this[index * 4 - 4 + 1];
              };
              Promise2.prototype._boundValue = function() {
              };
              Promise2.prototype._migrateCallback0 = function(follower) {
                var bitField = follower._bitField;
                var fulfill = follower._fulfillmentHandler0;
                var reject = follower._rejectionHandler0;
                var promise = follower._promise0;
                var receiver = follower._receiverAt(0);
                if (receiver === void 0) receiver = UNDEFINED_BINDING;
                this._addCallbacks(fulfill, reject, promise, receiver, null);
              };
              Promise2.prototype._migrateCallbackAt = function(follower, index) {
                var fulfill = follower._fulfillmentHandlerAt(index);
                var reject = follower._rejectionHandlerAt(index);
                var promise = follower._promiseAt(index);
                var receiver = follower._receiverAt(index);
                if (receiver === void 0) receiver = UNDEFINED_BINDING;
                this._addCallbacks(fulfill, reject, promise, receiver, null);
              };
              Promise2.prototype._addCallbacks = function(fulfill, reject, promise, receiver, domain) {
                var index = this._length();
                if (index >= 65535 - 4) {
                  index = 0;
                  this._setLength(0);
                }
                if (index === 0) {
                  this._promise0 = promise;
                  this._receiver0 = receiver;
                  if (typeof fulfill === "function") {
                    this._fulfillmentHandler0 = domain === null ? fulfill : util.domainBind(domain, fulfill);
                  }
                  if (typeof reject === "function") {
                    this._rejectionHandler0 = domain === null ? reject : util.domainBind(domain, reject);
                  }
                } else {
                  var base = index * 4 - 4;
                  this[base + 2] = promise;
                  this[base + 3] = receiver;
                  if (typeof fulfill === "function") {
                    this[base + 0] = domain === null ? fulfill : util.domainBind(domain, fulfill);
                  }
                  if (typeof reject === "function") {
                    this[base + 1] = domain === null ? reject : util.domainBind(domain, reject);
                  }
                }
                this._setLength(index + 1);
                return index;
              };
              Promise2.prototype._proxy = function(proxyable, arg) {
                this._addCallbacks(void 0, void 0, arg, proxyable, null);
              };
              Promise2.prototype._resolveCallback = function(value, shouldBind) {
                if ((this._bitField & 117506048) !== 0) return;
                if (value === this)
                  return this._rejectCallback(makeSelfResolutionError(), false);
                var maybePromise = tryConvertToPromise(value, this);
                if (!(maybePromise instanceof Promise2)) return this._fulfill(value);
                if (shouldBind) this._propagateFrom(maybePromise, 2);
                var promise = maybePromise._target();
                if (promise === this) {
                  this._reject(makeSelfResolutionError());
                  return;
                }
                var bitField = promise._bitField;
                if ((bitField & 50397184) === 0) {
                  var len = this._length();
                  if (len > 0) promise._migrateCallback0(this);
                  for (var i = 1; i < len; ++i) {
                    promise._migrateCallbackAt(this, i);
                  }
                  this._setFollowing();
                  this._setLength(0);
                  this._setFollowee(promise);
                } else if ((bitField & 33554432) !== 0) {
                  this._fulfill(promise._value());
                } else if ((bitField & 16777216) !== 0) {
                  this._reject(promise._reason());
                } else {
                  var reason = new CancellationError("late cancellation observer");
                  promise._attachExtraTrace(reason);
                  this._reject(reason);
                }
              };
              Promise2.prototype._rejectCallback = function(reason, synchronous, ignoreNonErrorWarnings) {
                var trace = util.ensureErrorObject(reason);
                var hasStack = trace === reason;
                if (!hasStack && !ignoreNonErrorWarnings && debug.warnings()) {
                  var message = "a promise was rejected with a non-error: " + util.classString(reason);
                  this._warn(message, true);
                }
                this._attachExtraTrace(trace, synchronous ? hasStack : false);
                this._reject(reason);
              };
              Promise2.prototype._resolveFromExecutor = function(executor) {
                var promise = this;
                this._captureStackTrace();
                this._pushContext();
                var synchronous = true;
                var r = this._execute(executor, function(value) {
                  promise._resolveCallback(value);
                }, function(reason) {
                  promise._rejectCallback(reason, synchronous);
                });
                synchronous = false;
                this._popContext();
                if (r !== void 0) {
                  promise._rejectCallback(r, true);
                }
              };
              Promise2.prototype._settlePromiseFromHandler = function(handler, receiver, value, promise) {
                var bitField = promise._bitField;
                if ((bitField & 65536) !== 0) return;
                promise._pushContext();
                var x;
                if (receiver === APPLY) {
                  if (!value || typeof value.length !== "number") {
                    x = errorObj2;
                    x.e = new TypeError2("cannot .spread() a non-array: " + util.classString(value));
                  } else {
                    x = tryCatch2(handler).apply(this._boundValue(), value);
                  }
                } else {
                  x = tryCatch2(handler).call(receiver, value);
                }
                var promiseCreated = promise._popContext();
                bitField = promise._bitField;
                if ((bitField & 65536) !== 0) return;
                if (x === NEXT_FILTER) {
                  promise._reject(value);
                } else if (x === errorObj2) {
                  promise._rejectCallback(x.e, false);
                } else {
                  debug.checkForgottenReturns(x, promiseCreated, "", promise, this);
                  promise._resolveCallback(x);
                }
              };
              Promise2.prototype._target = function() {
                var ret2 = this;
                while (ret2._isFollowing()) ret2 = ret2._followee();
                return ret2;
              };
              Promise2.prototype._followee = function() {
                return this._rejectionHandler0;
              };
              Promise2.prototype._setFollowee = function(promise) {
                this._rejectionHandler0 = promise;
              };
              Promise2.prototype._settlePromise = function(promise, handler, receiver, value) {
                var isPromise = promise instanceof Promise2;
                var bitField = this._bitField;
                var asyncGuaranteed = (bitField & 134217728) !== 0;
                if ((bitField & 65536) !== 0) {
                  if (isPromise) promise._invokeInternalOnCancel();
                  if (receiver instanceof PassThroughHandlerContext && receiver.isFinallyHandler()) {
                    receiver.cancelPromise = promise;
                    if (tryCatch2(handler).call(receiver, value) === errorObj2) {
                      promise._reject(errorObj2.e);
                    }
                  } else if (handler === reflectHandler) {
                    promise._fulfill(reflectHandler.call(receiver));
                  } else if (receiver instanceof Proxyable) {
                    receiver._promiseCancelled(promise);
                  } else if (isPromise || promise instanceof PromiseArray) {
                    promise._cancel();
                  } else {
                    receiver.cancel();
                  }
                } else if (typeof handler === "function") {
                  if (!isPromise) {
                    handler.call(receiver, value, promise);
                  } else {
                    if (asyncGuaranteed) promise._setAsyncGuaranteed();
                    this._settlePromiseFromHandler(handler, receiver, value, promise);
                  }
                } else if (receiver instanceof Proxyable) {
                  if (!receiver._isResolved()) {
                    if ((bitField & 33554432) !== 0) {
                      receiver._promiseFulfilled(value, promise);
                    } else {
                      receiver._promiseRejected(value, promise);
                    }
                  }
                } else if (isPromise) {
                  if (asyncGuaranteed) promise._setAsyncGuaranteed();
                  if ((bitField & 33554432) !== 0) {
                    promise._fulfill(value);
                  } else {
                    promise._reject(value);
                  }
                }
              };
              Promise2.prototype._settlePromiseLateCancellationObserver = function(ctx) {
                var handler = ctx.handler;
                var promise = ctx.promise;
                var receiver = ctx.receiver;
                var value = ctx.value;
                if (typeof handler === "function") {
                  if (!(promise instanceof Promise2)) {
                    handler.call(receiver, value, promise);
                  } else {
                    this._settlePromiseFromHandler(handler, receiver, value, promise);
                  }
                } else if (promise instanceof Promise2) {
                  promise._reject(value);
                }
              };
              Promise2.prototype._settlePromiseCtx = function(ctx) {
                this._settlePromise(ctx.promise, ctx.handler, ctx.receiver, ctx.value);
              };
              Promise2.prototype._settlePromise0 = function(handler, value, bitField) {
                var promise = this._promise0;
                var receiver = this._receiverAt(0);
                this._promise0 = void 0;
                this._receiver0 = void 0;
                this._settlePromise(promise, handler, receiver, value);
              };
              Promise2.prototype._clearCallbackDataAtIndex = function(index) {
                var base = index * 4 - 4;
                this[base + 2] = this[base + 3] = this[base + 0] = this[base + 1] = void 0;
              };
              Promise2.prototype._fulfill = function(value) {
                var bitField = this._bitField;
                if ((bitField & 117506048) >>> 16) return;
                if (value === this) {
                  var err = makeSelfResolutionError();
                  this._attachExtraTrace(err);
                  return this._reject(err);
                }
                this._setFulfilled();
                this._rejectionHandler0 = value;
                if ((bitField & 65535) > 0) {
                  if ((bitField & 134217728) !== 0) {
                    this._settlePromises();
                  } else {
                    async.settlePromises(this);
                  }
                }
              };
              Promise2.prototype._reject = function(reason) {
                var bitField = this._bitField;
                if ((bitField & 117506048) >>> 16) return;
                this._setRejected();
                this._fulfillmentHandler0 = reason;
                if (this._isFinal()) {
                  return async.fatalError(reason, util.isNode);
                }
                if ((bitField & 65535) > 0) {
                  async.settlePromises(this);
                } else {
                  this._ensurePossibleRejectionHandled();
                }
              };
              Promise2.prototype._fulfillPromises = function(len, value) {
                for (var i = 1; i < len; i++) {
                  var handler = this._fulfillmentHandlerAt(i);
                  var promise = this._promiseAt(i);
                  var receiver = this._receiverAt(i);
                  this._clearCallbackDataAtIndex(i);
                  this._settlePromise(promise, handler, receiver, value);
                }
              };
              Promise2.prototype._rejectPromises = function(len, reason) {
                for (var i = 1; i < len; i++) {
                  var handler = this._rejectionHandlerAt(i);
                  var promise = this._promiseAt(i);
                  var receiver = this._receiverAt(i);
                  this._clearCallbackDataAtIndex(i);
                  this._settlePromise(promise, handler, receiver, reason);
                }
              };
              Promise2.prototype._settlePromises = function() {
                var bitField = this._bitField;
                var len = bitField & 65535;
                if (len > 0) {
                  if ((bitField & 16842752) !== 0) {
                    var reason = this._fulfillmentHandler0;
                    this._settlePromise0(this._rejectionHandler0, reason, bitField);
                    this._rejectPromises(len, reason);
                  } else {
                    var value = this._rejectionHandler0;
                    this._settlePromise0(this._fulfillmentHandler0, value, bitField);
                    this._fulfillPromises(len, value);
                  }
                  this._setLength(0);
                }
                this._clearCancellationData();
              };
              Promise2.prototype._settledValue = function() {
                var bitField = this._bitField;
                if ((bitField & 33554432) !== 0) {
                  return this._rejectionHandler0;
                } else if ((bitField & 16777216) !== 0) {
                  return this._fulfillmentHandler0;
                }
              };
              function deferResolve(v) {
                this.promise._resolveCallback(v);
              }
              function deferReject(v) {
                this.promise._rejectCallback(v, false);
              }
              Promise2.defer = Promise2.pending = function() {
                debug.deprecated("Promise.defer", "new Promise");
                var promise = new Promise2(INTERNAL);
                return {
                  promise,
                  resolve: deferResolve,
                  reject: deferReject
                };
              };
              util.notEnumerableProp(
                Promise2,
                "_makeSelfResolutionError",
                makeSelfResolutionError
              );
              require2("./method")(
                Promise2,
                INTERNAL,
                tryConvertToPromise,
                apiRejection,
                debug
              );
              require2("./bind")(Promise2, INTERNAL, tryConvertToPromise, debug);
              require2("./cancel")(Promise2, PromiseArray, apiRejection, debug);
              require2("./direct_resolve")(Promise2);
              require2("./synchronous_inspection")(Promise2);
              require2("./join")(
                Promise2,
                PromiseArray,
                tryConvertToPromise,
                INTERNAL,
                async,
                getDomain
              );
              Promise2.Promise = Promise2;
              Promise2.version = "3.4.7";
              require2("./map.js")(Promise2, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
              require2("./call_get.js")(Promise2);
              require2("./using.js")(Promise2, apiRejection, tryConvertToPromise, createContext, INTERNAL, debug);
              require2("./timers.js")(Promise2, INTERNAL, debug);
              require2("./generators.js")(Promise2, apiRejection, INTERNAL, tryConvertToPromise, Proxyable, debug);
              require2("./nodeify.js")(Promise2);
              require2("./promisify.js")(Promise2, INTERNAL);
              require2("./props.js")(Promise2, PromiseArray, tryConvertToPromise, apiRejection);
              require2("./race.js")(Promise2, INTERNAL, tryConvertToPromise, apiRejection);
              require2("./reduce.js")(Promise2, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
              require2("./settle.js")(Promise2, PromiseArray, debug);
              require2("./some.js")(Promise2, PromiseArray, apiRejection);
              require2("./filter.js")(Promise2, INTERNAL);
              require2("./each.js")(Promise2, INTERNAL);
              require2("./any.js")(Promise2);
              util.toFastProperties(Promise2);
              util.toFastProperties(Promise2.prototype);
              function fillTypes(value) {
                var p = new Promise2(INTERNAL);
                p._fulfillmentHandler0 = value;
                p._rejectionHandler0 = value;
                p._promise0 = value;
                p._receiver0 = value;
              }
              fillTypes({ a: 1 });
              fillTypes({ b: 2 });
              fillTypes({ c: 3 });
              fillTypes(1);
              fillTypes(function() {
              });
              fillTypes(void 0);
              fillTypes(false);
              fillTypes(new Promise2(INTERNAL));
              debug.setBounds(Async.firstLineError, util.lastLineError);
              return Promise2;
            };
          }).call(this, require2("_process"));
        }, { "./any.js": 40, "./async": 41, "./bind": 42, "./call_get.js": 43, "./cancel": 44, "./catch_filter": 45, "./context": 46, "./debuggability": 47, "./direct_resolve": 48, "./each.js": 49, "./errors": 50, "./es5": 51, "./filter.js": 52, "./finally": 53, "./generators.js": 54, "./join": 55, "./map.js": 56, "./method": 57, "./nodeback": 58, "./nodeify.js": 59, "./promise_array": 61, "./promisify.js": 62, "./props.js": 63, "./race.js": 65, "./reduce.js": 66, "./settle.js": 68, "./some.js": 69, "./synchronous_inspection": 70, "./thenables": 71, "./timers.js": 72, "./using.js": 73, "./util": 74, "_process": 139 }], 61: [function(require2, module2, exports2) {
          "use strict";
          module2.exports = function(Promise2, INTERNAL, tryConvertToPromise, apiRejection, Proxyable) {
            var util = require2("./util");
            var isArray = util.isArray;
            function toResolutionValue(val) {
              switch (val) {
                case -2:
                  return [];
                case -3:
                  return {};
              }
            }
            function PromiseArray(values) {
              var promise = this._promise = new Promise2(INTERNAL);
              if (values instanceof Promise2) {
                promise._propagateFrom(values, 3);
              }
              promise._setOnCancel(this);
              this._values = values;
              this._length = 0;
              this._totalResolved = 0;
              this._init(void 0, -2);
            }
            util.inherits(PromiseArray, Proxyable);
            PromiseArray.prototype.length = function() {
              return this._length;
            };
            PromiseArray.prototype.promise = function() {
              return this._promise;
            };
            PromiseArray.prototype._init = function init(_, resolveValueIfEmpty) {
              var values = tryConvertToPromise(this._values, this._promise);
              if (values instanceof Promise2) {
                values = values._target();
                var bitField = values._bitField;
                ;
                this._values = values;
                if ((bitField & 50397184) === 0) {
                  this._promise._setAsyncGuaranteed();
                  return values._then(
                    init,
                    this._reject,
                    void 0,
                    this,
                    resolveValueIfEmpty
                  );
                } else if ((bitField & 33554432) !== 0) {
                  values = values._value();
                } else if ((bitField & 16777216) !== 0) {
                  return this._reject(values._reason());
                } else {
                  return this._cancel();
                }
              }
              values = util.asArray(values);
              if (values === null) {
                var err = apiRejection(
                  "expecting an array or an iterable object but got " + util.classString(values)
                ).reason();
                this._promise._rejectCallback(err, false);
                return;
              }
              if (values.length === 0) {
                if (resolveValueIfEmpty === -5) {
                  this._resolveEmptyArray();
                } else {
                  this._resolve(toResolutionValue(resolveValueIfEmpty));
                }
                return;
              }
              this._iterate(values);
            };
            PromiseArray.prototype._iterate = function(values) {
              var len = this.getActualLength(values.length);
              this._length = len;
              this._values = this.shouldCopyValues() ? new Array(len) : this._values;
              var result = this._promise;
              var isResolved = false;
              var bitField = null;
              for (var i = 0; i < len; ++i) {
                var maybePromise = tryConvertToPromise(values[i], result);
                if (maybePromise instanceof Promise2) {
                  maybePromise = maybePromise._target();
                  bitField = maybePromise._bitField;
                } else {
                  bitField = null;
                }
                if (isResolved) {
                  if (bitField !== null) {
                    maybePromise.suppressUnhandledRejections();
                  }
                } else if (bitField !== null) {
                  if ((bitField & 50397184) === 0) {
                    maybePromise._proxy(this, i);
                    this._values[i] = maybePromise;
                  } else if ((bitField & 33554432) !== 0) {
                    isResolved = this._promiseFulfilled(maybePromise._value(), i);
                  } else if ((bitField & 16777216) !== 0) {
                    isResolved = this._promiseRejected(maybePromise._reason(), i);
                  } else {
                    isResolved = this._promiseCancelled(i);
                  }
                } else {
                  isResolved = this._promiseFulfilled(maybePromise, i);
                }
              }
              if (!isResolved) result._setAsyncGuaranteed();
            };
            PromiseArray.prototype._isResolved = function() {
              return this._values === null;
            };
            PromiseArray.prototype._resolve = function(value) {
              this._values = null;
              this._promise._fulfill(value);
            };
            PromiseArray.prototype._cancel = function() {
              if (this._isResolved() || !this._promise._isCancellable()) return;
              this._values = null;
              this._promise._cancel();
            };
            PromiseArray.prototype._reject = function(reason) {
              this._values = null;
              this._promise._rejectCallback(reason, false);
            };
            PromiseArray.prototype._promiseFulfilled = function(value, index) {
              this._values[index] = value;
              var totalResolved = ++this._totalResolved;
              if (totalResolved >= this._length) {
                this._resolve(this._values);
                return true;
              }
              return false;
            };
            PromiseArray.prototype._promiseCancelled = function() {
              this._cancel();
              return true;
            };
            PromiseArray.prototype._promiseRejected = function(reason) {
              this._totalResolved++;
              this._reject(reason);
              return true;
            };
            PromiseArray.prototype._resultCancelled = function() {
              if (this._isResolved()) return;
              var values = this._values;
              this._cancel();
              if (values instanceof Promise2) {
                values.cancel();
              } else {
                for (var i = 0; i < values.length; ++i) {
                  if (values[i] instanceof Promise2) {
                    values[i].cancel();
                  }
                }
              }
            };
            PromiseArray.prototype.shouldCopyValues = function() {
              return true;
            };
            PromiseArray.prototype.getActualLength = function(len) {
              return len;
            };
            return PromiseArray;
          };
        }, { "./util": 74 }], 62: [function(require2, module2, exports2) {
          "use strict";
          module2.exports = function(Promise2, INTERNAL) {
            var THIS = {};
            var util = require2("./util");
            var nodebackForPromise = require2("./nodeback");
            var withAppended2 = util.withAppended;
            var maybeWrapAsError2 = util.maybeWrapAsError;
            var canEvaluate2 = util.canEvaluate;
            var TypeError2 = require2("./errors").TypeError;
            var defaultSuffix = "Async";
            var defaultPromisified = { __isPromisified__: true };
            var noCopyProps = [
              "arity",
              "length",
              "name",
              "arguments",
              "caller",
              "callee",
              "prototype",
              "__isPromisified__"
            ];
            var noCopyPropsPattern = new RegExp("^(?:" + noCopyProps.join("|") + ")$");
            var defaultFilter = function(name) {
              return util.isIdentifier(name) && name.charAt(0) !== "_" && name !== "constructor";
            };
            function propsFilter(key) {
              return !noCopyPropsPattern.test(key);
            }
            function isPromisified(fn) {
              try {
                return fn.__isPromisified__ === true;
              } catch (e) {
                return false;
              }
            }
            function hasPromisified(obj2, key, suffix) {
              var val = util.getDataPropertyOrDefault(
                obj2,
                key + suffix,
                defaultPromisified
              );
              return val ? isPromisified(val) : false;
            }
            function checkValid(ret2, suffix, suffixRegexp) {
              for (var i = 0; i < ret2.length; i += 2) {
                var key = ret2[i];
                if (suffixRegexp.test(key)) {
                  var keyWithoutAsyncSuffix = key.replace(suffixRegexp, "");
                  for (var j = 0; j < ret2.length; j += 2) {
                    if (ret2[j] === keyWithoutAsyncSuffix) {
                      throw new TypeError2("Cannot promisify an API that has normal methods with '%s'-suffix\n\n    See http://goo.gl/MqrFmX\n".replace("%s", suffix));
                    }
                  }
                }
              }
            }
            function promisifiableMethods(obj2, suffix, suffixRegexp, filter) {
              var keys = util.inheritedDataKeys(obj2);
              var ret2 = [];
              for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];
                var value = obj2[key];
                var passesDefaultFilter = filter === defaultFilter ? true : defaultFilter(key, value, obj2);
                if (typeof value === "function" && !isPromisified(value) && !hasPromisified(obj2, key, suffix) && filter(key, value, obj2, passesDefaultFilter)) {
                  ret2.push(key, value);
                }
              }
              checkValid(ret2, suffix, suffixRegexp);
              return ret2;
            }
            var escapeIdentRegex = function(str) {
              return str.replace(/([$])/, "\\$");
            };
            var makeNodePromisifiedEval;
            if (true) {
              var switchCaseArgumentOrder = function(likelyArgumentCount) {
                var ret2 = [likelyArgumentCount];
                var min = Math.max(0, likelyArgumentCount - 1 - 3);
                for (var i = likelyArgumentCount - 1; i >= min; --i) {
                  ret2.push(i);
                }
                for (var i = likelyArgumentCount + 1; i <= 3; ++i) {
                  ret2.push(i);
                }
                return ret2;
              };
              var argumentSequence = function(argumentCount) {
                return util.filledRange(argumentCount, "_arg", "");
              };
              var parameterDeclaration = function(parameterCount2) {
                return util.filledRange(
                  Math.max(parameterCount2, 3),
                  "_arg",
                  ""
                );
              };
              var parameterCount = function(fn) {
                if (typeof fn.length === "number") {
                  return Math.max(Math.min(fn.length, 1023 + 1), 0);
                }
                return 0;
              };
              makeNodePromisifiedEval = function(callback, receiver, originalName, fn, _, multiArgs) {
                var newParameterCount = Math.max(0, parameterCount(fn) - 1);
                var argumentOrder = switchCaseArgumentOrder(newParameterCount);
                var shouldProxyThis = typeof callback === "string" || receiver === THIS;
                function generateCallForArgumentCount(count) {
                  var args = argumentSequence(count).join(", ");
                  var comma = count > 0 ? ", " : "";
                  var ret2;
                  if (shouldProxyThis) {
                    ret2 = "ret = callback.call(this, {{args}}, nodeback); break;\n";
                  } else {
                    ret2 = receiver === void 0 ? "ret = callback({{args}}, nodeback); break;\n" : "ret = callback.call(receiver, {{args}}, nodeback); break;\n";
                  }
                  return ret2.replace("{{args}}", args).replace(", ", comma);
                }
                function generateArgumentSwitchCase() {
                  var ret2 = "";
                  for (var i = 0; i < argumentOrder.length; ++i) {
                    ret2 += "case " + argumentOrder[i] + ":" + generateCallForArgumentCount(argumentOrder[i]);
                  }
                  ret2 += "                                                             \n        default:                                                             \n            var args = new Array(len + 1);                                   \n            var i = 0;                                                       \n            for (var i = 0; i < len; ++i) {                                  \n               args[i] = arguments[i];                                       \n            }                                                                \n            args[i] = nodeback;                                              \n            [CodeForCall]                                                    \n            break;                                                           \n        ".replace("[CodeForCall]", shouldProxyThis ? "ret = callback.apply(this, args);\n" : "ret = callback.apply(receiver, args);\n");
                  return ret2;
                }
                var getFunctionCode = typeof callback === "string" ? "this != null ? this['" + callback + "'] : fn" : "fn";
                var body = "'use strict';                                                \n        var ret = function (Parameters) {                                    \n            'use strict';                                                    \n            var len = arguments.length;                                      \n            var promise = new Promise(INTERNAL);                             \n            promise._captureStackTrace();                                    \n            var nodeback = nodebackForPromise(promise, " + multiArgs + ");   \n            var ret;                                                         \n            var callback = tryCatch([GetFunctionCode]);                      \n            switch(len) {                                                    \n                [CodeForSwitchCase]                                          \n            }                                                                \n            if (ret === errorObj) {                                          \n                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n            }                                                                \n            if (!promise._isFateSealed()) promise._setAsyncGuaranteed();     \n            return promise;                                                  \n        };                                                                   \n        notEnumerableProp(ret, '__isPromisified__', true);                   \n        return ret;                                                          \n    ".replace("[CodeForSwitchCase]", generateArgumentSwitchCase()).replace("[GetFunctionCode]", getFunctionCode);
                body = body.replace("Parameters", parameterDeclaration(newParameterCount));
                return new Function(
                  "Promise",
                  "fn",
                  "receiver",
                  "withAppended",
                  "maybeWrapAsError",
                  "nodebackForPromise",
                  "tryCatch",
                  "errorObj",
                  "notEnumerableProp",
                  "INTERNAL",
                  body
                )(
                  Promise2,
                  fn,
                  receiver,
                  withAppended2,
                  maybeWrapAsError2,
                  nodebackForPromise,
                  util.tryCatch,
                  util.errorObj,
                  util.notEnumerableProp,
                  INTERNAL
                );
              };
            }
            function makeNodePromisifiedClosure(callback, receiver, _, fn, __, multiArgs) {
              var defaultThis = /* @__PURE__ */ function() {
                return this;
              }();
              var method = callback;
              if (typeof method === "string") {
                callback = fn;
              }
              function promisified() {
                var _receiver = receiver;
                if (receiver === THIS) _receiver = this;
                var promise = new Promise2(INTERNAL);
                promise._captureStackTrace();
                var cb = typeof method === "string" && this !== defaultThis ? this[method] : callback;
                var fn2 = nodebackForPromise(promise, multiArgs);
                try {
                  cb.apply(_receiver, withAppended2(arguments, fn2));
                } catch (e) {
                  promise._rejectCallback(maybeWrapAsError2(e), true, true);
                }
                if (!promise._isFateSealed()) promise._setAsyncGuaranteed();
                return promise;
              }
              util.notEnumerableProp(promisified, "__isPromisified__", true);
              return promisified;
            }
            var makeNodePromisified = canEvaluate2 ? makeNodePromisifiedEval : makeNodePromisifiedClosure;
            function promisifyAll(obj2, suffix, filter, promisifier, multiArgs) {
              var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + "$");
              var methods = promisifiableMethods(obj2, suffix, suffixRegexp, filter);
              for (var i = 0, len = methods.length; i < len; i += 2) {
                var key = methods[i];
                var fn = methods[i + 1];
                var promisifiedKey = key + suffix;
                if (promisifier === makeNodePromisified) {
                  obj2[promisifiedKey] = makeNodePromisified(key, THIS, key, fn, suffix, multiArgs);
                } else {
                  var promisified = promisifier(fn, function() {
                    return makeNodePromisified(
                      key,
                      THIS,
                      key,
                      fn,
                      suffix,
                      multiArgs
                    );
                  });
                  util.notEnumerableProp(promisified, "__isPromisified__", true);
                  obj2[promisifiedKey] = promisified;
                }
              }
              util.toFastProperties(obj2);
              return obj2;
            }
            function promisify(callback, receiver, multiArgs) {
              return makeNodePromisified(
                callback,
                receiver,
                void 0,
                callback,
                null,
                multiArgs
              );
            }
            Promise2.promisify = function(fn, options2) {
              if (typeof fn !== "function") {
                throw new TypeError2("expecting a function but got " + util.classString(fn));
              }
              if (isPromisified(fn)) {
                return fn;
              }
              options2 = Object(options2);
              var receiver = options2.context === void 0 ? THIS : options2.context;
              var multiArgs = !!options2.multiArgs;
              var ret2 = promisify(fn, receiver, multiArgs);
              util.copyDescriptors(fn, ret2, propsFilter);
              return ret2;
            };
            Promise2.promisifyAll = function(target, options2) {
              if (typeof target !== "function" && typeof target !== "object") {
                throw new TypeError2("the target of promisifyAll must be an object or a function\n\n    See http://goo.gl/MqrFmX\n");
              }
              options2 = Object(options2);
              var multiArgs = !!options2.multiArgs;
              var suffix = options2.suffix;
              if (typeof suffix !== "string") suffix = defaultSuffix;
              var filter = options2.filter;
              if (typeof filter !== "function") filter = defaultFilter;
              var promisifier = options2.promisifier;
              if (typeof promisifier !== "function") promisifier = makeNodePromisified;
              if (!util.isIdentifier(suffix)) {
                throw new RangeError("suffix must be a valid identifier\n\n    See http://goo.gl/MqrFmX\n");
              }
              var keys = util.inheritedDataKeys(target);
              for (var i = 0; i < keys.length; ++i) {
                var value = target[keys[i]];
                if (keys[i] !== "constructor" && util.isClass(value)) {
                  promisifyAll(
                    value.prototype,
                    suffix,
                    filter,
                    promisifier,
                    multiArgs
                  );
                  promisifyAll(value, suffix, filter, promisifier, multiArgs);
                }
              }
              return promisifyAll(target, suffix, filter, promisifier, multiArgs);
            };
          };
        }, { "./errors": 50, "./nodeback": 58, "./util": 74 }], 63: [function(require2, module2, exports2) {
          "use strict";
          module2.exports = function(Promise2, PromiseArray, tryConvertToPromise, apiRejection) {
            var util = require2("./util");
            var isObject2 = util.isObject;
            var es52 = require2("./es5");
            var Es6Map;
            if (typeof Map === "function") Es6Map = Map;
            var mapToEntries = /* @__PURE__ */ function() {
              var index = 0;
              var size = 0;
              function extractEntry(value, key) {
                this[index] = value;
                this[index + size] = key;
                index++;
              }
              return function mapToEntries2(map) {
                size = map.size;
                index = 0;
                var ret2 = new Array(map.size * 2);
                map.forEach(extractEntry, ret2);
                return ret2;
              };
            }();
            var entriesToMap = function(entries) {
              var ret2 = new Es6Map();
              var length = entries.length / 2 | 0;
              for (var i = 0; i < length; ++i) {
                var key = entries[length + i];
                var value = entries[i];
                ret2.set(key, value);
              }
              return ret2;
            };
            function PropertiesPromiseArray(obj2) {
              var isMap = false;
              var entries;
              if (Es6Map !== void 0 && obj2 instanceof Es6Map) {
                entries = mapToEntries(obj2);
                isMap = true;
              } else {
                var keys = es52.keys(obj2);
                var len = keys.length;
                entries = new Array(len * 2);
                for (var i = 0; i < len; ++i) {
                  var key = keys[i];
                  entries[i] = obj2[key];
                  entries[i + len] = key;
                }
              }
              this.constructor$(entries);
              this._isMap = isMap;
              this._init$(void 0, -3);
            }
            util.inherits(PropertiesPromiseArray, PromiseArray);
            PropertiesPromiseArray.prototype._init = function() {
            };
            PropertiesPromiseArray.prototype._promiseFulfilled = function(value, index) {
              this._values[index] = value;
              var totalResolved = ++this._totalResolved;
              if (totalResolved >= this._length) {
                var val;
                if (this._isMap) {
                  val = entriesToMap(this._values);
                } else {
                  val = {};
                  var keyOffset = this.length();
                  for (var i = 0, len = this.length(); i < len; ++i) {
                    val[this._values[i + keyOffset]] = this._values[i];
                  }
                }
                this._resolve(val);
                return true;
              }
              return false;
            };
            PropertiesPromiseArray.prototype.shouldCopyValues = function() {
              return false;
            };
            PropertiesPromiseArray.prototype.getActualLength = function(len) {
              return len >> 1;
            };
            function props(promises) {
              var ret2;
              var castValue = tryConvertToPromise(promises);
              if (!isObject2(castValue)) {
                return apiRejection("cannot await properties of a non-object\n\n    See http://goo.gl/MqrFmX\n");
              } else if (castValue instanceof Promise2) {
                ret2 = castValue._then(
                  Promise2.props,
                  void 0,
                  void 0,
                  void 0,
                  void 0
                );
              } else {
                ret2 = new PropertiesPromiseArray(castValue).promise();
              }
              if (castValue instanceof Promise2) {
                ret2._propagateFrom(castValue, 2);
              }
              return ret2;
            }
            Promise2.prototype.props = function() {
              return props(this);
            };
            Promise2.props = function(promises) {
              return props(promises);
            };
          };
        }, { "./es5": 51, "./util": 74 }], 64: [function(require2, module2, exports2) {
          "use strict";
          function arrayMove(src, srcIndex, dst, dstIndex, len) {
            for (var j = 0; j < len; ++j) {
              dst[j + dstIndex] = src[j + srcIndex];
              src[j + srcIndex] = void 0;
            }
          }
          function Queue(capacity) {
            this._capacity = capacity;
            this._length = 0;
            this._front = 0;
          }
          Queue.prototype._willBeOverCapacity = function(size) {
            return this._capacity < size;
          };
          Queue.prototype._pushOne = function(arg) {
            var length = this.length();
            this._checkCapacity(length + 1);
            var i = this._front + length & this._capacity - 1;
            this[i] = arg;
            this._length = length + 1;
          };
          Queue.prototype.push = function(fn, receiver, arg) {
            var length = this.length() + 3;
            if (this._willBeOverCapacity(length)) {
              this._pushOne(fn);
              this._pushOne(receiver);
              this._pushOne(arg);
              return;
            }
            var j = this._front + length - 3;
            this._checkCapacity(length);
            var wrapMask = this._capacity - 1;
            this[j + 0 & wrapMask] = fn;
            this[j + 1 & wrapMask] = receiver;
            this[j + 2 & wrapMask] = arg;
            this._length = length;
          };
          Queue.prototype.shift = function() {
            var front = this._front, ret2 = this[front];
            this[front] = void 0;
            this._front = front + 1 & this._capacity - 1;
            this._length--;
            return ret2;
          };
          Queue.prototype.length = function() {
            return this._length;
          };
          Queue.prototype._checkCapacity = function(size) {
            if (this._capacity < size) {
              this._resizeTo(this._capacity << 1);
            }
          };
          Queue.prototype._resizeTo = function(capacity) {
            var oldCapacity = this._capacity;
            this._capacity = capacity;
            var front = this._front;
            var length = this._length;
            var moveItemsCount = front + length & oldCapacity - 1;
            arrayMove(this, 0, this, oldCapacity, moveItemsCount);
          };
          module2.exports = Queue;
        }, {}], 65: [function(require2, module2, exports2) {
          "use strict";
          module2.exports = function(Promise2, INTERNAL, tryConvertToPromise, apiRejection) {
            var util = require2("./util");
            var raceLater = function(promise) {
              return promise.then(function(array) {
                return race(array, promise);
              });
            };
            function race(promises, parent) {
              var maybePromise = tryConvertToPromise(promises);
              if (maybePromise instanceof Promise2) {
                return raceLater(maybePromise);
              } else {
                promises = util.asArray(promises);
                if (promises === null)
                  return apiRejection("expecting an array or an iterable object but got " + util.classString(promises));
              }
              var ret2 = new Promise2(INTERNAL);
              if (parent !== void 0) {
                ret2._propagateFrom(parent, 3);
              }
              var fulfill = ret2._fulfill;
              var reject = ret2._reject;
              for (var i = 0, len = promises.length; i < len; ++i) {
                var val = promises[i];
                if (val === void 0 && !(i in promises)) {
                  continue;
                }
                Promise2.cast(val)._then(fulfill, reject, void 0, ret2, null);
              }
              return ret2;
            }
            Promise2.race = function(promises) {
              return race(promises, void 0);
            };
            Promise2.prototype.race = function() {
              return race(this, void 0);
            };
          };
        }, { "./util": 74 }], 66: [function(require2, module2, exports2) {
          "use strict";
          module2.exports = function(Promise2, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug) {
            var getDomain = Promise2._getDomain;
            var util = require2("./util");
            var tryCatch2 = util.tryCatch;
            function ReductionPromiseArray(promises, fn, initialValue, _each) {
              this.constructor$(promises);
              var domain = getDomain();
              this._fn = domain === null ? fn : util.domainBind(domain, fn);
              if (initialValue !== void 0) {
                initialValue = Promise2.resolve(initialValue);
                initialValue._attachCancellationCallback(this);
              }
              this._initialValue = initialValue;
              this._currentCancellable = null;
              if (_each === INTERNAL) {
                this._eachValues = Array(this._length);
              } else if (_each === 0) {
                this._eachValues = null;
              } else {
                this._eachValues = void 0;
              }
              this._promise._captureStackTrace();
              this._init$(void 0, -5);
            }
            util.inherits(ReductionPromiseArray, PromiseArray);
            ReductionPromiseArray.prototype._gotAccum = function(accum) {
              if (this._eachValues !== void 0 && this._eachValues !== null && accum !== INTERNAL) {
                this._eachValues.push(accum);
              }
            };
            ReductionPromiseArray.prototype._eachComplete = function(value) {
              if (this._eachValues !== null) {
                this._eachValues.push(value);
              }
              return this._eachValues;
            };
            ReductionPromiseArray.prototype._init = function() {
            };
            ReductionPromiseArray.prototype._resolveEmptyArray = function() {
              this._resolve(this._eachValues !== void 0 ? this._eachValues : this._initialValue);
            };
            ReductionPromiseArray.prototype.shouldCopyValues = function() {
              return false;
            };
            ReductionPromiseArray.prototype._resolve = function(value) {
              this._promise._resolveCallback(value);
              this._values = null;
            };
            ReductionPromiseArray.prototype._resultCancelled = function(sender) {
              if (sender === this._initialValue) return this._cancel();
              if (this._isResolved()) return;
              this._resultCancelled$();
              if (this._currentCancellable instanceof Promise2) {
                this._currentCancellable.cancel();
              }
              if (this._initialValue instanceof Promise2) {
                this._initialValue.cancel();
              }
            };
            ReductionPromiseArray.prototype._iterate = function(values) {
              this._values = values;
              var value;
              var i;
              var length = values.length;
              if (this._initialValue !== void 0) {
                value = this._initialValue;
                i = 0;
              } else {
                value = Promise2.resolve(values[0]);
                i = 1;
              }
              this._currentCancellable = value;
              if (!value.isRejected()) {
                for (; i < length; ++i) {
                  var ctx = {
                    accum: null,
                    value: values[i],
                    index: i,
                    length,
                    array: this
                  };
                  value = value._then(gotAccum, void 0, void 0, ctx, void 0);
                }
              }
              if (this._eachValues !== void 0) {
                value = value._then(this._eachComplete, void 0, void 0, this, void 0);
              }
              value._then(completed, completed, void 0, value, this);
            };
            Promise2.prototype.reduce = function(fn, initialValue) {
              return reduce(this, fn, initialValue, null);
            };
            Promise2.reduce = function(promises, fn, initialValue, _each) {
              return reduce(promises, fn, initialValue, _each);
            };
            function completed(valueOrReason, array) {
              if (this.isFulfilled()) {
                array._resolve(valueOrReason);
              } else {
                array._reject(valueOrReason);
              }
            }
            function reduce(promises, fn, initialValue, _each) {
              if (typeof fn !== "function") {
                return apiRejection("expecting a function but got " + util.classString(fn));
              }
              var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
              return array.promise();
            }
            function gotAccum(accum) {
              this.accum = accum;
              this.array._gotAccum(accum);
              var value = tryConvertToPromise(this.value, this.array._promise);
              if (value instanceof Promise2) {
                this.array._currentCancellable = value;
                return value._then(gotValue, void 0, void 0, this, void 0);
              } else {
                return gotValue.call(this, value);
              }
            }
            function gotValue(value) {
              var array = this.array;
              var promise = array._promise;
              var fn = tryCatch2(array._fn);
              promise._pushContext();
              var ret2;
              if (array._eachValues !== void 0) {
                ret2 = fn.call(promise._boundValue(), value, this.index, this.length);
              } else {
                ret2 = fn.call(
                  promise._boundValue(),
                  this.accum,
                  value,
                  this.index,
                  this.length
                );
              }
              if (ret2 instanceof Promise2) {
                array._currentCancellable = ret2;
              }
              var promiseCreated = promise._popContext();
              debug.checkForgottenReturns(
                ret2,
                promiseCreated,
                array._eachValues !== void 0 ? "Promise.each" : "Promise.reduce",
                promise
              );
              return ret2;
            }
          };
        }, { "./util": 74 }], 67: [function(require2, module2, exports2) {
          (function(process2, global2) {
            "use strict";
            var util = require2("./util");
            var schedule;
            var noAsyncScheduler = function() {
              throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n");
            };
            var NativePromise = util.getNativePromise();
            if (util.isNode && typeof MutationObserver === "undefined") {
              var GlobalSetImmediate = global2.setImmediate;
              var ProcessNextTick = process2.nextTick;
              schedule = util.isRecentNode ? function(fn) {
                GlobalSetImmediate.call(global2, fn);
              } : function(fn) {
                ProcessNextTick.call(process2, fn);
              };
            } else if (typeof NativePromise === "function" && typeof NativePromise.resolve === "function") {
              var nativePromise = NativePromise.resolve();
              schedule = function(fn) {
                nativePromise.then(fn);
              };
            } else if (typeof MutationObserver !== "undefined" && !(typeof window !== "undefined" && window.navigator && (window.navigator.standalone || window.cordova))) {
              schedule = function() {
                var div = document.createElement("div");
                var opts = { attributes: true };
                var toggleScheduled = false;
                var div2 = document.createElement("div");
                var o2 = new MutationObserver(function() {
                  div.classList.toggle("foo");
                  toggleScheduled = false;
                });
                o2.observe(div2, opts);
                var scheduleToggle = function() {
                  if (toggleScheduled) return;
                  toggleScheduled = true;
                  div2.classList.toggle("foo");
                };
                return function schedule2(fn) {
                  var o = new MutationObserver(function() {
                    o.disconnect();
                    fn();
                  });
                  o.observe(div, opts);
                  scheduleToggle();
                };
              }();
            } else if (typeof setImmediate !== "undefined") {
              schedule = function(fn) {
                setImmediate(fn);
              };
            } else if (typeof setTimeout !== "undefined") {
              schedule = function(fn) {
                setTimeout(fn, 0);
              };
            } else {
              schedule = noAsyncScheduler;
            }
            module2.exports = schedule;
          }).call(this, require2("_process"), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        }, { "./util": 74, "_process": 139 }], 68: [function(require2, module2, exports2) {
          "use strict";
          module2.exports = function(Promise2, PromiseArray, debug) {
            var PromiseInspection = Promise2.PromiseInspection;
            var util = require2("./util");
            function SettledPromiseArray(values) {
              this.constructor$(values);
            }
            util.inherits(SettledPromiseArray, PromiseArray);
            SettledPromiseArray.prototype._promiseResolved = function(index, inspection) {
              this._values[index] = inspection;
              var totalResolved = ++this._totalResolved;
              if (totalResolved >= this._length) {
                this._resolve(this._values);
                return true;
              }
              return false;
            };
            SettledPromiseArray.prototype._promiseFulfilled = function(value, index) {
              var ret2 = new PromiseInspection();
              ret2._bitField = 33554432;
              ret2._settledValueField = value;
              return this._promiseResolved(index, ret2);
            };
            SettledPromiseArray.prototype._promiseRejected = function(reason, index) {
              var ret2 = new PromiseInspection();
              ret2._bitField = 16777216;
              ret2._settledValueField = reason;
              return this._promiseResolved(index, ret2);
            };
            Promise2.settle = function(promises) {
              debug.deprecated(".settle()", ".reflect()");
              return new SettledPromiseArray(promises).promise();
            };
            Promise2.prototype.settle = function() {
              return Promise2.settle(this);
            };
          };
        }, { "./util": 74 }], 69: [function(require2, module2, exports2) {
          "use strict";
          module2.exports = function(Promise2, PromiseArray, apiRejection) {
            var util = require2("./util");
            var RangeError2 = require2("./errors").RangeError;
            var AggregateError = require2("./errors").AggregateError;
            var isArray = util.isArray;
            var CANCELLATION = {};
            function SomePromiseArray(values) {
              this.constructor$(values);
              this._howMany = 0;
              this._unwrap = false;
              this._initialized = false;
            }
            util.inherits(SomePromiseArray, PromiseArray);
            SomePromiseArray.prototype._init = function() {
              if (!this._initialized) {
                return;
              }
              if (this._howMany === 0) {
                this._resolve([]);
                return;
              }
              this._init$(void 0, -5);
              var isArrayResolved = isArray(this._values);
              if (!this._isResolved() && isArrayResolved && this._howMany > this._canPossiblyFulfill()) {
                this._reject(this._getRangeError(this.length()));
              }
            };
            SomePromiseArray.prototype.init = function() {
              this._initialized = true;
              this._init();
            };
            SomePromiseArray.prototype.setUnwrap = function() {
              this._unwrap = true;
            };
            SomePromiseArray.prototype.howMany = function() {
              return this._howMany;
            };
            SomePromiseArray.prototype.setHowMany = function(count) {
              this._howMany = count;
            };
            SomePromiseArray.prototype._promiseFulfilled = function(value) {
              this._addFulfilled(value);
              if (this._fulfilled() === this.howMany()) {
                this._values.length = this.howMany();
                if (this.howMany() === 1 && this._unwrap) {
                  this._resolve(this._values[0]);
                } else {
                  this._resolve(this._values);
                }
                return true;
              }
              return false;
            };
            SomePromiseArray.prototype._promiseRejected = function(reason) {
              this._addRejected(reason);
              return this._checkOutcome();
            };
            SomePromiseArray.prototype._promiseCancelled = function() {
              if (this._values instanceof Promise2 || this._values == null) {
                return this._cancel();
              }
              this._addRejected(CANCELLATION);
              return this._checkOutcome();
            };
            SomePromiseArray.prototype._checkOutcome = function() {
              if (this.howMany() > this._canPossiblyFulfill()) {
                var e = new AggregateError();
                for (var i = this.length(); i < this._values.length; ++i) {
                  if (this._values[i] !== CANCELLATION) {
                    e.push(this._values[i]);
                  }
                }
                if (e.length > 0) {
                  this._reject(e);
                } else {
                  this._cancel();
                }
                return true;
              }
              return false;
            };
            SomePromiseArray.prototype._fulfilled = function() {
              return this._totalResolved;
            };
            SomePromiseArray.prototype._rejected = function() {
              return this._values.length - this.length();
            };
            SomePromiseArray.prototype._addRejected = function(reason) {
              this._values.push(reason);
            };
            SomePromiseArray.prototype._addFulfilled = function(value) {
              this._values[this._totalResolved++] = value;
            };
            SomePromiseArray.prototype._canPossiblyFulfill = function() {
              return this.length() - this._rejected();
            };
            SomePromiseArray.prototype._getRangeError = function(count) {
              var message = "Input array must contain at least " + this._howMany + " items but contains only " + count + " items";
              return new RangeError2(message);
            };
            SomePromiseArray.prototype._resolveEmptyArray = function() {
              this._reject(this._getRangeError(0));
            };
            function some(promises, howMany) {
              if ((howMany | 0) !== howMany || howMany < 0) {
                return apiRejection("expecting a positive integer\n\n    See http://goo.gl/MqrFmX\n");
              }
              var ret2 = new SomePromiseArray(promises);
              var promise = ret2.promise();
              ret2.setHowMany(howMany);
              ret2.init();
              return promise;
            }
            Promise2.some = function(promises, howMany) {
              return some(promises, howMany);
            };
            Promise2.prototype.some = function(howMany) {
              return some(this, howMany);
            };
            Promise2._SomePromiseArray = SomePromiseArray;
          };
        }, { "./errors": 50, "./util": 74 }], 70: [function(require2, module2, exports2) {
          "use strict";
          module2.exports = function(Promise2) {
            function PromiseInspection(promise) {
              if (promise !== void 0) {
                promise = promise._target();
                this._bitField = promise._bitField;
                this._settledValueField = promise._isFateSealed() ? promise._settledValue() : void 0;
              } else {
                this._bitField = 0;
                this._settledValueField = void 0;
              }
            }
            PromiseInspection.prototype._settledValue = function() {
              return this._settledValueField;
            };
            var value = PromiseInspection.prototype.value = function() {
              if (!this.isFulfilled()) {
                throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\n\n    See http://goo.gl/MqrFmX\n");
              }
              return this._settledValue();
            };
            var reason = PromiseInspection.prototype.error = PromiseInspection.prototype.reason = function() {
              if (!this.isRejected()) {
                throw new TypeError("cannot get rejection reason of a non-rejected promise\n\n    See http://goo.gl/MqrFmX\n");
              }
              return this._settledValue();
            };
            var isFulfilled = PromiseInspection.prototype.isFulfilled = function() {
              return (this._bitField & 33554432) !== 0;
            };
            var isRejected = PromiseInspection.prototype.isRejected = function() {
              return (this._bitField & 16777216) !== 0;
            };
            var isPending = PromiseInspection.prototype.isPending = function() {
              return (this._bitField & 50397184) === 0;
            };
            var isResolved = PromiseInspection.prototype.isResolved = function() {
              return (this._bitField & 50331648) !== 0;
            };
            PromiseInspection.prototype.isCancelled = function() {
              return (this._bitField & 8454144) !== 0;
            };
            Promise2.prototype.__isCancelled = function() {
              return (this._bitField & 65536) === 65536;
            };
            Promise2.prototype._isCancelled = function() {
              return this._target().__isCancelled();
            };
            Promise2.prototype.isCancelled = function() {
              return (this._target()._bitField & 8454144) !== 0;
            };
            Promise2.prototype.isPending = function() {
              return isPending.call(this._target());
            };
            Promise2.prototype.isRejected = function() {
              return isRejected.call(this._target());
            };
            Promise2.prototype.isFulfilled = function() {
              return isFulfilled.call(this._target());
            };
            Promise2.prototype.isResolved = function() {
              return isResolved.call(this._target());
            };
            Promise2.prototype.value = function() {
              return value.call(this._target());
            };
            Promise2.prototype.reason = function() {
              var target = this._target();
              target._unsetRejectionIsUnhandled();
              return reason.call(target);
            };
            Promise2.prototype._value = function() {
              return this._settledValue();
            };
            Promise2.prototype._reason = function() {
              this._unsetRejectionIsUnhandled();
              return this._settledValue();
            };
            Promise2.PromiseInspection = PromiseInspection;
          };
        }, {}], 71: [function(require2, module2, exports2) {
          "use strict";
          module2.exports = function(Promise2, INTERNAL) {
            var util = require2("./util");
            var errorObj2 = util.errorObj;
            var isObject2 = util.isObject;
            function tryConvertToPromise(obj2, context) {
              if (isObject2(obj2)) {
                if (obj2 instanceof Promise2) return obj2;
                var then = getThen(obj2);
                if (then === errorObj2) {
                  if (context) context._pushContext();
                  var ret2 = Promise2.reject(then.e);
                  if (context) context._popContext();
                  return ret2;
                } else if (typeof then === "function") {
                  if (isAnyBluebirdPromise(obj2)) {
                    var ret2 = new Promise2(INTERNAL);
                    obj2._then(
                      ret2._fulfill,
                      ret2._reject,
                      void 0,
                      ret2,
                      null
                    );
                    return ret2;
                  }
                  return doThenable(obj2, then, context);
                }
              }
              return obj2;
            }
            function doGetThen(obj2) {
              return obj2.then;
            }
            function getThen(obj2) {
              try {
                return doGetThen(obj2);
              } catch (e) {
                errorObj2.e = e;
                return errorObj2;
              }
            }
            var hasProp = {}.hasOwnProperty;
            function isAnyBluebirdPromise(obj2) {
              try {
                return hasProp.call(obj2, "_promise0");
              } catch (e) {
                return false;
              }
            }
            function doThenable(x, then, context) {
              var promise = new Promise2(INTERNAL);
              var ret2 = promise;
              if (context) context._pushContext();
              promise._captureStackTrace();
              if (context) context._popContext();
              var synchronous = true;
              var result = util.tryCatch(then).call(x, resolve, reject);
              synchronous = false;
              if (promise && result === errorObj2) {
                promise._rejectCallback(result.e, true, true);
                promise = null;
              }
              function resolve(value) {
                if (!promise) return;
                promise._resolveCallback(value);
                promise = null;
              }
              function reject(reason) {
                if (!promise) return;
                promise._rejectCallback(reason, synchronous, true);
                promise = null;
              }
              return ret2;
            }
            return tryConvertToPromise;
          };
        }, { "./util": 74 }], 72: [function(require2, module2, exports2) {
          "use strict";
          module2.exports = function(Promise2, INTERNAL, debug) {
            var util = require2("./util");
            var TimeoutError = Promise2.TimeoutError;
            function HandleWrapper(handle) {
              this.handle = handle;
            }
            HandleWrapper.prototype._resultCancelled = function() {
              clearTimeout(this.handle);
            };
            var afterValue = function(value) {
              return delay(+this).thenReturn(value);
            };
            var delay = Promise2.delay = function(ms, value) {
              var ret2;
              var handle;
              if (value !== void 0) {
                ret2 = Promise2.resolve(value)._then(afterValue, null, null, ms, void 0);
                if (debug.cancellation() && value instanceof Promise2) {
                  ret2._setOnCancel(value);
                }
              } else {
                ret2 = new Promise2(INTERNAL);
                handle = setTimeout(function() {
                  ret2._fulfill();
                }, +ms);
                if (debug.cancellation()) {
                  ret2._setOnCancel(new HandleWrapper(handle));
                }
                ret2._captureStackTrace();
              }
              ret2._setAsyncGuaranteed();
              return ret2;
            };
            Promise2.prototype.delay = function(ms) {
              return delay(ms, this);
            };
            var afterTimeout = function(promise, message, parent) {
              var err;
              if (typeof message !== "string") {
                if (message instanceof Error) {
                  err = message;
                } else {
                  err = new TimeoutError("operation timed out");
                }
              } else {
                err = new TimeoutError(message);
              }
              util.markAsOriginatingFromRejection(err);
              promise._attachExtraTrace(err);
              promise._reject(err);
              if (parent != null) {
                parent.cancel();
              }
            };
            function successClear(value) {
              clearTimeout(this.handle);
              return value;
            }
            function failureClear(reason) {
              clearTimeout(this.handle);
              throw reason;
            }
            Promise2.prototype.timeout = function(ms, message) {
              ms = +ms;
              var ret2, parent;
              var handleWrapper = new HandleWrapper(setTimeout(function timeoutTimeout() {
                if (ret2.isPending()) {
                  afterTimeout(ret2, message, parent);
                }
              }, ms));
              if (debug.cancellation()) {
                parent = this.then();
                ret2 = parent._then(
                  successClear,
                  failureClear,
                  void 0,
                  handleWrapper,
                  void 0
                );
                ret2._setOnCancel(handleWrapper);
              } else {
                ret2 = this._then(
                  successClear,
                  failureClear,
                  void 0,
                  handleWrapper,
                  void 0
                );
              }
              return ret2;
            };
          };
        }, { "./util": 74 }], 73: [function(require2, module2, exports2) {
          "use strict";
          module2.exports = function(Promise2, apiRejection, tryConvertToPromise, createContext, INTERNAL, debug) {
            var util = require2("./util");
            var TypeError2 = require2("./errors").TypeError;
            var inherits2 = require2("./util").inherits;
            var errorObj2 = util.errorObj;
            var tryCatch2 = util.tryCatch;
            var NULL = {};
            function thrower2(e) {
              setTimeout(function() {
                throw e;
              }, 0);
            }
            function castPreservingDisposable(thenable) {
              var maybePromise = tryConvertToPromise(thenable);
              if (maybePromise !== thenable && typeof thenable._isDisposable === "function" && typeof thenable._getDisposer === "function" && thenable._isDisposable()) {
                maybePromise._setDisposable(thenable._getDisposer());
              }
              return maybePromise;
            }
            function dispose(resources, inspection) {
              var i = 0;
              var len = resources.length;
              var ret2 = new Promise2(INTERNAL);
              function iterator() {
                if (i >= len) return ret2._fulfill();
                var maybePromise = castPreservingDisposable(resources[i++]);
                if (maybePromise instanceof Promise2 && maybePromise._isDisposable()) {
                  try {
                    maybePromise = tryConvertToPromise(
                      maybePromise._getDisposer().tryDispose(inspection),
                      resources.promise
                    );
                  } catch (e) {
                    return thrower2(e);
                  }
                  if (maybePromise instanceof Promise2) {
                    return maybePromise._then(
                      iterator,
                      thrower2,
                      null,
                      null,
                      null
                    );
                  }
                }
                iterator();
              }
              iterator();
              return ret2;
            }
            function Disposer(data, promise, context) {
              this._data = data;
              this._promise = promise;
              this._context = context;
            }
            Disposer.prototype.data = function() {
              return this._data;
            };
            Disposer.prototype.promise = function() {
              return this._promise;
            };
            Disposer.prototype.resource = function() {
              if (this.promise().isFulfilled()) {
                return this.promise().value();
              }
              return NULL;
            };
            Disposer.prototype.tryDispose = function(inspection) {
              var resource = this.resource();
              var context = this._context;
              if (context !== void 0) context._pushContext();
              var ret2 = resource !== NULL ? this.doDispose(resource, inspection) : null;
              if (context !== void 0) context._popContext();
              this._promise._unsetDisposable();
              this._data = null;
              return ret2;
            };
            Disposer.isDisposer = function(d) {
              return d != null && typeof d.resource === "function" && typeof d.tryDispose === "function";
            };
            function FunctionDisposer(fn, promise, context) {
              this.constructor$(fn, promise, context);
            }
            inherits2(FunctionDisposer, Disposer);
            FunctionDisposer.prototype.doDispose = function(resource, inspection) {
              var fn = this.data();
              return fn.call(resource, resource, inspection);
            };
            function maybeUnwrapDisposer(value) {
              if (Disposer.isDisposer(value)) {
                this.resources[this.index]._setDisposable(value);
                return value.promise();
              }
              return value;
            }
            function ResourceList(length) {
              this.length = length;
              this.promise = null;
              this[length - 1] = null;
            }
            ResourceList.prototype._resultCancelled = function() {
              var len = this.length;
              for (var i = 0; i < len; ++i) {
                var item = this[i];
                if (item instanceof Promise2) {
                  item.cancel();
                }
              }
            };
            Promise2.using = function() {
              var len = arguments.length;
              if (len < 2) return apiRejection(
                "you must pass at least 2 arguments to Promise.using"
              );
              var fn = arguments[len - 1];
              if (typeof fn !== "function") {
                return apiRejection("expecting a function but got " + util.classString(fn));
              }
              var input;
              var spreadArgs = true;
              if (len === 2 && Array.isArray(arguments[0])) {
                input = arguments[0];
                len = input.length;
                spreadArgs = false;
              } else {
                input = arguments;
                len--;
              }
              var resources = new ResourceList(len);
              for (var i = 0; i < len; ++i) {
                var resource = input[i];
                if (Disposer.isDisposer(resource)) {
                  var disposer = resource;
                  resource = resource.promise();
                  resource._setDisposable(disposer);
                } else {
                  var maybePromise = tryConvertToPromise(resource);
                  if (maybePromise instanceof Promise2) {
                    resource = maybePromise._then(maybeUnwrapDisposer, null, null, {
                      resources,
                      index: i
                    }, void 0);
                  }
                }
                resources[i] = resource;
              }
              var reflectedResources = new Array(resources.length);
              for (var i = 0; i < reflectedResources.length; ++i) {
                reflectedResources[i] = Promise2.resolve(resources[i]).reflect();
              }
              var resultPromise = Promise2.all(reflectedResources).then(function(inspections) {
                for (var i2 = 0; i2 < inspections.length; ++i2) {
                  var inspection = inspections[i2];
                  if (inspection.isRejected()) {
                    errorObj2.e = inspection.error();
                    return errorObj2;
                  } else if (!inspection.isFulfilled()) {
                    resultPromise.cancel();
                    return;
                  }
                  inspections[i2] = inspection.value();
                }
                promise._pushContext();
                fn = tryCatch2(fn);
                var ret2 = spreadArgs ? fn.apply(void 0, inspections) : fn(inspections);
                var promiseCreated = promise._popContext();
                debug.checkForgottenReturns(
                  ret2,
                  promiseCreated,
                  "Promise.using",
                  promise
                );
                return ret2;
              });
              var promise = resultPromise.lastly(function() {
                var inspection = new Promise2.PromiseInspection(resultPromise);
                return dispose(resources, inspection);
              });
              resources.promise = promise;
              promise._setOnCancel(resources);
              return promise;
            };
            Promise2.prototype._setDisposable = function(disposer) {
              this._bitField = this._bitField | 131072;
              this._disposer = disposer;
            };
            Promise2.prototype._isDisposable = function() {
              return (this._bitField & 131072) > 0;
            };
            Promise2.prototype._getDisposer = function() {
              return this._disposer;
            };
            Promise2.prototype._unsetDisposable = function() {
              this._bitField = this._bitField & ~131072;
              this._disposer = void 0;
            };
            Promise2.prototype.disposer = function(fn) {
              if (typeof fn === "function") {
                return new FunctionDisposer(fn, this, createContext());
              }
              throw new TypeError2();
            };
          };
        }, { "./errors": 50, "./util": 74 }], 74: [function(require, module, exports) {
          (function(process, global) {
            "use strict";
            var es5 = require("./es5");
            var canEvaluate = typeof navigator == "undefined";
            var errorObj = { e: {} };
            var tryCatchTarget;
            var globalObject = typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : this !== void 0 ? this : null;
            function tryCatcher() {
              try {
                var target = tryCatchTarget;
                tryCatchTarget = null;
                return target.apply(this, arguments);
              } catch (e) {
                errorObj.e = e;
                return errorObj;
              }
            }
            function tryCatch(fn) {
              tryCatchTarget = fn;
              return tryCatcher;
            }
            var inherits = function(Child, Parent) {
              var hasProp = {}.hasOwnProperty;
              function T() {
                this.constructor = Child;
                this.constructor$ = Parent;
                for (var propertyName in Parent.prototype) {
                  if (hasProp.call(Parent.prototype, propertyName) && propertyName.charAt(propertyName.length - 1) !== "$") {
                    this[propertyName + "$"] = Parent.prototype[propertyName];
                  }
                }
              }
              T.prototype = Parent.prototype;
              Child.prototype = new T();
              return Child.prototype;
            };
            function isPrimitive(val) {
              return val == null || val === true || val === false || typeof val === "string" || typeof val === "number";
            }
            function isObject(value) {
              return typeof value === "function" || typeof value === "object" && value !== null;
            }
            function maybeWrapAsError(maybeError) {
              if (!isPrimitive(maybeError)) return maybeError;
              return new Error(safeToString(maybeError));
            }
            function withAppended(target, appendee) {
              var len = target.length;
              var ret2 = new Array(len + 1);
              var i;
              for (i = 0; i < len; ++i) {
                ret2[i] = target[i];
              }
              ret2[i] = appendee;
              return ret2;
            }
            function getDataPropertyOrDefault(obj2, key, defaultValue) {
              if (es5.isES5) {
                var desc = Object.getOwnPropertyDescriptor(obj2, key);
                if (desc != null) {
                  return desc.get == null && desc.set == null ? desc.value : defaultValue;
                }
              } else {
                return {}.hasOwnProperty.call(obj2, key) ? obj2[key] : void 0;
              }
            }
            function notEnumerableProp(obj2, name, value) {
              if (isPrimitive(obj2)) return obj2;
              var descriptor = {
                value,
                configurable: true,
                enumerable: false,
                writable: true
              };
              es5.defineProperty(obj2, name, descriptor);
              return obj2;
            }
            function thrower(r) {
              throw r;
            }
            var inheritedDataKeys = function() {
              var excludedPrototypes = [
                Array.prototype,
                Object.prototype,
                Function.prototype
              ];
              var isExcludedProto = function(val) {
                for (var i = 0; i < excludedPrototypes.length; ++i) {
                  if (excludedPrototypes[i] === val) {
                    return true;
                  }
                }
                return false;
              };
              if (es5.isES5) {
                var getKeys = Object.getOwnPropertyNames;
                return function(obj2) {
                  var ret2 = [];
                  var visitedKeys = /* @__PURE__ */ Object.create(null);
                  while (obj2 != null && !isExcludedProto(obj2)) {
                    var keys;
                    try {
                      keys = getKeys(obj2);
                    } catch (e) {
                      return ret2;
                    }
                    for (var i = 0; i < keys.length; ++i) {
                      var key = keys[i];
                      if (visitedKeys[key]) continue;
                      visitedKeys[key] = true;
                      var desc = Object.getOwnPropertyDescriptor(obj2, key);
                      if (desc != null && desc.get == null && desc.set == null) {
                        ret2.push(key);
                      }
                    }
                    obj2 = es5.getPrototypeOf(obj2);
                  }
                  return ret2;
                };
              } else {
                var hasProp = {}.hasOwnProperty;
                return function(obj2) {
                  if (isExcludedProto(obj2)) return [];
                  var ret2 = [];
                  enumeration: for (var key in obj2) {
                    if (hasProp.call(obj2, key)) {
                      ret2.push(key);
                    } else {
                      for (var i = 0; i < excludedPrototypes.length; ++i) {
                        if (hasProp.call(excludedPrototypes[i], key)) {
                          continue enumeration;
                        }
                      }
                      ret2.push(key);
                    }
                  }
                  return ret2;
                };
              }
            }();
            var thisAssignmentPattern = /this\s*\.\s*\S+\s*=/;
            function isClass(fn) {
              try {
                if (typeof fn === "function") {
                  var keys = es5.names(fn.prototype);
                  var hasMethods = es5.isES5 && keys.length > 1;
                  var hasMethodsOtherThanConstructor = keys.length > 0 && !(keys.length === 1 && keys[0] === "constructor");
                  var hasThisAssignmentAndStaticMethods = thisAssignmentPattern.test(fn + "") && es5.names(fn).length > 0;
                  if (hasMethods || hasMethodsOtherThanConstructor || hasThisAssignmentAndStaticMethods) {
                    return true;
                  }
                }
                return false;
              } catch (e) {
                return false;
              }
            }
            function toFastProperties(obj) {
              function FakeConstructor() {
              }
              FakeConstructor.prototype = obj;
              var l = 8;
              while (l--) new FakeConstructor();
              return obj;
              eval(obj);
            }
            var rident = /^[a-z$_][a-z$_0-9]*$/i;
            function isIdentifier(str) {
              return rident.test(str);
            }
            function filledRange(count, prefix, suffix) {
              var ret2 = new Array(count);
              for (var i = 0; i < count; ++i) {
                ret2[i] = prefix + i + suffix;
              }
              return ret2;
            }
            function safeToString(obj2) {
              try {
                return obj2 + "";
              } catch (e) {
                return "[no string representation]";
              }
            }
            function isError(obj2) {
              return obj2 !== null && typeof obj2 === "object" && typeof obj2.message === "string" && typeof obj2.name === "string";
            }
            function markAsOriginatingFromRejection(e) {
              try {
                notEnumerableProp(e, "isOperational", true);
              } catch (ignore) {
              }
            }
            function originatesFromRejection(e) {
              if (e == null) return false;
              return e instanceof Error["__BluebirdErrorTypes__"].OperationalError || e["isOperational"] === true;
            }
            function canAttachTrace(obj2) {
              return isError(obj2) && es5.propertyIsWritable(obj2, "stack");
            }
            var ensureErrorObject = function() {
              if (!("stack" in new Error())) {
                return function(value) {
                  if (canAttachTrace(value)) return value;
                  try {
                    throw new Error(safeToString(value));
                  } catch (err) {
                    return err;
                  }
                };
              } else {
                return function(value) {
                  if (canAttachTrace(value)) return value;
                  return new Error(safeToString(value));
                };
              }
            }();
            function classString(obj2) {
              return {}.toString.call(obj2);
            }
            function copyDescriptors(from, to, filter) {
              var keys = es5.names(from);
              for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];
                if (filter(key)) {
                  try {
                    es5.defineProperty(to, key, es5.getDescriptor(from, key));
                  } catch (ignore) {
                  }
                }
              }
            }
            var asArray = function(v) {
              if (es5.isArray(v)) {
                return v;
              }
              return null;
            };
            if (typeof Symbol !== "undefined" && Symbol.iterator) {
              var ArrayFrom = typeof Array.from === "function" ? function(v) {
                return Array.from(v);
              } : function(v) {
                var ret2 = [];
                var it = v[Symbol.iterator]();
                var itResult;
                while (!(itResult = it.next()).done) {
                  ret2.push(itResult.value);
                }
                return ret2;
              };
              asArray = function(v) {
                if (es5.isArray(v)) {
                  return v;
                } else if (v != null && typeof v[Symbol.iterator] === "function") {
                  return ArrayFrom(v);
                }
                return null;
              };
            }
            var isNode = typeof process !== "undefined" && classString(process).toLowerCase() === "[object process]";
            var hasEnvVariables = typeof process !== "undefined" && typeof process.env !== "undefined";
            function env(key) {
              return hasEnvVariables ? process.env[key] : void 0;
            }
            function getNativePromise() {
              if (typeof Promise === "function") {
                try {
                  var promise = new Promise(function() {
                  });
                  if ({}.toString.call(promise) === "[object Promise]") {
                    return Promise;
                  }
                } catch (e) {
                }
              }
            }
            function domainBind(self2, cb) {
              return self2.bind(cb);
            }
            var ret = {
              isClass,
              isIdentifier,
              inheritedDataKeys,
              getDataPropertyOrDefault,
              thrower,
              isArray: es5.isArray,
              asArray,
              notEnumerableProp,
              isPrimitive,
              isObject,
              isError,
              canEvaluate,
              errorObj,
              tryCatch,
              inherits,
              withAppended,
              maybeWrapAsError,
              toFastProperties,
              filledRange,
              toString: safeToString,
              canAttachTrace,
              ensureErrorObject,
              originatesFromRejection,
              markAsOriginatingFromRejection,
              classString,
              copyDescriptors,
              hasDevTools: typeof chrome !== "undefined" && chrome && typeof chrome.loadTimes === "function",
              isNode,
              hasEnvVariables,
              env,
              global: globalObject,
              getNativePromise,
              domainBind
            };
            ret.isRecentNode = ret.isNode && function() {
              var version = process.versions.node.split(".").map(Number);
              return version[0] === 0 && version[1] > 10 || version[0] > 0;
            }();
            if (ret.isNode) ret.toFastProperties(process);
            try {
              throw new Error();
            } catch (e) {
              ret.lastLineError = e;
            }
            module.exports = ret;
          }).call(this, require("_process"), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        }, { "./es5": 51, "_process": 139 }], 75: [function(require2, module2, exports2) {
        }, {}], 76: [function(require2, module2, exports2) {
          (function(global2) {
            "use strict";
            var buffer = require2("buffer");
            var Buffer3 = buffer.Buffer;
            var SlowBuffer = buffer.SlowBuffer;
            var MAX_LEN = buffer.kMaxLength || 2147483647;
            exports2.alloc = function alloc(size, fill, encoding) {
              if (typeof Buffer3.alloc === "function") {
                return Buffer3.alloc(size, fill, encoding);
              }
              if (typeof encoding === "number") {
                throw new TypeError("encoding must not be number");
              }
              if (typeof size !== "number") {
                throw new TypeError("size must be a number");
              }
              if (size > MAX_LEN) {
                throw new RangeError("size is too large");
              }
              var enc = encoding;
              var _fill = fill;
              if (_fill === void 0) {
                enc = void 0;
                _fill = 0;
              }
              var buf = new Buffer3(size);
              if (typeof _fill === "string") {
                var fillBuf = new Buffer3(_fill, enc);
                var flen = fillBuf.length;
                var i = -1;
                while (++i < size) {
                  buf[i] = fillBuf[i % flen];
                }
              } else {
                buf.fill(_fill);
              }
              return buf;
            };
            exports2.allocUnsafe = function allocUnsafe(size) {
              if (typeof Buffer3.allocUnsafe === "function") {
                return Buffer3.allocUnsafe(size);
              }
              if (typeof size !== "number") {
                throw new TypeError("size must be a number");
              }
              if (size > MAX_LEN) {
                throw new RangeError("size is too large");
              }
              return new Buffer3(size);
            };
            exports2.from = function from(value, encodingOrOffset, length) {
              if (typeof Buffer3.from === "function" && (!global2.Uint8Array || Uint8Array.from !== Buffer3.from)) {
                return Buffer3.from(value, encodingOrOffset, length);
              }
              if (typeof value === "number") {
                throw new TypeError('"value" argument must not be a number');
              }
              if (typeof value === "string") {
                return new Buffer3(value, encodingOrOffset);
              }
              if (typeof ArrayBuffer !== "undefined" && value instanceof ArrayBuffer) {
                var offset = encodingOrOffset;
                if (arguments.length === 1) {
                  return new Buffer3(value);
                }
                if (typeof offset === "undefined") {
                  offset = 0;
                }
                var len = length;
                if (typeof len === "undefined") {
                  len = value.byteLength - offset;
                }
                if (offset >= value.byteLength) {
                  throw new RangeError("'offset' is out of bounds");
                }
                if (len > value.byteLength - offset) {
                  throw new RangeError("'length' is out of bounds");
                }
                return new Buffer3(value.slice(offset, offset + len));
              }
              if (Buffer3.isBuffer(value)) {
                var out = new Buffer3(value.length);
                value.copy(out, 0, 0, value.length);
                return out;
              }
              if (value) {
                if (Array.isArray(value) || typeof ArrayBuffer !== "undefined" && value.buffer instanceof ArrayBuffer || "length" in value) {
                  return new Buffer3(value);
                }
                if (value.type === "Buffer" && Array.isArray(value.data)) {
                  return new Buffer3(value.data);
                }
              }
              throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
            };
            exports2.allocUnsafeSlow = function allocUnsafeSlow(size) {
              if (typeof Buffer3.allocUnsafeSlow === "function") {
                return Buffer3.allocUnsafeSlow(size);
              }
              if (typeof size !== "number") {
                throw new TypeError("size must be a number");
              }
              if (size >= MAX_LEN) {
                throw new RangeError("size is too large");
              }
              return new SlowBuffer(size);
            };
          }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        }, { "buffer": 77 }], 77: [function(require2, module2, exports2) {
          (function(global2) {
            "use strict";
            var base64 = require2("base64-js");
            var ieee754 = require2("ieee754");
            var isArray = require2("isarray");
            exports2.Buffer = Buffer3;
            exports2.SlowBuffer = SlowBuffer;
            exports2.INSPECT_MAX_BYTES = 50;
            Buffer3.TYPED_ARRAY_SUPPORT = global2.TYPED_ARRAY_SUPPORT !== void 0 ? global2.TYPED_ARRAY_SUPPORT : typedArraySupport();
            exports2.kMaxLength = kMaxLength();
            function typedArraySupport() {
              try {
                var arr = new Uint8Array(1);
                arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function() {
                  return 42;
                } };
                return arr.foo() === 42 && // typed array instances can be augmented
                typeof arr.subarray === "function" && // chrome 9-10 lack `subarray`
                arr.subarray(1, 1).byteLength === 0;
              } catch (e) {
                return false;
              }
            }
            function kMaxLength() {
              return Buffer3.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
            }
            function createBuffer(that, length) {
              if (kMaxLength() < length) {
                throw new RangeError("Invalid typed array length");
              }
              if (Buffer3.TYPED_ARRAY_SUPPORT) {
                that = new Uint8Array(length);
                that.__proto__ = Buffer3.prototype;
              } else {
                if (that === null) {
                  that = new Buffer3(length);
                }
                that.length = length;
              }
              return that;
            }
            function Buffer3(arg, encodingOrOffset, length) {
              if (!Buffer3.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer3)) {
                return new Buffer3(arg, encodingOrOffset, length);
              }
              if (typeof arg === "number") {
                if (typeof encodingOrOffset === "string") {
                  throw new Error(
                    "If encoding is specified then the first argument must be a string"
                  );
                }
                return allocUnsafe(this, arg);
              }
              return from(this, arg, encodingOrOffset, length);
            }
            Buffer3.poolSize = 8192;
            Buffer3._augment = function(arr) {
              arr.__proto__ = Buffer3.prototype;
              return arr;
            };
            function from(that, value, encodingOrOffset, length) {
              if (typeof value === "number") {
                throw new TypeError('"value" argument must not be a number');
              }
              if (typeof ArrayBuffer !== "undefined" && value instanceof ArrayBuffer) {
                return fromArrayBuffer(that, value, encodingOrOffset, length);
              }
              if (typeof value === "string") {
                return fromString(that, value, encodingOrOffset);
              }
              return fromObject(that, value);
            }
            Buffer3.from = function(value, encodingOrOffset, length) {
              return from(null, value, encodingOrOffset, length);
            };
            if (Buffer3.TYPED_ARRAY_SUPPORT) {
              Buffer3.prototype.__proto__ = Uint8Array.prototype;
              Buffer3.__proto__ = Uint8Array;
              if (typeof Symbol !== "undefined" && Symbol.species && Buffer3[Symbol.species] === Buffer3) {
                Object.defineProperty(Buffer3, Symbol.species, {
                  value: null,
                  configurable: true
                });
              }
            }
            function assertSize(size) {
              if (typeof size !== "number") {
                throw new TypeError('"size" argument must be a number');
              } else if (size < 0) {
                throw new RangeError('"size" argument must not be negative');
              }
            }
            function alloc(that, size, fill, encoding) {
              assertSize(size);
              if (size <= 0) {
                return createBuffer(that, size);
              }
              if (fill !== void 0) {
                return typeof encoding === "string" ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
              }
              return createBuffer(that, size);
            }
            Buffer3.alloc = function(size, fill, encoding) {
              return alloc(null, size, fill, encoding);
            };
            function allocUnsafe(that, size) {
              assertSize(size);
              that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
              if (!Buffer3.TYPED_ARRAY_SUPPORT) {
                for (var i = 0; i < size; ++i) {
                  that[i] = 0;
                }
              }
              return that;
            }
            Buffer3.allocUnsafe = function(size) {
              return allocUnsafe(null, size);
            };
            Buffer3.allocUnsafeSlow = function(size) {
              return allocUnsafe(null, size);
            };
            function fromString(that, string, encoding) {
              if (typeof encoding !== "string" || encoding === "") {
                encoding = "utf8";
              }
              if (!Buffer3.isEncoding(encoding)) {
                throw new TypeError('"encoding" must be a valid string encoding');
              }
              var length = byteLength(string, encoding) | 0;
              that = createBuffer(that, length);
              var actual = that.write(string, encoding);
              if (actual !== length) {
                that = that.slice(0, actual);
              }
              return that;
            }
            function fromArrayLike(that, array) {
              var length = array.length < 0 ? 0 : checked(array.length) | 0;
              that = createBuffer(that, length);
              for (var i = 0; i < length; i += 1) {
                that[i] = array[i] & 255;
              }
              return that;
            }
            function fromArrayBuffer(that, array, byteOffset, length) {
              array.byteLength;
              if (byteOffset < 0 || array.byteLength < byteOffset) {
                throw new RangeError("'offset' is out of bounds");
              }
              if (array.byteLength < byteOffset + (length || 0)) {
                throw new RangeError("'length' is out of bounds");
              }
              if (byteOffset === void 0 && length === void 0) {
                array = new Uint8Array(array);
              } else if (length === void 0) {
                array = new Uint8Array(array, byteOffset);
              } else {
                array = new Uint8Array(array, byteOffset, length);
              }
              if (Buffer3.TYPED_ARRAY_SUPPORT) {
                that = array;
                that.__proto__ = Buffer3.prototype;
              } else {
                that = fromArrayLike(that, array);
              }
              return that;
            }
            function fromObject(that, obj2) {
              if (Buffer3.isBuffer(obj2)) {
                var len = checked(obj2.length) | 0;
                that = createBuffer(that, len);
                if (that.length === 0) {
                  return that;
                }
                obj2.copy(that, 0, 0, len);
                return that;
              }
              if (obj2) {
                if (typeof ArrayBuffer !== "undefined" && obj2.buffer instanceof ArrayBuffer || "length" in obj2) {
                  if (typeof obj2.length !== "number" || isnan(obj2.length)) {
                    return createBuffer(that, 0);
                  }
                  return fromArrayLike(that, obj2);
                }
                if (obj2.type === "Buffer" && isArray(obj2.data)) {
                  return fromArrayLike(that, obj2.data);
                }
              }
              throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
            }
            function checked(length) {
              if (length >= kMaxLength()) {
                throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + kMaxLength().toString(16) + " bytes");
              }
              return length | 0;
            }
            function SlowBuffer(length) {
              if (+length != length) {
                length = 0;
              }
              return Buffer3.alloc(+length);
            }
            Buffer3.isBuffer = function isBuffer(b) {
              return !!(b != null && b._isBuffer);
            };
            Buffer3.compare = function compare(a, b) {
              if (!Buffer3.isBuffer(a) || !Buffer3.isBuffer(b)) {
                throw new TypeError("Arguments must be Buffers");
              }
              if (a === b) return 0;
              var x = a.length;
              var y = b.length;
              for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                if (a[i] !== b[i]) {
                  x = a[i];
                  y = b[i];
                  break;
                }
              }
              if (x < y) return -1;
              if (y < x) return 1;
              return 0;
            };
            Buffer3.isEncoding = function isEncoding(encoding) {
              switch (String(encoding).toLowerCase()) {
                case "hex":
                case "utf8":
                case "utf-8":
                case "ascii":
                case "latin1":
                case "binary":
                case "base64":
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return true;
                default:
                  return false;
              }
            };
            Buffer3.concat = function concat(list, length) {
              if (!isArray(list)) {
                throw new TypeError('"list" argument must be an Array of Buffers');
              }
              if (list.length === 0) {
                return Buffer3.alloc(0);
              }
              var i;
              if (length === void 0) {
                length = 0;
                for (i = 0; i < list.length; ++i) {
                  length += list[i].length;
                }
              }
              var buffer = Buffer3.allocUnsafe(length);
              var pos = 0;
              for (i = 0; i < list.length; ++i) {
                var buf = list[i];
                if (!Buffer3.isBuffer(buf)) {
                  throw new TypeError('"list" argument must be an Array of Buffers');
                }
                buf.copy(buffer, pos);
                pos += buf.length;
              }
              return buffer;
            };
            function byteLength(string, encoding) {
              if (Buffer3.isBuffer(string)) {
                return string.length;
              }
              if (typeof ArrayBuffer !== "undefined" && typeof ArrayBuffer.isView === "function" && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
                return string.byteLength;
              }
              if (typeof string !== "string") {
                string = "" + string;
              }
              var len = string.length;
              if (len === 0) return 0;
              var loweredCase = false;
              for (; ; ) {
                switch (encoding) {
                  case "ascii":
                  case "latin1":
                  case "binary":
                    return len;
                  case "utf8":
                  case "utf-8":
                  case void 0:
                    return utf8ToBytes(string).length;
                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return len * 2;
                  case "hex":
                    return len >>> 1;
                  case "base64":
                    return base64ToBytes(string).length;
                  default:
                    if (loweredCase) return utf8ToBytes(string).length;
                    encoding = ("" + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            }
            Buffer3.byteLength = byteLength;
            function slowToString(encoding, start, end) {
              var loweredCase = false;
              if (start === void 0 || start < 0) {
                start = 0;
              }
              if (start > this.length) {
                return "";
              }
              if (end === void 0 || end > this.length) {
                end = this.length;
              }
              if (end <= 0) {
                return "";
              }
              end >>>= 0;
              start >>>= 0;
              if (end <= start) {
                return "";
              }
              if (!encoding) encoding = "utf8";
              while (true) {
                switch (encoding) {
                  case "hex":
                    return hexSlice(this, start, end);
                  case "utf8":
                  case "utf-8":
                    return utf8Slice(this, start, end);
                  case "ascii":
                    return asciiSlice(this, start, end);
                  case "latin1":
                  case "binary":
                    return latin1Slice(this, start, end);
                  case "base64":
                    return base64Slice(this, start, end);
                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return utf16leSlice(this, start, end);
                  default:
                    if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
                    encoding = (encoding + "").toLowerCase();
                    loweredCase = true;
                }
              }
            }
            Buffer3.prototype._isBuffer = true;
            function swap(b, n, m) {
              var i = b[n];
              b[n] = b[m];
              b[m] = i;
            }
            Buffer3.prototype.swap16 = function swap16() {
              var len = this.length;
              if (len % 2 !== 0) {
                throw new RangeError("Buffer size must be a multiple of 16-bits");
              }
              for (var i = 0; i < len; i += 2) {
                swap(this, i, i + 1);
              }
              return this;
            };
            Buffer3.prototype.swap32 = function swap32() {
              var len = this.length;
              if (len % 4 !== 0) {
                throw new RangeError("Buffer size must be a multiple of 32-bits");
              }
              for (var i = 0; i < len; i += 4) {
                swap(this, i, i + 3);
                swap(this, i + 1, i + 2);
              }
              return this;
            };
            Buffer3.prototype.swap64 = function swap64() {
              var len = this.length;
              if (len % 8 !== 0) {
                throw new RangeError("Buffer size must be a multiple of 64-bits");
              }
              for (var i = 0; i < len; i += 8) {
                swap(this, i, i + 7);
                swap(this, i + 1, i + 6);
                swap(this, i + 2, i + 5);
                swap(this, i + 3, i + 4);
              }
              return this;
            };
            Buffer3.prototype.toString = function toString() {
              var length = this.length | 0;
              if (length === 0) return "";
              if (arguments.length === 0) return utf8Slice(this, 0, length);
              return slowToString.apply(this, arguments);
            };
            Buffer3.prototype.equals = function equals(b) {
              if (!Buffer3.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
              if (this === b) return true;
              return Buffer3.compare(this, b) === 0;
            };
            Buffer3.prototype.inspect = function inspect() {
              var str = "";
              var max = exports2.INSPECT_MAX_BYTES;
              if (this.length > 0) {
                str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
                if (this.length > max) str += " ... ";
              }
              return "<Buffer " + str + ">";
            };
            Buffer3.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
              if (!Buffer3.isBuffer(target)) {
                throw new TypeError("Argument must be a Buffer");
              }
              if (start === void 0) {
                start = 0;
              }
              if (end === void 0) {
                end = target ? target.length : 0;
              }
              if (thisStart === void 0) {
                thisStart = 0;
              }
              if (thisEnd === void 0) {
                thisEnd = this.length;
              }
              if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                throw new RangeError("out of range index");
              }
              if (thisStart >= thisEnd && start >= end) {
                return 0;
              }
              if (thisStart >= thisEnd) {
                return -1;
              }
              if (start >= end) {
                return 1;
              }
              start >>>= 0;
              end >>>= 0;
              thisStart >>>= 0;
              thisEnd >>>= 0;
              if (this === target) return 0;
              var x = thisEnd - thisStart;
              var y = end - start;
              var len = Math.min(x, y);
              var thisCopy = this.slice(thisStart, thisEnd);
              var targetCopy = target.slice(start, end);
              for (var i = 0; i < len; ++i) {
                if (thisCopy[i] !== targetCopy[i]) {
                  x = thisCopy[i];
                  y = targetCopy[i];
                  break;
                }
              }
              if (x < y) return -1;
              if (y < x) return 1;
              return 0;
            };
            function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
              if (buffer.length === 0) return -1;
              if (typeof byteOffset === "string") {
                encoding = byteOffset;
                byteOffset = 0;
              } else if (byteOffset > 2147483647) {
                byteOffset = 2147483647;
              } else if (byteOffset < -2147483648) {
                byteOffset = -2147483648;
              }
              byteOffset = +byteOffset;
              if (isNaN(byteOffset)) {
                byteOffset = dir ? 0 : buffer.length - 1;
              }
              if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
              if (byteOffset >= buffer.length) {
                if (dir) return -1;
                else byteOffset = buffer.length - 1;
              } else if (byteOffset < 0) {
                if (dir) byteOffset = 0;
                else return -1;
              }
              if (typeof val === "string") {
                val = Buffer3.from(val, encoding);
              }
              if (Buffer3.isBuffer(val)) {
                if (val.length === 0) {
                  return -1;
                }
                return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
              } else if (typeof val === "number") {
                val = val & 255;
                if (Buffer3.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === "function") {
                  if (dir) {
                    return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
                  } else {
                    return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
                  }
                }
                return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
              }
              throw new TypeError("val must be string, number or Buffer");
            }
            function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
              var indexSize = 1;
              var arrLength = arr.length;
              var valLength = val.length;
              if (encoding !== void 0) {
                encoding = String(encoding).toLowerCase();
                if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
                  if (arr.length < 2 || val.length < 2) {
                    return -1;
                  }
                  indexSize = 2;
                  arrLength /= 2;
                  valLength /= 2;
                  byteOffset /= 2;
                }
              }
              function read(buf, i2) {
                if (indexSize === 1) {
                  return buf[i2];
                } else {
                  return buf.readUInt16BE(i2 * indexSize);
                }
              }
              var i;
              if (dir) {
                var foundIndex = -1;
                for (i = byteOffset; i < arrLength; i++) {
                  if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                    if (foundIndex === -1) foundIndex = i;
                    if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
                  } else {
                    if (foundIndex !== -1) i -= i - foundIndex;
                    foundIndex = -1;
                  }
                }
              } else {
                if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
                for (i = byteOffset; i >= 0; i--) {
                  var found = true;
                  for (var j = 0; j < valLength; j++) {
                    if (read(arr, i + j) !== read(val, j)) {
                      found = false;
                      break;
                    }
                  }
                  if (found) return i;
                }
              }
              return -1;
            }
            Buffer3.prototype.includes = function includes(val, byteOffset, encoding) {
              return this.indexOf(val, byteOffset, encoding) !== -1;
            };
            Buffer3.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
              return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
            };
            Buffer3.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
              return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
            };
            function hexWrite(buf, string, offset, length) {
              offset = Number(offset) || 0;
              var remaining = buf.length - offset;
              if (!length) {
                length = remaining;
              } else {
                length = Number(length);
                if (length > remaining) {
                  length = remaining;
                }
              }
              var strLen = string.length;
              if (strLen % 2 !== 0) throw new TypeError("Invalid hex string");
              if (length > strLen / 2) {
                length = strLen / 2;
              }
              for (var i = 0; i < length; ++i) {
                var parsed = parseInt(string.substr(i * 2, 2), 16);
                if (isNaN(parsed)) return i;
                buf[offset + i] = parsed;
              }
              return i;
            }
            function utf8Write(buf, string, offset, length) {
              return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
            }
            function asciiWrite(buf, string, offset, length) {
              return blitBuffer(asciiToBytes(string), buf, offset, length);
            }
            function latin1Write(buf, string, offset, length) {
              return asciiWrite(buf, string, offset, length);
            }
            function base64Write(buf, string, offset, length) {
              return blitBuffer(base64ToBytes(string), buf, offset, length);
            }
            function ucs2Write(buf, string, offset, length) {
              return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
            }
            Buffer3.prototype.write = function write(string, offset, length, encoding) {
              if (offset === void 0) {
                encoding = "utf8";
                length = this.length;
                offset = 0;
              } else if (length === void 0 && typeof offset === "string") {
                encoding = offset;
                length = this.length;
                offset = 0;
              } else if (isFinite(offset)) {
                offset = offset | 0;
                if (isFinite(length)) {
                  length = length | 0;
                  if (encoding === void 0) encoding = "utf8";
                } else {
                  encoding = length;
                  length = void 0;
                }
              } else {
                throw new Error(
                  "Buffer.write(string, encoding, offset[, length]) is no longer supported"
                );
              }
              var remaining = this.length - offset;
              if (length === void 0 || length > remaining) length = remaining;
              if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
                throw new RangeError("Attempt to write outside buffer bounds");
              }
              if (!encoding) encoding = "utf8";
              var loweredCase = false;
              for (; ; ) {
                switch (encoding) {
                  case "hex":
                    return hexWrite(this, string, offset, length);
                  case "utf8":
                  case "utf-8":
                    return utf8Write(this, string, offset, length);
                  case "ascii":
                    return asciiWrite(this, string, offset, length);
                  case "latin1":
                  case "binary":
                    return latin1Write(this, string, offset, length);
                  case "base64":
                    return base64Write(this, string, offset, length);
                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return ucs2Write(this, string, offset, length);
                  default:
                    if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
                    encoding = ("" + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            };
            Buffer3.prototype.toJSON = function toJSON() {
              return {
                type: "Buffer",
                data: Array.prototype.slice.call(this._arr || this, 0)
              };
            };
            function base64Slice(buf, start, end) {
              if (start === 0 && end === buf.length) {
                return base64.fromByteArray(buf);
              } else {
                return base64.fromByteArray(buf.slice(start, end));
              }
            }
            function utf8Slice(buf, start, end) {
              end = Math.min(buf.length, end);
              var res = [];
              var i = start;
              while (i < end) {
                var firstByte = buf[i];
                var codePoint = null;
                var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
                if (i + bytesPerSequence <= end) {
                  var secondByte, thirdByte, fourthByte, tempCodePoint;
                  switch (bytesPerSequence) {
                    case 1:
                      if (firstByte < 128) {
                        codePoint = firstByte;
                      }
                      break;
                    case 2:
                      secondByte = buf[i + 1];
                      if ((secondByte & 192) === 128) {
                        tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                        if (tempCodePoint > 127) {
                          codePoint = tempCodePoint;
                        }
                      }
                      break;
                    case 3:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];
                      if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                        if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                          codePoint = tempCodePoint;
                        }
                      }
                      break;
                    case 4:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];
                      fourthByte = buf[i + 3];
                      if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                        if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                          codePoint = tempCodePoint;
                        }
                      }
                  }
                }
                if (codePoint === null) {
                  codePoint = 65533;
                  bytesPerSequence = 1;
                } else if (codePoint > 65535) {
                  codePoint -= 65536;
                  res.push(codePoint >>> 10 & 1023 | 55296);
                  codePoint = 56320 | codePoint & 1023;
                }
                res.push(codePoint);
                i += bytesPerSequence;
              }
              return decodeCodePointsArray(res);
            }
            var MAX_ARGUMENTS_LENGTH = 4096;
            function decodeCodePointsArray(codePoints) {
              var len = codePoints.length;
              if (len <= MAX_ARGUMENTS_LENGTH) {
                return String.fromCharCode.apply(String, codePoints);
              }
              var res = "";
              var i = 0;
              while (i < len) {
                res += String.fromCharCode.apply(
                  String,
                  codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
                );
              }
              return res;
            }
            function asciiSlice(buf, start, end) {
              var ret2 = "";
              end = Math.min(buf.length, end);
              for (var i = start; i < end; ++i) {
                ret2 += String.fromCharCode(buf[i] & 127);
              }
              return ret2;
            }
            function latin1Slice(buf, start, end) {
              var ret2 = "";
              end = Math.min(buf.length, end);
              for (var i = start; i < end; ++i) {
                ret2 += String.fromCharCode(buf[i]);
              }
              return ret2;
            }
            function hexSlice(buf, start, end) {
              var len = buf.length;
              if (!start || start < 0) start = 0;
              if (!end || end < 0 || end > len) end = len;
              var out = "";
              for (var i = start; i < end; ++i) {
                out += toHex(buf[i]);
              }
              return out;
            }
            function utf16leSlice(buf, start, end) {
              var bytes = buf.slice(start, end);
              var res = "";
              for (var i = 0; i < bytes.length; i += 2) {
                res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
              }
              return res;
            }
            Buffer3.prototype.slice = function slice(start, end) {
              var len = this.length;
              start = ~~start;
              end = end === void 0 ? len : ~~end;
              if (start < 0) {
                start += len;
                if (start < 0) start = 0;
              } else if (start > len) {
                start = len;
              }
              if (end < 0) {
                end += len;
                if (end < 0) end = 0;
              } else if (end > len) {
                end = len;
              }
              if (end < start) end = start;
              var newBuf;
              if (Buffer3.TYPED_ARRAY_SUPPORT) {
                newBuf = this.subarray(start, end);
                newBuf.__proto__ = Buffer3.prototype;
              } else {
                var sliceLen = end - start;
                newBuf = new Buffer3(sliceLen, void 0);
                for (var i = 0; i < sliceLen; ++i) {
                  newBuf[i] = this[i + start];
                }
              }
              return newBuf;
            };
            function checkOffset(offset, ext, length) {
              if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
              if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
            }
            Buffer3.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
              offset = offset | 0;
              byteLength2 = byteLength2 | 0;
              if (!noAssert) checkOffset(offset, byteLength2, this.length);
              var val = this[offset];
              var mul = 1;
              var i = 0;
              while (++i < byteLength2 && (mul *= 256)) {
                val += this[offset + i] * mul;
              }
              return val;
            };
            Buffer3.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
              offset = offset | 0;
              byteLength2 = byteLength2 | 0;
              if (!noAssert) {
                checkOffset(offset, byteLength2, this.length);
              }
              var val = this[offset + --byteLength2];
              var mul = 1;
              while (byteLength2 > 0 && (mul *= 256)) {
                val += this[offset + --byteLength2] * mul;
              }
              return val;
            };
            Buffer3.prototype.readUInt8 = function readUInt8(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 1, this.length);
              return this[offset];
            };
            Buffer3.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 2, this.length);
              return this[offset] | this[offset + 1] << 8;
            };
            Buffer3.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 2, this.length);
              return this[offset] << 8 | this[offset + 1];
            };
            Buffer3.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);
              return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
            };
            Buffer3.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);
              return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
            };
            Buffer3.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
              offset = offset | 0;
              byteLength2 = byteLength2 | 0;
              if (!noAssert) checkOffset(offset, byteLength2, this.length);
              var val = this[offset];
              var mul = 1;
              var i = 0;
              while (++i < byteLength2 && (mul *= 256)) {
                val += this[offset + i] * mul;
              }
              mul *= 128;
              if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
              return val;
            };
            Buffer3.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
              offset = offset | 0;
              byteLength2 = byteLength2 | 0;
              if (!noAssert) checkOffset(offset, byteLength2, this.length);
              var i = byteLength2;
              var mul = 1;
              var val = this[offset + --i];
              while (i > 0 && (mul *= 256)) {
                val += this[offset + --i] * mul;
              }
              mul *= 128;
              if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
              return val;
            };
            Buffer3.prototype.readInt8 = function readInt8(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 1, this.length);
              if (!(this[offset] & 128)) return this[offset];
              return (255 - this[offset] + 1) * -1;
            };
            Buffer3.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 2, this.length);
              var val = this[offset] | this[offset + 1] << 8;
              return val & 32768 ? val | 4294901760 : val;
            };
            Buffer3.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 2, this.length);
              var val = this[offset + 1] | this[offset] << 8;
              return val & 32768 ? val | 4294901760 : val;
            };
            Buffer3.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);
              return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
            };
            Buffer3.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);
              return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
            };
            Buffer3.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);
              return ieee754.read(this, offset, true, 23, 4);
            };
            Buffer3.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);
              return ieee754.read(this, offset, false, 23, 4);
            };
            Buffer3.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 8, this.length);
              return ieee754.read(this, offset, true, 52, 8);
            };
            Buffer3.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 8, this.length);
              return ieee754.read(this, offset, false, 52, 8);
            };
            function checkInt(buf, value, offset, ext, max, min) {
              if (!Buffer3.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
              if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
              if (offset + ext > buf.length) throw new RangeError("Index out of range");
            }
            Buffer3.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
              value = +value;
              offset = offset | 0;
              byteLength2 = byteLength2 | 0;
              if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
                checkInt(this, value, offset, byteLength2, maxBytes, 0);
              }
              var mul = 1;
              var i = 0;
              this[offset] = value & 255;
              while (++i < byteLength2 && (mul *= 256)) {
                this[offset + i] = value / mul & 255;
              }
              return offset + byteLength2;
            };
            Buffer3.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
              value = +value;
              offset = offset | 0;
              byteLength2 = byteLength2 | 0;
              if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
                checkInt(this, value, offset, byteLength2, maxBytes, 0);
              }
              var i = byteLength2 - 1;
              var mul = 1;
              this[offset + i] = value & 255;
              while (--i >= 0 && (mul *= 256)) {
                this[offset + i] = value / mul & 255;
              }
              return offset + byteLength2;
            };
            Buffer3.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
              if (!Buffer3.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
              this[offset] = value & 255;
              return offset + 1;
            };
            function objectWriteUInt16(buf, value, offset, littleEndian) {
              if (value < 0) value = 65535 + value + 1;
              for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
                buf[offset + i] = (value & 255 << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
              }
            }
            Buffer3.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
              if (Buffer3.TYPED_ARRAY_SUPPORT) {
                this[offset] = value & 255;
                this[offset + 1] = value >>> 8;
              } else {
                objectWriteUInt16(this, value, offset, true);
              }
              return offset + 2;
            };
            Buffer3.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
              if (Buffer3.TYPED_ARRAY_SUPPORT) {
                this[offset] = value >>> 8;
                this[offset + 1] = value & 255;
              } else {
                objectWriteUInt16(this, value, offset, false);
              }
              return offset + 2;
            };
            function objectWriteUInt32(buf, value, offset, littleEndian) {
              if (value < 0) value = 4294967295 + value + 1;
              for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
                buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 255;
              }
            }
            Buffer3.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
              if (Buffer3.TYPED_ARRAY_SUPPORT) {
                this[offset + 3] = value >>> 24;
                this[offset + 2] = value >>> 16;
                this[offset + 1] = value >>> 8;
                this[offset] = value & 255;
              } else {
                objectWriteUInt32(this, value, offset, true);
              }
              return offset + 4;
            };
            Buffer3.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
              if (Buffer3.TYPED_ARRAY_SUPPORT) {
                this[offset] = value >>> 24;
                this[offset + 1] = value >>> 16;
                this[offset + 2] = value >>> 8;
                this[offset + 3] = value & 255;
              } else {
                objectWriteUInt32(this, value, offset, false);
              }
              return offset + 4;
            };
            Buffer3.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength2 - 1);
                checkInt(this, value, offset, byteLength2, limit - 1, -limit);
              }
              var i = 0;
              var mul = 1;
              var sub = 0;
              this[offset] = value & 255;
              while (++i < byteLength2 && (mul *= 256)) {
                if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                  sub = 1;
                }
                this[offset + i] = (value / mul >> 0) - sub & 255;
              }
              return offset + byteLength2;
            };
            Buffer3.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength2 - 1);
                checkInt(this, value, offset, byteLength2, limit - 1, -limit);
              }
              var i = byteLength2 - 1;
              var mul = 1;
              var sub = 0;
              this[offset + i] = value & 255;
              while (--i >= 0 && (mul *= 256)) {
                if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                  sub = 1;
                }
                this[offset + i] = (value / mul >> 0) - sub & 255;
              }
              return offset + byteLength2;
            };
            Buffer3.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
              if (!Buffer3.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
              if (value < 0) value = 255 + value + 1;
              this[offset] = value & 255;
              return offset + 1;
            };
            Buffer3.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
              if (Buffer3.TYPED_ARRAY_SUPPORT) {
                this[offset] = value & 255;
                this[offset + 1] = value >>> 8;
              } else {
                objectWriteUInt16(this, value, offset, true);
              }
              return offset + 2;
            };
            Buffer3.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
              if (Buffer3.TYPED_ARRAY_SUPPORT) {
                this[offset] = value >>> 8;
                this[offset + 1] = value & 255;
              } else {
                objectWriteUInt16(this, value, offset, false);
              }
              return offset + 2;
            };
            Buffer3.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
              if (Buffer3.TYPED_ARRAY_SUPPORT) {
                this[offset] = value & 255;
                this[offset + 1] = value >>> 8;
                this[offset + 2] = value >>> 16;
                this[offset + 3] = value >>> 24;
              } else {
                objectWriteUInt32(this, value, offset, true);
              }
              return offset + 4;
            };
            Buffer3.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
              if (value < 0) value = 4294967295 + value + 1;
              if (Buffer3.TYPED_ARRAY_SUPPORT) {
                this[offset] = value >>> 24;
                this[offset + 1] = value >>> 16;
                this[offset + 2] = value >>> 8;
                this[offset + 3] = value & 255;
              } else {
                objectWriteUInt32(this, value, offset, false);
              }
              return offset + 4;
            };
            function checkIEEE754(buf, value, offset, ext, max, min) {
              if (offset + ext > buf.length) throw new RangeError("Index out of range");
              if (offset < 0) throw new RangeError("Index out of range");
            }
            function writeFloat(buf, value, offset, littleEndian, noAssert) {
              if (!noAssert) {
                checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
              }
              ieee754.write(buf, value, offset, littleEndian, 23, 4);
              return offset + 4;
            }
            Buffer3.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
              return writeFloat(this, value, offset, true, noAssert);
            };
            Buffer3.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
              return writeFloat(this, value, offset, false, noAssert);
            };
            function writeDouble(buf, value, offset, littleEndian, noAssert) {
              if (!noAssert) {
                checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
              }
              ieee754.write(buf, value, offset, littleEndian, 52, 8);
              return offset + 8;
            }
            Buffer3.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
              return writeDouble(this, value, offset, true, noAssert);
            };
            Buffer3.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
              return writeDouble(this, value, offset, false, noAssert);
            };
            Buffer3.prototype.copy = function copy(target, targetStart, start, end) {
              if (!start) start = 0;
              if (!end && end !== 0) end = this.length;
              if (targetStart >= target.length) targetStart = target.length;
              if (!targetStart) targetStart = 0;
              if (end > 0 && end < start) end = start;
              if (end === start) return 0;
              if (target.length === 0 || this.length === 0) return 0;
              if (targetStart < 0) {
                throw new RangeError("targetStart out of bounds");
              }
              if (start < 0 || start >= this.length) throw new RangeError("sourceStart out of bounds");
              if (end < 0) throw new RangeError("sourceEnd out of bounds");
              if (end > this.length) end = this.length;
              if (target.length - targetStart < end - start) {
                end = target.length - targetStart + start;
              }
              var len = end - start;
              var i;
              if (this === target && start < targetStart && targetStart < end) {
                for (i = len - 1; i >= 0; --i) {
                  target[i + targetStart] = this[i + start];
                }
              } else if (len < 1e3 || !Buffer3.TYPED_ARRAY_SUPPORT) {
                for (i = 0; i < len; ++i) {
                  target[i + targetStart] = this[i + start];
                }
              } else {
                Uint8Array.prototype.set.call(
                  target,
                  this.subarray(start, start + len),
                  targetStart
                );
              }
              return len;
            };
            Buffer3.prototype.fill = function fill(val, start, end, encoding) {
              if (typeof val === "string") {
                if (typeof start === "string") {
                  encoding = start;
                  start = 0;
                  end = this.length;
                } else if (typeof end === "string") {
                  encoding = end;
                  end = this.length;
                }
                if (val.length === 1) {
                  var code = val.charCodeAt(0);
                  if (code < 256) {
                    val = code;
                  }
                }
                if (encoding !== void 0 && typeof encoding !== "string") {
                  throw new TypeError("encoding must be a string");
                }
                if (typeof encoding === "string" && !Buffer3.isEncoding(encoding)) {
                  throw new TypeError("Unknown encoding: " + encoding);
                }
              } else if (typeof val === "number") {
                val = val & 255;
              }
              if (start < 0 || this.length < start || this.length < end) {
                throw new RangeError("Out of range index");
              }
              if (end <= start) {
                return this;
              }
              start = start >>> 0;
              end = end === void 0 ? this.length : end >>> 0;
              if (!val) val = 0;
              var i;
              if (typeof val === "number") {
                for (i = start; i < end; ++i) {
                  this[i] = val;
                }
              } else {
                var bytes = Buffer3.isBuffer(val) ? val : utf8ToBytes(new Buffer3(val, encoding).toString());
                var len = bytes.length;
                for (i = 0; i < end - start; ++i) {
                  this[i + start] = bytes[i % len];
                }
              }
              return this;
            };
            var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
            function base64clean(str) {
              str = stringtrim(str).replace(INVALID_BASE64_RE, "");
              if (str.length < 2) return "";
              while (str.length % 4 !== 0) {
                str = str + "=";
              }
              return str;
            }
            function stringtrim(str) {
              if (str.trim) return str.trim();
              return str.replace(/^\s+|\s+$/g, "");
            }
            function toHex(n) {
              if (n < 16) return "0" + n.toString(16);
              return n.toString(16);
            }
            function utf8ToBytes(string, units) {
              units = units || Infinity;
              var codePoint;
              var length = string.length;
              var leadSurrogate = null;
              var bytes = [];
              for (var i = 0; i < length; ++i) {
                codePoint = string.charCodeAt(i);
                if (codePoint > 55295 && codePoint < 57344) {
                  if (!leadSurrogate) {
                    if (codePoint > 56319) {
                      if ((units -= 3) > -1) bytes.push(239, 191, 189);
                      continue;
                    } else if (i + 1 === length) {
                      if ((units -= 3) > -1) bytes.push(239, 191, 189);
                      continue;
                    }
                    leadSurrogate = codePoint;
                    continue;
                  }
                  if (codePoint < 56320) {
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    leadSurrogate = codePoint;
                    continue;
                  }
                  codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
                } else if (leadSurrogate) {
                  if ((units -= 3) > -1) bytes.push(239, 191, 189);
                }
                leadSurrogate = null;
                if (codePoint < 128) {
                  if ((units -= 1) < 0) break;
                  bytes.push(codePoint);
                } else if (codePoint < 2048) {
                  if ((units -= 2) < 0) break;
                  bytes.push(
                    codePoint >> 6 | 192,
                    codePoint & 63 | 128
                  );
                } else if (codePoint < 65536) {
                  if ((units -= 3) < 0) break;
                  bytes.push(
                    codePoint >> 12 | 224,
                    codePoint >> 6 & 63 | 128,
                    codePoint & 63 | 128
                  );
                } else if (codePoint < 1114112) {
                  if ((units -= 4) < 0) break;
                  bytes.push(
                    codePoint >> 18 | 240,
                    codePoint >> 12 & 63 | 128,
                    codePoint >> 6 & 63 | 128,
                    codePoint & 63 | 128
                  );
                } else {
                  throw new Error("Invalid code point");
                }
              }
              return bytes;
            }
            function asciiToBytes(str) {
              var byteArray = [];
              for (var i = 0; i < str.length; ++i) {
                byteArray.push(str.charCodeAt(i) & 255);
              }
              return byteArray;
            }
            function utf16leToBytes(str, units) {
              var c, hi, lo;
              var byteArray = [];
              for (var i = 0; i < str.length; ++i) {
                if ((units -= 2) < 0) break;
                c = str.charCodeAt(i);
                hi = c >> 8;
                lo = c % 256;
                byteArray.push(lo);
                byteArray.push(hi);
              }
              return byteArray;
            }
            function base64ToBytes(str) {
              return base64.toByteArray(base64clean(str));
            }
            function blitBuffer(src, dst, offset, length) {
              for (var i = 0; i < length; ++i) {
                if (i + offset >= dst.length || i >= src.length) break;
                dst[i + offset] = src[i];
              }
              return i;
            }
            function isnan(val) {
              return val !== val;
            }
          }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        }, { "base64-js": 39, "ieee754": 82, "isarray": 85 }], 78: [function(require2, module2, exports2) {
          (function(Buffer3) {
            function isArray(arg) {
              if (Array.isArray) {
                return Array.isArray(arg);
              }
              return objectToString(arg) === "[object Array]";
            }
            exports2.isArray = isArray;
            function isBoolean(arg) {
              return typeof arg === "boolean";
            }
            exports2.isBoolean = isBoolean;
            function isNull(arg) {
              return arg === null;
            }
            exports2.isNull = isNull;
            function isNullOrUndefined(arg) {
              return arg == null;
            }
            exports2.isNullOrUndefined = isNullOrUndefined;
            function isNumber(arg) {
              return typeof arg === "number";
            }
            exports2.isNumber = isNumber;
            function isString(arg) {
              return typeof arg === "string";
            }
            exports2.isString = isString;
            function isSymbol(arg) {
              return typeof arg === "symbol";
            }
            exports2.isSymbol = isSymbol;
            function isUndefined(arg) {
              return arg === void 0;
            }
            exports2.isUndefined = isUndefined;
            function isRegExp(re) {
              return objectToString(re) === "[object RegExp]";
            }
            exports2.isRegExp = isRegExp;
            function isObject2(arg) {
              return typeof arg === "object" && arg !== null;
            }
            exports2.isObject = isObject2;
            function isDate(d) {
              return objectToString(d) === "[object Date]";
            }
            exports2.isDate = isDate;
            function isError2(e) {
              return objectToString(e) === "[object Error]" || e instanceof Error;
            }
            exports2.isError = isError2;
            function isFunction(arg) {
              return typeof arg === "function";
            }
            exports2.isFunction = isFunction;
            function isPrimitive2(arg) {
              return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
              typeof arg === "undefined";
            }
            exports2.isPrimitive = isPrimitive2;
            exports2.isBuffer = Buffer3.isBuffer;
            function objectToString(o) {
              return Object.prototype.toString.call(o);
            }
          }).call(this, { "isBuffer": require2("../../is-buffer/index.js") });
        }, { "../../is-buffer/index.js": 84 }], 79: [function(require2, module2, exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", { value: true });
          var dingbats = [
            { "Typeface name": "Symbol", "Dingbat dec": "32", "Dingbat hex": "20", "Unicode dec": "32", "Unicode hex": "20" },
            { "Typeface name": "Symbol", "Dingbat dec": "33", "Dingbat hex": "21", "Unicode dec": "33", "Unicode hex": "21" },
            { "Typeface name": "Symbol", "Dingbat dec": "34", "Dingbat hex": "22", "Unicode dec": "8704", "Unicode hex": "2200" },
            { "Typeface name": "Symbol", "Dingbat dec": "35", "Dingbat hex": "23", "Unicode dec": "35", "Unicode hex": "23" },
            { "Typeface name": "Symbol", "Dingbat dec": "36", "Dingbat hex": "24", "Unicode dec": "8707", "Unicode hex": "2203" },
            { "Typeface name": "Symbol", "Dingbat dec": "37", "Dingbat hex": "25", "Unicode dec": "37", "Unicode hex": "25" },
            { "Typeface name": "Symbol", "Dingbat dec": "38", "Dingbat hex": "26", "Unicode dec": "38", "Unicode hex": "26" },
            { "Typeface name": "Symbol", "Dingbat dec": "39", "Dingbat hex": "27", "Unicode dec": "8717", "Unicode hex": "220D" },
            { "Typeface name": "Symbol", "Dingbat dec": "40", "Dingbat hex": "28", "Unicode dec": "40", "Unicode hex": "28" },
            { "Typeface name": "Symbol", "Dingbat dec": "41", "Dingbat hex": "29", "Unicode dec": "41", "Unicode hex": "29" },
            { "Typeface name": "Symbol", "Dingbat dec": "42", "Dingbat hex": "2A", "Unicode dec": "42", "Unicode hex": "2A" },
            { "Typeface name": "Symbol", "Dingbat dec": "43", "Dingbat hex": "2B", "Unicode dec": "43", "Unicode hex": "2B" },
            { "Typeface name": "Symbol", "Dingbat dec": "44", "Dingbat hex": "2C", "Unicode dec": "44", "Unicode hex": "2C" },
            { "Typeface name": "Symbol", "Dingbat dec": "45", "Dingbat hex": "2D", "Unicode dec": "8722", "Unicode hex": "2212" },
            { "Typeface name": "Symbol", "Dingbat dec": "46", "Dingbat hex": "2E", "Unicode dec": "46", "Unicode hex": "2E" },
            { "Typeface name": "Symbol", "Dingbat dec": "47", "Dingbat hex": "2F", "Unicode dec": "47", "Unicode hex": "2F" },
            { "Typeface name": "Symbol", "Dingbat dec": "48", "Dingbat hex": "30", "Unicode dec": "48", "Unicode hex": "30" },
            { "Typeface name": "Symbol", "Dingbat dec": "49", "Dingbat hex": "31", "Unicode dec": "49", "Unicode hex": "31" },
            { "Typeface name": "Symbol", "Dingbat dec": "50", "Dingbat hex": "32", "Unicode dec": "50", "Unicode hex": "32" },
            { "Typeface name": "Symbol", "Dingbat dec": "51", "Dingbat hex": "33", "Unicode dec": "51", "Unicode hex": "33" },
            { "Typeface name": "Symbol", "Dingbat dec": "52", "Dingbat hex": "34", "Unicode dec": "52", "Unicode hex": "34" },
            { "Typeface name": "Symbol", "Dingbat dec": "53", "Dingbat hex": "35", "Unicode dec": "53", "Unicode hex": "35" },
            { "Typeface name": "Symbol", "Dingbat dec": "54", "Dingbat hex": "36", "Unicode dec": "54", "Unicode hex": "36" },
            { "Typeface name": "Symbol", "Dingbat dec": "55", "Dingbat hex": "37", "Unicode dec": "55", "Unicode hex": "37" },
            { "Typeface name": "Symbol", "Dingbat dec": "56", "Dingbat hex": "38", "Unicode dec": "56", "Unicode hex": "38" },
            { "Typeface name": "Symbol", "Dingbat dec": "57", "Dingbat hex": "39", "Unicode dec": "57", "Unicode hex": "39" },
            { "Typeface name": "Symbol", "Dingbat dec": "58", "Dingbat hex": "3A", "Unicode dec": "58", "Unicode hex": "3A" },
            { "Typeface name": "Symbol", "Dingbat dec": "59", "Dingbat hex": "3B", "Unicode dec": "59", "Unicode hex": "3B" },
            { "Typeface name": "Symbol", "Dingbat dec": "60", "Dingbat hex": "3C", "Unicode dec": "60", "Unicode hex": "3C" },
            { "Typeface name": "Symbol", "Dingbat dec": "61", "Dingbat hex": "3D", "Unicode dec": "61", "Unicode hex": "3D" },
            { "Typeface name": "Symbol", "Dingbat dec": "62", "Dingbat hex": "3E", "Unicode dec": "62", "Unicode hex": "3E" },
            { "Typeface name": "Symbol", "Dingbat dec": "63", "Dingbat hex": "3F", "Unicode dec": "63", "Unicode hex": "3F" },
            { "Typeface name": "Symbol", "Dingbat dec": "64", "Dingbat hex": "40", "Unicode dec": "8773", "Unicode hex": "2245" },
            { "Typeface name": "Symbol", "Dingbat dec": "65", "Dingbat hex": "41", "Unicode dec": "913", "Unicode hex": "391" },
            { "Typeface name": "Symbol", "Dingbat dec": "66", "Dingbat hex": "42", "Unicode dec": "914", "Unicode hex": "392" },
            { "Typeface name": "Symbol", "Dingbat dec": "67", "Dingbat hex": "43", "Unicode dec": "935", "Unicode hex": "3A7" },
            { "Typeface name": "Symbol", "Dingbat dec": "68", "Dingbat hex": "44", "Unicode dec": "916", "Unicode hex": "394" },
            { "Typeface name": "Symbol", "Dingbat dec": "69", "Dingbat hex": "45", "Unicode dec": "917", "Unicode hex": "395" },
            { "Typeface name": "Symbol", "Dingbat dec": "70", "Dingbat hex": "46", "Unicode dec": "934", "Unicode hex": "3A6" },
            { "Typeface name": "Symbol", "Dingbat dec": "71", "Dingbat hex": "47", "Unicode dec": "915", "Unicode hex": "393" },
            { "Typeface name": "Symbol", "Dingbat dec": "72", "Dingbat hex": "48", "Unicode dec": "919", "Unicode hex": "397" },
            { "Typeface name": "Symbol", "Dingbat dec": "73", "Dingbat hex": "49", "Unicode dec": "921", "Unicode hex": "399" },
            { "Typeface name": "Symbol", "Dingbat dec": "74", "Dingbat hex": "4A", "Unicode dec": "977", "Unicode hex": "3D1" },
            { "Typeface name": "Symbol", "Dingbat dec": "75", "Dingbat hex": "4B", "Unicode dec": "922", "Unicode hex": "39A" },
            { "Typeface name": "Symbol", "Dingbat dec": "76", "Dingbat hex": "4C", "Unicode dec": "923", "Unicode hex": "39B" },
            { "Typeface name": "Symbol", "Dingbat dec": "77", "Dingbat hex": "4D", "Unicode dec": "924", "Unicode hex": "39C" },
            { "Typeface name": "Symbol", "Dingbat dec": "78", "Dingbat hex": "4E", "Unicode dec": "925", "Unicode hex": "39D" },
            { "Typeface name": "Symbol", "Dingbat dec": "79", "Dingbat hex": "4F", "Unicode dec": "927", "Unicode hex": "39F" },
            { "Typeface name": "Symbol", "Dingbat dec": "80", "Dingbat hex": "50", "Unicode dec": "928", "Unicode hex": "3A0" },
            { "Typeface name": "Symbol", "Dingbat dec": "81", "Dingbat hex": "51", "Unicode dec": "920", "Unicode hex": "398" },
            { "Typeface name": "Symbol", "Dingbat dec": "82", "Dingbat hex": "52", "Unicode dec": "929", "Unicode hex": "3A1" },
            { "Typeface name": "Symbol", "Dingbat dec": "83", "Dingbat hex": "53", "Unicode dec": "931", "Unicode hex": "3A3" },
            { "Typeface name": "Symbol", "Dingbat dec": "84", "Dingbat hex": "54", "Unicode dec": "932", "Unicode hex": "3A4" },
            { "Typeface name": "Symbol", "Dingbat dec": "85", "Dingbat hex": "55", "Unicode dec": "933", "Unicode hex": "3A5" },
            { "Typeface name": "Symbol", "Dingbat dec": "86", "Dingbat hex": "56", "Unicode dec": "962", "Unicode hex": "3C2" },
            { "Typeface name": "Symbol", "Dingbat dec": "87", "Dingbat hex": "57", "Unicode dec": "937", "Unicode hex": "3A9" },
            { "Typeface name": "Symbol", "Dingbat dec": "88", "Dingbat hex": "58", "Unicode dec": "926", "Unicode hex": "39E" },
            { "Typeface name": "Symbol", "Dingbat dec": "89", "Dingbat hex": "59", "Unicode dec": "936", "Unicode hex": "3A8" },
            { "Typeface name": "Symbol", "Dingbat dec": "90", "Dingbat hex": "5A", "Unicode dec": "918", "Unicode hex": "396" },
            { "Typeface name": "Symbol", "Dingbat dec": "91", "Dingbat hex": "5B", "Unicode dec": "91", "Unicode hex": "5B" },
            { "Typeface name": "Symbol", "Dingbat dec": "92", "Dingbat hex": "5C", "Unicode dec": "8756", "Unicode hex": "2234" },
            { "Typeface name": "Symbol", "Dingbat dec": "93", "Dingbat hex": "5D", "Unicode dec": "93", "Unicode hex": "5D" },
            { "Typeface name": "Symbol", "Dingbat dec": "94", "Dingbat hex": "5E", "Unicode dec": "8869", "Unicode hex": "22A5" },
            { "Typeface name": "Symbol", "Dingbat dec": "95", "Dingbat hex": "5F", "Unicode dec": "95", "Unicode hex": "5F" },
            { "Typeface name": "Symbol", "Dingbat dec": "96", "Dingbat hex": "60", "Unicode dec": "8254", "Unicode hex": "203E" },
            { "Typeface name": "Symbol", "Dingbat dec": "97", "Dingbat hex": "61", "Unicode dec": "945", "Unicode hex": "3B1" },
            { "Typeface name": "Symbol", "Dingbat dec": "98", "Dingbat hex": "62", "Unicode dec": "946", "Unicode hex": "3B2" },
            { "Typeface name": "Symbol", "Dingbat dec": "99", "Dingbat hex": "63", "Unicode dec": "967", "Unicode hex": "3C7" },
            { "Typeface name": "Symbol", "Dingbat dec": "100", "Dingbat hex": "64", "Unicode dec": "948", "Unicode hex": "3B4" },
            { "Typeface name": "Symbol", "Dingbat dec": "101", "Dingbat hex": "65", "Unicode dec": "949", "Unicode hex": "3B5" },
            { "Typeface name": "Symbol", "Dingbat dec": "102", "Dingbat hex": "66", "Unicode dec": "966", "Unicode hex": "3C6" },
            { "Typeface name": "Symbol", "Dingbat dec": "103", "Dingbat hex": "67", "Unicode dec": "947", "Unicode hex": "3B3" },
            { "Typeface name": "Symbol", "Dingbat dec": "104", "Dingbat hex": "68", "Unicode dec": "951", "Unicode hex": "3B7" },
            { "Typeface name": "Symbol", "Dingbat dec": "105", "Dingbat hex": "69", "Unicode dec": "953", "Unicode hex": "3B9" },
            { "Typeface name": "Symbol", "Dingbat dec": "106", "Dingbat hex": "6A", "Unicode dec": "981", "Unicode hex": "3D5" },
            { "Typeface name": "Symbol", "Dingbat dec": "107", "Dingbat hex": "6B", "Unicode dec": "954", "Unicode hex": "3BA" },
            { "Typeface name": "Symbol", "Dingbat dec": "108", "Dingbat hex": "6C", "Unicode dec": "955", "Unicode hex": "3BB" },
            { "Typeface name": "Symbol", "Dingbat dec": "109", "Dingbat hex": "6D", "Unicode dec": "956", "Unicode hex": "3BC" },
            { "Typeface name": "Symbol", "Dingbat dec": "110", "Dingbat hex": "6E", "Unicode dec": "957", "Unicode hex": "3BD" },
            { "Typeface name": "Symbol", "Dingbat dec": "111", "Dingbat hex": "6F", "Unicode dec": "959", "Unicode hex": "3BF" },
            { "Typeface name": "Symbol", "Dingbat dec": "112", "Dingbat hex": "70", "Unicode dec": "960", "Unicode hex": "3C0" },
            { "Typeface name": "Symbol", "Dingbat dec": "113", "Dingbat hex": "71", "Unicode dec": "952", "Unicode hex": "3B8" },
            { "Typeface name": "Symbol", "Dingbat dec": "114", "Dingbat hex": "72", "Unicode dec": "961", "Unicode hex": "3C1" },
            { "Typeface name": "Symbol", "Dingbat dec": "115", "Dingbat hex": "73", "Unicode dec": "963", "Unicode hex": "3C3" },
            { "Typeface name": "Symbol", "Dingbat dec": "116", "Dingbat hex": "74", "Unicode dec": "964", "Unicode hex": "3C4" },
            { "Typeface name": "Symbol", "Dingbat dec": "117", "Dingbat hex": "75", "Unicode dec": "965", "Unicode hex": "3C5" },
            { "Typeface name": "Symbol", "Dingbat dec": "118", "Dingbat hex": "76", "Unicode dec": "982", "Unicode hex": "3D6" },
            { "Typeface name": "Symbol", "Dingbat dec": "119", "Dingbat hex": "77", "Unicode dec": "969", "Unicode hex": "3C9" },
            { "Typeface name": "Symbol", "Dingbat dec": "120", "Dingbat hex": "78", "Unicode dec": "958", "Unicode hex": "3BE" },
            { "Typeface name": "Symbol", "Dingbat dec": "121", "Dingbat hex": "79", "Unicode dec": "968", "Unicode hex": "3C8" },
            { "Typeface name": "Symbol", "Dingbat dec": "122", "Dingbat hex": "7A", "Unicode dec": "950", "Unicode hex": "3B6" },
            { "Typeface name": "Symbol", "Dingbat dec": "123", "Dingbat hex": "7B", "Unicode dec": "123", "Unicode hex": "7B" },
            { "Typeface name": "Symbol", "Dingbat dec": "124", "Dingbat hex": "7C", "Unicode dec": "124", "Unicode hex": "7C" },
            { "Typeface name": "Symbol", "Dingbat dec": "125", "Dingbat hex": "7D", "Unicode dec": "125", "Unicode hex": "7D" },
            { "Typeface name": "Symbol", "Dingbat dec": "126", "Dingbat hex": "7E", "Unicode dec": "126", "Unicode hex": "7E" },
            { "Typeface name": "Symbol", "Dingbat dec": "160", "Dingbat hex": "A0", "Unicode dec": "8364", "Unicode hex": "20AC" },
            { "Typeface name": "Symbol", "Dingbat dec": "161", "Dingbat hex": "A1", "Unicode dec": "978", "Unicode hex": "3D2" },
            { "Typeface name": "Symbol", "Dingbat dec": "162", "Dingbat hex": "A2", "Unicode dec": "8242", "Unicode hex": "2032" },
            { "Typeface name": "Symbol", "Dingbat dec": "163", "Dingbat hex": "A3", "Unicode dec": "8804", "Unicode hex": "2264" },
            { "Typeface name": "Symbol", "Dingbat dec": "164", "Dingbat hex": "A4", "Unicode dec": "8260", "Unicode hex": "2044" },
            { "Typeface name": "Symbol", "Dingbat dec": "165", "Dingbat hex": "A5", "Unicode dec": "8734", "Unicode hex": "221E" },
            { "Typeface name": "Symbol", "Dingbat dec": "166", "Dingbat hex": "A6", "Unicode dec": "402", "Unicode hex": "192" },
            { "Typeface name": "Symbol", "Dingbat dec": "167", "Dingbat hex": "A7", "Unicode dec": "9827", "Unicode hex": "2663" },
            { "Typeface name": "Symbol", "Dingbat dec": "168", "Dingbat hex": "A8", "Unicode dec": "9830", "Unicode hex": "2666" },
            { "Typeface name": "Symbol", "Dingbat dec": "169", "Dingbat hex": "A9", "Unicode dec": "9829", "Unicode hex": "2665" },
            { "Typeface name": "Symbol", "Dingbat dec": "170", "Dingbat hex": "AA", "Unicode dec": "9824", "Unicode hex": "2660" },
            { "Typeface name": "Symbol", "Dingbat dec": "171", "Dingbat hex": "AB", "Unicode dec": "8596", "Unicode hex": "2194" },
            { "Typeface name": "Symbol", "Dingbat dec": "172", "Dingbat hex": "AC", "Unicode dec": "8592", "Unicode hex": "2190" },
            { "Typeface name": "Symbol", "Dingbat dec": "173", "Dingbat hex": "AD", "Unicode dec": "8593", "Unicode hex": "2191" },
            { "Typeface name": "Symbol", "Dingbat dec": "174", "Dingbat hex": "AE", "Unicode dec": "8594", "Unicode hex": "2192" },
            { "Typeface name": "Symbol", "Dingbat dec": "175", "Dingbat hex": "AF", "Unicode dec": "8595", "Unicode hex": "2193" },
            { "Typeface name": "Symbol", "Dingbat dec": "176", "Dingbat hex": "B0", "Unicode dec": "176", "Unicode hex": "B0" },
            { "Typeface name": "Symbol", "Dingbat dec": "177", "Dingbat hex": "B1", "Unicode dec": "177", "Unicode hex": "B1" },
            { "Typeface name": "Symbol", "Dingbat dec": "178", "Dingbat hex": "B2", "Unicode dec": "8243", "Unicode hex": "2033" },
            { "Typeface name": "Symbol", "Dingbat dec": "179", "Dingbat hex": "B3", "Unicode dec": "8805", "Unicode hex": "2265" },
            { "Typeface name": "Symbol", "Dingbat dec": "180", "Dingbat hex": "B4", "Unicode dec": "215", "Unicode hex": "D7" },
            { "Typeface name": "Symbol", "Dingbat dec": "181", "Dingbat hex": "B5", "Unicode dec": "8733", "Unicode hex": "221D" },
            { "Typeface name": "Symbol", "Dingbat dec": "182", "Dingbat hex": "B6", "Unicode dec": "8706", "Unicode hex": "2202" },
            { "Typeface name": "Symbol", "Dingbat dec": "183", "Dingbat hex": "B7", "Unicode dec": "8226", "Unicode hex": "2022" },
            { "Typeface name": "Symbol", "Dingbat dec": "184", "Dingbat hex": "B8", "Unicode dec": "247", "Unicode hex": "F7" },
            { "Typeface name": "Symbol", "Dingbat dec": "185", "Dingbat hex": "B9", "Unicode dec": "8800", "Unicode hex": "2260" },
            { "Typeface name": "Symbol", "Dingbat dec": "186", "Dingbat hex": "BA", "Unicode dec": "8801", "Unicode hex": "2261" },
            { "Typeface name": "Symbol", "Dingbat dec": "187", "Dingbat hex": "BB", "Unicode dec": "8776", "Unicode hex": "2248" },
            { "Typeface name": "Symbol", "Dingbat dec": "188", "Dingbat hex": "BC", "Unicode dec": "8230", "Unicode hex": "2026" },
            { "Typeface name": "Symbol", "Dingbat dec": "189", "Dingbat hex": "BD", "Unicode dec": "9168", "Unicode hex": "23D0" },
            { "Typeface name": "Symbol", "Dingbat dec": "190", "Dingbat hex": "BE", "Unicode dec": "9135", "Unicode hex": "23AF" },
            { "Typeface name": "Symbol", "Dingbat dec": "191", "Dingbat hex": "BF", "Unicode dec": "8629", "Unicode hex": "21B5" },
            { "Typeface name": "Symbol", "Dingbat dec": "192", "Dingbat hex": "C0", "Unicode dec": "8501", "Unicode hex": "2135" },
            { "Typeface name": "Symbol", "Dingbat dec": "193", "Dingbat hex": "C1", "Unicode dec": "8465", "Unicode hex": "2111" },
            { "Typeface name": "Symbol", "Dingbat dec": "194", "Dingbat hex": "C2", "Unicode dec": "8476", "Unicode hex": "211C" },
            { "Typeface name": "Symbol", "Dingbat dec": "195", "Dingbat hex": "C3", "Unicode dec": "8472", "Unicode hex": "2118" },
            { "Typeface name": "Symbol", "Dingbat dec": "196", "Dingbat hex": "C4", "Unicode dec": "8855", "Unicode hex": "2297" },
            { "Typeface name": "Symbol", "Dingbat dec": "197", "Dingbat hex": "C5", "Unicode dec": "8853", "Unicode hex": "2295" },
            { "Typeface name": "Symbol", "Dingbat dec": "198", "Dingbat hex": "C6", "Unicode dec": "8709", "Unicode hex": "2205" },
            { "Typeface name": "Symbol", "Dingbat dec": "199", "Dingbat hex": "C7", "Unicode dec": "8745", "Unicode hex": "2229" },
            { "Typeface name": "Symbol", "Dingbat dec": "200", "Dingbat hex": "C8", "Unicode dec": "8746", "Unicode hex": "222A" },
            { "Typeface name": "Symbol", "Dingbat dec": "201", "Dingbat hex": "C9", "Unicode dec": "8835", "Unicode hex": "2283" },
            { "Typeface name": "Symbol", "Dingbat dec": "202", "Dingbat hex": "CA", "Unicode dec": "8839", "Unicode hex": "2287" },
            { "Typeface name": "Symbol", "Dingbat dec": "203", "Dingbat hex": "CB", "Unicode dec": "8836", "Unicode hex": "2284" },
            { "Typeface name": "Symbol", "Dingbat dec": "204", "Dingbat hex": "CC", "Unicode dec": "8834", "Unicode hex": "2282" },
            { "Typeface name": "Symbol", "Dingbat dec": "205", "Dingbat hex": "CD", "Unicode dec": "8838", "Unicode hex": "2286" },
            { "Typeface name": "Symbol", "Dingbat dec": "206", "Dingbat hex": "CE", "Unicode dec": "8712", "Unicode hex": "2208" },
            { "Typeface name": "Symbol", "Dingbat dec": "207", "Dingbat hex": "CF", "Unicode dec": "8713", "Unicode hex": "2209" },
            { "Typeface name": "Symbol", "Dingbat dec": "208", "Dingbat hex": "D0", "Unicode dec": "8736", "Unicode hex": "2220" },
            { "Typeface name": "Symbol", "Dingbat dec": "209", "Dingbat hex": "D1", "Unicode dec": "8711", "Unicode hex": "2207" },
            { "Typeface name": "Symbol", "Dingbat dec": "210", "Dingbat hex": "D2", "Unicode dec": "174", "Unicode hex": "AE" },
            { "Typeface name": "Symbol", "Dingbat dec": "211", "Dingbat hex": "D3", "Unicode dec": "169", "Unicode hex": "A9" },
            { "Typeface name": "Symbol", "Dingbat dec": "212", "Dingbat hex": "D4", "Unicode dec": "8482", "Unicode hex": "2122" },
            { "Typeface name": "Symbol", "Dingbat dec": "213", "Dingbat hex": "D5", "Unicode dec": "8719", "Unicode hex": "220F" },
            { "Typeface name": "Symbol", "Dingbat dec": "214", "Dingbat hex": "D6", "Unicode dec": "8730", "Unicode hex": "221A" },
            { "Typeface name": "Symbol", "Dingbat dec": "215", "Dingbat hex": "D7", "Unicode dec": "8901", "Unicode hex": "22C5" },
            { "Typeface name": "Symbol", "Dingbat dec": "216", "Dingbat hex": "D8", "Unicode dec": "172", "Unicode hex": "AC" },
            { "Typeface name": "Symbol", "Dingbat dec": "217", "Dingbat hex": "D9", "Unicode dec": "8743", "Unicode hex": "2227" },
            { "Typeface name": "Symbol", "Dingbat dec": "218", "Dingbat hex": "DA", "Unicode dec": "8744", "Unicode hex": "2228" },
            { "Typeface name": "Symbol", "Dingbat dec": "219", "Dingbat hex": "DB", "Unicode dec": "8660", "Unicode hex": "21D4" },
            { "Typeface name": "Symbol", "Dingbat dec": "220", "Dingbat hex": "DC", "Unicode dec": "8656", "Unicode hex": "21D0" },
            { "Typeface name": "Symbol", "Dingbat dec": "221", "Dingbat hex": "DD", "Unicode dec": "8657", "Unicode hex": "21D1" },
            { "Typeface name": "Symbol", "Dingbat dec": "222", "Dingbat hex": "DE", "Unicode dec": "8658", "Unicode hex": "21D2" },
            { "Typeface name": "Symbol", "Dingbat dec": "223", "Dingbat hex": "DF", "Unicode dec": "8659", "Unicode hex": "21D3" },
            { "Typeface name": "Symbol", "Dingbat dec": "224", "Dingbat hex": "E0", "Unicode dec": "9674", "Unicode hex": "25CA" },
            { "Typeface name": "Symbol", "Dingbat dec": "225", "Dingbat hex": "E1", "Unicode dec": "12296", "Unicode hex": "3008" },
            { "Typeface name": "Symbol", "Dingbat dec": "226", "Dingbat hex": "E2", "Unicode dec": "174", "Unicode hex": "AE" },
            { "Typeface name": "Symbol", "Dingbat dec": "227", "Dingbat hex": "E3", "Unicode dec": "169", "Unicode hex": "A9" },
            { "Typeface name": "Symbol", "Dingbat dec": "228", "Dingbat hex": "E4", "Unicode dec": "8482", "Unicode hex": "2122" },
            { "Typeface name": "Symbol", "Dingbat dec": "229", "Dingbat hex": "E5", "Unicode dec": "8721", "Unicode hex": "2211" },
            { "Typeface name": "Symbol", "Dingbat dec": "230", "Dingbat hex": "E6", "Unicode dec": "9115", "Unicode hex": "239B" },
            { "Typeface name": "Symbol", "Dingbat dec": "231", "Dingbat hex": "E7", "Unicode dec": "9116", "Unicode hex": "239C" },
            { "Typeface name": "Symbol", "Dingbat dec": "232", "Dingbat hex": "E8", "Unicode dec": "9117", "Unicode hex": "239D" },
            { "Typeface name": "Symbol", "Dingbat dec": "233", "Dingbat hex": "E9", "Unicode dec": "9121", "Unicode hex": "23A1" },
            { "Typeface name": "Symbol", "Dingbat dec": "234", "Dingbat hex": "EA", "Unicode dec": "9122", "Unicode hex": "23A2" },
            { "Typeface name": "Symbol", "Dingbat dec": "235", "Dingbat hex": "EB", "Unicode dec": "9123", "Unicode hex": "23A3" },
            { "Typeface name": "Symbol", "Dingbat dec": "236", "Dingbat hex": "EC", "Unicode dec": "9127", "Unicode hex": "23A7" },
            { "Typeface name": "Symbol", "Dingbat dec": "237", "Dingbat hex": "ED", "Unicode dec": "9128", "Unicode hex": "23A8" },
            { "Typeface name": "Symbol", "Dingbat dec": "238", "Dingbat hex": "EE", "Unicode dec": "9129", "Unicode hex": "23A9" },
            { "Typeface name": "Symbol", "Dingbat dec": "239", "Dingbat hex": "EF", "Unicode dec": "9130", "Unicode hex": "23AA" },
            { "Typeface name": "Symbol", "Dingbat dec": "240", "Dingbat hex": "F0", "Unicode dec": "63743", "Unicode hex": "F8FF" },
            { "Typeface name": "Symbol", "Dingbat dec": "241", "Dingbat hex": "F1", "Unicode dec": "12297", "Unicode hex": "3009" },
            { "Typeface name": "Symbol", "Dingbat dec": "242", "Dingbat hex": "F2", "Unicode dec": "8747", "Unicode hex": "222B" },
            { "Typeface name": "Symbol", "Dingbat dec": "243", "Dingbat hex": "F3", "Unicode dec": "8992", "Unicode hex": "2320" },
            { "Typeface name": "Symbol", "Dingbat dec": "244", "Dingbat hex": "F4", "Unicode dec": "9134", "Unicode hex": "23AE" },
            { "Typeface name": "Symbol", "Dingbat dec": "245", "Dingbat hex": "F5", "Unicode dec": "8993", "Unicode hex": "2321" },
            { "Typeface name": "Symbol", "Dingbat dec": "246", "Dingbat hex": "F6", "Unicode dec": "9118", "Unicode hex": "239E" },
            { "Typeface name": "Symbol", "Dingbat dec": "247", "Dingbat hex": "F7", "Unicode dec": "9119", "Unicode hex": "239F" },
            { "Typeface name": "Symbol", "Dingbat dec": "248", "Dingbat hex": "F8", "Unicode dec": "9120", "Unicode hex": "23A0" },
            { "Typeface name": "Symbol", "Dingbat dec": "249", "Dingbat hex": "F9", "Unicode dec": "9124", "Unicode hex": "23A4" },
            { "Typeface name": "Symbol", "Dingbat dec": "250", "Dingbat hex": "FA", "Unicode dec": "9125", "Unicode hex": "23A5" },
            { "Typeface name": "Symbol", "Dingbat dec": "251", "Dingbat hex": "FB", "Unicode dec": "9126", "Unicode hex": "23A6" },
            { "Typeface name": "Symbol", "Dingbat dec": "252", "Dingbat hex": "FC", "Unicode dec": "9131", "Unicode hex": "23AB" },
            { "Typeface name": "Symbol", "Dingbat dec": "253", "Dingbat hex": "FD", "Unicode dec": "9132", "Unicode hex": "23AC" },
            { "Typeface name": "Symbol", "Dingbat dec": "254", "Dingbat hex": "FE", "Unicode dec": "9133", "Unicode hex": "23AD" },
            { "Typeface name": "Webdings", "Dingbat dec": "32", "Dingbat hex": "20", "Unicode dec": "32", "Unicode hex": "20" },
            { "Typeface name": "Webdings", "Dingbat dec": "33", "Dingbat hex": "21", "Unicode dec": "128375", "Unicode hex": "1F577" },
            { "Typeface name": "Webdings", "Dingbat dec": "34", "Dingbat hex": "22", "Unicode dec": "128376", "Unicode hex": "1F578" },
            { "Typeface name": "Webdings", "Dingbat dec": "35", "Dingbat hex": "23", "Unicode dec": "128370", "Unicode hex": "1F572" },
            { "Typeface name": "Webdings", "Dingbat dec": "36", "Dingbat hex": "24", "Unicode dec": "128374", "Unicode hex": "1F576" },
            { "Typeface name": "Webdings", "Dingbat dec": "37", "Dingbat hex": "25", "Unicode dec": "127942", "Unicode hex": "1F3C6" },
            { "Typeface name": "Webdings", "Dingbat dec": "38", "Dingbat hex": "26", "Unicode dec": "127894", "Unicode hex": "1F396" },
            { "Typeface name": "Webdings", "Dingbat dec": "39", "Dingbat hex": "27", "Unicode dec": "128391", "Unicode hex": "1F587" },
            { "Typeface name": "Webdings", "Dingbat dec": "40", "Dingbat hex": "28", "Unicode dec": "128488", "Unicode hex": "1F5E8" },
            { "Typeface name": "Webdings", "Dingbat dec": "41", "Dingbat hex": "29", "Unicode dec": "128489", "Unicode hex": "1F5E9" },
            { "Typeface name": "Webdings", "Dingbat dec": "42", "Dingbat hex": "2A", "Unicode dec": "128496", "Unicode hex": "1F5F0" },
            { "Typeface name": "Webdings", "Dingbat dec": "43", "Dingbat hex": "2B", "Unicode dec": "128497", "Unicode hex": "1F5F1" },
            { "Typeface name": "Webdings", "Dingbat dec": "44", "Dingbat hex": "2C", "Unicode dec": "127798", "Unicode hex": "1F336" },
            { "Typeface name": "Webdings", "Dingbat dec": "45", "Dingbat hex": "2D", "Unicode dec": "127895", "Unicode hex": "1F397" },
            { "Typeface name": "Webdings", "Dingbat dec": "46", "Dingbat hex": "2E", "Unicode dec": "128638", "Unicode hex": "1F67E" },
            { "Typeface name": "Webdings", "Dingbat dec": "47", "Dingbat hex": "2F", "Unicode dec": "128636", "Unicode hex": "1F67C" },
            { "Typeface name": "Webdings", "Dingbat dec": "48", "Dingbat hex": "30", "Unicode dec": "128469", "Unicode hex": "1F5D5" },
            { "Typeface name": "Webdings", "Dingbat dec": "49", "Dingbat hex": "31", "Unicode dec": "128470", "Unicode hex": "1F5D6" },
            { "Typeface name": "Webdings", "Dingbat dec": "50", "Dingbat hex": "32", "Unicode dec": "128471", "Unicode hex": "1F5D7" },
            { "Typeface name": "Webdings", "Dingbat dec": "51", "Dingbat hex": "33", "Unicode dec": "9204", "Unicode hex": "23F4" },
            { "Typeface name": "Webdings", "Dingbat dec": "52", "Dingbat hex": "34", "Unicode dec": "9205", "Unicode hex": "23F5" },
            { "Typeface name": "Webdings", "Dingbat dec": "53", "Dingbat hex": "35", "Unicode dec": "9206", "Unicode hex": "23F6" },
            { "Typeface name": "Webdings", "Dingbat dec": "54", "Dingbat hex": "36", "Unicode dec": "9207", "Unicode hex": "23F7" },
            { "Typeface name": "Webdings", "Dingbat dec": "55", "Dingbat hex": "37", "Unicode dec": "9194", "Unicode hex": "23EA" },
            { "Typeface name": "Webdings", "Dingbat dec": "56", "Dingbat hex": "38", "Unicode dec": "9193", "Unicode hex": "23E9" },
            { "Typeface name": "Webdings", "Dingbat dec": "57", "Dingbat hex": "39", "Unicode dec": "9198", "Unicode hex": "23EE" },
            { "Typeface name": "Webdings", "Dingbat dec": "58", "Dingbat hex": "3A", "Unicode dec": "9197", "Unicode hex": "23ED" },
            { "Typeface name": "Webdings", "Dingbat dec": "59", "Dingbat hex": "3B", "Unicode dec": "9208", "Unicode hex": "23F8" },
            { "Typeface name": "Webdings", "Dingbat dec": "60", "Dingbat hex": "3C", "Unicode dec": "9209", "Unicode hex": "23F9" },
            { "Typeface name": "Webdings", "Dingbat dec": "61", "Dingbat hex": "3D", "Unicode dec": "9210", "Unicode hex": "23FA" },
            { "Typeface name": "Webdings", "Dingbat dec": "62", "Dingbat hex": "3E", "Unicode dec": "128474", "Unicode hex": "1F5DA" },
            { "Typeface name": "Webdings", "Dingbat dec": "63", "Dingbat hex": "3F", "Unicode dec": "128499", "Unicode hex": "1F5F3" },
            { "Typeface name": "Webdings", "Dingbat dec": "64", "Dingbat hex": "40", "Unicode dec": "128736", "Unicode hex": "1F6E0" },
            { "Typeface name": "Webdings", "Dingbat dec": "65", "Dingbat hex": "41", "Unicode dec": "127959", "Unicode hex": "1F3D7" },
            { "Typeface name": "Webdings", "Dingbat dec": "66", "Dingbat hex": "42", "Unicode dec": "127960", "Unicode hex": "1F3D8" },
            { "Typeface name": "Webdings", "Dingbat dec": "67", "Dingbat hex": "43", "Unicode dec": "127961", "Unicode hex": "1F3D9" },
            { "Typeface name": "Webdings", "Dingbat dec": "68", "Dingbat hex": "44", "Unicode dec": "127962", "Unicode hex": "1F3DA" },
            { "Typeface name": "Webdings", "Dingbat dec": "69", "Dingbat hex": "45", "Unicode dec": "127964", "Unicode hex": "1F3DC" },
            { "Typeface name": "Webdings", "Dingbat dec": "70", "Dingbat hex": "46", "Unicode dec": "127981", "Unicode hex": "1F3ED" },
            { "Typeface name": "Webdings", "Dingbat dec": "71", "Dingbat hex": "47", "Unicode dec": "127963", "Unicode hex": "1F3DB" },
            { "Typeface name": "Webdings", "Dingbat dec": "72", "Dingbat hex": "48", "Unicode dec": "127968", "Unicode hex": "1F3E0" },
            { "Typeface name": "Webdings", "Dingbat dec": "73", "Dingbat hex": "49", "Unicode dec": "127958", "Unicode hex": "1F3D6" },
            { "Typeface name": "Webdings", "Dingbat dec": "74", "Dingbat hex": "4A", "Unicode dec": "127965", "Unicode hex": "1F3DD" },
            { "Typeface name": "Webdings", "Dingbat dec": "75", "Dingbat hex": "4B", "Unicode dec": "128739", "Unicode hex": "1F6E3" },
            { "Typeface name": "Webdings", "Dingbat dec": "76", "Dingbat hex": "4C", "Unicode dec": "128269", "Unicode hex": "1F50D" },
            { "Typeface name": "Webdings", "Dingbat dec": "77", "Dingbat hex": "4D", "Unicode dec": "127956", "Unicode hex": "1F3D4" },
            { "Typeface name": "Webdings", "Dingbat dec": "78", "Dingbat hex": "4E", "Unicode dec": "128065", "Unicode hex": "1F441" },
            { "Typeface name": "Webdings", "Dingbat dec": "79", "Dingbat hex": "4F", "Unicode dec": "128066", "Unicode hex": "1F442" },
            { "Typeface name": "Webdings", "Dingbat dec": "80", "Dingbat hex": "50", "Unicode dec": "127966", "Unicode hex": "1F3DE" },
            { "Typeface name": "Webdings", "Dingbat dec": "81", "Dingbat hex": "51", "Unicode dec": "127957", "Unicode hex": "1F3D5" },
            { "Typeface name": "Webdings", "Dingbat dec": "82", "Dingbat hex": "52", "Unicode dec": "128740", "Unicode hex": "1F6E4" },
            { "Typeface name": "Webdings", "Dingbat dec": "83", "Dingbat hex": "53", "Unicode dec": "127967", "Unicode hex": "1F3DF" },
            { "Typeface name": "Webdings", "Dingbat dec": "84", "Dingbat hex": "54", "Unicode dec": "128755", "Unicode hex": "1F6F3" },
            { "Typeface name": "Webdings", "Dingbat dec": "85", "Dingbat hex": "55", "Unicode dec": "128364", "Unicode hex": "1F56C" },
            { "Typeface name": "Webdings", "Dingbat dec": "86", "Dingbat hex": "56", "Unicode dec": "128363", "Unicode hex": "1F56B" },
            { "Typeface name": "Webdings", "Dingbat dec": "87", "Dingbat hex": "57", "Unicode dec": "128360", "Unicode hex": "1F568" },
            { "Typeface name": "Webdings", "Dingbat dec": "88", "Dingbat hex": "58", "Unicode dec": "128264", "Unicode hex": "1F508" },
            { "Typeface name": "Webdings", "Dingbat dec": "89", "Dingbat hex": "59", "Unicode dec": "127892", "Unicode hex": "1F394" },
            { "Typeface name": "Webdings", "Dingbat dec": "90", "Dingbat hex": "5A", "Unicode dec": "127893", "Unicode hex": "1F395" },
            { "Typeface name": "Webdings", "Dingbat dec": "91", "Dingbat hex": "5B", "Unicode dec": "128492", "Unicode hex": "1F5EC" },
            { "Typeface name": "Webdings", "Dingbat dec": "92", "Dingbat hex": "5C", "Unicode dec": "128637", "Unicode hex": "1F67D" },
            { "Typeface name": "Webdings", "Dingbat dec": "93", "Dingbat hex": "5D", "Unicode dec": "128493", "Unicode hex": "1F5ED" },
            { "Typeface name": "Webdings", "Dingbat dec": "94", "Dingbat hex": "5E", "Unicode dec": "128490", "Unicode hex": "1F5EA" },
            { "Typeface name": "Webdings", "Dingbat dec": "95", "Dingbat hex": "5F", "Unicode dec": "128491", "Unicode hex": "1F5EB" },
            { "Typeface name": "Webdings", "Dingbat dec": "96", "Dingbat hex": "60", "Unicode dec": "11156", "Unicode hex": "2B94" },
            { "Typeface name": "Webdings", "Dingbat dec": "97", "Dingbat hex": "61", "Unicode dec": "10004", "Unicode hex": "2714" },
            { "Typeface name": "Webdings", "Dingbat dec": "98", "Dingbat hex": "62", "Unicode dec": "128690", "Unicode hex": "1F6B2" },
            { "Typeface name": "Webdings", "Dingbat dec": "99", "Dingbat hex": "63", "Unicode dec": "11036", "Unicode hex": "2B1C" },
            { "Typeface name": "Webdings", "Dingbat dec": "100", "Dingbat hex": "64", "Unicode dec": "128737", "Unicode hex": "1F6E1" },
            { "Typeface name": "Webdings", "Dingbat dec": "101", "Dingbat hex": "65", "Unicode dec": "128230", "Unicode hex": "1F4E6" },
            { "Typeface name": "Webdings", "Dingbat dec": "102", "Dingbat hex": "66", "Unicode dec": "128753", "Unicode hex": "1F6F1" },
            { "Typeface name": "Webdings", "Dingbat dec": "103", "Dingbat hex": "67", "Unicode dec": "11035", "Unicode hex": "2B1B" },
            { "Typeface name": "Webdings", "Dingbat dec": "104", "Dingbat hex": "68", "Unicode dec": "128657", "Unicode hex": "1F691" },
            { "Typeface name": "Webdings", "Dingbat dec": "105", "Dingbat hex": "69", "Unicode dec": "128712", "Unicode hex": "1F6C8" },
            { "Typeface name": "Webdings", "Dingbat dec": "106", "Dingbat hex": "6A", "Unicode dec": "128745", "Unicode hex": "1F6E9" },
            { "Typeface name": "Webdings", "Dingbat dec": "107", "Dingbat hex": "6B", "Unicode dec": "128752", "Unicode hex": "1F6F0" },
            { "Typeface name": "Webdings", "Dingbat dec": "108", "Dingbat hex": "6C", "Unicode dec": "128968", "Unicode hex": "1F7C8" },
            { "Typeface name": "Webdings", "Dingbat dec": "109", "Dingbat hex": "6D", "Unicode dec": "128372", "Unicode hex": "1F574" },
            { "Typeface name": "Webdings", "Dingbat dec": "110", "Dingbat hex": "6E", "Unicode dec": "11044", "Unicode hex": "2B24" },
            { "Typeface name": "Webdings", "Dingbat dec": "111", "Dingbat hex": "6F", "Unicode dec": "128741", "Unicode hex": "1F6E5" },
            { "Typeface name": "Webdings", "Dingbat dec": "112", "Dingbat hex": "70", "Unicode dec": "128660", "Unicode hex": "1F694" },
            { "Typeface name": "Webdings", "Dingbat dec": "113", "Dingbat hex": "71", "Unicode dec": "128472", "Unicode hex": "1F5D8" },
            { "Typeface name": "Webdings", "Dingbat dec": "114", "Dingbat hex": "72", "Unicode dec": "128473", "Unicode hex": "1F5D9" },
            { "Typeface name": "Webdings", "Dingbat dec": "115", "Dingbat hex": "73", "Unicode dec": "10067", "Unicode hex": "2753" },
            { "Typeface name": "Webdings", "Dingbat dec": "116", "Dingbat hex": "74", "Unicode dec": "128754", "Unicode hex": "1F6F2" },
            { "Typeface name": "Webdings", "Dingbat dec": "117", "Dingbat hex": "75", "Unicode dec": "128647", "Unicode hex": "1F687" },
            { "Typeface name": "Webdings", "Dingbat dec": "118", "Dingbat hex": "76", "Unicode dec": "128653", "Unicode hex": "1F68D" },
            { "Typeface name": "Webdings", "Dingbat dec": "119", "Dingbat hex": "77", "Unicode dec": "9971", "Unicode hex": "26F3" },
            { "Typeface name": "Webdings", "Dingbat dec": "120", "Dingbat hex": "78", "Unicode dec": "10680", "Unicode hex": "29B8" },
            { "Typeface name": "Webdings", "Dingbat dec": "121", "Dingbat hex": "79", "Unicode dec": "8854", "Unicode hex": "2296" },
            { "Typeface name": "Webdings", "Dingbat dec": "122", "Dingbat hex": "7A", "Unicode dec": "128685", "Unicode hex": "1F6AD" },
            { "Typeface name": "Webdings", "Dingbat dec": "123", "Dingbat hex": "7B", "Unicode dec": "128494", "Unicode hex": "1F5EE" },
            { "Typeface name": "Webdings", "Dingbat dec": "124", "Dingbat hex": "7C", "Unicode dec": "9168", "Unicode hex": "23D0" },
            { "Typeface name": "Webdings", "Dingbat dec": "125", "Dingbat hex": "7D", "Unicode dec": "128495", "Unicode hex": "1F5EF" },
            { "Typeface name": "Webdings", "Dingbat dec": "126", "Dingbat hex": "7E", "Unicode dec": "128498", "Unicode hex": "1F5F2" },
            { "Typeface name": "Webdings", "Dingbat dec": "128", "Dingbat hex": "80", "Unicode dec": "128697", "Unicode hex": "1F6B9" },
            { "Typeface name": "Webdings", "Dingbat dec": "129", "Dingbat hex": "81", "Unicode dec": "128698", "Unicode hex": "1F6BA" },
            { "Typeface name": "Webdings", "Dingbat dec": "130", "Dingbat hex": "82", "Unicode dec": "128713", "Unicode hex": "1F6C9" },
            { "Typeface name": "Webdings", "Dingbat dec": "131", "Dingbat hex": "83", "Unicode dec": "128714", "Unicode hex": "1F6CA" },
            { "Typeface name": "Webdings", "Dingbat dec": "132", "Dingbat hex": "84", "Unicode dec": "128700", "Unicode hex": "1F6BC" },
            { "Typeface name": "Webdings", "Dingbat dec": "133", "Dingbat hex": "85", "Unicode dec": "128125", "Unicode hex": "1F47D" },
            { "Typeface name": "Webdings", "Dingbat dec": "134", "Dingbat hex": "86", "Unicode dec": "127947", "Unicode hex": "1F3CB" },
            { "Typeface name": "Webdings", "Dingbat dec": "135", "Dingbat hex": "87", "Unicode dec": "9975", "Unicode hex": "26F7" },
            { "Typeface name": "Webdings", "Dingbat dec": "136", "Dingbat hex": "88", "Unicode dec": "127938", "Unicode hex": "1F3C2" },
            { "Typeface name": "Webdings", "Dingbat dec": "137", "Dingbat hex": "89", "Unicode dec": "127948", "Unicode hex": "1F3CC" },
            { "Typeface name": "Webdings", "Dingbat dec": "138", "Dingbat hex": "8A", "Unicode dec": "127946", "Unicode hex": "1F3CA" },
            { "Typeface name": "Webdings", "Dingbat dec": "139", "Dingbat hex": "8B", "Unicode dec": "127940", "Unicode hex": "1F3C4" },
            { "Typeface name": "Webdings", "Dingbat dec": "140", "Dingbat hex": "8C", "Unicode dec": "127949", "Unicode hex": "1F3CD" },
            { "Typeface name": "Webdings", "Dingbat dec": "141", "Dingbat hex": "8D", "Unicode dec": "127950", "Unicode hex": "1F3CE" },
            { "Typeface name": "Webdings", "Dingbat dec": "142", "Dingbat hex": "8E", "Unicode dec": "128664", "Unicode hex": "1F698" },
            { "Typeface name": "Webdings", "Dingbat dec": "143", "Dingbat hex": "8F", "Unicode dec": "128480", "Unicode hex": "1F5E0" },
            { "Typeface name": "Webdings", "Dingbat dec": "144", "Dingbat hex": "90", "Unicode dec": "128738", "Unicode hex": "1F6E2" },
            { "Typeface name": "Webdings", "Dingbat dec": "145", "Dingbat hex": "91", "Unicode dec": "128176", "Unicode hex": "1F4B0" },
            { "Typeface name": "Webdings", "Dingbat dec": "146", "Dingbat hex": "92", "Unicode dec": "127991", "Unicode hex": "1F3F7" },
            { "Typeface name": "Webdings", "Dingbat dec": "147", "Dingbat hex": "93", "Unicode dec": "128179", "Unicode hex": "1F4B3" },
            { "Typeface name": "Webdings", "Dingbat dec": "148", "Dingbat hex": "94", "Unicode dec": "128106", "Unicode hex": "1F46A" },
            { "Typeface name": "Webdings", "Dingbat dec": "149", "Dingbat hex": "95", "Unicode dec": "128481", "Unicode hex": "1F5E1" },
            { "Typeface name": "Webdings", "Dingbat dec": "150", "Dingbat hex": "96", "Unicode dec": "128482", "Unicode hex": "1F5E2" },
            { "Typeface name": "Webdings", "Dingbat dec": "151", "Dingbat hex": "97", "Unicode dec": "128483", "Unicode hex": "1F5E3" },
            { "Typeface name": "Webdings", "Dingbat dec": "152", "Dingbat hex": "98", "Unicode dec": "10031", "Unicode hex": "272F" },
            { "Typeface name": "Webdings", "Dingbat dec": "153", "Dingbat hex": "99", "Unicode dec": "128388", "Unicode hex": "1F584" },
            { "Typeface name": "Webdings", "Dingbat dec": "154", "Dingbat hex": "9A", "Unicode dec": "128389", "Unicode hex": "1F585" },
            { "Typeface name": "Webdings", "Dingbat dec": "155", "Dingbat hex": "9B", "Unicode dec": "128387", "Unicode hex": "1F583" },
            { "Typeface name": "Webdings", "Dingbat dec": "156", "Dingbat hex": "9C", "Unicode dec": "128390", "Unicode hex": "1F586" },
            { "Typeface name": "Webdings", "Dingbat dec": "157", "Dingbat hex": "9D", "Unicode dec": "128441", "Unicode hex": "1F5B9" },
            { "Typeface name": "Webdings", "Dingbat dec": "158", "Dingbat hex": "9E", "Unicode dec": "128442", "Unicode hex": "1F5BA" },
            { "Typeface name": "Webdings", "Dingbat dec": "159", "Dingbat hex": "9F", "Unicode dec": "128443", "Unicode hex": "1F5BB" },
            { "Typeface name": "Webdings", "Dingbat dec": "160", "Dingbat hex": "A0", "Unicode dec": "128373", "Unicode hex": "1F575" },
            { "Typeface name": "Webdings", "Dingbat dec": "161", "Dingbat hex": "A1", "Unicode dec": "128368", "Unicode hex": "1F570" },
            { "Typeface name": "Webdings", "Dingbat dec": "162", "Dingbat hex": "A2", "Unicode dec": "128445", "Unicode hex": "1F5BD" },
            { "Typeface name": "Webdings", "Dingbat dec": "163", "Dingbat hex": "A3", "Unicode dec": "128446", "Unicode hex": "1F5BE" },
            { "Typeface name": "Webdings", "Dingbat dec": "164", "Dingbat hex": "A4", "Unicode dec": "128203", "Unicode hex": "1F4CB" },
            { "Typeface name": "Webdings", "Dingbat dec": "165", "Dingbat hex": "A5", "Unicode dec": "128466", "Unicode hex": "1F5D2" },
            { "Typeface name": "Webdings", "Dingbat dec": "166", "Dingbat hex": "A6", "Unicode dec": "128467", "Unicode hex": "1F5D3" },
            { "Typeface name": "Webdings", "Dingbat dec": "167", "Dingbat hex": "A7", "Unicode dec": "128366", "Unicode hex": "1F56E" },
            { "Typeface name": "Webdings", "Dingbat dec": "168", "Dingbat hex": "A8", "Unicode dec": "128218", "Unicode hex": "1F4DA" },
            { "Typeface name": "Webdings", "Dingbat dec": "169", "Dingbat hex": "A9", "Unicode dec": "128478", "Unicode hex": "1F5DE" },
            { "Typeface name": "Webdings", "Dingbat dec": "170", "Dingbat hex": "AA", "Unicode dec": "128479", "Unicode hex": "1F5DF" },
            { "Typeface name": "Webdings", "Dingbat dec": "171", "Dingbat hex": "AB", "Unicode dec": "128451", "Unicode hex": "1F5C3" },
            { "Typeface name": "Webdings", "Dingbat dec": "172", "Dingbat hex": "AC", "Unicode dec": "128450", "Unicode hex": "1F5C2" },
            { "Typeface name": "Webdings", "Dingbat dec": "173", "Dingbat hex": "AD", "Unicode dec": "128444", "Unicode hex": "1F5BC" },
            { "Typeface name": "Webdings", "Dingbat dec": "174", "Dingbat hex": "AE", "Unicode dec": "127917", "Unicode hex": "1F3AD" },
            { "Typeface name": "Webdings", "Dingbat dec": "175", "Dingbat hex": "AF", "Unicode dec": "127900", "Unicode hex": "1F39C" },
            { "Typeface name": "Webdings", "Dingbat dec": "176", "Dingbat hex": "B0", "Unicode dec": "127896", "Unicode hex": "1F398" },
            { "Typeface name": "Webdings", "Dingbat dec": "177", "Dingbat hex": "B1", "Unicode dec": "127897", "Unicode hex": "1F399" },
            { "Typeface name": "Webdings", "Dingbat dec": "178", "Dingbat hex": "B2", "Unicode dec": "127911", "Unicode hex": "1F3A7" },
            { "Typeface name": "Webdings", "Dingbat dec": "179", "Dingbat hex": "B3", "Unicode dec": "128191", "Unicode hex": "1F4BF" },
            { "Typeface name": "Webdings", "Dingbat dec": "180", "Dingbat hex": "B4", "Unicode dec": "127902", "Unicode hex": "1F39E" },
            { "Typeface name": "Webdings", "Dingbat dec": "181", "Dingbat hex": "B5", "Unicode dec": "128247", "Unicode hex": "1F4F7" },
            { "Typeface name": "Webdings", "Dingbat dec": "182", "Dingbat hex": "B6", "Unicode dec": "127903", "Unicode hex": "1F39F" },
            { "Typeface name": "Webdings", "Dingbat dec": "183", "Dingbat hex": "B7", "Unicode dec": "127916", "Unicode hex": "1F3AC" },
            { "Typeface name": "Webdings", "Dingbat dec": "184", "Dingbat hex": "B8", "Unicode dec": "128253", "Unicode hex": "1F4FD" },
            { "Typeface name": "Webdings", "Dingbat dec": "185", "Dingbat hex": "B9", "Unicode dec": "128249", "Unicode hex": "1F4F9" },
            { "Typeface name": "Webdings", "Dingbat dec": "186", "Dingbat hex": "BA", "Unicode dec": "128254", "Unicode hex": "1F4FE" },
            { "Typeface name": "Webdings", "Dingbat dec": "187", "Dingbat hex": "BB", "Unicode dec": "128251", "Unicode hex": "1F4FB" },
            { "Typeface name": "Webdings", "Dingbat dec": "188", "Dingbat hex": "BC", "Unicode dec": "127898", "Unicode hex": "1F39A" },
            { "Typeface name": "Webdings", "Dingbat dec": "189", "Dingbat hex": "BD", "Unicode dec": "127899", "Unicode hex": "1F39B" },
            { "Typeface name": "Webdings", "Dingbat dec": "190", "Dingbat hex": "BE", "Unicode dec": "128250", "Unicode hex": "1F4FA" },
            { "Typeface name": "Webdings", "Dingbat dec": "191", "Dingbat hex": "BF", "Unicode dec": "128187", "Unicode hex": "1F4BB" },
            { "Typeface name": "Webdings", "Dingbat dec": "192", "Dingbat hex": "C0", "Unicode dec": "128421", "Unicode hex": "1F5A5" },
            { "Typeface name": "Webdings", "Dingbat dec": "193", "Dingbat hex": "C1", "Unicode dec": "128422", "Unicode hex": "1F5A6" },
            { "Typeface name": "Webdings", "Dingbat dec": "194", "Dingbat hex": "C2", "Unicode dec": "128423", "Unicode hex": "1F5A7" },
            { "Typeface name": "Webdings", "Dingbat dec": "195", "Dingbat hex": "C3", "Unicode dec": "128377", "Unicode hex": "1F579" },
            { "Typeface name": "Webdings", "Dingbat dec": "196", "Dingbat hex": "C4", "Unicode dec": "127918", "Unicode hex": "1F3AE" },
            { "Typeface name": "Webdings", "Dingbat dec": "197", "Dingbat hex": "C5", "Unicode dec": "128379", "Unicode hex": "1F57B" },
            { "Typeface name": "Webdings", "Dingbat dec": "198", "Dingbat hex": "C6", "Unicode dec": "128380", "Unicode hex": "1F57C" },
            { "Typeface name": "Webdings", "Dingbat dec": "199", "Dingbat hex": "C7", "Unicode dec": "128223", "Unicode hex": "1F4DF" },
            { "Typeface name": "Webdings", "Dingbat dec": "200", "Dingbat hex": "C8", "Unicode dec": "128385", "Unicode hex": "1F581" },
            { "Typeface name": "Webdings", "Dingbat dec": "201", "Dingbat hex": "C9", "Unicode dec": "128384", "Unicode hex": "1F580" },
            { "Typeface name": "Webdings", "Dingbat dec": "202", "Dingbat hex": "CA", "Unicode dec": "128424", "Unicode hex": "1F5A8" },
            { "Typeface name": "Webdings", "Dingbat dec": "203", "Dingbat hex": "CB", "Unicode dec": "128425", "Unicode hex": "1F5A9" },
            { "Typeface name": "Webdings", "Dingbat dec": "204", "Dingbat hex": "CC", "Unicode dec": "128447", "Unicode hex": "1F5BF" },
            { "Typeface name": "Webdings", "Dingbat dec": "205", "Dingbat hex": "CD", "Unicode dec": "128426", "Unicode hex": "1F5AA" },
            { "Typeface name": "Webdings", "Dingbat dec": "206", "Dingbat hex": "CE", "Unicode dec": "128476", "Unicode hex": "1F5DC" },
            { "Typeface name": "Webdings", "Dingbat dec": "207", "Dingbat hex": "CF", "Unicode dec": "128274", "Unicode hex": "1F512" },
            { "Typeface name": "Webdings", "Dingbat dec": "208", "Dingbat hex": "D0", "Unicode dec": "128275", "Unicode hex": "1F513" },
            { "Typeface name": "Webdings", "Dingbat dec": "209", "Dingbat hex": "D1", "Unicode dec": "128477", "Unicode hex": "1F5DD" },
            { "Typeface name": "Webdings", "Dingbat dec": "210", "Dingbat hex": "D2", "Unicode dec": "128229", "Unicode hex": "1F4E5" },
            { "Typeface name": "Webdings", "Dingbat dec": "211", "Dingbat hex": "D3", "Unicode dec": "128228", "Unicode hex": "1F4E4" },
            { "Typeface name": "Webdings", "Dingbat dec": "212", "Dingbat hex": "D4", "Unicode dec": "128371", "Unicode hex": "1F573" },
            { "Typeface name": "Webdings", "Dingbat dec": "213", "Dingbat hex": "D5", "Unicode dec": "127779", "Unicode hex": "1F323" },
            { "Typeface name": "Webdings", "Dingbat dec": "214", "Dingbat hex": "D6", "Unicode dec": "127780", "Unicode hex": "1F324" },
            { "Typeface name": "Webdings", "Dingbat dec": "215", "Dingbat hex": "D7", "Unicode dec": "127781", "Unicode hex": "1F325" },
            { "Typeface name": "Webdings", "Dingbat dec": "216", "Dingbat hex": "D8", "Unicode dec": "127782", "Unicode hex": "1F326" },
            { "Typeface name": "Webdings", "Dingbat dec": "217", "Dingbat hex": "D9", "Unicode dec": "9729", "Unicode hex": "2601" },
            { "Typeface name": "Webdings", "Dingbat dec": "218", "Dingbat hex": "DA", "Unicode dec": "127784", "Unicode hex": "1F328" },
            { "Typeface name": "Webdings", "Dingbat dec": "219", "Dingbat hex": "DB", "Unicode dec": "127783", "Unicode hex": "1F327" },
            { "Typeface name": "Webdings", "Dingbat dec": "220", "Dingbat hex": "DC", "Unicode dec": "127785", "Unicode hex": "1F329" },
            { "Typeface name": "Webdings", "Dingbat dec": "221", "Dingbat hex": "DD", "Unicode dec": "127786", "Unicode hex": "1F32A" },
            { "Typeface name": "Webdings", "Dingbat dec": "222", "Dingbat hex": "DE", "Unicode dec": "127788", "Unicode hex": "1F32C" },
            { "Typeface name": "Webdings", "Dingbat dec": "223", "Dingbat hex": "DF", "Unicode dec": "127787", "Unicode hex": "1F32B" },
            { "Typeface name": "Webdings", "Dingbat dec": "224", "Dingbat hex": "E0", "Unicode dec": "127772", "Unicode hex": "1F31C" },
            { "Typeface name": "Webdings", "Dingbat dec": "225", "Dingbat hex": "E1", "Unicode dec": "127777", "Unicode hex": "1F321" },
            { "Typeface name": "Webdings", "Dingbat dec": "226", "Dingbat hex": "E2", "Unicode dec": "128715", "Unicode hex": "1F6CB" },
            { "Typeface name": "Webdings", "Dingbat dec": "227", "Dingbat hex": "E3", "Unicode dec": "128719", "Unicode hex": "1F6CF" },
            { "Typeface name": "Webdings", "Dingbat dec": "228", "Dingbat hex": "E4", "Unicode dec": "127869", "Unicode hex": "1F37D" },
            { "Typeface name": "Webdings", "Dingbat dec": "229", "Dingbat hex": "E5", "Unicode dec": "127864", "Unicode hex": "1F378" },
            { "Typeface name": "Webdings", "Dingbat dec": "230", "Dingbat hex": "E6", "Unicode dec": "128718", "Unicode hex": "1F6CE" },
            { "Typeface name": "Webdings", "Dingbat dec": "231", "Dingbat hex": "E7", "Unicode dec": "128717", "Unicode hex": "1F6CD" },
            { "Typeface name": "Webdings", "Dingbat dec": "232", "Dingbat hex": "E8", "Unicode dec": "9413", "Unicode hex": "24C5" },
            { "Typeface name": "Webdings", "Dingbat dec": "233", "Dingbat hex": "E9", "Unicode dec": "9855", "Unicode hex": "267F" },
            { "Typeface name": "Webdings", "Dingbat dec": "234", "Dingbat hex": "EA", "Unicode dec": "128710", "Unicode hex": "1F6C6" },
            { "Typeface name": "Webdings", "Dingbat dec": "235", "Dingbat hex": "EB", "Unicode dec": "128392", "Unicode hex": "1F588" },
            { "Typeface name": "Webdings", "Dingbat dec": "236", "Dingbat hex": "EC", "Unicode dec": "127891", "Unicode hex": "1F393" },
            { "Typeface name": "Webdings", "Dingbat dec": "237", "Dingbat hex": "ED", "Unicode dec": "128484", "Unicode hex": "1F5E4" },
            { "Typeface name": "Webdings", "Dingbat dec": "238", "Dingbat hex": "EE", "Unicode dec": "128485", "Unicode hex": "1F5E5" },
            { "Typeface name": "Webdings", "Dingbat dec": "239", "Dingbat hex": "EF", "Unicode dec": "128486", "Unicode hex": "1F5E6" },
            { "Typeface name": "Webdings", "Dingbat dec": "240", "Dingbat hex": "F0", "Unicode dec": "128487", "Unicode hex": "1F5E7" },
            { "Typeface name": "Webdings", "Dingbat dec": "241", "Dingbat hex": "F1", "Unicode dec": "128746", "Unicode hex": "1F6EA" },
            { "Typeface name": "Webdings", "Dingbat dec": "242", "Dingbat hex": "F2", "Unicode dec": "128063", "Unicode hex": "1F43F" },
            { "Typeface name": "Webdings", "Dingbat dec": "243", "Dingbat hex": "F3", "Unicode dec": "128038", "Unicode hex": "1F426" },
            { "Typeface name": "Webdings", "Dingbat dec": "244", "Dingbat hex": "F4", "Unicode dec": "128031", "Unicode hex": "1F41F" },
            { "Typeface name": "Webdings", "Dingbat dec": "245", "Dingbat hex": "F5", "Unicode dec": "128021", "Unicode hex": "1F415" },
            { "Typeface name": "Webdings", "Dingbat dec": "246", "Dingbat hex": "F6", "Unicode dec": "128008", "Unicode hex": "1F408" },
            { "Typeface name": "Webdings", "Dingbat dec": "247", "Dingbat hex": "F7", "Unicode dec": "128620", "Unicode hex": "1F66C" },
            { "Typeface name": "Webdings", "Dingbat dec": "248", "Dingbat hex": "F8", "Unicode dec": "128622", "Unicode hex": "1F66E" },
            { "Typeface name": "Webdings", "Dingbat dec": "249", "Dingbat hex": "F9", "Unicode dec": "128621", "Unicode hex": "1F66D" },
            { "Typeface name": "Webdings", "Dingbat dec": "250", "Dingbat hex": "FA", "Unicode dec": "128623", "Unicode hex": "1F66F" },
            { "Typeface name": "Webdings", "Dingbat dec": "251", "Dingbat hex": "FB", "Unicode dec": "128506", "Unicode hex": "1F5FA" },
            { "Typeface name": "Webdings", "Dingbat dec": "252", "Dingbat hex": "FC", "Unicode dec": "127757", "Unicode hex": "1F30D" },
            { "Typeface name": "Webdings", "Dingbat dec": "253", "Dingbat hex": "FD", "Unicode dec": "127759", "Unicode hex": "1F30F" },
            { "Typeface name": "Webdings", "Dingbat dec": "254", "Dingbat hex": "FE", "Unicode dec": "127758", "Unicode hex": "1F30E" },
            { "Typeface name": "Webdings", "Dingbat dec": "255", "Dingbat hex": "FF", "Unicode dec": "128330", "Unicode hex": "1F54A" },
            { "Typeface name": "Wingdings", "Dingbat dec": "32", "Dingbat hex": "20", "Unicode dec": "32", "Unicode hex": "20" },
            { "Typeface name": "Wingdings", "Dingbat dec": "33", "Dingbat hex": "21", "Unicode dec": "128393", "Unicode hex": "1F589" },
            { "Typeface name": "Wingdings", "Dingbat dec": "34", "Dingbat hex": "22", "Unicode dec": "9986", "Unicode hex": "2702" },
            { "Typeface name": "Wingdings", "Dingbat dec": "35", "Dingbat hex": "23", "Unicode dec": "9985", "Unicode hex": "2701" },
            { "Typeface name": "Wingdings", "Dingbat dec": "36", "Dingbat hex": "24", "Unicode dec": "128083", "Unicode hex": "1F453" },
            { "Typeface name": "Wingdings", "Dingbat dec": "37", "Dingbat hex": "25", "Unicode dec": "128365", "Unicode hex": "1F56D" },
            { "Typeface name": "Wingdings", "Dingbat dec": "38", "Dingbat hex": "26", "Unicode dec": "128366", "Unicode hex": "1F56E" },
            { "Typeface name": "Wingdings", "Dingbat dec": "39", "Dingbat hex": "27", "Unicode dec": "128367", "Unicode hex": "1F56F" },
            { "Typeface name": "Wingdings", "Dingbat dec": "40", "Dingbat hex": "28", "Unicode dec": "128383", "Unicode hex": "1F57F" },
            { "Typeface name": "Wingdings", "Dingbat dec": "41", "Dingbat hex": "29", "Unicode dec": "9990", "Unicode hex": "2706" },
            { "Typeface name": "Wingdings", "Dingbat dec": "42", "Dingbat hex": "2A", "Unicode dec": "128386", "Unicode hex": "1F582" },
            { "Typeface name": "Wingdings", "Dingbat dec": "43", "Dingbat hex": "2B", "Unicode dec": "128387", "Unicode hex": "1F583" },
            { "Typeface name": "Wingdings", "Dingbat dec": "44", "Dingbat hex": "2C", "Unicode dec": "128234", "Unicode hex": "1F4EA" },
            { "Typeface name": "Wingdings", "Dingbat dec": "45", "Dingbat hex": "2D", "Unicode dec": "128235", "Unicode hex": "1F4EB" },
            { "Typeface name": "Wingdings", "Dingbat dec": "46", "Dingbat hex": "2E", "Unicode dec": "128236", "Unicode hex": "1F4EC" },
            { "Typeface name": "Wingdings", "Dingbat dec": "47", "Dingbat hex": "2F", "Unicode dec": "128237", "Unicode hex": "1F4ED" },
            { "Typeface name": "Wingdings", "Dingbat dec": "48", "Dingbat hex": "30", "Unicode dec": "128448", "Unicode hex": "1F5C0" },
            { "Typeface name": "Wingdings", "Dingbat dec": "49", "Dingbat hex": "31", "Unicode dec": "128449", "Unicode hex": "1F5C1" },
            { "Typeface name": "Wingdings", "Dingbat dec": "50", "Dingbat hex": "32", "Unicode dec": "128462", "Unicode hex": "1F5CE" },
            { "Typeface name": "Wingdings", "Dingbat dec": "51", "Dingbat hex": "33", "Unicode dec": "128463", "Unicode hex": "1F5CF" },
            { "Typeface name": "Wingdings", "Dingbat dec": "52", "Dingbat hex": "34", "Unicode dec": "128464", "Unicode hex": "1F5D0" },
            { "Typeface name": "Wingdings", "Dingbat dec": "53", "Dingbat hex": "35", "Unicode dec": "128452", "Unicode hex": "1F5C4" },
            { "Typeface name": "Wingdings", "Dingbat dec": "54", "Dingbat hex": "36", "Unicode dec": "8987", "Unicode hex": "231B" },
            { "Typeface name": "Wingdings", "Dingbat dec": "55", "Dingbat hex": "37", "Unicode dec": "128430", "Unicode hex": "1F5AE" },
            { "Typeface name": "Wingdings", "Dingbat dec": "56", "Dingbat hex": "38", "Unicode dec": "128432", "Unicode hex": "1F5B0" },
            { "Typeface name": "Wingdings", "Dingbat dec": "57", "Dingbat hex": "39", "Unicode dec": "128434", "Unicode hex": "1F5B2" },
            { "Typeface name": "Wingdings", "Dingbat dec": "58", "Dingbat hex": "3A", "Unicode dec": "128435", "Unicode hex": "1F5B3" },
            { "Typeface name": "Wingdings", "Dingbat dec": "59", "Dingbat hex": "3B", "Unicode dec": "128436", "Unicode hex": "1F5B4" },
            { "Typeface name": "Wingdings", "Dingbat dec": "60", "Dingbat hex": "3C", "Unicode dec": "128427", "Unicode hex": "1F5AB" },
            { "Typeface name": "Wingdings", "Dingbat dec": "61", "Dingbat hex": "3D", "Unicode dec": "128428", "Unicode hex": "1F5AC" },
            { "Typeface name": "Wingdings", "Dingbat dec": "62", "Dingbat hex": "3E", "Unicode dec": "9991", "Unicode hex": "2707" },
            { "Typeface name": "Wingdings", "Dingbat dec": "63", "Dingbat hex": "3F", "Unicode dec": "9997", "Unicode hex": "270D" },
            { "Typeface name": "Wingdings", "Dingbat dec": "64", "Dingbat hex": "40", "Unicode dec": "128398", "Unicode hex": "1F58E" },
            { "Typeface name": "Wingdings", "Dingbat dec": "65", "Dingbat hex": "41", "Unicode dec": "9996", "Unicode hex": "270C" },
            { "Typeface name": "Wingdings", "Dingbat dec": "66", "Dingbat hex": "42", "Unicode dec": "128399", "Unicode hex": "1F58F" },
            { "Typeface name": "Wingdings", "Dingbat dec": "67", "Dingbat hex": "43", "Unicode dec": "128077", "Unicode hex": "1F44D" },
            { "Typeface name": "Wingdings", "Dingbat dec": "68", "Dingbat hex": "44", "Unicode dec": "128078", "Unicode hex": "1F44E" },
            { "Typeface name": "Wingdings", "Dingbat dec": "69", "Dingbat hex": "45", "Unicode dec": "9756", "Unicode hex": "261C" },
            { "Typeface name": "Wingdings", "Dingbat dec": "70", "Dingbat hex": "46", "Unicode dec": "9758", "Unicode hex": "261E" },
            { "Typeface name": "Wingdings", "Dingbat dec": "71", "Dingbat hex": "47", "Unicode dec": "9757", "Unicode hex": "261D" },
            { "Typeface name": "Wingdings", "Dingbat dec": "72", "Dingbat hex": "48", "Unicode dec": "9759", "Unicode hex": "261F" },
            { "Typeface name": "Wingdings", "Dingbat dec": "73", "Dingbat hex": "49", "Unicode dec": "128400", "Unicode hex": "1F590" },
            { "Typeface name": "Wingdings", "Dingbat dec": "74", "Dingbat hex": "4A", "Unicode dec": "9786", "Unicode hex": "263A" },
            { "Typeface name": "Wingdings", "Dingbat dec": "75", "Dingbat hex": "4B", "Unicode dec": "128528", "Unicode hex": "1F610" },
            { "Typeface name": "Wingdings", "Dingbat dec": "76", "Dingbat hex": "4C", "Unicode dec": "9785", "Unicode hex": "2639" },
            { "Typeface name": "Wingdings", "Dingbat dec": "77", "Dingbat hex": "4D", "Unicode dec": "128163", "Unicode hex": "1F4A3" },
            { "Typeface name": "Wingdings", "Dingbat dec": "78", "Dingbat hex": "4E", "Unicode dec": "128369", "Unicode hex": "1F571" },
            { "Typeface name": "Wingdings", "Dingbat dec": "79", "Dingbat hex": "4F", "Unicode dec": "127987", "Unicode hex": "1F3F3" },
            { "Typeface name": "Wingdings", "Dingbat dec": "80", "Dingbat hex": "50", "Unicode dec": "127985", "Unicode hex": "1F3F1" },
            { "Typeface name": "Wingdings", "Dingbat dec": "81", "Dingbat hex": "51", "Unicode dec": "9992", "Unicode hex": "2708" },
            { "Typeface name": "Wingdings", "Dingbat dec": "82", "Dingbat hex": "52", "Unicode dec": "9788", "Unicode hex": "263C" },
            { "Typeface name": "Wingdings", "Dingbat dec": "83", "Dingbat hex": "53", "Unicode dec": "127778", "Unicode hex": "1F322" },
            { "Typeface name": "Wingdings", "Dingbat dec": "84", "Dingbat hex": "54", "Unicode dec": "10052", "Unicode hex": "2744" },
            { "Typeface name": "Wingdings", "Dingbat dec": "85", "Dingbat hex": "55", "Unicode dec": "128326", "Unicode hex": "1F546" },
            { "Typeface name": "Wingdings", "Dingbat dec": "86", "Dingbat hex": "56", "Unicode dec": "10014", "Unicode hex": "271E" },
            { "Typeface name": "Wingdings", "Dingbat dec": "87", "Dingbat hex": "57", "Unicode dec": "128328", "Unicode hex": "1F548" },
            { "Typeface name": "Wingdings", "Dingbat dec": "88", "Dingbat hex": "58", "Unicode dec": "10016", "Unicode hex": "2720" },
            { "Typeface name": "Wingdings", "Dingbat dec": "89", "Dingbat hex": "59", "Unicode dec": "10017", "Unicode hex": "2721" },
            { "Typeface name": "Wingdings", "Dingbat dec": "90", "Dingbat hex": "5A", "Unicode dec": "9770", "Unicode hex": "262A" },
            { "Typeface name": "Wingdings", "Dingbat dec": "91", "Dingbat hex": "5B", "Unicode dec": "9775", "Unicode hex": "262F" },
            { "Typeface name": "Wingdings", "Dingbat dec": "92", "Dingbat hex": "5C", "Unicode dec": "128329", "Unicode hex": "1F549" },
            { "Typeface name": "Wingdings", "Dingbat dec": "93", "Dingbat hex": "5D", "Unicode dec": "9784", "Unicode hex": "2638" },
            { "Typeface name": "Wingdings", "Dingbat dec": "94", "Dingbat hex": "5E", "Unicode dec": "9800", "Unicode hex": "2648" },
            { "Typeface name": "Wingdings", "Dingbat dec": "95", "Dingbat hex": "5F", "Unicode dec": "9801", "Unicode hex": "2649" },
            { "Typeface name": "Wingdings", "Dingbat dec": "96", "Dingbat hex": "60", "Unicode dec": "9802", "Unicode hex": "264A" },
            { "Typeface name": "Wingdings", "Dingbat dec": "97", "Dingbat hex": "61", "Unicode dec": "9803", "Unicode hex": "264B" },
            { "Typeface name": "Wingdings", "Dingbat dec": "98", "Dingbat hex": "62", "Unicode dec": "9804", "Unicode hex": "264C" },
            { "Typeface name": "Wingdings", "Dingbat dec": "99", "Dingbat hex": "63", "Unicode dec": "9805", "Unicode hex": "264D" },
            { "Typeface name": "Wingdings", "Dingbat dec": "100", "Dingbat hex": "64", "Unicode dec": "9806", "Unicode hex": "264E" },
            { "Typeface name": "Wingdings", "Dingbat dec": "101", "Dingbat hex": "65", "Unicode dec": "9807", "Unicode hex": "264F" },
            { "Typeface name": "Wingdings", "Dingbat dec": "102", "Dingbat hex": "66", "Unicode dec": "9808", "Unicode hex": "2650" },
            { "Typeface name": "Wingdings", "Dingbat dec": "103", "Dingbat hex": "67", "Unicode dec": "9809", "Unicode hex": "2651" },
            { "Typeface name": "Wingdings", "Dingbat dec": "104", "Dingbat hex": "68", "Unicode dec": "9810", "Unicode hex": "2652" },
            { "Typeface name": "Wingdings", "Dingbat dec": "105", "Dingbat hex": "69", "Unicode dec": "9811", "Unicode hex": "2653" },
            { "Typeface name": "Wingdings", "Dingbat dec": "106", "Dingbat hex": "6A", "Unicode dec": "128624", "Unicode hex": "1F670" },
            { "Typeface name": "Wingdings", "Dingbat dec": "107", "Dingbat hex": "6B", "Unicode dec": "128629", "Unicode hex": "1F675" },
            { "Typeface name": "Wingdings", "Dingbat dec": "108", "Dingbat hex": "6C", "Unicode dec": "9899", "Unicode hex": "26AB" },
            { "Typeface name": "Wingdings", "Dingbat dec": "109", "Dingbat hex": "6D", "Unicode dec": "128318", "Unicode hex": "1F53E" },
            { "Typeface name": "Wingdings", "Dingbat dec": "110", "Dingbat hex": "6E", "Unicode dec": "9724", "Unicode hex": "25FC" },
            { "Typeface name": "Wingdings", "Dingbat dec": "111", "Dingbat hex": "6F", "Unicode dec": "128911", "Unicode hex": "1F78F" },
            { "Typeface name": "Wingdings", "Dingbat dec": "112", "Dingbat hex": "70", "Unicode dec": "128912", "Unicode hex": "1F790" },
            { "Typeface name": "Wingdings", "Dingbat dec": "113", "Dingbat hex": "71", "Unicode dec": "10065", "Unicode hex": "2751" },
            { "Typeface name": "Wingdings", "Dingbat dec": "114", "Dingbat hex": "72", "Unicode dec": "10066", "Unicode hex": "2752" },
            { "Typeface name": "Wingdings", "Dingbat dec": "115", "Dingbat hex": "73", "Unicode dec": "128927", "Unicode hex": "1F79F" },
            { "Typeface name": "Wingdings", "Dingbat dec": "116", "Dingbat hex": "74", "Unicode dec": "10731", "Unicode hex": "29EB" },
            { "Typeface name": "Wingdings", "Dingbat dec": "117", "Dingbat hex": "75", "Unicode dec": "9670", "Unicode hex": "25C6" },
            { "Typeface name": "Wingdings", "Dingbat dec": "118", "Dingbat hex": "76", "Unicode dec": "10070", "Unicode hex": "2756" },
            { "Typeface name": "Wingdings", "Dingbat dec": "119", "Dingbat hex": "77", "Unicode dec": "11049", "Unicode hex": "2B29" },
            { "Typeface name": "Wingdings", "Dingbat dec": "120", "Dingbat hex": "78", "Unicode dec": "8999", "Unicode hex": "2327" },
            { "Typeface name": "Wingdings", "Dingbat dec": "121", "Dingbat hex": "79", "Unicode dec": "11193", "Unicode hex": "2BB9" },
            { "Typeface name": "Wingdings", "Dingbat dec": "122", "Dingbat hex": "7A", "Unicode dec": "8984", "Unicode hex": "2318" },
            { "Typeface name": "Wingdings", "Dingbat dec": "123", "Dingbat hex": "7B", "Unicode dec": "127989", "Unicode hex": "1F3F5" },
            { "Typeface name": "Wingdings", "Dingbat dec": "124", "Dingbat hex": "7C", "Unicode dec": "127990", "Unicode hex": "1F3F6" },
            { "Typeface name": "Wingdings", "Dingbat dec": "125", "Dingbat hex": "7D", "Unicode dec": "128630", "Unicode hex": "1F676" },
            { "Typeface name": "Wingdings", "Dingbat dec": "126", "Dingbat hex": "7E", "Unicode dec": "128631", "Unicode hex": "1F677" },
            { "Typeface name": "Wingdings", "Dingbat dec": "127", "Dingbat hex": "7F", "Unicode dec": "9647", "Unicode hex": "25AF" },
            { "Typeface name": "Wingdings", "Dingbat dec": "128", "Dingbat hex": "80", "Unicode dec": "127243", "Unicode hex": "1F10B" },
            { "Typeface name": "Wingdings", "Dingbat dec": "129", "Dingbat hex": "81", "Unicode dec": "10112", "Unicode hex": "2780" },
            { "Typeface name": "Wingdings", "Dingbat dec": "130", "Dingbat hex": "82", "Unicode dec": "10113", "Unicode hex": "2781" },
            { "Typeface name": "Wingdings", "Dingbat dec": "131", "Dingbat hex": "83", "Unicode dec": "10114", "Unicode hex": "2782" },
            { "Typeface name": "Wingdings", "Dingbat dec": "132", "Dingbat hex": "84", "Unicode dec": "10115", "Unicode hex": "2783" },
            { "Typeface name": "Wingdings", "Dingbat dec": "133", "Dingbat hex": "85", "Unicode dec": "10116", "Unicode hex": "2784" },
            { "Typeface name": "Wingdings", "Dingbat dec": "134", "Dingbat hex": "86", "Unicode dec": "10117", "Unicode hex": "2785" },
            { "Typeface name": "Wingdings", "Dingbat dec": "135", "Dingbat hex": "87", "Unicode dec": "10118", "Unicode hex": "2786" },
            { "Typeface name": "Wingdings", "Dingbat dec": "136", "Dingbat hex": "88", "Unicode dec": "10119", "Unicode hex": "2787" },
            { "Typeface name": "Wingdings", "Dingbat dec": "137", "Dingbat hex": "89", "Unicode dec": "10120", "Unicode hex": "2788" },
            { "Typeface name": "Wingdings", "Dingbat dec": "138", "Dingbat hex": "8A", "Unicode dec": "10121", "Unicode hex": "2789" },
            { "Typeface name": "Wingdings", "Dingbat dec": "139", "Dingbat hex": "8B", "Unicode dec": "127244", "Unicode hex": "1F10C" },
            { "Typeface name": "Wingdings", "Dingbat dec": "140", "Dingbat hex": "8C", "Unicode dec": "10122", "Unicode hex": "278A" },
            { "Typeface name": "Wingdings", "Dingbat dec": "141", "Dingbat hex": "8D", "Unicode dec": "10123", "Unicode hex": "278B" },
            { "Typeface name": "Wingdings", "Dingbat dec": "142", "Dingbat hex": "8E", "Unicode dec": "10124", "Unicode hex": "278C" },
            { "Typeface name": "Wingdings", "Dingbat dec": "143", "Dingbat hex": "8F", "Unicode dec": "10125", "Unicode hex": "278D" },
            { "Typeface name": "Wingdings", "Dingbat dec": "144", "Dingbat hex": "90", "Unicode dec": "10126", "Unicode hex": "278E" },
            { "Typeface name": "Wingdings", "Dingbat dec": "145", "Dingbat hex": "91", "Unicode dec": "10127", "Unicode hex": "278F" },
            { "Typeface name": "Wingdings", "Dingbat dec": "146", "Dingbat hex": "92", "Unicode dec": "10128", "Unicode hex": "2790" },
            { "Typeface name": "Wingdings", "Dingbat dec": "147", "Dingbat hex": "93", "Unicode dec": "10129", "Unicode hex": "2791" },
            { "Typeface name": "Wingdings", "Dingbat dec": "148", "Dingbat hex": "94", "Unicode dec": "10130", "Unicode hex": "2792" },
            { "Typeface name": "Wingdings", "Dingbat dec": "149", "Dingbat hex": "95", "Unicode dec": "10131", "Unicode hex": "2793" },
            { "Typeface name": "Wingdings", "Dingbat dec": "150", "Dingbat hex": "96", "Unicode dec": "128610", "Unicode hex": "1F662" },
            { "Typeface name": "Wingdings", "Dingbat dec": "151", "Dingbat hex": "97", "Unicode dec": "128608", "Unicode hex": "1F660" },
            { "Typeface name": "Wingdings", "Dingbat dec": "152", "Dingbat hex": "98", "Unicode dec": "128609", "Unicode hex": "1F661" },
            { "Typeface name": "Wingdings", "Dingbat dec": "153", "Dingbat hex": "99", "Unicode dec": "128611", "Unicode hex": "1F663" },
            { "Typeface name": "Wingdings", "Dingbat dec": "154", "Dingbat hex": "9A", "Unicode dec": "128606", "Unicode hex": "1F65E" },
            { "Typeface name": "Wingdings", "Dingbat dec": "155", "Dingbat hex": "9B", "Unicode dec": "128604", "Unicode hex": "1F65C" },
            { "Typeface name": "Wingdings", "Dingbat dec": "156", "Dingbat hex": "9C", "Unicode dec": "128605", "Unicode hex": "1F65D" },
            { "Typeface name": "Wingdings", "Dingbat dec": "157", "Dingbat hex": "9D", "Unicode dec": "128607", "Unicode hex": "1F65F" },
            { "Typeface name": "Wingdings", "Dingbat dec": "158", "Dingbat hex": "9E", "Unicode dec": "8729", "Unicode hex": "2219" },
            { "Typeface name": "Wingdings", "Dingbat dec": "159", "Dingbat hex": "9F", "Unicode dec": "8226", "Unicode hex": "2022" },
            { "Typeface name": "Wingdings", "Dingbat dec": "160", "Dingbat hex": "A0", "Unicode dec": "11037", "Unicode hex": "2B1D" },
            { "Typeface name": "Wingdings", "Dingbat dec": "161", "Dingbat hex": "A1", "Unicode dec": "11096", "Unicode hex": "2B58" },
            { "Typeface name": "Wingdings", "Dingbat dec": "162", "Dingbat hex": "A2", "Unicode dec": "128902", "Unicode hex": "1F786" },
            { "Typeface name": "Wingdings", "Dingbat dec": "163", "Dingbat hex": "A3", "Unicode dec": "128904", "Unicode hex": "1F788" },
            { "Typeface name": "Wingdings", "Dingbat dec": "164", "Dingbat hex": "A4", "Unicode dec": "128906", "Unicode hex": "1F78A" },
            { "Typeface name": "Wingdings", "Dingbat dec": "165", "Dingbat hex": "A5", "Unicode dec": "128907", "Unicode hex": "1F78B" },
            { "Typeface name": "Wingdings", "Dingbat dec": "166", "Dingbat hex": "A6", "Unicode dec": "128319", "Unicode hex": "1F53F" },
            { "Typeface name": "Wingdings", "Dingbat dec": "167", "Dingbat hex": "A7", "Unicode dec": "9642", "Unicode hex": "25AA" },
            { "Typeface name": "Wingdings", "Dingbat dec": "168", "Dingbat hex": "A8", "Unicode dec": "128910", "Unicode hex": "1F78E" },
            { "Typeface name": "Wingdings", "Dingbat dec": "169", "Dingbat hex": "A9", "Unicode dec": "128961", "Unicode hex": "1F7C1" },
            { "Typeface name": "Wingdings", "Dingbat dec": "170", "Dingbat hex": "AA", "Unicode dec": "128965", "Unicode hex": "1F7C5" },
            { "Typeface name": "Wingdings", "Dingbat dec": "171", "Dingbat hex": "AB", "Unicode dec": "9733", "Unicode hex": "2605" },
            { "Typeface name": "Wingdings", "Dingbat dec": "172", "Dingbat hex": "AC", "Unicode dec": "128971", "Unicode hex": "1F7CB" },
            { "Typeface name": "Wingdings", "Dingbat dec": "173", "Dingbat hex": "AD", "Unicode dec": "128975", "Unicode hex": "1F7CF" },
            { "Typeface name": "Wingdings", "Dingbat dec": "174", "Dingbat hex": "AE", "Unicode dec": "128979", "Unicode hex": "1F7D3" },
            { "Typeface name": "Wingdings", "Dingbat dec": "175", "Dingbat hex": "AF", "Unicode dec": "128977", "Unicode hex": "1F7D1" },
            { "Typeface name": "Wingdings", "Dingbat dec": "176", "Dingbat hex": "B0", "Unicode dec": "11216", "Unicode hex": "2BD0" },
            { "Typeface name": "Wingdings", "Dingbat dec": "177", "Dingbat hex": "B1", "Unicode dec": "8982", "Unicode hex": "2316" },
            { "Typeface name": "Wingdings", "Dingbat dec": "178", "Dingbat hex": "B2", "Unicode dec": "11214", "Unicode hex": "2BCE" },
            { "Typeface name": "Wingdings", "Dingbat dec": "179", "Dingbat hex": "B3", "Unicode dec": "11215", "Unicode hex": "2BCF" },
            { "Typeface name": "Wingdings", "Dingbat dec": "180", "Dingbat hex": "B4", "Unicode dec": "11217", "Unicode hex": "2BD1" },
            { "Typeface name": "Wingdings", "Dingbat dec": "181", "Dingbat hex": "B5", "Unicode dec": "10026", "Unicode hex": "272A" },
            { "Typeface name": "Wingdings", "Dingbat dec": "182", "Dingbat hex": "B6", "Unicode dec": "10032", "Unicode hex": "2730" },
            { "Typeface name": "Wingdings", "Dingbat dec": "183", "Dingbat hex": "B7", "Unicode dec": "128336", "Unicode hex": "1F550" },
            { "Typeface name": "Wingdings", "Dingbat dec": "184", "Dingbat hex": "B8", "Unicode dec": "128337", "Unicode hex": "1F551" },
            { "Typeface name": "Wingdings", "Dingbat dec": "185", "Dingbat hex": "B9", "Unicode dec": "128338", "Unicode hex": "1F552" },
            { "Typeface name": "Wingdings", "Dingbat dec": "186", "Dingbat hex": "BA", "Unicode dec": "128339", "Unicode hex": "1F553" },
            { "Typeface name": "Wingdings", "Dingbat dec": "187", "Dingbat hex": "BB", "Unicode dec": "128340", "Unicode hex": "1F554" },
            { "Typeface name": "Wingdings", "Dingbat dec": "188", "Dingbat hex": "BC", "Unicode dec": "128341", "Unicode hex": "1F555" },
            { "Typeface name": "Wingdings", "Dingbat dec": "189", "Dingbat hex": "BD", "Unicode dec": "128342", "Unicode hex": "1F556" },
            { "Typeface name": "Wingdings", "Dingbat dec": "190", "Dingbat hex": "BE", "Unicode dec": "128343", "Unicode hex": "1F557" },
            { "Typeface name": "Wingdings", "Dingbat dec": "191", "Dingbat hex": "BF", "Unicode dec": "128344", "Unicode hex": "1F558" },
            { "Typeface name": "Wingdings", "Dingbat dec": "192", "Dingbat hex": "C0", "Unicode dec": "128345", "Unicode hex": "1F559" },
            { "Typeface name": "Wingdings", "Dingbat dec": "193", "Dingbat hex": "C1", "Unicode dec": "128346", "Unicode hex": "1F55A" },
            { "Typeface name": "Wingdings", "Dingbat dec": "194", "Dingbat hex": "C2", "Unicode dec": "128347", "Unicode hex": "1F55B" },
            { "Typeface name": "Wingdings", "Dingbat dec": "195", "Dingbat hex": "C3", "Unicode dec": "11184", "Unicode hex": "2BB0" },
            { "Typeface name": "Wingdings", "Dingbat dec": "196", "Dingbat hex": "C4", "Unicode dec": "11185", "Unicode hex": "2BB1" },
            { "Typeface name": "Wingdings", "Dingbat dec": "197", "Dingbat hex": "C5", "Unicode dec": "11186", "Unicode hex": "2BB2" },
            { "Typeface name": "Wingdings", "Dingbat dec": "198", "Dingbat hex": "C6", "Unicode dec": "11187", "Unicode hex": "2BB3" },
            { "Typeface name": "Wingdings", "Dingbat dec": "199", "Dingbat hex": "C7", "Unicode dec": "11188", "Unicode hex": "2BB4" },
            { "Typeface name": "Wingdings", "Dingbat dec": "200", "Dingbat hex": "C8", "Unicode dec": "11189", "Unicode hex": "2BB5" },
            { "Typeface name": "Wingdings", "Dingbat dec": "201", "Dingbat hex": "C9", "Unicode dec": "11190", "Unicode hex": "2BB6" },
            { "Typeface name": "Wingdings", "Dingbat dec": "202", "Dingbat hex": "CA", "Unicode dec": "11191", "Unicode hex": "2BB7" },
            { "Typeface name": "Wingdings", "Dingbat dec": "203", "Dingbat hex": "CB", "Unicode dec": "128618", "Unicode hex": "1F66A" },
            { "Typeface name": "Wingdings", "Dingbat dec": "204", "Dingbat hex": "CC", "Unicode dec": "128619", "Unicode hex": "1F66B" },
            { "Typeface name": "Wingdings", "Dingbat dec": "205", "Dingbat hex": "CD", "Unicode dec": "128597", "Unicode hex": "1F655" },
            { "Typeface name": "Wingdings", "Dingbat dec": "206", "Dingbat hex": "CE", "Unicode dec": "128596", "Unicode hex": "1F654" },
            { "Typeface name": "Wingdings", "Dingbat dec": "207", "Dingbat hex": "CF", "Unicode dec": "128599", "Unicode hex": "1F657" },
            { "Typeface name": "Wingdings", "Dingbat dec": "208", "Dingbat hex": "D0", "Unicode dec": "128598", "Unicode hex": "1F656" },
            { "Typeface name": "Wingdings", "Dingbat dec": "209", "Dingbat hex": "D1", "Unicode dec": "128592", "Unicode hex": "1F650" },
            { "Typeface name": "Wingdings", "Dingbat dec": "210", "Dingbat hex": "D2", "Unicode dec": "128593", "Unicode hex": "1F651" },
            { "Typeface name": "Wingdings", "Dingbat dec": "211", "Dingbat hex": "D3", "Unicode dec": "128594", "Unicode hex": "1F652" },
            { "Typeface name": "Wingdings", "Dingbat dec": "212", "Dingbat hex": "D4", "Unicode dec": "128595", "Unicode hex": "1F653" },
            { "Typeface name": "Wingdings", "Dingbat dec": "213", "Dingbat hex": "D5", "Unicode dec": "9003", "Unicode hex": "232B" },
            { "Typeface name": "Wingdings", "Dingbat dec": "214", "Dingbat hex": "D6", "Unicode dec": "8998", "Unicode hex": "2326" },
            { "Typeface name": "Wingdings", "Dingbat dec": "215", "Dingbat hex": "D7", "Unicode dec": "11160", "Unicode hex": "2B98" },
            { "Typeface name": "Wingdings", "Dingbat dec": "216", "Dingbat hex": "D8", "Unicode dec": "11162", "Unicode hex": "2B9A" },
            { "Typeface name": "Wingdings", "Dingbat dec": "217", "Dingbat hex": "D9", "Unicode dec": "11161", "Unicode hex": "2B99" },
            { "Typeface name": "Wingdings", "Dingbat dec": "218", "Dingbat hex": "DA", "Unicode dec": "11163", "Unicode hex": "2B9B" },
            { "Typeface name": "Wingdings", "Dingbat dec": "219", "Dingbat hex": "DB", "Unicode dec": "11144", "Unicode hex": "2B88" },
            { "Typeface name": "Wingdings", "Dingbat dec": "220", "Dingbat hex": "DC", "Unicode dec": "11146", "Unicode hex": "2B8A" },
            { "Typeface name": "Wingdings", "Dingbat dec": "221", "Dingbat hex": "DD", "Unicode dec": "11145", "Unicode hex": "2B89" },
            { "Typeface name": "Wingdings", "Dingbat dec": "222", "Dingbat hex": "DE", "Unicode dec": "11147", "Unicode hex": "2B8B" },
            { "Typeface name": "Wingdings", "Dingbat dec": "223", "Dingbat hex": "DF", "Unicode dec": "129128", "Unicode hex": "1F868" },
            { "Typeface name": "Wingdings", "Dingbat dec": "224", "Dingbat hex": "E0", "Unicode dec": "129130", "Unicode hex": "1F86A" },
            { "Typeface name": "Wingdings", "Dingbat dec": "225", "Dingbat hex": "E1", "Unicode dec": "129129", "Unicode hex": "1F869" },
            { "Typeface name": "Wingdings", "Dingbat dec": "226", "Dingbat hex": "E2", "Unicode dec": "129131", "Unicode hex": "1F86B" },
            { "Typeface name": "Wingdings", "Dingbat dec": "227", "Dingbat hex": "E3", "Unicode dec": "129132", "Unicode hex": "1F86C" },
            { "Typeface name": "Wingdings", "Dingbat dec": "228", "Dingbat hex": "E4", "Unicode dec": "129133", "Unicode hex": "1F86D" },
            { "Typeface name": "Wingdings", "Dingbat dec": "229", "Dingbat hex": "E5", "Unicode dec": "129135", "Unicode hex": "1F86F" },
            { "Typeface name": "Wingdings", "Dingbat dec": "230", "Dingbat hex": "E6", "Unicode dec": "129134", "Unicode hex": "1F86E" },
            { "Typeface name": "Wingdings", "Dingbat dec": "231", "Dingbat hex": "E7", "Unicode dec": "129144", "Unicode hex": "1F878" },
            { "Typeface name": "Wingdings", "Dingbat dec": "232", "Dingbat hex": "E8", "Unicode dec": "129146", "Unicode hex": "1F87A" },
            { "Typeface name": "Wingdings", "Dingbat dec": "233", "Dingbat hex": "E9", "Unicode dec": "129145", "Unicode hex": "1F879" },
            { "Typeface name": "Wingdings", "Dingbat dec": "234", "Dingbat hex": "EA", "Unicode dec": "129147", "Unicode hex": "1F87B" },
            { "Typeface name": "Wingdings", "Dingbat dec": "235", "Dingbat hex": "EB", "Unicode dec": "129148", "Unicode hex": "1F87C" },
            { "Typeface name": "Wingdings", "Dingbat dec": "236", "Dingbat hex": "EC", "Unicode dec": "129149", "Unicode hex": "1F87D" },
            { "Typeface name": "Wingdings", "Dingbat dec": "237", "Dingbat hex": "ED", "Unicode dec": "129151", "Unicode hex": "1F87F" },
            { "Typeface name": "Wingdings", "Dingbat dec": "238", "Dingbat hex": "EE", "Unicode dec": "129150", "Unicode hex": "1F87E" },
            { "Typeface name": "Wingdings", "Dingbat dec": "239", "Dingbat hex": "EF", "Unicode dec": "8678", "Unicode hex": "21E6" },
            { "Typeface name": "Wingdings", "Dingbat dec": "240", "Dingbat hex": "F0", "Unicode dec": "8680", "Unicode hex": "21E8" },
            { "Typeface name": "Wingdings", "Dingbat dec": "241", "Dingbat hex": "F1", "Unicode dec": "8679", "Unicode hex": "21E7" },
            { "Typeface name": "Wingdings", "Dingbat dec": "242", "Dingbat hex": "F2", "Unicode dec": "8681", "Unicode hex": "21E9" },
            { "Typeface name": "Wingdings", "Dingbat dec": "243", "Dingbat hex": "F3", "Unicode dec": "11012", "Unicode hex": "2B04" },
            { "Typeface name": "Wingdings", "Dingbat dec": "244", "Dingbat hex": "F4", "Unicode dec": "8691", "Unicode hex": "21F3" },
            { "Typeface name": "Wingdings", "Dingbat dec": "245", "Dingbat hex": "F5", "Unicode dec": "11009", "Unicode hex": "2B01" },
            { "Typeface name": "Wingdings", "Dingbat dec": "246", "Dingbat hex": "F6", "Unicode dec": "11008", "Unicode hex": "2B00" },
            { "Typeface name": "Wingdings", "Dingbat dec": "247", "Dingbat hex": "F7", "Unicode dec": "11011", "Unicode hex": "2B03" },
            { "Typeface name": "Wingdings", "Dingbat dec": "248", "Dingbat hex": "F8", "Unicode dec": "11010", "Unicode hex": "2B02" },
            { "Typeface name": "Wingdings", "Dingbat dec": "249", "Dingbat hex": "F9", "Unicode dec": "129196", "Unicode hex": "1F8AC" },
            { "Typeface name": "Wingdings", "Dingbat dec": "250", "Dingbat hex": "FA", "Unicode dec": "129197", "Unicode hex": "1F8AD" },
            { "Typeface name": "Wingdings", "Dingbat dec": "251", "Dingbat hex": "FB", "Unicode dec": "128502", "Unicode hex": "1F5F6" },
            { "Typeface name": "Wingdings", "Dingbat dec": "252", "Dingbat hex": "FC", "Unicode dec": "10003", "Unicode hex": "2713" },
            { "Typeface name": "Wingdings", "Dingbat dec": "253", "Dingbat hex": "FD", "Unicode dec": "128503", "Unicode hex": "1F5F7" },
            { "Typeface name": "Wingdings", "Dingbat dec": "254", "Dingbat hex": "FE", "Unicode dec": "128505", "Unicode hex": "1F5F9" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "32", "Dingbat hex": "20", "Unicode dec": "32", "Unicode hex": "20" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "33", "Dingbat hex": "21", "Unicode dec": "128394", "Unicode hex": "1F58A" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "34", "Dingbat hex": "22", "Unicode dec": "128395", "Unicode hex": "1F58B" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "35", "Dingbat hex": "23", "Unicode dec": "128396", "Unicode hex": "1F58C" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "36", "Dingbat hex": "24", "Unicode dec": "128397", "Unicode hex": "1F58D" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "37", "Dingbat hex": "25", "Unicode dec": "9988", "Unicode hex": "2704" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "38", "Dingbat hex": "26", "Unicode dec": "9984", "Unicode hex": "2700" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "39", "Dingbat hex": "27", "Unicode dec": "128382", "Unicode hex": "1F57E" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "40", "Dingbat hex": "28", "Unicode dec": "128381", "Unicode hex": "1F57D" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "41", "Dingbat hex": "29", "Unicode dec": "128453", "Unicode hex": "1F5C5" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "42", "Dingbat hex": "2A", "Unicode dec": "128454", "Unicode hex": "1F5C6" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "43", "Dingbat hex": "2B", "Unicode dec": "128455", "Unicode hex": "1F5C7" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "44", "Dingbat hex": "2C", "Unicode dec": "128456", "Unicode hex": "1F5C8" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "45", "Dingbat hex": "2D", "Unicode dec": "128457", "Unicode hex": "1F5C9" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "46", "Dingbat hex": "2E", "Unicode dec": "128458", "Unicode hex": "1F5CA" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "47", "Dingbat hex": "2F", "Unicode dec": "128459", "Unicode hex": "1F5CB" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "48", "Dingbat hex": "30", "Unicode dec": "128460", "Unicode hex": "1F5CC" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "49", "Dingbat hex": "31", "Unicode dec": "128461", "Unicode hex": "1F5CD" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "50", "Dingbat hex": "32", "Unicode dec": "128203", "Unicode hex": "1F4CB" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "51", "Dingbat hex": "33", "Unicode dec": "128465", "Unicode hex": "1F5D1" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "52", "Dingbat hex": "34", "Unicode dec": "128468", "Unicode hex": "1F5D4" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "53", "Dingbat hex": "35", "Unicode dec": "128437", "Unicode hex": "1F5B5" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "54", "Dingbat hex": "36", "Unicode dec": "128438", "Unicode hex": "1F5B6" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "55", "Dingbat hex": "37", "Unicode dec": "128439", "Unicode hex": "1F5B7" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "56", "Dingbat hex": "38", "Unicode dec": "128440", "Unicode hex": "1F5B8" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "57", "Dingbat hex": "39", "Unicode dec": "128429", "Unicode hex": "1F5AD" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "58", "Dingbat hex": "3A", "Unicode dec": "128431", "Unicode hex": "1F5AF" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "59", "Dingbat hex": "3B", "Unicode dec": "128433", "Unicode hex": "1F5B1" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "60", "Dingbat hex": "3C", "Unicode dec": "128402", "Unicode hex": "1F592" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "61", "Dingbat hex": "3D", "Unicode dec": "128403", "Unicode hex": "1F593" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "62", "Dingbat hex": "3E", "Unicode dec": "128408", "Unicode hex": "1F598" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "63", "Dingbat hex": "3F", "Unicode dec": "128409", "Unicode hex": "1F599" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "64", "Dingbat hex": "40", "Unicode dec": "128410", "Unicode hex": "1F59A" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "65", "Dingbat hex": "41", "Unicode dec": "128411", "Unicode hex": "1F59B" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "66", "Dingbat hex": "42", "Unicode dec": "128072", "Unicode hex": "1F448" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "67", "Dingbat hex": "43", "Unicode dec": "128073", "Unicode hex": "1F449" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "68", "Dingbat hex": "44", "Unicode dec": "128412", "Unicode hex": "1F59C" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "69", "Dingbat hex": "45", "Unicode dec": "128413", "Unicode hex": "1F59D" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "70", "Dingbat hex": "46", "Unicode dec": "128414", "Unicode hex": "1F59E" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "71", "Dingbat hex": "47", "Unicode dec": "128415", "Unicode hex": "1F59F" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "72", "Dingbat hex": "48", "Unicode dec": "128416", "Unicode hex": "1F5A0" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "73", "Dingbat hex": "49", "Unicode dec": "128417", "Unicode hex": "1F5A1" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "74", "Dingbat hex": "4A", "Unicode dec": "128070", "Unicode hex": "1F446" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "75", "Dingbat hex": "4B", "Unicode dec": "128071", "Unicode hex": "1F447" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "76", "Dingbat hex": "4C", "Unicode dec": "128418", "Unicode hex": "1F5A2" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "77", "Dingbat hex": "4D", "Unicode dec": "128419", "Unicode hex": "1F5A3" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "78", "Dingbat hex": "4E", "Unicode dec": "128401", "Unicode hex": "1F591" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "79", "Dingbat hex": "4F", "Unicode dec": "128500", "Unicode hex": "1F5F4" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "80", "Dingbat hex": "50", "Unicode dec": "128504", "Unicode hex": "1F5F8" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "81", "Dingbat hex": "51", "Unicode dec": "128501", "Unicode hex": "1F5F5" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "82", "Dingbat hex": "52", "Unicode dec": "9745", "Unicode hex": "2611" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "83", "Dingbat hex": "53", "Unicode dec": "11197", "Unicode hex": "2BBD" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "84", "Dingbat hex": "54", "Unicode dec": "9746", "Unicode hex": "2612" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "85", "Dingbat hex": "55", "Unicode dec": "11198", "Unicode hex": "2BBE" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "86", "Dingbat hex": "56", "Unicode dec": "11199", "Unicode hex": "2BBF" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "87", "Dingbat hex": "57", "Unicode dec": "128711", "Unicode hex": "1F6C7" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "88", "Dingbat hex": "58", "Unicode dec": "10680", "Unicode hex": "29B8" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "89", "Dingbat hex": "59", "Unicode dec": "128625", "Unicode hex": "1F671" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "90", "Dingbat hex": "5A", "Unicode dec": "128628", "Unicode hex": "1F674" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "91", "Dingbat hex": "5B", "Unicode dec": "128626", "Unicode hex": "1F672" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "92", "Dingbat hex": "5C", "Unicode dec": "128627", "Unicode hex": "1F673" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "93", "Dingbat hex": "5D", "Unicode dec": "8253", "Unicode hex": "203D" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "94", "Dingbat hex": "5E", "Unicode dec": "128633", "Unicode hex": "1F679" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "95", "Dingbat hex": "5F", "Unicode dec": "128634", "Unicode hex": "1F67A" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "96", "Dingbat hex": "60", "Unicode dec": "128635", "Unicode hex": "1F67B" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "97", "Dingbat hex": "61", "Unicode dec": "128614", "Unicode hex": "1F666" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "98", "Dingbat hex": "62", "Unicode dec": "128612", "Unicode hex": "1F664" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "99", "Dingbat hex": "63", "Unicode dec": "128613", "Unicode hex": "1F665" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "100", "Dingbat hex": "64", "Unicode dec": "128615", "Unicode hex": "1F667" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "101", "Dingbat hex": "65", "Unicode dec": "128602", "Unicode hex": "1F65A" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "102", "Dingbat hex": "66", "Unicode dec": "128600", "Unicode hex": "1F658" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "103", "Dingbat hex": "67", "Unicode dec": "128601", "Unicode hex": "1F659" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "104", "Dingbat hex": "68", "Unicode dec": "128603", "Unicode hex": "1F65B" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "105", "Dingbat hex": "69", "Unicode dec": "9450", "Unicode hex": "24EA" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "106", "Dingbat hex": "6A", "Unicode dec": "9312", "Unicode hex": "2460" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "107", "Dingbat hex": "6B", "Unicode dec": "9313", "Unicode hex": "2461" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "108", "Dingbat hex": "6C", "Unicode dec": "9314", "Unicode hex": "2462" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "109", "Dingbat hex": "6D", "Unicode dec": "9315", "Unicode hex": "2463" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "110", "Dingbat hex": "6E", "Unicode dec": "9316", "Unicode hex": "2464" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "111", "Dingbat hex": "6F", "Unicode dec": "9317", "Unicode hex": "2465" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "112", "Dingbat hex": "70", "Unicode dec": "9318", "Unicode hex": "2466" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "113", "Dingbat hex": "71", "Unicode dec": "9319", "Unicode hex": "2467" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "114", "Dingbat hex": "72", "Unicode dec": "9320", "Unicode hex": "2468" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "115", "Dingbat hex": "73", "Unicode dec": "9321", "Unicode hex": "2469" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "116", "Dingbat hex": "74", "Unicode dec": "9471", "Unicode hex": "24FF" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "117", "Dingbat hex": "75", "Unicode dec": "10102", "Unicode hex": "2776" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "118", "Dingbat hex": "76", "Unicode dec": "10103", "Unicode hex": "2777" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "119", "Dingbat hex": "77", "Unicode dec": "10104", "Unicode hex": "2778" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "120", "Dingbat hex": "78", "Unicode dec": "10105", "Unicode hex": "2779" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "121", "Dingbat hex": "79", "Unicode dec": "10106", "Unicode hex": "277A" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "122", "Dingbat hex": "7A", "Unicode dec": "10107", "Unicode hex": "277B" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "123", "Dingbat hex": "7B", "Unicode dec": "10108", "Unicode hex": "277C" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "124", "Dingbat hex": "7C", "Unicode dec": "10109", "Unicode hex": "277D" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "125", "Dingbat hex": "7D", "Unicode dec": "10110", "Unicode hex": "277E" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "126", "Dingbat hex": "7E", "Unicode dec": "10111", "Unicode hex": "277F" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "128", "Dingbat hex": "80", "Unicode dec": "9737", "Unicode hex": "2609" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "129", "Dingbat hex": "81", "Unicode dec": "127765", "Unicode hex": "1F315" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "130", "Dingbat hex": "82", "Unicode dec": "9789", "Unicode hex": "263D" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "131", "Dingbat hex": "83", "Unicode dec": "9790", "Unicode hex": "263E" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "132", "Dingbat hex": "84", "Unicode dec": "11839", "Unicode hex": "2E3F" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "133", "Dingbat hex": "85", "Unicode dec": "10013", "Unicode hex": "271D" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "134", "Dingbat hex": "86", "Unicode dec": "128327", "Unicode hex": "1F547" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "135", "Dingbat hex": "87", "Unicode dec": "128348", "Unicode hex": "1F55C" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "136", "Dingbat hex": "88", "Unicode dec": "128349", "Unicode hex": "1F55D" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "137", "Dingbat hex": "89", "Unicode dec": "128350", "Unicode hex": "1F55E" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "138", "Dingbat hex": "8A", "Unicode dec": "128351", "Unicode hex": "1F55F" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "139", "Dingbat hex": "8B", "Unicode dec": "128352", "Unicode hex": "1F560" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "140", "Dingbat hex": "8C", "Unicode dec": "128353", "Unicode hex": "1F561" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "141", "Dingbat hex": "8D", "Unicode dec": "128354", "Unicode hex": "1F562" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "142", "Dingbat hex": "8E", "Unicode dec": "128355", "Unicode hex": "1F563" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "143", "Dingbat hex": "8F", "Unicode dec": "128356", "Unicode hex": "1F564" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "144", "Dingbat hex": "90", "Unicode dec": "128357", "Unicode hex": "1F565" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "145", "Dingbat hex": "91", "Unicode dec": "128358", "Unicode hex": "1F566" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "146", "Dingbat hex": "92", "Unicode dec": "128359", "Unicode hex": "1F567" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "147", "Dingbat hex": "93", "Unicode dec": "128616", "Unicode hex": "1F668" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "148", "Dingbat hex": "94", "Unicode dec": "128617", "Unicode hex": "1F669" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "149", "Dingbat hex": "95", "Unicode dec": "8901", "Unicode hex": "22C5" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "150", "Dingbat hex": "96", "Unicode dec": "128900", "Unicode hex": "1F784" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "151", "Dingbat hex": "97", "Unicode dec": "10625", "Unicode hex": "2981" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "152", "Dingbat hex": "98", "Unicode dec": "9679", "Unicode hex": "25CF" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "153", "Dingbat hex": "99", "Unicode dec": "9675", "Unicode hex": "25CB" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "154", "Dingbat hex": "9A", "Unicode dec": "128901", "Unicode hex": "1F785" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "155", "Dingbat hex": "9B", "Unicode dec": "128903", "Unicode hex": "1F787" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "156", "Dingbat hex": "9C", "Unicode dec": "128905", "Unicode hex": "1F789" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "157", "Dingbat hex": "9D", "Unicode dec": "8857", "Unicode hex": "2299" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "158", "Dingbat hex": "9E", "Unicode dec": "10687", "Unicode hex": "29BF" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "159", "Dingbat hex": "9F", "Unicode dec": "128908", "Unicode hex": "1F78C" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "160", "Dingbat hex": "A0", "Unicode dec": "128909", "Unicode hex": "1F78D" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "161", "Dingbat hex": "A1", "Unicode dec": "9726", "Unicode hex": "25FE" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "162", "Dingbat hex": "A2", "Unicode dec": "9632", "Unicode hex": "25A0" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "163", "Dingbat hex": "A3", "Unicode dec": "9633", "Unicode hex": "25A1" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "164", "Dingbat hex": "A4", "Unicode dec": "128913", "Unicode hex": "1F791" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "165", "Dingbat hex": "A5", "Unicode dec": "128914", "Unicode hex": "1F792" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "166", "Dingbat hex": "A6", "Unicode dec": "128915", "Unicode hex": "1F793" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "167", "Dingbat hex": "A7", "Unicode dec": "128916", "Unicode hex": "1F794" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "168", "Dingbat hex": "A8", "Unicode dec": "9635", "Unicode hex": "25A3" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "169", "Dingbat hex": "A9", "Unicode dec": "128917", "Unicode hex": "1F795" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "170", "Dingbat hex": "AA", "Unicode dec": "128918", "Unicode hex": "1F796" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "171", "Dingbat hex": "AB", "Unicode dec": "128919", "Unicode hex": "1F797" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "172", "Dingbat hex": "AC", "Unicode dec": "128920", "Unicode hex": "1F798" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "173", "Dingbat hex": "AD", "Unicode dec": "11049", "Unicode hex": "2B29" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "174", "Dingbat hex": "AE", "Unicode dec": "11045", "Unicode hex": "2B25" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "175", "Dingbat hex": "AF", "Unicode dec": "9671", "Unicode hex": "25C7" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "176", "Dingbat hex": "B0", "Unicode dec": "128922", "Unicode hex": "1F79A" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "177", "Dingbat hex": "B1", "Unicode dec": "9672", "Unicode hex": "25C8" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "178", "Dingbat hex": "B2", "Unicode dec": "128923", "Unicode hex": "1F79B" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "179", "Dingbat hex": "B3", "Unicode dec": "128924", "Unicode hex": "1F79C" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "180", "Dingbat hex": "B4", "Unicode dec": "128925", "Unicode hex": "1F79D" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "181", "Dingbat hex": "B5", "Unicode dec": "128926", "Unicode hex": "1F79E" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "182", "Dingbat hex": "B6", "Unicode dec": "11050", "Unicode hex": "2B2A" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "183", "Dingbat hex": "B7", "Unicode dec": "11047", "Unicode hex": "2B27" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "184", "Dingbat hex": "B8", "Unicode dec": "9674", "Unicode hex": "25CA" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "185", "Dingbat hex": "B9", "Unicode dec": "128928", "Unicode hex": "1F7A0" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "186", "Dingbat hex": "BA", "Unicode dec": "9686", "Unicode hex": "25D6" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "187", "Dingbat hex": "BB", "Unicode dec": "9687", "Unicode hex": "25D7" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "188", "Dingbat hex": "BC", "Unicode dec": "11210", "Unicode hex": "2BCA" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "189", "Dingbat hex": "BD", "Unicode dec": "11211", "Unicode hex": "2BCB" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "190", "Dingbat hex": "BE", "Unicode dec": "11200", "Unicode hex": "2BC0" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "191", "Dingbat hex": "BF", "Unicode dec": "11201", "Unicode hex": "2BC1" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "192", "Dingbat hex": "C0", "Unicode dec": "11039", "Unicode hex": "2B1F" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "193", "Dingbat hex": "C1", "Unicode dec": "11202", "Unicode hex": "2BC2" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "194", "Dingbat hex": "C2", "Unicode dec": "11043", "Unicode hex": "2B23" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "195", "Dingbat hex": "C3", "Unicode dec": "11042", "Unicode hex": "2B22" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "196", "Dingbat hex": "C4", "Unicode dec": "11203", "Unicode hex": "2BC3" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "197", "Dingbat hex": "C5", "Unicode dec": "11204", "Unicode hex": "2BC4" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "198", "Dingbat hex": "C6", "Unicode dec": "128929", "Unicode hex": "1F7A1" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "199", "Dingbat hex": "C7", "Unicode dec": "128930", "Unicode hex": "1F7A2" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "200", "Dingbat hex": "C8", "Unicode dec": "128931", "Unicode hex": "1F7A3" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "201", "Dingbat hex": "C9", "Unicode dec": "128932", "Unicode hex": "1F7A4" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "202", "Dingbat hex": "CA", "Unicode dec": "128933", "Unicode hex": "1F7A5" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "203", "Dingbat hex": "CB", "Unicode dec": "128934", "Unicode hex": "1F7A6" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "204", "Dingbat hex": "CC", "Unicode dec": "128935", "Unicode hex": "1F7A7" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "205", "Dingbat hex": "CD", "Unicode dec": "128936", "Unicode hex": "1F7A8" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "206", "Dingbat hex": "CE", "Unicode dec": "128937", "Unicode hex": "1F7A9" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "207", "Dingbat hex": "CF", "Unicode dec": "128938", "Unicode hex": "1F7AA" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "208", "Dingbat hex": "D0", "Unicode dec": "128939", "Unicode hex": "1F7AB" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "209", "Dingbat hex": "D1", "Unicode dec": "128940", "Unicode hex": "1F7AC" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "210", "Dingbat hex": "D2", "Unicode dec": "128941", "Unicode hex": "1F7AD" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "211", "Dingbat hex": "D3", "Unicode dec": "128942", "Unicode hex": "1F7AE" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "212", "Dingbat hex": "D4", "Unicode dec": "128943", "Unicode hex": "1F7AF" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "213", "Dingbat hex": "D5", "Unicode dec": "128944", "Unicode hex": "1F7B0" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "214", "Dingbat hex": "D6", "Unicode dec": "128945", "Unicode hex": "1F7B1" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "215", "Dingbat hex": "D7", "Unicode dec": "128946", "Unicode hex": "1F7B2" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "216", "Dingbat hex": "D8", "Unicode dec": "128947", "Unicode hex": "1F7B3" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "217", "Dingbat hex": "D9", "Unicode dec": "128948", "Unicode hex": "1F7B4" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "218", "Dingbat hex": "DA", "Unicode dec": "128949", "Unicode hex": "1F7B5" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "219", "Dingbat hex": "DB", "Unicode dec": "128950", "Unicode hex": "1F7B6" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "220", "Dingbat hex": "DC", "Unicode dec": "128951", "Unicode hex": "1F7B7" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "221", "Dingbat hex": "DD", "Unicode dec": "128952", "Unicode hex": "1F7B8" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "222", "Dingbat hex": "DE", "Unicode dec": "128953", "Unicode hex": "1F7B9" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "223", "Dingbat hex": "DF", "Unicode dec": "128954", "Unicode hex": "1F7BA" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "224", "Dingbat hex": "E0", "Unicode dec": "128955", "Unicode hex": "1F7BB" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "225", "Dingbat hex": "E1", "Unicode dec": "128956", "Unicode hex": "1F7BC" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "226", "Dingbat hex": "E2", "Unicode dec": "128957", "Unicode hex": "1F7BD" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "227", "Dingbat hex": "E3", "Unicode dec": "128958", "Unicode hex": "1F7BE" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "228", "Dingbat hex": "E4", "Unicode dec": "128959", "Unicode hex": "1F7BF" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "229", "Dingbat hex": "E5", "Unicode dec": "128960", "Unicode hex": "1F7C0" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "230", "Dingbat hex": "E6", "Unicode dec": "128962", "Unicode hex": "1F7C2" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "231", "Dingbat hex": "E7", "Unicode dec": "128964", "Unicode hex": "1F7C4" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "232", "Dingbat hex": "E8", "Unicode dec": "128966", "Unicode hex": "1F7C6" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "233", "Dingbat hex": "E9", "Unicode dec": "128969", "Unicode hex": "1F7C9" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "234", "Dingbat hex": "EA", "Unicode dec": "128970", "Unicode hex": "1F7CA" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "235", "Dingbat hex": "EB", "Unicode dec": "10038", "Unicode hex": "2736" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "236", "Dingbat hex": "EC", "Unicode dec": "128972", "Unicode hex": "1F7CC" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "237", "Dingbat hex": "ED", "Unicode dec": "128974", "Unicode hex": "1F7CE" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "238", "Dingbat hex": "EE", "Unicode dec": "128976", "Unicode hex": "1F7D0" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "239", "Dingbat hex": "EF", "Unicode dec": "128978", "Unicode hex": "1F7D2" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "240", "Dingbat hex": "F0", "Unicode dec": "10041", "Unicode hex": "2739" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "241", "Dingbat hex": "F1", "Unicode dec": "128963", "Unicode hex": "1F7C3" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "242", "Dingbat hex": "F2", "Unicode dec": "128967", "Unicode hex": "1F7C7" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "243", "Dingbat hex": "F3", "Unicode dec": "10031", "Unicode hex": "272F" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "244", "Dingbat hex": "F4", "Unicode dec": "128973", "Unicode hex": "1F7CD" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "245", "Dingbat hex": "F5", "Unicode dec": "128980", "Unicode hex": "1F7D4" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "246", "Dingbat hex": "F6", "Unicode dec": "11212", "Unicode hex": "2BCC" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "247", "Dingbat hex": "F7", "Unicode dec": "11213", "Unicode hex": "2BCD" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "248", "Dingbat hex": "F8", "Unicode dec": "8251", "Unicode hex": "203B" },
            { "Typeface name": "Wingdings 2", "Dingbat dec": "249", "Dingbat hex": "F9", "Unicode dec": "8258", "Unicode hex": "2042" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "32", "Dingbat hex": "20", "Unicode dec": "32", "Unicode hex": "20" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "33", "Dingbat hex": "21", "Unicode dec": "11104", "Unicode hex": "2B60" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "34", "Dingbat hex": "22", "Unicode dec": "11106", "Unicode hex": "2B62" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "35", "Dingbat hex": "23", "Unicode dec": "11105", "Unicode hex": "2B61" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "36", "Dingbat hex": "24", "Unicode dec": "11107", "Unicode hex": "2B63" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "37", "Dingbat hex": "25", "Unicode dec": "11110", "Unicode hex": "2B66" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "38", "Dingbat hex": "26", "Unicode dec": "11111", "Unicode hex": "2B67" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "39", "Dingbat hex": "27", "Unicode dec": "11113", "Unicode hex": "2B69" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "40", "Dingbat hex": "28", "Unicode dec": "11112", "Unicode hex": "2B68" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "41", "Dingbat hex": "29", "Unicode dec": "11120", "Unicode hex": "2B70" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "42", "Dingbat hex": "2A", "Unicode dec": "11122", "Unicode hex": "2B72" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "43", "Dingbat hex": "2B", "Unicode dec": "11121", "Unicode hex": "2B71" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "44", "Dingbat hex": "2C", "Unicode dec": "11123", "Unicode hex": "2B73" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "45", "Dingbat hex": "2D", "Unicode dec": "11126", "Unicode hex": "2B76" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "46", "Dingbat hex": "2E", "Unicode dec": "11128", "Unicode hex": "2B78" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "47", "Dingbat hex": "2F", "Unicode dec": "11131", "Unicode hex": "2B7B" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "48", "Dingbat hex": "30", "Unicode dec": "11133", "Unicode hex": "2B7D" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "49", "Dingbat hex": "31", "Unicode dec": "11108", "Unicode hex": "2B64" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "50", "Dingbat hex": "32", "Unicode dec": "11109", "Unicode hex": "2B65" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "51", "Dingbat hex": "33", "Unicode dec": "11114", "Unicode hex": "2B6A" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "52", "Dingbat hex": "34", "Unicode dec": "11116", "Unicode hex": "2B6C" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "53", "Dingbat hex": "35", "Unicode dec": "11115", "Unicode hex": "2B6B" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "54", "Dingbat hex": "36", "Unicode dec": "11117", "Unicode hex": "2B6D" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "55", "Dingbat hex": "37", "Unicode dec": "11085", "Unicode hex": "2B4D" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "56", "Dingbat hex": "38", "Unicode dec": "11168", "Unicode hex": "2BA0" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "57", "Dingbat hex": "39", "Unicode dec": "11169", "Unicode hex": "2BA1" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "58", "Dingbat hex": "3A", "Unicode dec": "11170", "Unicode hex": "2BA2" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "59", "Dingbat hex": "3B", "Unicode dec": "11171", "Unicode hex": "2BA3" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "60", "Dingbat hex": "3C", "Unicode dec": "11172", "Unicode hex": "2BA4" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "61", "Dingbat hex": "3D", "Unicode dec": "11173", "Unicode hex": "2BA5" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "62", "Dingbat hex": "3E", "Unicode dec": "11174", "Unicode hex": "2BA6" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "63", "Dingbat hex": "3F", "Unicode dec": "11175", "Unicode hex": "2BA7" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "64", "Dingbat hex": "40", "Unicode dec": "11152", "Unicode hex": "2B90" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "65", "Dingbat hex": "41", "Unicode dec": "11153", "Unicode hex": "2B91" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "66", "Dingbat hex": "42", "Unicode dec": "11154", "Unicode hex": "2B92" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "67", "Dingbat hex": "43", "Unicode dec": "11155", "Unicode hex": "2B93" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "68", "Dingbat hex": "44", "Unicode dec": "11136", "Unicode hex": "2B80" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "69", "Dingbat hex": "45", "Unicode dec": "11139", "Unicode hex": "2B83" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "70", "Dingbat hex": "46", "Unicode dec": "11134", "Unicode hex": "2B7E" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "71", "Dingbat hex": "47", "Unicode dec": "11135", "Unicode hex": "2B7F" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "72", "Dingbat hex": "48", "Unicode dec": "11140", "Unicode hex": "2B84" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "73", "Dingbat hex": "49", "Unicode dec": "11142", "Unicode hex": "2B86" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "74", "Dingbat hex": "4A", "Unicode dec": "11141", "Unicode hex": "2B85" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "75", "Dingbat hex": "4B", "Unicode dec": "11143", "Unicode hex": "2B87" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "76", "Dingbat hex": "4C", "Unicode dec": "11151", "Unicode hex": "2B8F" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "77", "Dingbat hex": "4D", "Unicode dec": "11149", "Unicode hex": "2B8D" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "78", "Dingbat hex": "4E", "Unicode dec": "11150", "Unicode hex": "2B8E" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "79", "Dingbat hex": "4F", "Unicode dec": "11148", "Unicode hex": "2B8C" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "80", "Dingbat hex": "50", "Unicode dec": "11118", "Unicode hex": "2B6E" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "81", "Dingbat hex": "51", "Unicode dec": "11119", "Unicode hex": "2B6F" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "82", "Dingbat hex": "52", "Unicode dec": "9099", "Unicode hex": "238B" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "83", "Dingbat hex": "53", "Unicode dec": "8996", "Unicode hex": "2324" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "84", "Dingbat hex": "54", "Unicode dec": "8963", "Unicode hex": "2303" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "85", "Dingbat hex": "55", "Unicode dec": "8997", "Unicode hex": "2325" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "86", "Dingbat hex": "56", "Unicode dec": "9251", "Unicode hex": "2423" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "87", "Dingbat hex": "57", "Unicode dec": "9085", "Unicode hex": "237D" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "88", "Dingbat hex": "58", "Unicode dec": "8682", "Unicode hex": "21EA" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "89", "Dingbat hex": "59", "Unicode dec": "11192", "Unicode hex": "2BB8" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "90", "Dingbat hex": "5A", "Unicode dec": "129184", "Unicode hex": "1F8A0" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "91", "Dingbat hex": "5B", "Unicode dec": "129185", "Unicode hex": "1F8A1" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "92", "Dingbat hex": "5C", "Unicode dec": "129186", "Unicode hex": "1F8A2" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "93", "Dingbat hex": "5D", "Unicode dec": "129187", "Unicode hex": "1F8A3" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "94", "Dingbat hex": "5E", "Unicode dec": "129188", "Unicode hex": "1F8A4" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "95", "Dingbat hex": "5F", "Unicode dec": "129189", "Unicode hex": "1F8A5" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "96", "Dingbat hex": "60", "Unicode dec": "129190", "Unicode hex": "1F8A6" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "97", "Dingbat hex": "61", "Unicode dec": "129191", "Unicode hex": "1F8A7" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "98", "Dingbat hex": "62", "Unicode dec": "129192", "Unicode hex": "1F8A8" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "99", "Dingbat hex": "63", "Unicode dec": "129193", "Unicode hex": "1F8A9" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "100", "Dingbat hex": "64", "Unicode dec": "129194", "Unicode hex": "1F8AA" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "101", "Dingbat hex": "65", "Unicode dec": "129195", "Unicode hex": "1F8AB" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "102", "Dingbat hex": "66", "Unicode dec": "129104", "Unicode hex": "1F850" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "103", "Dingbat hex": "67", "Unicode dec": "129106", "Unicode hex": "1F852" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "104", "Dingbat hex": "68", "Unicode dec": "129105", "Unicode hex": "1F851" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "105", "Dingbat hex": "69", "Unicode dec": "129107", "Unicode hex": "1F853" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "106", "Dingbat hex": "6A", "Unicode dec": "129108", "Unicode hex": "1F854" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "107", "Dingbat hex": "6B", "Unicode dec": "129109", "Unicode hex": "1F855" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "108", "Dingbat hex": "6C", "Unicode dec": "129111", "Unicode hex": "1F857" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "109", "Dingbat hex": "6D", "Unicode dec": "129110", "Unicode hex": "1F856" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "110", "Dingbat hex": "6E", "Unicode dec": "129112", "Unicode hex": "1F858" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "111", "Dingbat hex": "6F", "Unicode dec": "129113", "Unicode hex": "1F859" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "112", "Dingbat hex": "70", "Unicode dec": "9650", "Unicode hex": "25B2" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "113", "Dingbat hex": "71", "Unicode dec": "9660", "Unicode hex": "25BC" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "114", "Dingbat hex": "72", "Unicode dec": "9651", "Unicode hex": "25B3" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "115", "Dingbat hex": "73", "Unicode dec": "9661", "Unicode hex": "25BD" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "116", "Dingbat hex": "74", "Unicode dec": "9664", "Unicode hex": "25C0" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "117", "Dingbat hex": "75", "Unicode dec": "9654", "Unicode hex": "25B6" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "118", "Dingbat hex": "76", "Unicode dec": "9665", "Unicode hex": "25C1" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "119", "Dingbat hex": "77", "Unicode dec": "9655", "Unicode hex": "25B7" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "120", "Dingbat hex": "78", "Unicode dec": "9699", "Unicode hex": "25E3" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "121", "Dingbat hex": "79", "Unicode dec": "9698", "Unicode hex": "25E2" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "122", "Dingbat hex": "7A", "Unicode dec": "9700", "Unicode hex": "25E4" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "123", "Dingbat hex": "7B", "Unicode dec": "9701", "Unicode hex": "25E5" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "124", "Dingbat hex": "7C", "Unicode dec": "128896", "Unicode hex": "1F780" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "125", "Dingbat hex": "7D", "Unicode dec": "128898", "Unicode hex": "1F782" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "126", "Dingbat hex": "7E", "Unicode dec": "128897", "Unicode hex": "1F781" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "128", "Dingbat hex": "80", "Unicode dec": "128899", "Unicode hex": "1F783" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "129", "Dingbat hex": "81", "Unicode dec": "11205", "Unicode hex": "2BC5" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "130", "Dingbat hex": "82", "Unicode dec": "11206", "Unicode hex": "2BC6" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "131", "Dingbat hex": "83", "Unicode dec": "11207", "Unicode hex": "2BC7" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "132", "Dingbat hex": "84", "Unicode dec": "11208", "Unicode hex": "2BC8" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "133", "Dingbat hex": "85", "Unicode dec": "11164", "Unicode hex": "2B9C" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "134", "Dingbat hex": "86", "Unicode dec": "11166", "Unicode hex": "2B9E" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "135", "Dingbat hex": "87", "Unicode dec": "11165", "Unicode hex": "2B9D" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "136", "Dingbat hex": "88", "Unicode dec": "11167", "Unicode hex": "2B9F" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "137", "Dingbat hex": "89", "Unicode dec": "129040", "Unicode hex": "1F810" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "138", "Dingbat hex": "8A", "Unicode dec": "129042", "Unicode hex": "1F812" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "139", "Dingbat hex": "8B", "Unicode dec": "129041", "Unicode hex": "1F811" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "140", "Dingbat hex": "8C", "Unicode dec": "129043", "Unicode hex": "1F813" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "141", "Dingbat hex": "8D", "Unicode dec": "129044", "Unicode hex": "1F814" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "142", "Dingbat hex": "8E", "Unicode dec": "129046", "Unicode hex": "1F816" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "143", "Dingbat hex": "8F", "Unicode dec": "129045", "Unicode hex": "1F815" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "144", "Dingbat hex": "90", "Unicode dec": "129047", "Unicode hex": "1F817" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "145", "Dingbat hex": "91", "Unicode dec": "129048", "Unicode hex": "1F818" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "146", "Dingbat hex": "92", "Unicode dec": "129050", "Unicode hex": "1F81A" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "147", "Dingbat hex": "93", "Unicode dec": "129049", "Unicode hex": "1F819" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "148", "Dingbat hex": "94", "Unicode dec": "129051", "Unicode hex": "1F81B" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "149", "Dingbat hex": "95", "Unicode dec": "129052", "Unicode hex": "1F81C" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "150", "Dingbat hex": "96", "Unicode dec": "129054", "Unicode hex": "1F81E" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "151", "Dingbat hex": "97", "Unicode dec": "129053", "Unicode hex": "1F81D" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "152", "Dingbat hex": "98", "Unicode dec": "129055", "Unicode hex": "1F81F" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "153", "Dingbat hex": "99", "Unicode dec": "129024", "Unicode hex": "1F800" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "154", "Dingbat hex": "9A", "Unicode dec": "129026", "Unicode hex": "1F802" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "155", "Dingbat hex": "9B", "Unicode dec": "129025", "Unicode hex": "1F801" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "156", "Dingbat hex": "9C", "Unicode dec": "129027", "Unicode hex": "1F803" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "157", "Dingbat hex": "9D", "Unicode dec": "129028", "Unicode hex": "1F804" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "158", "Dingbat hex": "9E", "Unicode dec": "129030", "Unicode hex": "1F806" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "159", "Dingbat hex": "9F", "Unicode dec": "129029", "Unicode hex": "1F805" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "160", "Dingbat hex": "A0", "Unicode dec": "129031", "Unicode hex": "1F807" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "161", "Dingbat hex": "A1", "Unicode dec": "129032", "Unicode hex": "1F808" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "162", "Dingbat hex": "A2", "Unicode dec": "129034", "Unicode hex": "1F80A" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "163", "Dingbat hex": "A3", "Unicode dec": "129033", "Unicode hex": "1F809" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "164", "Dingbat hex": "A4", "Unicode dec": "129035", "Unicode hex": "1F80B" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "165", "Dingbat hex": "A5", "Unicode dec": "129056", "Unicode hex": "1F820" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "166", "Dingbat hex": "A6", "Unicode dec": "129058", "Unicode hex": "1F822" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "167", "Dingbat hex": "A7", "Unicode dec": "129060", "Unicode hex": "1F824" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "168", "Dingbat hex": "A8", "Unicode dec": "129062", "Unicode hex": "1F826" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "169", "Dingbat hex": "A9", "Unicode dec": "129064", "Unicode hex": "1F828" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "170", "Dingbat hex": "AA", "Unicode dec": "129066", "Unicode hex": "1F82A" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "171", "Dingbat hex": "AB", "Unicode dec": "129068", "Unicode hex": "1F82C" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "172", "Dingbat hex": "AC", "Unicode dec": "129180", "Unicode hex": "1F89C" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "173", "Dingbat hex": "AD", "Unicode dec": "129181", "Unicode hex": "1F89D" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "174", "Dingbat hex": "AE", "Unicode dec": "129182", "Unicode hex": "1F89E" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "175", "Dingbat hex": "AF", "Unicode dec": "129183", "Unicode hex": "1F89F" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "176", "Dingbat hex": "B0", "Unicode dec": "129070", "Unicode hex": "1F82E" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "177", "Dingbat hex": "B1", "Unicode dec": "129072", "Unicode hex": "1F830" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "178", "Dingbat hex": "B2", "Unicode dec": "129074", "Unicode hex": "1F832" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "179", "Dingbat hex": "B3", "Unicode dec": "129076", "Unicode hex": "1F834" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "180", "Dingbat hex": "B4", "Unicode dec": "129078", "Unicode hex": "1F836" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "181", "Dingbat hex": "B5", "Unicode dec": "129080", "Unicode hex": "1F838" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "182", "Dingbat hex": "B6", "Unicode dec": "129082", "Unicode hex": "1F83A" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "183", "Dingbat hex": "B7", "Unicode dec": "129081", "Unicode hex": "1F839" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "184", "Dingbat hex": "B8", "Unicode dec": "129083", "Unicode hex": "1F83B" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "185", "Dingbat hex": "B9", "Unicode dec": "129176", "Unicode hex": "1F898" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "186", "Dingbat hex": "BA", "Unicode dec": "129178", "Unicode hex": "1F89A" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "187", "Dingbat hex": "BB", "Unicode dec": "129177", "Unicode hex": "1F899" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "188", "Dingbat hex": "BC", "Unicode dec": "129179", "Unicode hex": "1F89B" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "189", "Dingbat hex": "BD", "Unicode dec": "129084", "Unicode hex": "1F83C" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "190", "Dingbat hex": "BE", "Unicode dec": "129086", "Unicode hex": "1F83E" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "191", "Dingbat hex": "BF", "Unicode dec": "129085", "Unicode hex": "1F83D" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "192", "Dingbat hex": "C0", "Unicode dec": "129087", "Unicode hex": "1F83F" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "193", "Dingbat hex": "C1", "Unicode dec": "129088", "Unicode hex": "1F840" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "194", "Dingbat hex": "C2", "Unicode dec": "129090", "Unicode hex": "1F842" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "195", "Dingbat hex": "C3", "Unicode dec": "129089", "Unicode hex": "1F841" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "196", "Dingbat hex": "C4", "Unicode dec": "129091", "Unicode hex": "1F843" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "197", "Dingbat hex": "C5", "Unicode dec": "129092", "Unicode hex": "1F844" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "198", "Dingbat hex": "C6", "Unicode dec": "129094", "Unicode hex": "1F846" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "199", "Dingbat hex": "C7", "Unicode dec": "129093", "Unicode hex": "1F845" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "200", "Dingbat hex": "C8", "Unicode dec": "129095", "Unicode hex": "1F847" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "201", "Dingbat hex": "C9", "Unicode dec": "11176", "Unicode hex": "2BA8" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "202", "Dingbat hex": "CA", "Unicode dec": "11177", "Unicode hex": "2BA9" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "203", "Dingbat hex": "CB", "Unicode dec": "11178", "Unicode hex": "2BAA" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "204", "Dingbat hex": "CC", "Unicode dec": "11179", "Unicode hex": "2BAB" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "205", "Dingbat hex": "CD", "Unicode dec": "11180", "Unicode hex": "2BAC" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "206", "Dingbat hex": "CE", "Unicode dec": "11181", "Unicode hex": "2BAD" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "207", "Dingbat hex": "CF", "Unicode dec": "11182", "Unicode hex": "2BAE" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "208", "Dingbat hex": "D0", "Unicode dec": "11183", "Unicode hex": "2BAF" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "209", "Dingbat hex": "D1", "Unicode dec": "129120", "Unicode hex": "1F860" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "210", "Dingbat hex": "D2", "Unicode dec": "129122", "Unicode hex": "1F862" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "211", "Dingbat hex": "D3", "Unicode dec": "129121", "Unicode hex": "1F861" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "212", "Dingbat hex": "D4", "Unicode dec": "129123", "Unicode hex": "1F863" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "213", "Dingbat hex": "D5", "Unicode dec": "129124", "Unicode hex": "1F864" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "214", "Dingbat hex": "D6", "Unicode dec": "129125", "Unicode hex": "1F865" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "215", "Dingbat hex": "D7", "Unicode dec": "129127", "Unicode hex": "1F867" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "216", "Dingbat hex": "D8", "Unicode dec": "129126", "Unicode hex": "1F866" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "217", "Dingbat hex": "D9", "Unicode dec": "129136", "Unicode hex": "1F870" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "218", "Dingbat hex": "DA", "Unicode dec": "129138", "Unicode hex": "1F872" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "219", "Dingbat hex": "DB", "Unicode dec": "129137", "Unicode hex": "1F871" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "220", "Dingbat hex": "DC", "Unicode dec": "129139", "Unicode hex": "1F873" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "221", "Dingbat hex": "DD", "Unicode dec": "129140", "Unicode hex": "1F874" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "222", "Dingbat hex": "DE", "Unicode dec": "129141", "Unicode hex": "1F875" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "223", "Dingbat hex": "DF", "Unicode dec": "129143", "Unicode hex": "1F877" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "224", "Dingbat hex": "E0", "Unicode dec": "129142", "Unicode hex": "1F876" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "225", "Dingbat hex": "E1", "Unicode dec": "129152", "Unicode hex": "1F880" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "226", "Dingbat hex": "E2", "Unicode dec": "129154", "Unicode hex": "1F882" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "227", "Dingbat hex": "E3", "Unicode dec": "129153", "Unicode hex": "1F881" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "228", "Dingbat hex": "E4", "Unicode dec": "129155", "Unicode hex": "1F883" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "229", "Dingbat hex": "E5", "Unicode dec": "129156", "Unicode hex": "1F884" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "230", "Dingbat hex": "E6", "Unicode dec": "129157", "Unicode hex": "1F885" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "231", "Dingbat hex": "E7", "Unicode dec": "129159", "Unicode hex": "1F887" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "232", "Dingbat hex": "E8", "Unicode dec": "129158", "Unicode hex": "1F886" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "233", "Dingbat hex": "E9", "Unicode dec": "129168", "Unicode hex": "1F890" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "234", "Dingbat hex": "EA", "Unicode dec": "129170", "Unicode hex": "1F892" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "235", "Dingbat hex": "EB", "Unicode dec": "129169", "Unicode hex": "1F891" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "236", "Dingbat hex": "EC", "Unicode dec": "129171", "Unicode hex": "1F893" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "237", "Dingbat hex": "ED", "Unicode dec": "129172", "Unicode hex": "1F894" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "238", "Dingbat hex": "EE", "Unicode dec": "129174", "Unicode hex": "1F896" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "239", "Dingbat hex": "EF", "Unicode dec": "129173", "Unicode hex": "1F895" },
            { "Typeface name": "Wingdings 3", "Dingbat dec": "240", "Dingbat hex": "F0", "Unicode dec": "129175", "Unicode hex": "1F897" }
          ];
          exports2.default = dingbats;
        }, {}], 80: [function(require2, module2, exports2) {
          "use strict";
          var __importDefault = this && this.__importDefault || function(mod) {
            return mod && mod.__esModule ? mod : { "default": mod };
          };
          Object.defineProperty(exports2, "__esModule", { value: true });
          exports2.hex = exports2.dec = exports2.codePoint = void 0;
          var dingbats_1 = __importDefault(require2("./dingbats"));
          var dingbatsByCodePoint = {};
          var fromCodePoint = String.fromCodePoint ? String.fromCodePoint : fromCodePointPolyfill;
          for (var _i = 0, dingbats_2 = dingbats_1.default; _i < dingbats_2.length; _i++) {
            var dingbat = dingbats_2[_i];
            var codePoint_1 = parseInt(dingbat["Unicode dec"], 10);
            var scalarValue = {
              codePoint: codePoint_1,
              string: fromCodePoint(codePoint_1)
            };
            dingbatsByCodePoint[dingbat["Typeface name"].toUpperCase() + "_" + dingbat["Dingbat dec"]] = scalarValue;
          }
          function codePoint(typeface, codePoint2) {
            return dingbatsByCodePoint[typeface.toUpperCase() + "_" + codePoint2];
          }
          exports2.codePoint = codePoint;
          function dec(typeface, dec2) {
            return codePoint(typeface, parseInt(dec2, 10));
          }
          exports2.dec = dec;
          function hex(typeface, hex2) {
            return codePoint(typeface, parseInt(hex2, 16));
          }
          exports2.hex = hex;
          function fromCodePointPolyfill(codePoint2) {
            if (codePoint2 <= 65535) {
              return String.fromCharCode(codePoint2);
            } else {
              var highSurrogate = Math.floor((codePoint2 - 65536) / 1024) + 55296;
              var lowSurrogate = (codePoint2 - 65536) % 1024 + 56320;
              return String.fromCharCode(highSurrogate, lowSurrogate);
            }
          }
          ;
        }, { "./dingbats": 79 }], 81: [function(require2, module2, exports2) {
          function EventEmitter() {
            this._events = this._events || {};
            this._maxListeners = this._maxListeners || void 0;
          }
          module2.exports = EventEmitter;
          EventEmitter.EventEmitter = EventEmitter;
          EventEmitter.prototype._events = void 0;
          EventEmitter.prototype._maxListeners = void 0;
          EventEmitter.defaultMaxListeners = 10;
          EventEmitter.prototype.setMaxListeners = function(n) {
            if (!isNumber(n) || n < 0 || isNaN(n))
              throw TypeError("n must be a positive number");
            this._maxListeners = n;
            return this;
          };
          EventEmitter.prototype.emit = function(type) {
            var er, handler, len, args, i, listeners;
            if (!this._events)
              this._events = {};
            if (type === "error") {
              if (!this._events.error || isObject2(this._events.error) && !this._events.error.length) {
                er = arguments[1];
                if (er instanceof Error) {
                  throw er;
                } else {
                  var err = new Error('Uncaught, unspecified "error" event. (' + er + ")");
                  err.context = er;
                  throw err;
                }
              }
            }
            handler = this._events[type];
            if (isUndefined(handler))
              return false;
            if (isFunction(handler)) {
              switch (arguments.length) {
                // fast cases
                case 1:
                  handler.call(this);
                  break;
                case 2:
                  handler.call(this, arguments[1]);
                  break;
                case 3:
                  handler.call(this, arguments[1], arguments[2]);
                  break;
                // slower
                default:
                  args = Array.prototype.slice.call(arguments, 1);
                  handler.apply(this, args);
              }
            } else if (isObject2(handler)) {
              args = Array.prototype.slice.call(arguments, 1);
              listeners = handler.slice();
              len = listeners.length;
              for (i = 0; i < len; i++)
                listeners[i].apply(this, args);
            }
            return true;
          };
          EventEmitter.prototype.addListener = function(type, listener) {
            var m;
            if (!isFunction(listener))
              throw TypeError("listener must be a function");
            if (!this._events)
              this._events = {};
            if (this._events.newListener)
              this.emit(
                "newListener",
                type,
                isFunction(listener.listener) ? listener.listener : listener
              );
            if (!this._events[type])
              this._events[type] = listener;
            else if (isObject2(this._events[type]))
              this._events[type].push(listener);
            else
              this._events[type] = [this._events[type], listener];
            if (isObject2(this._events[type]) && !this._events[type].warned) {
              if (!isUndefined(this._maxListeners)) {
                m = this._maxListeners;
              } else {
                m = EventEmitter.defaultMaxListeners;
              }
              if (m && m > 0 && this._events[type].length > m) {
                this._events[type].warned = true;
                console.error(
                  "(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",
                  this._events[type].length
                );
                if (typeof console.trace === "function") {
                  console.trace();
                }
              }
            }
            return this;
          };
          EventEmitter.prototype.on = EventEmitter.prototype.addListener;
          EventEmitter.prototype.once = function(type, listener) {
            if (!isFunction(listener))
              throw TypeError("listener must be a function");
            var fired = false;
            function g() {
              this.removeListener(type, g);
              if (!fired) {
                fired = true;
                listener.apply(this, arguments);
              }
            }
            g.listener = listener;
            this.on(type, g);
            return this;
          };
          EventEmitter.prototype.removeListener = function(type, listener) {
            var list, position, length, i;
            if (!isFunction(listener))
              throw TypeError("listener must be a function");
            if (!this._events || !this._events[type])
              return this;
            list = this._events[type];
            length = list.length;
            position = -1;
            if (list === listener || isFunction(list.listener) && list.listener === listener) {
              delete this._events[type];
              if (this._events.removeListener)
                this.emit("removeListener", type, listener);
            } else if (isObject2(list)) {
              for (i = length; i-- > 0; ) {
                if (list[i] === listener || list[i].listener && list[i].listener === listener) {
                  position = i;
                  break;
                }
              }
              if (position < 0)
                return this;
              if (list.length === 1) {
                list.length = 0;
                delete this._events[type];
              } else {
                list.splice(position, 1);
              }
              if (this._events.removeListener)
                this.emit("removeListener", type, listener);
            }
            return this;
          };
          EventEmitter.prototype.removeAllListeners = function(type) {
            var key, listeners;
            if (!this._events)
              return this;
            if (!this._events.removeListener) {
              if (arguments.length === 0)
                this._events = {};
              else if (this._events[type])
                delete this._events[type];
              return this;
            }
            if (arguments.length === 0) {
              for (key in this._events) {
                if (key === "removeListener") continue;
                this.removeAllListeners(key);
              }
              this.removeAllListeners("removeListener");
              this._events = {};
              return this;
            }
            listeners = this._events[type];
            if (isFunction(listeners)) {
              this.removeListener(type, listeners);
            } else if (listeners) {
              while (listeners.length)
                this.removeListener(type, listeners[listeners.length - 1]);
            }
            delete this._events[type];
            return this;
          };
          EventEmitter.prototype.listeners = function(type) {
            var ret2;
            if (!this._events || !this._events[type])
              ret2 = [];
            else if (isFunction(this._events[type]))
              ret2 = [this._events[type]];
            else
              ret2 = this._events[type].slice();
            return ret2;
          };
          EventEmitter.prototype.listenerCount = function(type) {
            if (this._events) {
              var evlistener = this._events[type];
              if (isFunction(evlistener))
                return 1;
              else if (evlistener)
                return evlistener.length;
            }
            return 0;
          };
          EventEmitter.listenerCount = function(emitter, type) {
            return emitter.listenerCount(type);
          };
          function isFunction(arg) {
            return typeof arg === "function";
          }
          function isNumber(arg) {
            return typeof arg === "number";
          }
          function isObject2(arg) {
            return typeof arg === "object" && arg !== null;
          }
          function isUndefined(arg) {
            return arg === void 0;
          }
        }, {}], 82: [function(require2, module2, exports2) {
          exports2.read = function(buffer, offset, isLE, mLen, nBytes) {
            var e, m;
            var eLen = nBytes * 8 - mLen - 1;
            var eMax = (1 << eLen) - 1;
            var eBias = eMax >> 1;
            var nBits = -7;
            var i = isLE ? nBytes - 1 : 0;
            var d = isLE ? -1 : 1;
            var s = buffer[offset + i];
            i += d;
            e = s & (1 << -nBits) - 1;
            s >>= -nBits;
            nBits += eLen;
            for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
            }
            m = e & (1 << -nBits) - 1;
            e >>= -nBits;
            nBits += mLen;
            for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
            }
            if (e === 0) {
              e = 1 - eBias;
            } else if (e === eMax) {
              return m ? NaN : (s ? -1 : 1) * Infinity;
            } else {
              m = m + Math.pow(2, mLen);
              e = e - eBias;
            }
            return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
          };
          exports2.write = function(buffer, value, offset, isLE, mLen, nBytes) {
            var e, m, c;
            var eLen = nBytes * 8 - mLen - 1;
            var eMax = (1 << eLen) - 1;
            var eBias = eMax >> 1;
            var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
            var i = isLE ? 0 : nBytes - 1;
            var d = isLE ? 1 : -1;
            var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
            value = Math.abs(value);
            if (isNaN(value) || value === Infinity) {
              m = isNaN(value) ? 1 : 0;
              e = eMax;
            } else {
              e = Math.floor(Math.log(value) / Math.LN2);
              if (value * (c = Math.pow(2, -e)) < 1) {
                e--;
                c *= 2;
              }
              if (e + eBias >= 1) {
                value += rt / c;
              } else {
                value += rt * Math.pow(2, 1 - eBias);
              }
              if (value * c >= 2) {
                e++;
                c /= 2;
              }
              if (e + eBias >= eMax) {
                m = 0;
                e = eMax;
              } else if (e + eBias >= 1) {
                m = (value * c - 1) * Math.pow(2, mLen);
                e = e + eBias;
              } else {
                m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                e = 0;
              }
            }
            for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
            }
            e = e << mLen | m;
            eLen += mLen;
            for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
            }
            buffer[offset + i - d] |= s * 128;
          };
        }, {}], 83: [function(require2, module2, exports2) {
          if (typeof Object.create === "function") {
            module2.exports = function inherits2(ctor, superCtor) {
              ctor.super_ = superCtor;
              ctor.prototype = Object.create(superCtor.prototype, {
                constructor: {
                  value: ctor,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
            };
          } else {
            module2.exports = function inherits2(ctor, superCtor) {
              ctor.super_ = superCtor;
              var TempCtor = function() {
              };
              TempCtor.prototype = superCtor.prototype;
              ctor.prototype = new TempCtor();
              ctor.prototype.constructor = ctor;
            };
          }
        }, {}], 84: [function(require2, module2, exports2) {
          module2.exports = function(obj2) {
            return obj2 != null && (isBuffer(obj2) || isSlowBuffer(obj2) || !!obj2._isBuffer);
          };
          function isBuffer(obj2) {
            return !!obj2.constructor && typeof obj2.constructor.isBuffer === "function" && obj2.constructor.isBuffer(obj2);
          }
          function isSlowBuffer(obj2) {
            return typeof obj2.readFloatLE === "function" && typeof obj2.slice === "function" && isBuffer(obj2.slice(0, 0));
          }
        }, {}], 85: [function(require2, module2, exports2) {
          var toString = {}.toString;
          module2.exports = Array.isArray || function(arr) {
            return toString.call(arr) == "[object Array]";
          };
        }, {}], 86: [function(require2, module2, exports2) {
          "use strict";
          var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
          exports2.encode = function(input, utf8) {
            var output = "";
            var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
            var i = 0;
            while (i < input.length) {
              chr1 = input.charCodeAt(i++);
              chr2 = input.charCodeAt(i++);
              chr3 = input.charCodeAt(i++);
              enc1 = chr1 >> 2;
              enc2 = (chr1 & 3) << 4 | chr2 >> 4;
              enc3 = (chr2 & 15) << 2 | chr3 >> 6;
              enc4 = chr3 & 63;
              if (isNaN(chr2)) {
                enc3 = enc4 = 64;
              } else if (isNaN(chr3)) {
                enc4 = 64;
              }
              output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);
            }
            return output;
          };
          exports2.decode = function(input, utf8) {
            var output = "";
            var chr1, chr2, chr3;
            var enc1, enc2, enc3, enc4;
            var i = 0;
            input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
            while (i < input.length) {
              enc1 = _keyStr.indexOf(input.charAt(i++));
              enc2 = _keyStr.indexOf(input.charAt(i++));
              enc3 = _keyStr.indexOf(input.charAt(i++));
              enc4 = _keyStr.indexOf(input.charAt(i++));
              chr1 = enc1 << 2 | enc2 >> 4;
              chr2 = (enc2 & 15) << 4 | enc3 >> 2;
              chr3 = (enc3 & 3) << 6 | enc4;
              output = output + String.fromCharCode(chr1);
              if (enc3 != 64) {
                output = output + String.fromCharCode(chr2);
              }
              if (enc4 != 64) {
                output = output + String.fromCharCode(chr3);
              }
            }
            return output;
          };
        }, {}], 87: [function(require2, module2, exports2) {
          "use strict";
          function CompressedObject() {
            this.compressedSize = 0;
            this.uncompressedSize = 0;
            this.crc32 = 0;
            this.compressionMethod = null;
            this.compressedContent = null;
          }
          CompressedObject.prototype = {
            /**
             * Return the decompressed content in an unspecified format.
             * The format will depend on the decompressor.
             * @return {Object} the decompressed content.
             */
            getContent: function() {
              return null;
            },
            /**
             * Return the compressed content in an unspecified format.
             * The format will depend on the compressed conten source.
             * @return {Object} the compressed content.
             */
            getCompressedContent: function() {
              return null;
            }
          };
          module2.exports = CompressedObject;
        }, {}], 88: [function(require2, module2, exports2) {
          "use strict";
          exports2.STORE = {
            magic: "\0\0",
            compress: function(content, compressionOptions) {
              return content;
            },
            uncompress: function(content) {
              return content;
            },
            compressInputType: null,
            uncompressInputType: null
          };
          exports2.DEFLATE = require2("./flate");
        }, { "./flate": 93 }], 89: [function(require2, module2, exports2) {
          "use strict";
          var utils = require2("./utils");
          var table = [
            0,
            1996959894,
            3993919788,
            2567524794,
            124634137,
            1886057615,
            3915621685,
            2657392035,
            249268274,
            2044508324,
            3772115230,
            2547177864,
            162941995,
            2125561021,
            3887607047,
            2428444049,
            498536548,
            1789927666,
            4089016648,
            2227061214,
            450548861,
            1843258603,
            4107580753,
            2211677639,
            325883990,
            1684777152,
            4251122042,
            2321926636,
            335633487,
            1661365465,
            4195302755,
            2366115317,
            997073096,
            1281953886,
            3579855332,
            2724688242,
            1006888145,
            1258607687,
            3524101629,
            2768942443,
            901097722,
            1119000684,
            3686517206,
            2898065728,
            853044451,
            1172266101,
            3705015759,
            2882616665,
            651767980,
            1373503546,
            3369554304,
            3218104598,
            565507253,
            1454621731,
            3485111705,
            3099436303,
            671266974,
            1594198024,
            3322730930,
            2970347812,
            795835527,
            1483230225,
            3244367275,
            3060149565,
            1994146192,
            31158534,
            2563907772,
            4023717930,
            1907459465,
            112637215,
            2680153253,
            3904427059,
            2013776290,
            251722036,
            2517215374,
            3775830040,
            2137656763,
            141376813,
            2439277719,
            3865271297,
            1802195444,
            476864866,
            2238001368,
            4066508878,
            1812370925,
            453092731,
            2181625025,
            4111451223,
            1706088902,
            314042704,
            2344532202,
            4240017532,
            1658658271,
            366619977,
            2362670323,
            4224994405,
            1303535960,
            984961486,
            2747007092,
            3569037538,
            1256170817,
            1037604311,
            2765210733,
            3554079995,
            1131014506,
            879679996,
            2909243462,
            3663771856,
            1141124467,
            855842277,
            2852801631,
            3708648649,
            1342533948,
            654459306,
            3188396048,
            3373015174,
            1466479909,
            544179635,
            3110523913,
            3462522015,
            1591671054,
            702138776,
            2966460450,
            3352799412,
            1504918807,
            783551873,
            3082640443,
            3233442989,
            3988292384,
            2596254646,
            62317068,
            1957810842,
            3939845945,
            2647816111,
            81470997,
            1943803523,
            3814918930,
            2489596804,
            225274430,
            2053790376,
            3826175755,
            2466906013,
            167816743,
            2097651377,
            4027552580,
            2265490386,
            503444072,
            1762050814,
            4150417245,
            2154129355,
            426522225,
            1852507879,
            4275313526,
            2312317920,
            282753626,
            1742555852,
            4189708143,
            2394877945,
            397917763,
            1622183637,
            3604390888,
            2714866558,
            953729732,
            1340076626,
            3518719985,
            2797360999,
            1068828381,
            1219638859,
            3624741850,
            2936675148,
            906185462,
            1090812512,
            3747672003,
            2825379669,
            829329135,
            1181335161,
            3412177804,
            3160834842,
            628085408,
            1382605366,
            3423369109,
            3138078467,
            570562233,
            1426400815,
            3317316542,
            2998733608,
            733239954,
            1555261956,
            3268935591,
            3050360625,
            752459403,
            1541320221,
            2607071920,
            3965973030,
            1969922972,
            40735498,
            2617837225,
            3943577151,
            1913087877,
            83908371,
            2512341634,
            3803740692,
            2075208622,
            213261112,
            2463272603,
            3855990285,
            2094854071,
            198958881,
            2262029012,
            4057260610,
            1759359992,
            534414190,
            2176718541,
            4139329115,
            1873836001,
            414664567,
            2282248934,
            4279200368,
            1711684554,
            285281116,
            2405801727,
            4167216745,
            1634467795,
            376229701,
            2685067896,
            3608007406,
            1308918612,
            956543938,
            2808555105,
            3495958263,
            1231636301,
            1047427035,
            2932959818,
            3654703836,
            1088359270,
            936918e3,
            2847714899,
            3736837829,
            1202900863,
            817233897,
            3183342108,
            3401237130,
            1404277552,
            615818150,
            3134207493,
            3453421203,
            1423857449,
            601450431,
            3009837614,
            3294710456,
            1567103746,
            711928724,
            3020668471,
            3272380065,
            1510334235,
            755167117
          ];
          module2.exports = function crc32(input, crc) {
            if (typeof input === "undefined" || !input.length) {
              return 0;
            }
            var isArray = utils.getTypeOf(input) !== "string";
            if (typeof crc == "undefined") {
              crc = 0;
            }
            var x = 0;
            var y = 0;
            var b = 0;
            crc = crc ^ -1;
            for (var i = 0, iTop = input.length; i < iTop; i++) {
              b = isArray ? input[i] : input.charCodeAt(i);
              y = (crc ^ b) & 255;
              x = table[y];
              crc = crc >>> 8 ^ x;
            }
            return crc ^ -1;
          };
        }, { "./utils": 106 }], 90: [function(require2, module2, exports2) {
          "use strict";
          var utils = require2("./utils");
          function DataReader(data) {
            this.data = null;
            this.length = 0;
            this.index = 0;
          }
          DataReader.prototype = {
            /**
             * Check that the offset will not go too far.
             * @param {string} offset the additional offset to check.
             * @throws {Error} an Error if the offset is out of bounds.
             */
            checkOffset: function(offset) {
              this.checkIndex(this.index + offset);
            },
            /**
             * Check that the specifed index will not be too far.
             * @param {string} newIndex the index to check.
             * @throws {Error} an Error if the index is out of bounds.
             */
            checkIndex: function(newIndex) {
              if (this.length < newIndex || newIndex < 0) {
                throw new Error("End of data reached (data length = " + this.length + ", asked index = " + newIndex + "). Corrupted zip ?");
              }
            },
            /**
             * Change the index.
             * @param {number} newIndex The new index.
             * @throws {Error} if the new index is out of the data.
             */
            setIndex: function(newIndex) {
              this.checkIndex(newIndex);
              this.index = newIndex;
            },
            /**
             * Skip the next n bytes.
             * @param {number} n the number of bytes to skip.
             * @throws {Error} if the new index is out of the data.
             */
            skip: function(n) {
              this.setIndex(this.index + n);
            },
            /**
             * Get the byte at the specified index.
             * @param {number} i the index to use.
             * @return {number} a byte.
             */
            byteAt: function(i) {
            },
            /**
             * Get the next number with a given byte size.
             * @param {number} size the number of bytes to read.
             * @return {number} the corresponding number.
             */
            readInt: function(size) {
              var result = 0, i;
              this.checkOffset(size);
              for (i = this.index + size - 1; i >= this.index; i--) {
                result = (result << 8) + this.byteAt(i);
              }
              this.index += size;
              return result;
            },
            /**
             * Get the next string with a given byte size.
             * @param {number} size the number of bytes to read.
             * @return {string} the corresponding string.
             */
            readString: function(size) {
              return utils.transformTo("string", this.readData(size));
            },
            /**
             * Get raw data without conversion, <size> bytes.
             * @param {number} size the number of bytes to read.
             * @return {Object} the raw data, implementation specific.
             */
            readData: function(size) {
            },
            /**
             * Find the last occurence of a zip signature (4 bytes).
             * @param {string} sig the signature to find.
             * @return {number} the index of the last occurence, -1 if not found.
             */
            lastIndexOfSignature: function(sig) {
            },
            /**
             * Get the next date.
             * @return {Date} the date.
             */
            readDate: function() {
              var dostime = this.readInt(4);
              return new Date(
                (dostime >> 25 & 127) + 1980,
                // year
                (dostime >> 21 & 15) - 1,
                // month
                dostime >> 16 & 31,
                // day
                dostime >> 11 & 31,
                // hour
                dostime >> 5 & 63,
                // minute
                (dostime & 31) << 1
              );
            }
          };
          module2.exports = DataReader;
        }, { "./utils": 106 }], 91: [function(require2, module2, exports2) {
          "use strict";
          exports2.base64 = false;
          exports2.binary = false;
          exports2.dir = false;
          exports2.createFolders = false;
          exports2.date = null;
          exports2.compression = null;
          exports2.compressionOptions = null;
          exports2.comment = null;
          exports2.unixPermissions = null;
          exports2.dosPermissions = null;
        }, {}], 92: [function(require2, module2, exports2) {
          "use strict";
          var utils = require2("./utils");
          exports2.string2binary = function(str) {
            return utils.string2binary(str);
          };
          exports2.string2Uint8Array = function(str) {
            return utils.transformTo("uint8array", str);
          };
          exports2.uint8Array2String = function(array) {
            return utils.transformTo("string", array);
          };
          exports2.string2Blob = function(str) {
            var buffer = utils.transformTo("arraybuffer", str);
            return utils.arrayBuffer2Blob(buffer);
          };
          exports2.arrayBuffer2Blob = function(buffer) {
            return utils.arrayBuffer2Blob(buffer);
          };
          exports2.transformTo = function(outputType, input) {
            return utils.transformTo(outputType, input);
          };
          exports2.getTypeOf = function(input) {
            return utils.getTypeOf(input);
          };
          exports2.checkSupport = function(type) {
            return utils.checkSupport(type);
          };
          exports2.MAX_VALUE_16BITS = utils.MAX_VALUE_16BITS;
          exports2.MAX_VALUE_32BITS = utils.MAX_VALUE_32BITS;
          exports2.pretty = function(str) {
            return utils.pretty(str);
          };
          exports2.findCompression = function(compressionMethod) {
            return utils.findCompression(compressionMethod);
          };
          exports2.isRegExp = function(object) {
            return utils.isRegExp(object);
          };
        }, { "./utils": 106 }], 93: [function(require2, module2, exports2) {
          "use strict";
          var USE_TYPEDARRAY = typeof Uint8Array !== "undefined" && typeof Uint16Array !== "undefined" && typeof Uint32Array !== "undefined";
          var pako = require2("pako");
          exports2.uncompressInputType = USE_TYPEDARRAY ? "uint8array" : "array";
          exports2.compressInputType = USE_TYPEDARRAY ? "uint8array" : "array";
          exports2.magic = "\b\0";
          exports2.compress = function(input, compressionOptions) {
            return pako.deflateRaw(input, {
              level: compressionOptions.level || -1
              // default compression
            });
          };
          exports2.uncompress = function(input) {
            return pako.inflateRaw(input);
          };
        }, { "pako": 121 }], 94: [function(require2, module2, exports2) {
          "use strict";
          var base64 = require2("./base64");
          function JSZip(data, options2) {
            if (!(this instanceof JSZip)) return new JSZip(data, options2);
            this.files = {};
            this.comment = null;
            this.root = "";
            if (data) {
              this.load(data, options2);
            }
            this.clone = function() {
              var newObj = new JSZip();
              for (var i in this) {
                if (typeof this[i] !== "function") {
                  newObj[i] = this[i];
                }
              }
              return newObj;
            };
          }
          JSZip.prototype = require2("./object");
          JSZip.prototype.load = require2("./load");
          JSZip.support = require2("./support");
          JSZip.defaults = require2("./defaults");
          JSZip.utils = require2("./deprecatedPublicUtils");
          JSZip.base64 = {
            /**
             * @deprecated
             * This method will be removed in a future version without replacement.
             */
            encode: function(input) {
              return base64.encode(input);
            },
            /**
             * @deprecated
             * This method will be removed in a future version without replacement.
             */
            decode: function(input) {
              return base64.decode(input);
            }
          };
          JSZip.compressions = require2("./compressions");
          module2.exports = JSZip;
        }, { "./base64": 86, "./compressions": 88, "./defaults": 91, "./deprecatedPublicUtils": 92, "./load": 95, "./object": 98, "./support": 102 }], 95: [function(require2, module2, exports2) {
          "use strict";
          var base64 = require2("./base64");
          var ZipEntries = require2("./zipEntries");
          module2.exports = function(data, options2) {
            var files, zipEntries, i, input;
            options2 = options2 || {};
            if (options2.base64) {
              data = base64.decode(data);
            }
            zipEntries = new ZipEntries(data, options2);
            files = zipEntries.files;
            for (i = 0; i < files.length; i++) {
              input = files[i];
              this.file(input.fileName, input.decompressed, {
                binary: true,
                optimizedBinaryString: true,
                date: input.date,
                dir: input.dir,
                comment: input.fileComment.length ? input.fileComment : null,
                unixPermissions: input.unixPermissions,
                dosPermissions: input.dosPermissions,
                createFolders: options2.createFolders
              });
            }
            if (zipEntries.zipComment.length) {
              this.comment = zipEntries.zipComment;
            }
            return this;
          };
        }, { "./base64": 86, "./zipEntries": 107 }], 96: [function(require2, module2, exports2) {
          (function(Buffer3) {
            "use strict";
            module2.exports = function(data, encoding) {
              return new Buffer3(data, encoding);
            };
            module2.exports.test = function(b) {
              return Buffer3.isBuffer(b);
            };
          }).call(this, require2("buffer").Buffer);
        }, { "buffer": 77 }], 97: [function(require2, module2, exports2) {
          "use strict";
          var Uint8ArrayReader = require2("./uint8ArrayReader");
          function NodeBufferReader(data) {
            this.data = data;
            this.length = this.data.length;
            this.index = 0;
          }
          NodeBufferReader.prototype = new Uint8ArrayReader();
          NodeBufferReader.prototype.readData = function(size) {
            this.checkOffset(size);
            var result = this.data.slice(this.index, this.index + size);
            this.index += size;
            return result;
          };
          module2.exports = NodeBufferReader;
        }, { "./uint8ArrayReader": 103 }], 98: [function(require2, module2, exports2) {
          "use strict";
          var support = require2("./support");
          var utils = require2("./utils");
          var crc32 = require2("./crc32");
          var signature = require2("./signature");
          var defaults = require2("./defaults");
          var base64 = require2("./base64");
          var compressions = require2("./compressions");
          var CompressedObject = require2("./compressedObject");
          var nodeBuffer = require2("./nodeBuffer");
          var utf8 = require2("./utf8");
          var StringWriter = require2("./stringWriter");
          var Uint8ArrayWriter = require2("./uint8ArrayWriter");
          var getRawData = function(file) {
            if (file._data instanceof CompressedObject) {
              file._data = file._data.getContent();
              file.options.binary = true;
              file.options.base64 = false;
              if (utils.getTypeOf(file._data) === "uint8array") {
                var copy = file._data;
                file._data = new Uint8Array(copy.length);
                if (copy.length !== 0) {
                  file._data.set(copy, 0);
                }
              }
            }
            return file._data;
          };
          var getBinaryData = function(file) {
            var result = getRawData(file), type = utils.getTypeOf(result);
            if (type === "string") {
              if (!file.options.binary) {
                if (support.nodebuffer) {
                  return nodeBuffer(result, "utf-8");
                }
              }
              return file.asBinary();
            }
            return result;
          };
          var dataToString = function(asUTF8) {
            var result = getRawData(this);
            if (result === null || typeof result === "undefined") {
              return "";
            }
            if (this.options.base64) {
              result = base64.decode(result);
            }
            if (asUTF8 && this.options.binary) {
              result = out.utf8decode(result);
            } else {
              result = utils.transformTo("string", result);
            }
            if (!asUTF8 && !this.options.binary) {
              result = utils.transformTo("string", out.utf8encode(result));
            }
            return result;
          };
          var ZipObject = function(name, data, options2) {
            this.name = name;
            this.dir = options2.dir;
            this.date = options2.date;
            this.comment = options2.comment;
            this.unixPermissions = options2.unixPermissions;
            this.dosPermissions = options2.dosPermissions;
            this._data = data;
            this.options = options2;
            this._initialMetadata = {
              dir: options2.dir,
              date: options2.date
            };
          };
          ZipObject.prototype = {
            /**
             * Return the content as UTF8 string.
             * @return {string} the UTF8 string.
             */
            asText: function() {
              return dataToString.call(this, true);
            },
            /**
             * Returns the binary content.
             * @return {string} the content as binary.
             */
            asBinary: function() {
              return dataToString.call(this, false);
            },
            /**
             * Returns the content as a nodejs Buffer.
             * @return {Buffer} the content as a Buffer.
             */
            asNodeBuffer: function() {
              var result = getBinaryData(this);
              return utils.transformTo("nodebuffer", result);
            },
            /**
             * Returns the content as an Uint8Array.
             * @return {Uint8Array} the content as an Uint8Array.
             */
            asUint8Array: function() {
              var result = getBinaryData(this);
              return utils.transformTo("uint8array", result);
            },
            /**
             * Returns the content as an ArrayBuffer.
             * @return {ArrayBuffer} the content as an ArrayBufer.
             */
            asArrayBuffer: function() {
              return this.asUint8Array().buffer;
            }
          };
          var decToHex = function(dec, bytes) {
            var hex = "", i;
            for (i = 0; i < bytes; i++) {
              hex += String.fromCharCode(dec & 255);
              dec = dec >>> 8;
            }
            return hex;
          };
          var extend = function() {
            var result = {}, i, attr;
            for (i = 0; i < arguments.length; i++) {
              for (attr in arguments[i]) {
                if (arguments[i].hasOwnProperty(attr) && typeof result[attr] === "undefined") {
                  result[attr] = arguments[i][attr];
                }
              }
            }
            return result;
          };
          var prepareFileAttrs = function(o) {
            o = o || {};
            if (o.base64 === true && (o.binary === null || o.binary === void 0)) {
              o.binary = true;
            }
            o = extend(o, defaults);
            o.date = o.date || /* @__PURE__ */ new Date();
            if (o.compression !== null) o.compression = o.compression.toUpperCase();
            return o;
          };
          var fileAdd = function(name, data, o) {
            var dataType = utils.getTypeOf(data), parent;
            o = prepareFileAttrs(o);
            if (typeof o.unixPermissions === "string") {
              o.unixPermissions = parseInt(o.unixPermissions, 8);
            }
            if (o.unixPermissions && o.unixPermissions & 16384) {
              o.dir = true;
            }
            if (o.dosPermissions && o.dosPermissions & 16) {
              o.dir = true;
            }
            if (o.dir) {
              name = forceTrailingSlash(name);
            }
            if (o.createFolders && (parent = parentFolder(name))) {
              folderAdd.call(this, parent, true);
            }
            if (o.dir || data === null || typeof data === "undefined") {
              o.base64 = false;
              o.binary = false;
              data = null;
              dataType = null;
            } else if (dataType === "string") {
              if (o.binary && !o.base64) {
                if (o.optimizedBinaryString !== true) {
                  data = utils.string2binary(data);
                }
              }
            } else {
              o.base64 = false;
              o.binary = true;
              if (!dataType && !(data instanceof CompressedObject)) {
                throw new Error("The data of '" + name + "' is in an unsupported format !");
              }
              if (dataType === "arraybuffer") {
                data = utils.transformTo("uint8array", data);
              }
            }
            var object = new ZipObject(name, data, o);
            this.files[name] = object;
            return object;
          };
          var parentFolder = function(path) {
            if (path.slice(-1) == "/") {
              path = path.substring(0, path.length - 1);
            }
            var lastSlash = path.lastIndexOf("/");
            return lastSlash > 0 ? path.substring(0, lastSlash) : "";
          };
          var forceTrailingSlash = function(path) {
            if (path.slice(-1) != "/") {
              path += "/";
            }
            return path;
          };
          var folderAdd = function(name, createFolders) {
            createFolders = typeof createFolders !== "undefined" ? createFolders : false;
            name = forceTrailingSlash(name);
            if (!this.files[name]) {
              fileAdd.call(this, name, null, {
                dir: true,
                createFolders
              });
            }
            return this.files[name];
          };
          var generateCompressedObjectFrom = function(file, compression, compressionOptions) {
            var result = new CompressedObject(), content;
            if (file._data instanceof CompressedObject) {
              result.uncompressedSize = file._data.uncompressedSize;
              result.crc32 = file._data.crc32;
              if (result.uncompressedSize === 0 || file.dir) {
                compression = compressions["STORE"];
                result.compressedContent = "";
                result.crc32 = 0;
              } else if (file._data.compressionMethod === compression.magic) {
                result.compressedContent = file._data.getCompressedContent();
              } else {
                content = file._data.getContent();
                result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content), compressionOptions);
              }
            } else {
              content = getBinaryData(file);
              if (!content || content.length === 0 || file.dir) {
                compression = compressions["STORE"];
                content = "";
              }
              result.uncompressedSize = content.length;
              result.crc32 = crc32(content);
              result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content), compressionOptions);
            }
            result.compressedSize = result.compressedContent.length;
            result.compressionMethod = compression.magic;
            return result;
          };
          var generateUnixExternalFileAttr = function(unixPermissions, isDir) {
            var result = unixPermissions;
            if (!unixPermissions) {
              result = isDir ? 16893 : 33204;
            }
            return (result & 65535) << 16;
          };
          var generateDosExternalFileAttr = function(dosPermissions, isDir) {
            return (dosPermissions || 0) & 63;
          };
          var generateZipParts = function(name, file, compressedObject, offset, platform) {
            var data = compressedObject.compressedContent, utfEncodedFileName = utils.transformTo("string", utf8.utf8encode(file.name)), comment = file.comment || "", utfEncodedComment = utils.transformTo("string", utf8.utf8encode(comment)), useUTF8ForFileName = utfEncodedFileName.length !== file.name.length, useUTF8ForComment = utfEncodedComment.length !== comment.length, o = file.options, dosTime, dosDate, extraFields = "", unicodePathExtraField = "", unicodeCommentExtraField = "", dir, date;
            if (file._initialMetadata.dir !== file.dir) {
              dir = file.dir;
            } else {
              dir = o.dir;
            }
            if (file._initialMetadata.date !== file.date) {
              date = file.date;
            } else {
              date = o.date;
            }
            var extFileAttr = 0;
            var versionMadeBy = 0;
            if (dir) {
              extFileAttr |= 16;
            }
            if (platform === "UNIX") {
              versionMadeBy = 798;
              extFileAttr |= generateUnixExternalFileAttr(file.unixPermissions, dir);
            } else {
              versionMadeBy = 20;
              extFileAttr |= generateDosExternalFileAttr(file.dosPermissions, dir);
            }
            dosTime = date.getHours();
            dosTime = dosTime << 6;
            dosTime = dosTime | date.getMinutes();
            dosTime = dosTime << 5;
            dosTime = dosTime | date.getSeconds() / 2;
            dosDate = date.getFullYear() - 1980;
            dosDate = dosDate << 4;
            dosDate = dosDate | date.getMonth() + 1;
            dosDate = dosDate << 5;
            dosDate = dosDate | date.getDate();
            if (useUTF8ForFileName) {
              unicodePathExtraField = // Version
              decToHex(1, 1) + // NameCRC32
              decToHex(crc32(utfEncodedFileName), 4) + // UnicodeName
              utfEncodedFileName;
              extraFields += // Info-ZIP Unicode Path Extra Field
              "up" + // size
              decToHex(unicodePathExtraField.length, 2) + // content
              unicodePathExtraField;
            }
            if (useUTF8ForComment) {
              unicodeCommentExtraField = // Version
              decToHex(1, 1) + // CommentCRC32
              decToHex(this.crc32(utfEncodedComment), 4) + // UnicodeName
              utfEncodedComment;
              extraFields += // Info-ZIP Unicode Path Extra Field
              "uc" + // size
              decToHex(unicodeCommentExtraField.length, 2) + // content
              unicodeCommentExtraField;
            }
            var header = "";
            header += "\n\0";
            header += useUTF8ForFileName || useUTF8ForComment ? "\0\b" : "\0\0";
            header += compressedObject.compressionMethod;
            header += decToHex(dosTime, 2);
            header += decToHex(dosDate, 2);
            header += decToHex(compressedObject.crc32, 4);
            header += decToHex(compressedObject.compressedSize, 4);
            header += decToHex(compressedObject.uncompressedSize, 4);
            header += decToHex(utfEncodedFileName.length, 2);
            header += decToHex(extraFields.length, 2);
            var fileRecord = signature.LOCAL_FILE_HEADER + header + utfEncodedFileName + extraFields;
            var dirRecord = signature.CENTRAL_FILE_HEADER + // version made by (00: DOS)
            decToHex(versionMadeBy, 2) + // file header (common to file and central directory)
            header + // file comment length
            decToHex(utfEncodedComment.length, 2) + // disk number start
            "\0\0\0\0" + // external file attributes
            decToHex(extFileAttr, 4) + // relative offset of local header
            decToHex(offset, 4) + // file name
            utfEncodedFileName + // extra field
            extraFields + // file comment
            utfEncodedComment;
            return {
              fileRecord,
              dirRecord,
              compressedObject
            };
          };
          var out = {
            /**
             * Read an existing zip and merge the data in the current JSZip object.
             * The implementation is in jszip-load.js, don't forget to include it.
             * @param {String|ArrayBuffer|Uint8Array|Buffer} stream  The stream to load
             * @param {Object} options Options for loading the stream.
             *  options.base64 : is the stream in base64 ? default : false
             * @return {JSZip} the current JSZip object
             */
            load: function(stream, options2) {
              throw new Error("Load method is not defined. Is the file jszip-load.js included ?");
            },
            /**
             * Filter nested files/folders with the specified function.
             * @param {Function} search the predicate to use :
             * function (relativePath, file) {...}
             * It takes 2 arguments : the relative path and the file.
             * @return {Array} An array of matching elements.
             */
            filter: function(search) {
              var result = [], filename, relativePath, file, fileClone;
              for (filename in this.files) {
                if (!this.files.hasOwnProperty(filename)) {
                  continue;
                }
                file = this.files[filename];
                fileClone = new ZipObject(file.name, file._data, extend(file.options));
                relativePath = filename.slice(this.root.length, filename.length);
                if (filename.slice(0, this.root.length) === this.root && // the file is in the current root
                search(relativePath, fileClone)) {
                  result.push(fileClone);
                }
              }
              return result;
            },
            /**
             * Add a file to the zip file, or search a file.
             * @param   {string|RegExp} name The name of the file to add (if data is defined),
             * the name of the file to find (if no data) or a regex to match files.
             * @param   {String|ArrayBuffer|Uint8Array|Buffer} data  The file data, either raw or base64 encoded
             * @param   {Object} o     File options
             * @return  {JSZip|Object|Array} this JSZip object (when adding a file),
             * a file (when searching by string) or an array of files (when searching by regex).
             */
            file: function(name, data, o) {
              if (arguments.length === 1) {
                if (utils.isRegExp(name)) {
                  var regexp = name;
                  return this.filter(function(relativePath, file) {
                    return !file.dir && regexp.test(relativePath);
                  });
                } else {
                  return this.filter(function(relativePath, file) {
                    return !file.dir && relativePath === name;
                  })[0] || null;
                }
              } else {
                name = this.root + name;
                fileAdd.call(this, name, data, o);
              }
              return this;
            },
            /**
             * Add a directory to the zip file, or search.
             * @param   {String|RegExp} arg The name of the directory to add, or a regex to search folders.
             * @return  {JSZip} an object with the new directory as the root, or an array containing matching folders.
             */
            folder: function(arg) {
              if (!arg) {
                return this;
              }
              if (utils.isRegExp(arg)) {
                return this.filter(function(relativePath, file) {
                  return file.dir && arg.test(relativePath);
                });
              }
              var name = this.root + arg;
              var newFolder = folderAdd.call(this, name);
              var ret2 = this.clone();
              ret2.root = newFolder.name;
              return ret2;
            },
            /**
             * Delete a file, or a directory and all sub-files, from the zip
             * @param {string} name the name of the file to delete
             * @return {JSZip} this JSZip object
             */
            remove: function(name) {
              name = this.root + name;
              var file = this.files[name];
              if (!file) {
                if (name.slice(-1) != "/") {
                  name += "/";
                }
                file = this.files[name];
              }
              if (file && !file.dir) {
                delete this.files[name];
              } else {
                var kids = this.filter(function(relativePath, file2) {
                  return file2.name.slice(0, name.length) === name;
                });
                for (var i = 0; i < kids.length; i++) {
                  delete this.files[kids[i].name];
                }
              }
              return this;
            },
            /**
             * Generate the complete zip file
             * @param {Object} options the options to generate the zip file :
             * - base64, (deprecated, use type instead) true to generate base64.
             * - compression, "STORE" by default.
             * - type, "base64" by default. Values are : string, base64, uint8array, arraybuffer, blob.
             * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the zip file
             */
            generate: function(options2) {
              options2 = extend(options2 || {}, {
                base64: true,
                compression: "STORE",
                compressionOptions: null,
                type: "base64",
                platform: "DOS",
                comment: null,
                mimeType: "application/zip"
              });
              utils.checkSupport(options2.type);
              if (options2.platform === "darwin" || options2.platform === "freebsd" || options2.platform === "linux" || options2.platform === "sunos") {
                options2.platform = "UNIX";
              }
              if (options2.platform === "win32") {
                options2.platform = "DOS";
              }
              var zipData = [], localDirLength = 0, centralDirLength = 0, writer, i, utfEncodedComment = utils.transformTo("string", this.utf8encode(options2.comment || this.comment || ""));
              for (var name in this.files) {
                if (!this.files.hasOwnProperty(name)) {
                  continue;
                }
                var file = this.files[name];
                var compressionName = file.options.compression || options2.compression.toUpperCase();
                var compression = compressions[compressionName];
                if (!compression) {
                  throw new Error(compressionName + " is not a valid compression method !");
                }
                var compressionOptions = file.options.compressionOptions || options2.compressionOptions || {};
                var compressedObject = generateCompressedObjectFrom.call(this, file, compression, compressionOptions);
                var zipPart = generateZipParts.call(this, name, file, compressedObject, localDirLength, options2.platform);
                localDirLength += zipPart.fileRecord.length + compressedObject.compressedSize;
                centralDirLength += zipPart.dirRecord.length;
                zipData.push(zipPart);
              }
              var dirEnd = "";
              dirEnd = signature.CENTRAL_DIRECTORY_END + // number of this disk
              "\0\0\0\0" + // total number of entries in the central directory on this disk
              decToHex(zipData.length, 2) + // total number of entries in the central directory
              decToHex(zipData.length, 2) + // size of the central directory   4 bytes
              decToHex(centralDirLength, 4) + // offset of start of central directory with respect to the starting disk number
              decToHex(localDirLength, 4) + // .ZIP file comment length
              decToHex(utfEncodedComment.length, 2) + // .ZIP file comment
              utfEncodedComment;
              var typeName = options2.type.toLowerCase();
              if (typeName === "uint8array" || typeName === "arraybuffer" || typeName === "blob" || typeName === "nodebuffer") {
                writer = new Uint8ArrayWriter(localDirLength + centralDirLength + dirEnd.length);
              } else {
                writer = new StringWriter(localDirLength + centralDirLength + dirEnd.length);
              }
              for (i = 0; i < zipData.length; i++) {
                writer.append(zipData[i].fileRecord);
                writer.append(zipData[i].compressedObject.compressedContent);
              }
              for (i = 0; i < zipData.length; i++) {
                writer.append(zipData[i].dirRecord);
              }
              writer.append(dirEnd);
              var zip = writer.finalize();
              switch (options2.type.toLowerCase()) {
                // case "zip is an Uint8Array"
                case "uint8array":
                case "arraybuffer":
                case "nodebuffer":
                  return utils.transformTo(options2.type.toLowerCase(), zip);
                case "blob":
                  return utils.arrayBuffer2Blob(utils.transformTo("arraybuffer", zip), options2.mimeType);
                // case "zip is a string"
                case "base64":
                  return options2.base64 ? base64.encode(zip) : zip;
                default:
                  return zip;
              }
            },
            /**
             * @deprecated
             * This method will be removed in a future version without replacement.
             */
            crc32: function(input, crc) {
              return crc32(input, crc);
            },
            /**
             * @deprecated
             * This method will be removed in a future version without replacement.
             */
            utf8encode: function(string) {
              return utils.transformTo("string", utf8.utf8encode(string));
            },
            /**
             * @deprecated
             * This method will be removed in a future version without replacement.
             */
            utf8decode: function(input) {
              return utf8.utf8decode(input);
            }
          };
          module2.exports = out;
        }, { "./base64": 86, "./compressedObject": 87, "./compressions": 88, "./crc32": 89, "./defaults": 91, "./nodeBuffer": 96, "./signature": 99, "./stringWriter": 101, "./support": 102, "./uint8ArrayWriter": 104, "./utf8": 105, "./utils": 106 }], 99: [function(require2, module2, exports2) {
          "use strict";
          exports2.LOCAL_FILE_HEADER = "PK";
          exports2.CENTRAL_FILE_HEADER = "PK";
          exports2.CENTRAL_DIRECTORY_END = "PK";
          exports2.ZIP64_CENTRAL_DIRECTORY_LOCATOR = "PK\x07";
          exports2.ZIP64_CENTRAL_DIRECTORY_END = "PK";
          exports2.DATA_DESCRIPTOR = "PK\x07\b";
        }, {}], 100: [function(require2, module2, exports2) {
          "use strict";
          var DataReader = require2("./dataReader");
          var utils = require2("./utils");
          function StringReader(data, optimizedBinaryString) {
            this.data = data;
            if (!optimizedBinaryString) {
              this.data = utils.string2binary(this.data);
            }
            this.length = this.data.length;
            this.index = 0;
          }
          StringReader.prototype = new DataReader();
          StringReader.prototype.byteAt = function(i) {
            return this.data.charCodeAt(i);
          };
          StringReader.prototype.lastIndexOfSignature = function(sig) {
            return this.data.lastIndexOf(sig);
          };
          StringReader.prototype.readData = function(size) {
            this.checkOffset(size);
            var result = this.data.slice(this.index, this.index + size);
            this.index += size;
            return result;
          };
          module2.exports = StringReader;
        }, { "./dataReader": 90, "./utils": 106 }], 101: [function(require2, module2, exports2) {
          "use strict";
          var utils = require2("./utils");
          var StringWriter = function() {
            this.data = [];
          };
          StringWriter.prototype = {
            /**
             * Append any content to the current string.
             * @param {Object} input the content to add.
             */
            append: function(input) {
              input = utils.transformTo("string", input);
              this.data.push(input);
            },
            /**
             * Finalize the construction an return the result.
             * @return {string} the generated string.
             */
            finalize: function() {
              return this.data.join("");
            }
          };
          module2.exports = StringWriter;
        }, { "./utils": 106 }], 102: [function(require2, module2, exports2) {
          (function(Buffer3) {
            "use strict";
            exports2.base64 = true;
            exports2.array = true;
            exports2.string = true;
            exports2.arraybuffer = typeof ArrayBuffer !== "undefined" && typeof Uint8Array !== "undefined";
            exports2.nodebuffer = typeof Buffer3 !== "undefined";
            exports2.uint8array = typeof Uint8Array !== "undefined";
            if (typeof ArrayBuffer === "undefined") {
              exports2.blob = false;
            } else {
              var buffer = new ArrayBuffer(0);
              try {
                exports2.blob = new Blob([buffer], {
                  type: "application/zip"
                }).size === 0;
              } catch (e) {
                try {
                  var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
                  var builder = new Builder();
                  builder.append(buffer);
                  exports2.blob = builder.getBlob("application/zip").size === 0;
                } catch (e2) {
                  exports2.blob = false;
                }
              }
            }
          }).call(this, require2("buffer").Buffer);
        }, { "buffer": 77 }], 103: [function(require2, module2, exports2) {
          "use strict";
          var DataReader = require2("./dataReader");
          function Uint8ArrayReader(data) {
            if (data) {
              this.data = data;
              this.length = this.data.length;
              this.index = 0;
            }
          }
          Uint8ArrayReader.prototype = new DataReader();
          Uint8ArrayReader.prototype.byteAt = function(i) {
            return this.data[i];
          };
          Uint8ArrayReader.prototype.lastIndexOfSignature = function(sig) {
            var sig0 = sig.charCodeAt(0), sig1 = sig.charCodeAt(1), sig2 = sig.charCodeAt(2), sig3 = sig.charCodeAt(3);
            for (var i = this.length - 4; i >= 0; --i) {
              if (this.data[i] === sig0 && this.data[i + 1] === sig1 && this.data[i + 2] === sig2 && this.data[i + 3] === sig3) {
                return i;
              }
            }
            return -1;
          };
          Uint8ArrayReader.prototype.readData = function(size) {
            this.checkOffset(size);
            if (size === 0) {
              return new Uint8Array(0);
            }
            var result = this.data.subarray(this.index, this.index + size);
            this.index += size;
            return result;
          };
          module2.exports = Uint8ArrayReader;
        }, { "./dataReader": 90 }], 104: [function(require2, module2, exports2) {
          "use strict";
          var utils = require2("./utils");
          var Uint8ArrayWriter = function(length) {
            this.data = new Uint8Array(length);
            this.index = 0;
          };
          Uint8ArrayWriter.prototype = {
            /**
             * Append any content to the current array.
             * @param {Object} input the content to add.
             */
            append: function(input) {
              if (input.length !== 0) {
                input = utils.transformTo("uint8array", input);
                this.data.set(input, this.index);
                this.index += input.length;
              }
            },
            /**
             * Finalize the construction an return the result.
             * @return {Uint8Array} the generated array.
             */
            finalize: function() {
              return this.data;
            }
          };
          module2.exports = Uint8ArrayWriter;
        }, { "./utils": 106 }], 105: [function(require2, module2, exports2) {
          "use strict";
          var utils = require2("./utils");
          var support = require2("./support");
          var nodeBuffer = require2("./nodeBuffer");
          var _utf8len = new Array(256);
          for (var i = 0; i < 256; i++) {
            _utf8len[i] = i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1;
          }
          _utf8len[254] = _utf8len[254] = 1;
          var string2buf = function(str) {
            var buf, c, c2, m_pos, i2, str_len = str.length, buf_len = 0;
            for (m_pos = 0; m_pos < str_len; m_pos++) {
              c = str.charCodeAt(m_pos);
              if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
                c2 = str.charCodeAt(m_pos + 1);
                if ((c2 & 64512) === 56320) {
                  c = 65536 + (c - 55296 << 10) + (c2 - 56320);
                  m_pos++;
                }
              }
              buf_len += c < 128 ? 1 : c < 2048 ? 2 : c < 65536 ? 3 : 4;
            }
            if (support.uint8array) {
              buf = new Uint8Array(buf_len);
            } else {
              buf = new Array(buf_len);
            }
            for (i2 = 0, m_pos = 0; i2 < buf_len; m_pos++) {
              c = str.charCodeAt(m_pos);
              if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
                c2 = str.charCodeAt(m_pos + 1);
                if ((c2 & 64512) === 56320) {
                  c = 65536 + (c - 55296 << 10) + (c2 - 56320);
                  m_pos++;
                }
              }
              if (c < 128) {
                buf[i2++] = c;
              } else if (c < 2048) {
                buf[i2++] = 192 | c >>> 6;
                buf[i2++] = 128 | c & 63;
              } else if (c < 65536) {
                buf[i2++] = 224 | c >>> 12;
                buf[i2++] = 128 | c >>> 6 & 63;
                buf[i2++] = 128 | c & 63;
              } else {
                buf[i2++] = 240 | c >>> 18;
                buf[i2++] = 128 | c >>> 12 & 63;
                buf[i2++] = 128 | c >>> 6 & 63;
                buf[i2++] = 128 | c & 63;
              }
            }
            return buf;
          };
          var utf8border = function(buf, max) {
            var pos;
            max = max || buf.length;
            if (max > buf.length) {
              max = buf.length;
            }
            pos = max - 1;
            while (pos >= 0 && (buf[pos] & 192) === 128) {
              pos--;
            }
            if (pos < 0) {
              return max;
            }
            if (pos === 0) {
              return max;
            }
            return pos + _utf8len[buf[pos]] > max ? pos : max;
          };
          var buf2string = function(buf) {
            var str, i2, out, c, c_len;
            var len = buf.length;
            var utf16buf = new Array(len * 2);
            for (out = 0, i2 = 0; i2 < len; ) {
              c = buf[i2++];
              if (c < 128) {
                utf16buf[out++] = c;
                continue;
              }
              c_len = _utf8len[c];
              if (c_len > 4) {
                utf16buf[out++] = 65533;
                i2 += c_len - 1;
                continue;
              }
              c &= c_len === 2 ? 31 : c_len === 3 ? 15 : 7;
              while (c_len > 1 && i2 < len) {
                c = c << 6 | buf[i2++] & 63;
                c_len--;
              }
              if (c_len > 1) {
                utf16buf[out++] = 65533;
                continue;
              }
              if (c < 65536) {
                utf16buf[out++] = c;
              } else {
                c -= 65536;
                utf16buf[out++] = 55296 | c >> 10 & 1023;
                utf16buf[out++] = 56320 | c & 1023;
              }
            }
            if (utf16buf.length !== out) {
              if (utf16buf.subarray) {
                utf16buf = utf16buf.subarray(0, out);
              } else {
                utf16buf.length = out;
              }
            }
            return utils.applyFromCharCode(utf16buf);
          };
          exports2.utf8encode = function utf8encode(str) {
            if (support.nodebuffer) {
              return nodeBuffer(str, "utf-8");
            }
            return string2buf(str);
          };
          exports2.utf8decode = function utf8decode(buf) {
            if (support.nodebuffer) {
              return utils.transformTo("nodebuffer", buf).toString("utf-8");
            }
            buf = utils.transformTo(support.uint8array ? "uint8array" : "array", buf);
            var result = [], k = 0, len = buf.length, chunk = 65536;
            while (k < len) {
              var nextBoundary = utf8border(buf, Math.min(k + chunk, len));
              if (support.uint8array) {
                result.push(buf2string(buf.subarray(k, nextBoundary)));
              } else {
                result.push(buf2string(buf.slice(k, nextBoundary)));
              }
              k = nextBoundary;
            }
            return result.join("");
          };
        }, { "./nodeBuffer": 96, "./support": 102, "./utils": 106 }], 106: [function(require2, module2, exports2) {
          "use strict";
          var support = require2("./support");
          var compressions = require2("./compressions");
          var nodeBuffer = require2("./nodeBuffer");
          exports2.string2binary = function(str) {
            var result = "";
            for (var i = 0; i < str.length; i++) {
              result += String.fromCharCode(str.charCodeAt(i) & 255);
            }
            return result;
          };
          exports2.arrayBuffer2Blob = function(buffer, mimeType) {
            exports2.checkSupport("blob");
            mimeType = mimeType || "application/zip";
            try {
              return new Blob([buffer], {
                type: mimeType
              });
            } catch (e) {
              try {
                var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
                var builder = new Builder();
                builder.append(buffer);
                return builder.getBlob(mimeType);
              } catch (e2) {
                throw new Error("Bug : can't construct the Blob.");
              }
            }
          };
          function identity(input) {
            return input;
          }
          function stringToArrayLike(str, array) {
            for (var i = 0; i < str.length; ++i) {
              array[i] = str.charCodeAt(i) & 255;
            }
            return array;
          }
          function arrayLikeToString(array) {
            var chunk = 65536;
            var result = [], len = array.length, type = exports2.getTypeOf(array), k = 0, canUseApply = true;
            try {
              switch (type) {
                case "uint8array":
                  String.fromCharCode.apply(null, new Uint8Array(0));
                  break;
                case "nodebuffer":
                  String.fromCharCode.apply(null, nodeBuffer(0));
                  break;
              }
            } catch (e) {
              canUseApply = false;
            }
            if (!canUseApply) {
              var resultStr = "";
              for (var i = 0; i < array.length; i++) {
                resultStr += String.fromCharCode(array[i]);
              }
              return resultStr;
            }
            while (k < len && chunk > 1) {
              try {
                if (type === "array" || type === "nodebuffer") {
                  result.push(String.fromCharCode.apply(null, array.slice(k, Math.min(k + chunk, len))));
                } else {
                  result.push(String.fromCharCode.apply(null, array.subarray(k, Math.min(k + chunk, len))));
                }
                k += chunk;
              } catch (e) {
                chunk = Math.floor(chunk / 2);
              }
            }
            return result.join("");
          }
          exports2.applyFromCharCode = arrayLikeToString;
          function arrayLikeToArrayLike(arrayFrom, arrayTo) {
            for (var i = 0; i < arrayFrom.length; i++) {
              arrayTo[i] = arrayFrom[i];
            }
            return arrayTo;
          }
          var transform = {};
          transform["string"] = {
            "string": identity,
            "array": function(input) {
              return stringToArrayLike(input, new Array(input.length));
            },
            "arraybuffer": function(input) {
              return transform["string"]["uint8array"](input).buffer;
            },
            "uint8array": function(input) {
              return stringToArrayLike(input, new Uint8Array(input.length));
            },
            "nodebuffer": function(input) {
              return stringToArrayLike(input, nodeBuffer(input.length));
            }
          };
          transform["array"] = {
            "string": arrayLikeToString,
            "array": identity,
            "arraybuffer": function(input) {
              return new Uint8Array(input).buffer;
            },
            "uint8array": function(input) {
              return new Uint8Array(input);
            },
            "nodebuffer": function(input) {
              return nodeBuffer(input);
            }
          };
          transform["arraybuffer"] = {
            "string": function(input) {
              return arrayLikeToString(new Uint8Array(input));
            },
            "array": function(input) {
              return arrayLikeToArrayLike(new Uint8Array(input), new Array(input.byteLength));
            },
            "arraybuffer": identity,
            "uint8array": function(input) {
              return new Uint8Array(input);
            },
            "nodebuffer": function(input) {
              return nodeBuffer(new Uint8Array(input));
            }
          };
          transform["uint8array"] = {
            "string": arrayLikeToString,
            "array": function(input) {
              return arrayLikeToArrayLike(input, new Array(input.length));
            },
            "arraybuffer": function(input) {
              return input.buffer;
            },
            "uint8array": identity,
            "nodebuffer": function(input) {
              return nodeBuffer(input);
            }
          };
          transform["nodebuffer"] = {
            "string": arrayLikeToString,
            "array": function(input) {
              return arrayLikeToArrayLike(input, new Array(input.length));
            },
            "arraybuffer": function(input) {
              return transform["nodebuffer"]["uint8array"](input).buffer;
            },
            "uint8array": function(input) {
              return arrayLikeToArrayLike(input, new Uint8Array(input.length));
            },
            "nodebuffer": identity
          };
          exports2.transformTo = function(outputType, input) {
            if (!input) {
              input = "";
            }
            if (!outputType) {
              return input;
            }
            exports2.checkSupport(outputType);
            var inputType = exports2.getTypeOf(input);
            var result = transform[inputType][outputType](input);
            return result;
          };
          exports2.getTypeOf = function(input) {
            if (typeof input === "string") {
              return "string";
            }
            if (Object.prototype.toString.call(input) === "[object Array]") {
              return "array";
            }
            if (support.nodebuffer && nodeBuffer.test(input)) {
              return "nodebuffer";
            }
            if (support.uint8array && input instanceof Uint8Array) {
              return "uint8array";
            }
            if (support.arraybuffer && input instanceof ArrayBuffer) {
              return "arraybuffer";
            }
          };
          exports2.checkSupport = function(type) {
            var supported = support[type.toLowerCase()];
            if (!supported) {
              throw new Error(type + " is not supported by this browser");
            }
          };
          exports2.MAX_VALUE_16BITS = 65535;
          exports2.MAX_VALUE_32BITS = -1;
          exports2.pretty = function(str) {
            var res = "", code, i;
            for (i = 0; i < (str || "").length; i++) {
              code = str.charCodeAt(i);
              res += "\\x" + (code < 16 ? "0" : "") + code.toString(16).toUpperCase();
            }
            return res;
          };
          exports2.findCompression = function(compressionMethod) {
            for (var method in compressions) {
              if (!compressions.hasOwnProperty(method)) {
                continue;
              }
              if (compressions[method].magic === compressionMethod) {
                return compressions[method];
              }
            }
            return null;
          };
          exports2.isRegExp = function(object) {
            return Object.prototype.toString.call(object) === "[object RegExp]";
          };
        }, { "./compressions": 88, "./nodeBuffer": 96, "./support": 102 }], 107: [function(require2, module2, exports2) {
          "use strict";
          var StringReader = require2("./stringReader");
          var NodeBufferReader = require2("./nodeBufferReader");
          var Uint8ArrayReader = require2("./uint8ArrayReader");
          var utils = require2("./utils");
          var sig = require2("./signature");
          var ZipEntry = require2("./zipEntry");
          var support = require2("./support");
          var jszipProto = require2("./object");
          function ZipEntries(data, loadOptions) {
            this.files = [];
            this.loadOptions = loadOptions;
            if (data) {
              this.load(data);
            }
          }
          ZipEntries.prototype = {
            /**
             * Check that the reader is on the speficied signature.
             * @param {string} expectedSignature the expected signature.
             * @throws {Error} if it is an other signature.
             */
            checkSignature: function(expectedSignature) {
              var signature = this.reader.readString(4);
              if (signature !== expectedSignature) {
                throw new Error("Corrupted zip or bug : unexpected signature (" + utils.pretty(signature) + ", expected " + utils.pretty(expectedSignature) + ")");
              }
            },
            /**
             * Read the end of the central directory.
             */
            readBlockEndOfCentral: function() {
              this.diskNumber = this.reader.readInt(2);
              this.diskWithCentralDirStart = this.reader.readInt(2);
              this.centralDirRecordsOnThisDisk = this.reader.readInt(2);
              this.centralDirRecords = this.reader.readInt(2);
              this.centralDirSize = this.reader.readInt(4);
              this.centralDirOffset = this.reader.readInt(4);
              this.zipCommentLength = this.reader.readInt(2);
              this.zipComment = this.reader.readString(this.zipCommentLength);
              this.zipComment = jszipProto.utf8decode(this.zipComment);
            },
            /**
             * Read the end of the Zip 64 central directory.
             * Not merged with the method readEndOfCentral :
             * The end of central can coexist with its Zip64 brother,
             * I don't want to read the wrong number of bytes !
             */
            readBlockZip64EndOfCentral: function() {
              this.zip64EndOfCentralSize = this.reader.readInt(8);
              this.versionMadeBy = this.reader.readString(2);
              this.versionNeeded = this.reader.readInt(2);
              this.diskNumber = this.reader.readInt(4);
              this.diskWithCentralDirStart = this.reader.readInt(4);
              this.centralDirRecordsOnThisDisk = this.reader.readInt(8);
              this.centralDirRecords = this.reader.readInt(8);
              this.centralDirSize = this.reader.readInt(8);
              this.centralDirOffset = this.reader.readInt(8);
              this.zip64ExtensibleData = {};
              var extraDataSize = this.zip64EndOfCentralSize - 44, index = 0, extraFieldId, extraFieldLength, extraFieldValue;
              while (index < extraDataSize) {
                extraFieldId = this.reader.readInt(2);
                extraFieldLength = this.reader.readInt(4);
                extraFieldValue = this.reader.readString(extraFieldLength);
                this.zip64ExtensibleData[extraFieldId] = {
                  id: extraFieldId,
                  length: extraFieldLength,
                  value: extraFieldValue
                };
              }
            },
            /**
             * Read the end of the Zip 64 central directory locator.
             */
            readBlockZip64EndOfCentralLocator: function() {
              this.diskWithZip64CentralDirStart = this.reader.readInt(4);
              this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8);
              this.disksCount = this.reader.readInt(4);
              if (this.disksCount > 1) {
                throw new Error("Multi-volumes zip are not supported");
              }
            },
            /**
             * Read the local files, based on the offset read in the central part.
             */
            readLocalFiles: function() {
              var i, file;
              for (i = 0; i < this.files.length; i++) {
                file = this.files[i];
                this.reader.setIndex(file.localHeaderOffset);
                this.checkSignature(sig.LOCAL_FILE_HEADER);
                file.readLocalPart(this.reader);
                file.handleUTF8();
                file.processAttributes();
              }
            },
            /**
             * Read the central directory.
             */
            readCentralDir: function() {
              var file;
              this.reader.setIndex(this.centralDirOffset);
              while (this.reader.readString(4) === sig.CENTRAL_FILE_HEADER) {
                file = new ZipEntry({
                  zip64: this.zip64
                }, this.loadOptions);
                file.readCentralPart(this.reader);
                this.files.push(file);
              }
            },
            /**
             * Read the end of central directory.
             */
            readEndOfCentral: function() {
              var offset = this.reader.lastIndexOfSignature(sig.CENTRAL_DIRECTORY_END);
              if (offset === -1) {
                var isGarbage = true;
                try {
                  this.reader.setIndex(0);
                  this.checkSignature(sig.LOCAL_FILE_HEADER);
                  isGarbage = false;
                } catch (e) {
                }
                if (isGarbage) {
                  throw new Error("Can't find end of central directory : is this a zip file ? If it is, see http://stuk.github.io/jszip/documentation/howto/read_zip.html");
                } else {
                  throw new Error("Corrupted zip : can't find end of central directory");
                }
              }
              this.reader.setIndex(offset);
              this.checkSignature(sig.CENTRAL_DIRECTORY_END);
              this.readBlockEndOfCentral();
              if (this.diskNumber === utils.MAX_VALUE_16BITS || this.diskWithCentralDirStart === utils.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === utils.MAX_VALUE_16BITS || this.centralDirRecords === utils.MAX_VALUE_16BITS || this.centralDirSize === utils.MAX_VALUE_32BITS || this.centralDirOffset === utils.MAX_VALUE_32BITS) {
                this.zip64 = true;
                offset = this.reader.lastIndexOfSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
                if (offset === -1) {
                  throw new Error("Corrupted zip : can't find the ZIP64 end of central directory locator");
                }
                this.reader.setIndex(offset);
                this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
                this.readBlockZip64EndOfCentralLocator();
                this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir);
                this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_END);
                this.readBlockZip64EndOfCentral();
              }
            },
            prepareReader: function(data) {
              var type = utils.getTypeOf(data);
              if (type === "string" && !support.uint8array) {
                this.reader = new StringReader(data, this.loadOptions.optimizedBinaryString);
              } else if (type === "nodebuffer") {
                this.reader = new NodeBufferReader(data);
              } else {
                this.reader = new Uint8ArrayReader(utils.transformTo("uint8array", data));
              }
            },
            /**
             * Read a zip file and create ZipEntries.
             * @param {String|ArrayBuffer|Uint8Array|Buffer} data the binary string representing a zip file.
             */
            load: function(data) {
              this.prepareReader(data);
              this.readEndOfCentral();
              this.readCentralDir();
              this.readLocalFiles();
            }
          };
          module2.exports = ZipEntries;
        }, { "./nodeBufferReader": 97, "./object": 98, "./signature": 99, "./stringReader": 100, "./support": 102, "./uint8ArrayReader": 103, "./utils": 106, "./zipEntry": 108 }], 108: [function(require2, module2, exports2) {
          "use strict";
          var StringReader = require2("./stringReader");
          var utils = require2("./utils");
          var CompressedObject = require2("./compressedObject");
          var jszipProto = require2("./object");
          var MADE_BY_DOS = 0;
          var MADE_BY_UNIX = 3;
          function ZipEntry(options2, loadOptions) {
            this.options = options2;
            this.loadOptions = loadOptions;
          }
          ZipEntry.prototype = {
            /**
             * say if the file is encrypted.
             * @return {boolean} true if the file is encrypted, false otherwise.
             */
            isEncrypted: function() {
              return (this.bitFlag & 1) === 1;
            },
            /**
             * say if the file has utf-8 filename/comment.
             * @return {boolean} true if the filename/comment is in utf-8, false otherwise.
             */
            useUTF8: function() {
              return (this.bitFlag & 2048) === 2048;
            },
            /**
             * Prepare the function used to generate the compressed content from this ZipFile.
             * @param {DataReader} reader the reader to use.
             * @param {number} from the offset from where we should read the data.
             * @param {number} length the length of the data to read.
             * @return {Function} the callback to get the compressed content (the type depends of the DataReader class).
             */
            prepareCompressedContent: function(reader, from, length) {
              return function() {
                var previousIndex = reader.index;
                reader.setIndex(from);
                var compressedFileData = reader.readData(length);
                reader.setIndex(previousIndex);
                return compressedFileData;
              };
            },
            /**
             * Prepare the function used to generate the uncompressed content from this ZipFile.
             * @param {DataReader} reader the reader to use.
             * @param {number} from the offset from where we should read the data.
             * @param {number} length the length of the data to read.
             * @param {JSZip.compression} compression the compression used on this file.
             * @param {number} uncompressedSize the uncompressed size to expect.
             * @return {Function} the callback to get the uncompressed content (the type depends of the DataReader class).
             */
            prepareContent: function(reader, from, length, compression, uncompressedSize) {
              return function() {
                var compressedFileData = utils.transformTo(compression.uncompressInputType, this.getCompressedContent());
                var uncompressedFileData = compression.uncompress(compressedFileData);
                if (uncompressedFileData.length !== uncompressedSize) {
                  throw new Error("Bug : uncompressed data size mismatch");
                }
                return uncompressedFileData;
              };
            },
            /**
             * Read the local part of a zip file and add the info in this object.
             * @param {DataReader} reader the reader to use.
             */
            readLocalPart: function(reader) {
              var compression, localExtraFieldsLength;
              reader.skip(22);
              this.fileNameLength = reader.readInt(2);
              localExtraFieldsLength = reader.readInt(2);
              this.fileName = reader.readString(this.fileNameLength);
              reader.skip(localExtraFieldsLength);
              if (this.compressedSize == -1 || this.uncompressedSize == -1) {
                throw new Error("Bug or corrupted zip : didn't get enough informations from the central directory (compressedSize == -1 || uncompressedSize == -1)");
              }
              compression = utils.findCompression(this.compressionMethod);
              if (compression === null) {
                throw new Error("Corrupted zip : compression " + utils.pretty(this.compressionMethod) + " unknown (inner file : " + this.fileName + ")");
              }
              this.decompressed = new CompressedObject();
              this.decompressed.compressedSize = this.compressedSize;
              this.decompressed.uncompressedSize = this.uncompressedSize;
              this.decompressed.crc32 = this.crc32;
              this.decompressed.compressionMethod = this.compressionMethod;
              this.decompressed.getCompressedContent = this.prepareCompressedContent(reader, reader.index, this.compressedSize, compression);
              this.decompressed.getContent = this.prepareContent(reader, reader.index, this.compressedSize, compression, this.uncompressedSize);
              if (this.loadOptions.checkCRC32) {
                this.decompressed = utils.transformTo("string", this.decompressed.getContent());
                if (jszipProto.crc32(this.decompressed) !== this.crc32) {
                  throw new Error("Corrupted zip : CRC32 mismatch");
                }
              }
            },
            /**
             * Read the central part of a zip file and add the info in this object.
             * @param {DataReader} reader the reader to use.
             */
            readCentralPart: function(reader) {
              this.versionMadeBy = reader.readInt(2);
              this.versionNeeded = reader.readInt(2);
              this.bitFlag = reader.readInt(2);
              this.compressionMethod = reader.readString(2);
              this.date = reader.readDate();
              this.crc32 = reader.readInt(4);
              this.compressedSize = reader.readInt(4);
              this.uncompressedSize = reader.readInt(4);
              this.fileNameLength = reader.readInt(2);
              this.extraFieldsLength = reader.readInt(2);
              this.fileCommentLength = reader.readInt(2);
              this.diskNumberStart = reader.readInt(2);
              this.internalFileAttributes = reader.readInt(2);
              this.externalFileAttributes = reader.readInt(4);
              this.localHeaderOffset = reader.readInt(4);
              if (this.isEncrypted()) {
                throw new Error("Encrypted zip are not supported");
              }
              this.fileName = reader.readString(this.fileNameLength);
              this.readExtraFields(reader);
              this.parseZIP64ExtraField(reader);
              this.fileComment = reader.readString(this.fileCommentLength);
            },
            /**
             * Parse the external file attributes and get the unix/dos permissions.
             */
            processAttributes: function() {
              this.unixPermissions = null;
              this.dosPermissions = null;
              var madeBy = this.versionMadeBy >> 8;
              this.dir = this.externalFileAttributes & 16 ? true : false;
              if (madeBy === MADE_BY_DOS) {
                this.dosPermissions = this.externalFileAttributes & 63;
              }
              if (madeBy === MADE_BY_UNIX) {
                this.unixPermissions = this.externalFileAttributes >> 16 & 65535;
              }
              if (!this.dir && this.fileName.slice(-1) === "/") {
                this.dir = true;
              }
            },
            /**
             * Parse the ZIP64 extra field and merge the info in the current ZipEntry.
             * @param {DataReader} reader the reader to use.
             */
            parseZIP64ExtraField: function(reader) {
              if (!this.extraFields[1]) {
                return;
              }
              var extraReader = new StringReader(this.extraFields[1].value);
              if (this.uncompressedSize === utils.MAX_VALUE_32BITS) {
                this.uncompressedSize = extraReader.readInt(8);
              }
              if (this.compressedSize === utils.MAX_VALUE_32BITS) {
                this.compressedSize = extraReader.readInt(8);
              }
              if (this.localHeaderOffset === utils.MAX_VALUE_32BITS) {
                this.localHeaderOffset = extraReader.readInt(8);
              }
              if (this.diskNumberStart === utils.MAX_VALUE_32BITS) {
                this.diskNumberStart = extraReader.readInt(4);
              }
            },
            /**
             * Read the central part of a zip file and add the info in this object.
             * @param {DataReader} reader the reader to use.
             */
            readExtraFields: function(reader) {
              var start = reader.index, extraFieldId, extraFieldLength, extraFieldValue;
              this.extraFields = this.extraFields || {};
              while (reader.index < start + this.extraFieldsLength) {
                extraFieldId = reader.readInt(2);
                extraFieldLength = reader.readInt(2);
                extraFieldValue = reader.readString(extraFieldLength);
                this.extraFields[extraFieldId] = {
                  id: extraFieldId,
                  length: extraFieldLength,
                  value: extraFieldValue
                };
              }
            },
            /**
             * Apply an UTF8 transformation if needed.
             */
            handleUTF8: function() {
              if (this.useUTF8()) {
                this.fileName = jszipProto.utf8decode(this.fileName);
                this.fileComment = jszipProto.utf8decode(this.fileComment);
              } else {
                var upath = this.findExtraFieldUnicodePath();
                if (upath !== null) {
                  this.fileName = upath;
                }
                var ucomment = this.findExtraFieldUnicodeComment();
                if (ucomment !== null) {
                  this.fileComment = ucomment;
                }
              }
            },
            /**
             * Find the unicode path declared in the extra field, if any.
             * @return {String} the unicode path, null otherwise.
             */
            findExtraFieldUnicodePath: function() {
              var upathField = this.extraFields[28789];
              if (upathField) {
                var extraReader = new StringReader(upathField.value);
                if (extraReader.readInt(1) !== 1) {
                  return null;
                }
                if (jszipProto.crc32(this.fileName) !== extraReader.readInt(4)) {
                  return null;
                }
                return jszipProto.utf8decode(extraReader.readString(upathField.length - 5));
              }
              return null;
            },
            /**
             * Find the unicode comment declared in the extra field, if any.
             * @return {String} the unicode comment, null otherwise.
             */
            findExtraFieldUnicodeComment: function() {
              var ucommentField = this.extraFields[25461];
              if (ucommentField) {
                var extraReader = new StringReader(ucommentField.value);
                if (extraReader.readInt(1) !== 1) {
                  return null;
                }
                if (jszipProto.crc32(this.fileComment) !== extraReader.readInt(4)) {
                  return null;
                }
                return jszipProto.utf8decode(extraReader.readString(ucommentField.length - 5));
              }
              return null;
            }
          };
          module2.exports = ZipEntry;
        }, { "./compressedObject": 87, "./object": 98, "./stringReader": 100, "./utils": 106 }], 109: [function(require2, module2, exports2) {
          exports2.Parser = require2("./lib/parser").Parser;
          exports2.rules = require2("./lib/rules");
          exports2.errors = require2("./lib/errors");
          exports2.results = require2("./lib/parsing-results");
          exports2.StringSource = require2("./lib/StringSource");
          exports2.Token = require2("./lib/Token");
          exports2.bottomUp = require2("./lib/bottom-up");
          exports2.RegexTokeniser = require2("./lib/regex-tokeniser").RegexTokeniser;
          exports2.rule = function(ruleBuilder) {
            var rule;
            return function(input) {
              if (!rule) {
                rule = ruleBuilder();
              }
              return rule(input);
            };
          };
        }, { "./lib/StringSource": 110, "./lib/Token": 111, "./lib/bottom-up": 113, "./lib/errors": 114, "./lib/parser": 116, "./lib/parsing-results": 117, "./lib/regex-tokeniser": 118, "./lib/rules": 119 }], 110: [function(require2, module2, exports2) {
          var util = require2("util");
          var StringSource = module2.exports = function(string, description) {
            var self2 = {
              asString: function() {
                return string;
              },
              range: function(startIndex, endIndex) {
                return new StringSourceRange(string, description, startIndex, endIndex);
              }
            };
            return self2;
          };
          var StringSourceRange = function(string, description, startIndex, endIndex) {
            this._string = string;
            this._description = description;
            this._startIndex = startIndex;
            this._endIndex = endIndex;
          };
          StringSourceRange.prototype.to = function(otherRange) {
            return new StringSourceRange(this._string, this._description, this._startIndex, otherRange._endIndex);
          };
          StringSourceRange.prototype.describe = function() {
            var position = this._position();
            var description = this._description ? this._description + "\n" : "";
            return util.format(
              "%sLine number: %s\nCharacter number: %s",
              description,
              position.lineNumber,
              position.characterNumber
            );
          };
          StringSourceRange.prototype.lineNumber = function() {
            return this._position().lineNumber;
          };
          StringSourceRange.prototype.characterNumber = function() {
            return this._position().characterNumber;
          };
          StringSourceRange.prototype._position = function() {
            var self2 = this;
            var index = 0;
            var nextNewLine = function() {
              return self2._string.indexOf("\n", index);
            };
            var lineNumber = 1;
            while (nextNewLine() !== -1 && nextNewLine() < this._startIndex) {
              index = nextNewLine() + 1;
              lineNumber += 1;
            }
            var characterNumber = this._startIndex - index + 1;
            return { lineNumber, characterNumber };
          };
        }, { "util": 158 }], 111: [function(require2, module2, exports2) {
          module2.exports = function(name, value, source) {
            this.name = name;
            this.value = value;
            if (source) {
              this.source = source;
            }
          };
        }, {}], 112: [function(require2, module2, exports2) {
          var TokenIterator = module2.exports = function(tokens, startIndex) {
            this._tokens = tokens;
            this._startIndex = startIndex || 0;
          };
          TokenIterator.prototype.head = function() {
            return this._tokens[this._startIndex];
          };
          TokenIterator.prototype.tail = function(startIndex) {
            return new TokenIterator(this._tokens, this._startIndex + 1);
          };
          TokenIterator.prototype.toArray = function() {
            return this._tokens.slice(this._startIndex);
          };
          TokenIterator.prototype.end = function() {
            return this._tokens[this._tokens.length - 1];
          };
          TokenIterator.prototype.to = function(end) {
            var start = this.head().source;
            var endToken = end.head() || end.end();
            return start.to(endToken.source);
          };
        }, {}], 113: [function(require2, module2, exports2) {
          var rules = require2("./rules");
          var results = require2("./parsing-results");
          exports2.parser = function(name, prefixRules, infixRuleBuilders) {
            var self2 = {
              rule,
              leftAssociative,
              rightAssociative
            };
            var infixRules = new InfixRules(infixRuleBuilders.map(createInfixRule));
            var prefixRule = rules.firstOf(name, prefixRules);
            function createInfixRule(infixRuleBuilder) {
              return {
                name: infixRuleBuilder.name,
                rule: lazyRule(infixRuleBuilder.ruleBuilder.bind(null, self2))
              };
            }
            function rule() {
              return createRule(infixRules);
            }
            function leftAssociative(name2) {
              return createRule(infixRules.untilExclusive(name2));
            }
            function rightAssociative(name2) {
              return createRule(infixRules.untilInclusive(name2));
            }
            function createRule(infixRules2) {
              return apply.bind(null, infixRules2);
            }
            function apply(infixRules2, tokens) {
              var leftResult = prefixRule(tokens);
              if (leftResult.isSuccess()) {
                return infixRules2.apply(leftResult);
              } else {
                return leftResult;
              }
            }
            return self2;
          };
          function InfixRules(infixRules) {
            function untilExclusive(name) {
              return new InfixRules(infixRules.slice(0, ruleNames().indexOf(name)));
            }
            function untilInclusive(name) {
              return new InfixRules(infixRules.slice(0, ruleNames().indexOf(name) + 1));
            }
            function ruleNames() {
              return infixRules.map(function(rule) {
                return rule.name;
              });
            }
            function apply(leftResult) {
              var currentResult;
              var source;
              while (true) {
                currentResult = applyToTokens(leftResult.remaining());
                if (currentResult.isSuccess()) {
                  source = leftResult.source().to(currentResult.source());
                  leftResult = results.success(
                    currentResult.value()(leftResult.value(), source),
                    currentResult.remaining(),
                    source
                  );
                } else if (currentResult.isFailure()) {
                  return leftResult;
                } else {
                  return currentResult;
                }
              }
            }
            function applyToTokens(tokens) {
              return rules.firstOf("infix", infixRules.map(function(infix) {
                return infix.rule;
              }))(tokens);
            }
            return {
              apply,
              untilExclusive,
              untilInclusive
            };
          }
          exports2.infix = function(name, ruleBuilder) {
            function map(func) {
              return exports2.infix(name, function(parser) {
                var rule = ruleBuilder(parser);
                return function(tokens) {
                  var result = rule(tokens);
                  return result.map(function(right) {
                    return function(left, source) {
                      return func(left, right, source);
                    };
                  });
                };
              });
            }
            return {
              name,
              ruleBuilder,
              map
            };
          };
          var lazyRule = function(ruleBuilder) {
            var rule;
            return function(input) {
              if (!rule) {
                rule = ruleBuilder();
              }
              return rule(input);
            };
          };
        }, { "./parsing-results": 117, "./rules": 119 }], 114: [function(require2, module2, exports2) {
          exports2.error = function(options2) {
            return new Error2(options2);
          };
          var Error2 = function(options2) {
            this.expected = options2.expected;
            this.actual = options2.actual;
            this._location = options2.location;
          };
          Error2.prototype.describe = function() {
            var locationDescription = this._location ? this._location.describe() + ":\n" : "";
            return locationDescription + "Expected " + this.expected + "\nbut got " + this.actual;
          };
          Error2.prototype.lineNumber = function() {
            return this._location.lineNumber();
          };
          Error2.prototype.characterNumber = function() {
            return this._location.characterNumber();
          };
        }, {}], 115: [function(require2, module2, exports2) {
          var fromArray = exports2.fromArray = function(array) {
            var index = 0;
            var hasNext = function() {
              return index < array.length;
            };
            return new LazyIterator({
              hasNext,
              next: function() {
                if (!hasNext()) {
                  throw new Error("No more elements");
                } else {
                  return array[index++];
                }
              }
            });
          };
          var LazyIterator = function(iterator) {
            this._iterator = iterator;
          };
          LazyIterator.prototype.map = function(func) {
            var iterator = this._iterator;
            return new LazyIterator({
              hasNext: function() {
                return iterator.hasNext();
              },
              next: function() {
                return func(iterator.next());
              }
            });
          };
          LazyIterator.prototype.filter = function(condition) {
            var iterator = this._iterator;
            var moved = false;
            var hasNext = false;
            var next;
            var moveIfNecessary = function() {
              if (moved) {
                return;
              }
              moved = true;
              hasNext = false;
              while (iterator.hasNext() && !hasNext) {
                next = iterator.next();
                hasNext = condition(next);
              }
            };
            return new LazyIterator({
              hasNext: function() {
                moveIfNecessary();
                return hasNext;
              },
              next: function() {
                moveIfNecessary();
                var toReturn = next;
                moved = false;
                return toReturn;
              }
            });
          };
          LazyIterator.prototype.first = function() {
            var iterator = this._iterator;
            if (this._iterator.hasNext()) {
              return iterator.next();
            } else {
              return null;
            }
          };
          LazyIterator.prototype.toArray = function() {
            var result = [];
            while (this._iterator.hasNext()) {
              result.push(this._iterator.next());
            }
            return result;
          };
        }, {}], 116: [function(require2, module2, exports2) {
          var TokenIterator = require2("./TokenIterator");
          exports2.Parser = function(options2) {
            var parseTokens = function(parser, tokens) {
              return parser(new TokenIterator(tokens));
            };
            return {
              parseTokens
            };
          };
        }, { "./TokenIterator": 112 }], 117: [function(require2, module2, exports2) {
          module2.exports = {
            failure: function(errors, remaining) {
              if (errors.length < 1) {
                throw new Error("Failure must have errors");
              }
              return new Result({
                status: "failure",
                remaining,
                errors
              });
            },
            error: function(errors, remaining) {
              if (errors.length < 1) {
                throw new Error("Failure must have errors");
              }
              return new Result({
                status: "error",
                remaining,
                errors
              });
            },
            success: function(value, remaining, source) {
              return new Result({
                status: "success",
                value,
                source,
                remaining,
                errors: []
              });
            },
            cut: function(remaining) {
              return new Result({
                status: "cut",
                remaining,
                errors: []
              });
            }
          };
          var Result = function(options2) {
            this._value = options2.value;
            this._status = options2.status;
            this._hasValue = options2.value !== void 0;
            this._remaining = options2.remaining;
            this._source = options2.source;
            this._errors = options2.errors;
          };
          Result.prototype.map = function(func) {
            if (this._hasValue) {
              return new Result({
                value: func(this._value, this._source),
                status: this._status,
                remaining: this._remaining,
                source: this._source,
                errors: this._errors
              });
            } else {
              return this;
            }
          };
          Result.prototype.changeRemaining = function(remaining) {
            return new Result({
              value: this._value,
              status: this._status,
              remaining,
              source: this._source,
              errors: this._errors
            });
          };
          Result.prototype.isSuccess = function() {
            return this._status === "success" || this._status === "cut";
          };
          Result.prototype.isFailure = function() {
            return this._status === "failure";
          };
          Result.prototype.isError = function() {
            return this._status === "error";
          };
          Result.prototype.isCut = function() {
            return this._status === "cut";
          };
          Result.prototype.value = function() {
            return this._value;
          };
          Result.prototype.remaining = function() {
            return this._remaining;
          };
          Result.prototype.source = function() {
            return this._source;
          };
          Result.prototype.errors = function() {
            return this._errors;
          };
        }, {}], 118: [function(require2, module2, exports2) {
          var Token = require2("./Token");
          var StringSource = require2("./StringSource");
          exports2.RegexTokeniser = RegexTokeniser;
          function RegexTokeniser(rules) {
            rules = rules.map(function(rule) {
              return {
                name: rule.name,
                regex: new RegExp(rule.regex.source, "g")
              };
            });
            function tokenise(input, description) {
              var source = new StringSource(input, description);
              var index = 0;
              var tokens = [];
              while (index < input.length) {
                var result = readNextToken(input, index, source);
                index = result.endIndex;
                tokens.push(result.token);
              }
              tokens.push(endToken(input, source));
              return tokens;
            }
            function readNextToken(string, startIndex, source) {
              for (var i = 0; i < rules.length; i++) {
                var regex = rules[i].regex;
                regex.lastIndex = startIndex;
                var result = regex.exec(string);
                if (result) {
                  var endIndex = startIndex + result[0].length;
                  if (result.index === startIndex && endIndex > startIndex) {
                    var value = result[1];
                    var token = new Token(
                      rules[i].name,
                      value,
                      source.range(startIndex, endIndex)
                    );
                    return { token, endIndex };
                  }
                }
              }
              var endIndex = startIndex + 1;
              var token = new Token(
                "unrecognisedCharacter",
                string.substring(startIndex, endIndex),
                source.range(startIndex, endIndex)
              );
              return { token, endIndex };
            }
            function endToken(input, source) {
              return new Token(
                "end",
                null,
                source.range(input.length, input.length)
              );
            }
            return {
              tokenise
            };
          }
        }, { "./StringSource": 110, "./Token": 111 }], 119: [function(require2, module2, exports2) {
          var _ = require2("underscore");
          var options2 = require2("option");
          var results = require2("./parsing-results");
          var errors = require2("./errors");
          var lazyIterators = require2("./lazy-iterators");
          exports2.token = function(tokenType, value) {
            var matchValue = value !== void 0;
            return function(input) {
              var token = input.head();
              if (token && token.name === tokenType && (!matchValue || token.value === value)) {
                return results.success(token.value, input.tail(), token.source);
              } else {
                var expected = describeToken({ name: tokenType, value });
                return describeTokenMismatch(input, expected);
              }
            };
          };
          exports2.tokenOfType = function(tokenType) {
            return exports2.token(tokenType);
          };
          exports2.firstOf = function(name, parsers) {
            if (!_.isArray(parsers)) {
              parsers = Array.prototype.slice.call(arguments, 1);
            }
            return function(input) {
              return lazyIterators.fromArray(parsers).map(function(parser) {
                return parser(input);
              }).filter(function(result) {
                return result.isSuccess() || result.isError();
              }).first() || describeTokenMismatch(input, name);
            };
          };
          exports2.then = function(parser, func) {
            return function(input) {
              var result = parser(input);
              if (!result.map) {
                console.log(result);
              }
              return result.map(func);
            };
          };
          exports2.sequence = function() {
            var parsers = Array.prototype.slice.call(arguments, 0);
            var rule = function(input) {
              var result = _.foldl(parsers, function(memo, parser) {
                var result2 = memo.result;
                var hasCut = memo.hasCut;
                if (!result2.isSuccess()) {
                  return { result: result2, hasCut };
                }
                var subResult = parser(result2.remaining());
                if (subResult.isCut()) {
                  return { result: result2, hasCut: true };
                } else if (subResult.isSuccess()) {
                  var values;
                  if (parser.isCaptured) {
                    values = result2.value().withValue(parser, subResult.value());
                  } else {
                    values = result2.value();
                  }
                  var remaining = subResult.remaining();
                  var source2 = input.to(remaining);
                  return {
                    result: results.success(values, remaining, source2),
                    hasCut
                  };
                } else if (hasCut) {
                  return { result: results.error(subResult.errors(), subResult.remaining()), hasCut };
                } else {
                  return { result: subResult, hasCut };
                }
              }, { result: results.success(new SequenceValues(), input), hasCut: false }).result;
              var source = input.to(result.remaining());
              return result.map(function(values) {
                return values.withValue(exports2.sequence.source, source);
              });
            };
            rule.head = function() {
              var firstCapture = _.find(parsers, isCapturedRule);
              return exports2.then(
                rule,
                exports2.sequence.extract(firstCapture)
              );
            };
            rule.map = function(func) {
              return exports2.then(
                rule,
                function(result) {
                  return func.apply(this, result.toArray());
                }
              );
            };
            function isCapturedRule(subRule) {
              return subRule.isCaptured;
            }
            return rule;
          };
          var SequenceValues = function(values, valuesArray) {
            this._values = values || {};
            this._valuesArray = valuesArray || [];
          };
          SequenceValues.prototype.withValue = function(rule, value) {
            if (rule.captureName && rule.captureName in this._values) {
              throw new Error('Cannot add second value for capture "' + rule.captureName + '"');
            } else {
              var newValues = _.clone(this._values);
              newValues[rule.captureName] = value;
              var newValuesArray = this._valuesArray.concat([value]);
              return new SequenceValues(newValues, newValuesArray);
            }
          };
          SequenceValues.prototype.get = function(rule) {
            if (rule.captureName in this._values) {
              return this._values[rule.captureName];
            } else {
              throw new Error('No value for capture "' + rule.captureName + '"');
            }
          };
          SequenceValues.prototype.toArray = function() {
            return this._valuesArray;
          };
          exports2.sequence.capture = function(rule, name) {
            var captureRule = function() {
              return rule.apply(this, arguments);
            };
            captureRule.captureName = name;
            captureRule.isCaptured = true;
            return captureRule;
          };
          exports2.sequence.extract = function(rule) {
            return function(result) {
              return result.get(rule);
            };
          };
          exports2.sequence.applyValues = function(func) {
            var rules = Array.prototype.slice.call(arguments, 1);
            return function(result) {
              var values = rules.map(function(rule) {
                return result.get(rule);
              });
              return func.apply(this, values);
            };
          };
          exports2.sequence.source = {
            captureName: "\u2603source\u2603"
          };
          exports2.sequence.cut = function() {
            return function(input) {
              return results.cut(input);
            };
          };
          exports2.optional = function(rule) {
            return function(input) {
              var result = rule(input);
              if (result.isSuccess()) {
                return result.map(options2.some);
              } else if (result.isFailure()) {
                return results.success(options2.none, input);
              } else {
                return result;
              }
            };
          };
          exports2.zeroOrMoreWithSeparator = function(rule, separator) {
            return repeatedWithSeparator(rule, separator, false);
          };
          exports2.oneOrMoreWithSeparator = function(rule, separator) {
            return repeatedWithSeparator(rule, separator, true);
          };
          var zeroOrMore = exports2.zeroOrMore = function(rule) {
            return function(input) {
              var values = [];
              var result;
              while ((result = rule(input)) && result.isSuccess()) {
                input = result.remaining();
                values.push(result.value());
              }
              if (result.isError()) {
                return result;
              } else {
                return results.success(values, input);
              }
            };
          };
          exports2.oneOrMore = function(rule) {
            return exports2.oneOrMoreWithSeparator(rule, noOpRule);
          };
          function noOpRule(input) {
            return results.success(null, input);
          }
          var repeatedWithSeparator = function(rule, separator, isOneOrMore) {
            return function(input) {
              var result = rule(input);
              if (result.isSuccess()) {
                var mainRule = exports2.sequence.capture(rule, "main");
                var remainingRule = zeroOrMore(exports2.then(
                  exports2.sequence(separator, mainRule),
                  exports2.sequence.extract(mainRule)
                ));
                var remainingResult = remainingRule(result.remaining());
                return results.success([result.value()].concat(remainingResult.value()), remainingResult.remaining());
              } else if (isOneOrMore || result.isError()) {
                return result;
              } else {
                return results.success([], input);
              }
            };
          };
          exports2.leftAssociative = function(leftRule, rightRule, func) {
            var rights;
            if (func) {
              rights = [{ func, rule: rightRule }];
            } else {
              rights = rightRule;
            }
            rights = rights.map(function(right) {
              return exports2.then(right.rule, function(rightValue) {
                return function(leftValue, source) {
                  return right.func(leftValue, rightValue, source);
                };
              });
            });
            var repeatedRule = exports2.firstOf.apply(null, ["rules"].concat(rights));
            return function(input) {
              var start = input;
              var leftResult = leftRule(input);
              if (!leftResult.isSuccess()) {
                return leftResult;
              }
              var repeatedResult = repeatedRule(leftResult.remaining());
              while (repeatedResult.isSuccess()) {
                var remaining = repeatedResult.remaining();
                var source = start.to(repeatedResult.remaining());
                var right = repeatedResult.value();
                leftResult = results.success(
                  right(leftResult.value(), source),
                  remaining,
                  source
                );
                repeatedResult = repeatedRule(leftResult.remaining());
              }
              if (repeatedResult.isError()) {
                return repeatedResult;
              }
              return leftResult;
            };
          };
          exports2.leftAssociative.firstOf = function() {
            return Array.prototype.slice.call(arguments, 0);
          };
          exports2.nonConsuming = function(rule) {
            return function(input) {
              return rule(input).changeRemaining(input);
            };
          };
          var describeToken = function(token) {
            if (token.value) {
              return token.name + ' "' + token.value + '"';
            } else {
              return token.name;
            }
          };
          function describeTokenMismatch(input, expected) {
            var error;
            var token = input.head();
            if (token) {
              error = errors.error({
                expected,
                actual: describeToken(token),
                location: token.source
              });
            } else {
              error = errors.error({
                expected,
                actual: "end of tokens"
              });
            }
            return results.failure([error], input);
          }
        }, { "./errors": 114, "./lazy-iterators": 115, "./parsing-results": 117, "option": 120, "underscore": 154 }], 120: [function(require2, module2, exports2) {
          exports2.none = /* @__PURE__ */ Object.create({
            value: function() {
              throw new Error("Called value on none");
            },
            isNone: function() {
              return true;
            },
            isSome: function() {
              return false;
            },
            map: function() {
              return exports2.none;
            },
            flatMap: function() {
              return exports2.none;
            },
            filter: function() {
              return exports2.none;
            },
            toArray: function() {
              return [];
            },
            orElse: callOrReturn,
            valueOrElse: callOrReturn
          });
          function callOrReturn(value) {
            if (typeof value == "function") {
              return value();
            } else {
              return value;
            }
          }
          exports2.some = function(value) {
            return new Some(value);
          };
          var Some = function(value) {
            this._value = value;
          };
          Some.prototype.value = function() {
            return this._value;
          };
          Some.prototype.isNone = function() {
            return false;
          };
          Some.prototype.isSome = function() {
            return true;
          };
          Some.prototype.map = function(func) {
            return new Some(func(this._value));
          };
          Some.prototype.flatMap = function(func) {
            return func(this._value);
          };
          Some.prototype.filter = function(predicate) {
            return predicate(this._value) ? this : exports2.none;
          };
          Some.prototype.toArray = function() {
            return [this._value];
          };
          Some.prototype.orElse = function(value) {
            return this;
          };
          Some.prototype.valueOrElse = function(value) {
            return this._value;
          };
          exports2.isOption = function(value) {
            return value === exports2.none || value instanceof Some;
          };
          exports2.fromNullable = function(value) {
            if (value == null) {
              return exports2.none;
            }
            return new Some(value);
          };
        }, {}], 121: [function(require2, module2, exports2) {
          "use strict";
          var assign = require2("./lib/utils/common").assign;
          var deflate = require2("./lib/deflate");
          var inflate = require2("./lib/inflate");
          var constants = require2("./lib/zlib/constants");
          var pako = {};
          assign(pako, deflate, inflate, constants);
          module2.exports = pako;
        }, { "./lib/deflate": 122, "./lib/inflate": 123, "./lib/utils/common": 124, "./lib/zlib/constants": 127 }], 122: [function(require2, module2, exports2) {
          "use strict";
          var zlib_deflate = require2("./zlib/deflate");
          var utils = require2("./utils/common");
          var strings = require2("./utils/strings");
          var msg = require2("./zlib/messages");
          var ZStream = require2("./zlib/zstream");
          var toString = Object.prototype.toString;
          var Z_NO_FLUSH = 0;
          var Z_FINISH = 4;
          var Z_OK = 0;
          var Z_STREAM_END = 1;
          var Z_SYNC_FLUSH = 2;
          var Z_DEFAULT_COMPRESSION = -1;
          var Z_DEFAULT_STRATEGY = 0;
          var Z_DEFLATED = 8;
          function Deflate(options2) {
            if (!(this instanceof Deflate)) return new Deflate(options2);
            this.options = utils.assign({
              level: Z_DEFAULT_COMPRESSION,
              method: Z_DEFLATED,
              chunkSize: 16384,
              windowBits: 15,
              memLevel: 8,
              strategy: Z_DEFAULT_STRATEGY,
              to: ""
            }, options2 || {});
            var opt = this.options;
            if (opt.raw && opt.windowBits > 0) {
              opt.windowBits = -opt.windowBits;
            } else if (opt.gzip && opt.windowBits > 0 && opt.windowBits < 16) {
              opt.windowBits += 16;
            }
            this.err = 0;
            this.msg = "";
            this.ended = false;
            this.chunks = [];
            this.strm = new ZStream();
            this.strm.avail_out = 0;
            var status = zlib_deflate.deflateInit2(
              this.strm,
              opt.level,
              opt.method,
              opt.windowBits,
              opt.memLevel,
              opt.strategy
            );
            if (status !== Z_OK) {
              throw new Error(msg[status]);
            }
            if (opt.header) {
              zlib_deflate.deflateSetHeader(this.strm, opt.header);
            }
            if (opt.dictionary) {
              var dict;
              if (typeof opt.dictionary === "string") {
                dict = strings.string2buf(opt.dictionary);
              } else if (toString.call(opt.dictionary) === "[object ArrayBuffer]") {
                dict = new Uint8Array(opt.dictionary);
              } else {
                dict = opt.dictionary;
              }
              status = zlib_deflate.deflateSetDictionary(this.strm, dict);
              if (status !== Z_OK) {
                throw new Error(msg[status]);
              }
              this._dict_set = true;
            }
          }
          Deflate.prototype.push = function(data, mode) {
            var strm = this.strm;
            var chunkSize = this.options.chunkSize;
            var status, _mode;
            if (this.ended) {
              return false;
            }
            _mode = mode === ~~mode ? mode : mode === true ? Z_FINISH : Z_NO_FLUSH;
            if (typeof data === "string") {
              strm.input = strings.string2buf(data);
            } else if (toString.call(data) === "[object ArrayBuffer]") {
              strm.input = new Uint8Array(data);
            } else {
              strm.input = data;
            }
            strm.next_in = 0;
            strm.avail_in = strm.input.length;
            do {
              if (strm.avail_out === 0) {
                strm.output = new utils.Buf8(chunkSize);
                strm.next_out = 0;
                strm.avail_out = chunkSize;
              }
              status = zlib_deflate.deflate(strm, _mode);
              if (status !== Z_STREAM_END && status !== Z_OK) {
                this.onEnd(status);
                this.ended = true;
                return false;
              }
              if (strm.avail_out === 0 || strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH)) {
                if (this.options.to === "string") {
                  this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));
                } else {
                  this.onData(utils.shrinkBuf(strm.output, strm.next_out));
                }
              }
            } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);
            if (_mode === Z_FINISH) {
              status = zlib_deflate.deflateEnd(this.strm);
              this.onEnd(status);
              this.ended = true;
              return status === Z_OK;
            }
            if (_mode === Z_SYNC_FLUSH) {
              this.onEnd(Z_OK);
              strm.avail_out = 0;
              return true;
            }
            return true;
          };
          Deflate.prototype.onData = function(chunk) {
            this.chunks.push(chunk);
          };
          Deflate.prototype.onEnd = function(status) {
            if (status === Z_OK) {
              if (this.options.to === "string") {
                this.result = this.chunks.join("");
              } else {
                this.result = utils.flattenChunks(this.chunks);
              }
            }
            this.chunks = [];
            this.err = status;
            this.msg = this.strm.msg;
          };
          function deflate(input, options2) {
            var deflator = new Deflate(options2);
            deflator.push(input, true);
            if (deflator.err) {
              throw deflator.msg;
            }
            return deflator.result;
          }
          function deflateRaw(input, options2) {
            options2 = options2 || {};
            options2.raw = true;
            return deflate(input, options2);
          }
          function gzip(input, options2) {
            options2 = options2 || {};
            options2.gzip = true;
            return deflate(input, options2);
          }
          exports2.Deflate = Deflate;
          exports2.deflate = deflate;
          exports2.deflateRaw = deflateRaw;
          exports2.gzip = gzip;
        }, { "./utils/common": 124, "./utils/strings": 125, "./zlib/deflate": 129, "./zlib/messages": 134, "./zlib/zstream": 136 }], 123: [function(require2, module2, exports2) {
          "use strict";
          var zlib_inflate = require2("./zlib/inflate");
          var utils = require2("./utils/common");
          var strings = require2("./utils/strings");
          var c = require2("./zlib/constants");
          var msg = require2("./zlib/messages");
          var ZStream = require2("./zlib/zstream");
          var GZheader = require2("./zlib/gzheader");
          var toString = Object.prototype.toString;
          function Inflate(options2) {
            if (!(this instanceof Inflate)) return new Inflate(options2);
            this.options = utils.assign({
              chunkSize: 16384,
              windowBits: 0,
              to: ""
            }, options2 || {});
            var opt = this.options;
            if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {
              opt.windowBits = -opt.windowBits;
              if (opt.windowBits === 0) {
                opt.windowBits = -15;
              }
            }
            if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options2 && options2.windowBits)) {
              opt.windowBits += 32;
            }
            if (opt.windowBits > 15 && opt.windowBits < 48) {
              if ((opt.windowBits & 15) === 0) {
                opt.windowBits |= 15;
              }
            }
            this.err = 0;
            this.msg = "";
            this.ended = false;
            this.chunks = [];
            this.strm = new ZStream();
            this.strm.avail_out = 0;
            var status = zlib_inflate.inflateInit2(
              this.strm,
              opt.windowBits
            );
            if (status !== c.Z_OK) {
              throw new Error(msg[status]);
            }
            this.header = new GZheader();
            zlib_inflate.inflateGetHeader(this.strm, this.header);
          }
          Inflate.prototype.push = function(data, mode) {
            var strm = this.strm;
            var chunkSize = this.options.chunkSize;
            var dictionary = this.options.dictionary;
            var status, _mode;
            var next_out_utf8, tail, utf8str;
            var dict;
            var allowBufError = false;
            if (this.ended) {
              return false;
            }
            _mode = mode === ~~mode ? mode : mode === true ? c.Z_FINISH : c.Z_NO_FLUSH;
            if (typeof data === "string") {
              strm.input = strings.binstring2buf(data);
            } else if (toString.call(data) === "[object ArrayBuffer]") {
              strm.input = new Uint8Array(data);
            } else {
              strm.input = data;
            }
            strm.next_in = 0;
            strm.avail_in = strm.input.length;
            do {
              if (strm.avail_out === 0) {
                strm.output = new utils.Buf8(chunkSize);
                strm.next_out = 0;
                strm.avail_out = chunkSize;
              }
              status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);
              if (status === c.Z_NEED_DICT && dictionary) {
                if (typeof dictionary === "string") {
                  dict = strings.string2buf(dictionary);
                } else if (toString.call(dictionary) === "[object ArrayBuffer]") {
                  dict = new Uint8Array(dictionary);
                } else {
                  dict = dictionary;
                }
                status = zlib_inflate.inflateSetDictionary(this.strm, dict);
              }
              if (status === c.Z_BUF_ERROR && allowBufError === true) {
                status = c.Z_OK;
                allowBufError = false;
              }
              if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
                this.onEnd(status);
                this.ended = true;
                return false;
              }
              if (strm.next_out) {
                if (strm.avail_out === 0 || status === c.Z_STREAM_END || strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH)) {
                  if (this.options.to === "string") {
                    next_out_utf8 = strings.utf8border(strm.output, strm.next_out);
                    tail = strm.next_out - next_out_utf8;
                    utf8str = strings.buf2string(strm.output, next_out_utf8);
                    strm.next_out = tail;
                    strm.avail_out = chunkSize - tail;
                    if (tail) {
                      utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0);
                    }
                    this.onData(utf8str);
                  } else {
                    this.onData(utils.shrinkBuf(strm.output, strm.next_out));
                  }
                }
              }
              if (strm.avail_in === 0 && strm.avail_out === 0) {
                allowBufError = true;
              }
            } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);
            if (status === c.Z_STREAM_END) {
              _mode = c.Z_FINISH;
            }
            if (_mode === c.Z_FINISH) {
              status = zlib_inflate.inflateEnd(this.strm);
              this.onEnd(status);
              this.ended = true;
              return status === c.Z_OK;
            }
            if (_mode === c.Z_SYNC_FLUSH) {
              this.onEnd(c.Z_OK);
              strm.avail_out = 0;
              return true;
            }
            return true;
          };
          Inflate.prototype.onData = function(chunk) {
            this.chunks.push(chunk);
          };
          Inflate.prototype.onEnd = function(status) {
            if (status === c.Z_OK) {
              if (this.options.to === "string") {
                this.result = this.chunks.join("");
              } else {
                this.result = utils.flattenChunks(this.chunks);
              }
            }
            this.chunks = [];
            this.err = status;
            this.msg = this.strm.msg;
          };
          function inflate(input, options2) {
            var inflator = new Inflate(options2);
            inflator.push(input, true);
            if (inflator.err) {
              throw inflator.msg;
            }
            return inflator.result;
          }
          function inflateRaw(input, options2) {
            options2 = options2 || {};
            options2.raw = true;
            return inflate(input, options2);
          }
          exports2.Inflate = Inflate;
          exports2.inflate = inflate;
          exports2.inflateRaw = inflateRaw;
          exports2.ungzip = inflate;
        }, { "./utils/common": 124, "./utils/strings": 125, "./zlib/constants": 127, "./zlib/gzheader": 130, "./zlib/inflate": 132, "./zlib/messages": 134, "./zlib/zstream": 136 }], 124: [function(require2, module2, exports2) {
          "use strict";
          var TYPED_OK = typeof Uint8Array !== "undefined" && typeof Uint16Array !== "undefined" && typeof Int32Array !== "undefined";
          exports2.assign = function(obj2) {
            var sources = Array.prototype.slice.call(arguments, 1);
            while (sources.length) {
              var source = sources.shift();
              if (!source) {
                continue;
              }
              if (typeof source !== "object") {
                throw new TypeError(source + "must be non-object");
              }
              for (var p in source) {
                if (source.hasOwnProperty(p)) {
                  obj2[p] = source[p];
                }
              }
            }
            return obj2;
          };
          exports2.shrinkBuf = function(buf, size) {
            if (buf.length === size) {
              return buf;
            }
            if (buf.subarray) {
              return buf.subarray(0, size);
            }
            buf.length = size;
            return buf;
          };
          var fnTyped = {
            arraySet: function(dest, src, src_offs, len, dest_offs) {
              if (src.subarray && dest.subarray) {
                dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
                return;
              }
              for (var i = 0; i < len; i++) {
                dest[dest_offs + i] = src[src_offs + i];
              }
            },
            // Join array of chunks to single array.
            flattenChunks: function(chunks) {
              var i, l2, len, pos, chunk, result;
              len = 0;
              for (i = 0, l2 = chunks.length; i < l2; i++) {
                len += chunks[i].length;
              }
              result = new Uint8Array(len);
              pos = 0;
              for (i = 0, l2 = chunks.length; i < l2; i++) {
                chunk = chunks[i];
                result.set(chunk, pos);
                pos += chunk.length;
              }
              return result;
            }
          };
          var fnUntyped = {
            arraySet: function(dest, src, src_offs, len, dest_offs) {
              for (var i = 0; i < len; i++) {
                dest[dest_offs + i] = src[src_offs + i];
              }
            },
            // Join array of chunks to single array.
            flattenChunks: function(chunks) {
              return [].concat.apply([], chunks);
            }
          };
          exports2.setTyped = function(on) {
            if (on) {
              exports2.Buf8 = Uint8Array;
              exports2.Buf16 = Uint16Array;
              exports2.Buf32 = Int32Array;
              exports2.assign(exports2, fnTyped);
            } else {
              exports2.Buf8 = Array;
              exports2.Buf16 = Array;
              exports2.Buf32 = Array;
              exports2.assign(exports2, fnUntyped);
            }
          };
          exports2.setTyped(TYPED_OK);
        }, {}], 125: [function(require2, module2, exports2) {
          "use strict";
          var utils = require2("./common");
          var STR_APPLY_OK = true;
          var STR_APPLY_UIA_OK = true;
          try {
            String.fromCharCode.apply(null, [0]);
          } catch (__) {
            STR_APPLY_OK = false;
          }
          try {
            String.fromCharCode.apply(null, new Uint8Array(1));
          } catch (__) {
            STR_APPLY_UIA_OK = false;
          }
          var _utf8len = new utils.Buf8(256);
          for (var q = 0; q < 256; q++) {
            _utf8len[q] = q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1;
          }
          _utf8len[254] = _utf8len[254] = 1;
          exports2.string2buf = function(str) {
            var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;
            for (m_pos = 0; m_pos < str_len; m_pos++) {
              c = str.charCodeAt(m_pos);
              if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
                c2 = str.charCodeAt(m_pos + 1);
                if ((c2 & 64512) === 56320) {
                  c = 65536 + (c - 55296 << 10) + (c2 - 56320);
                  m_pos++;
                }
              }
              buf_len += c < 128 ? 1 : c < 2048 ? 2 : c < 65536 ? 3 : 4;
            }
            buf = new utils.Buf8(buf_len);
            for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
              c = str.charCodeAt(m_pos);
              if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
                c2 = str.charCodeAt(m_pos + 1);
                if ((c2 & 64512) === 56320) {
                  c = 65536 + (c - 55296 << 10) + (c2 - 56320);
                  m_pos++;
                }
              }
              if (c < 128) {
                buf[i++] = c;
              } else if (c < 2048) {
                buf[i++] = 192 | c >>> 6;
                buf[i++] = 128 | c & 63;
              } else if (c < 65536) {
                buf[i++] = 224 | c >>> 12;
                buf[i++] = 128 | c >>> 6 & 63;
                buf[i++] = 128 | c & 63;
              } else {
                buf[i++] = 240 | c >>> 18;
                buf[i++] = 128 | c >>> 12 & 63;
                buf[i++] = 128 | c >>> 6 & 63;
                buf[i++] = 128 | c & 63;
              }
            }
            return buf;
          };
          function buf2binstring(buf, len) {
            if (len < 65537) {
              if (buf.subarray && STR_APPLY_UIA_OK || !buf.subarray && STR_APPLY_OK) {
                return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
              }
            }
            var result = "";
            for (var i = 0; i < len; i++) {
              result += String.fromCharCode(buf[i]);
            }
            return result;
          }
          exports2.buf2binstring = function(buf) {
            return buf2binstring(buf, buf.length);
          };
          exports2.binstring2buf = function(str) {
            var buf = new utils.Buf8(str.length);
            for (var i = 0, len = buf.length; i < len; i++) {
              buf[i] = str.charCodeAt(i);
            }
            return buf;
          };
          exports2.buf2string = function(buf, max) {
            var i, out, c, c_len;
            var len = max || buf.length;
            var utf16buf = new Array(len * 2);
            for (out = 0, i = 0; i < len; ) {
              c = buf[i++];
              if (c < 128) {
                utf16buf[out++] = c;
                continue;
              }
              c_len = _utf8len[c];
              if (c_len > 4) {
                utf16buf[out++] = 65533;
                i += c_len - 1;
                continue;
              }
              c &= c_len === 2 ? 31 : c_len === 3 ? 15 : 7;
              while (c_len > 1 && i < len) {
                c = c << 6 | buf[i++] & 63;
                c_len--;
              }
              if (c_len > 1) {
                utf16buf[out++] = 65533;
                continue;
              }
              if (c < 65536) {
                utf16buf[out++] = c;
              } else {
                c -= 65536;
                utf16buf[out++] = 55296 | c >> 10 & 1023;
                utf16buf[out++] = 56320 | c & 1023;
              }
            }
            return buf2binstring(utf16buf, out);
          };
          exports2.utf8border = function(buf, max) {
            var pos;
            max = max || buf.length;
            if (max > buf.length) {
              max = buf.length;
            }
            pos = max - 1;
            while (pos >= 0 && (buf[pos] & 192) === 128) {
              pos--;
            }
            if (pos < 0) {
              return max;
            }
            if (pos === 0) {
              return max;
            }
            return pos + _utf8len[buf[pos]] > max ? pos : max;
          };
        }, { "./common": 124 }], 126: [function(require2, module2, exports2) {
          "use strict";
          function adler32(adler, buf, len, pos) {
            var s1 = adler & 65535 | 0, s2 = adler >>> 16 & 65535 | 0, n = 0;
            while (len !== 0) {
              n = len > 2e3 ? 2e3 : len;
              len -= n;
              do {
                s1 = s1 + buf[pos++] | 0;
                s2 = s2 + s1 | 0;
              } while (--n);
              s1 %= 65521;
              s2 %= 65521;
            }
            return s1 | s2 << 16 | 0;
          }
          module2.exports = adler32;
        }, {}], 127: [function(require2, module2, exports2) {
          "use strict";
          module2.exports = {
            /* Allowed flush values; see deflate() and inflate() below for details */
            Z_NO_FLUSH: 0,
            Z_PARTIAL_FLUSH: 1,
            Z_SYNC_FLUSH: 2,
            Z_FULL_FLUSH: 3,
            Z_FINISH: 4,
            Z_BLOCK: 5,
            Z_TREES: 6,
            /* Return codes for the compression/decompression functions. Negative values
            * are errors, positive values are used for special but normal events.
            */
            Z_OK: 0,
            Z_STREAM_END: 1,
            Z_NEED_DICT: 2,
            Z_ERRNO: -1,
            Z_STREAM_ERROR: -2,
            Z_DATA_ERROR: -3,
            //Z_MEM_ERROR:     -4,
            Z_BUF_ERROR: -5,
            //Z_VERSION_ERROR: -6,
            /* compression levels */
            Z_NO_COMPRESSION: 0,
            Z_BEST_SPEED: 1,
            Z_BEST_COMPRESSION: 9,
            Z_DEFAULT_COMPRESSION: -1,
            Z_FILTERED: 1,
            Z_HUFFMAN_ONLY: 2,
            Z_RLE: 3,
            Z_FIXED: 4,
            Z_DEFAULT_STRATEGY: 0,
            /* Possible values of the data_type field (though see inflate()) */
            Z_BINARY: 0,
            Z_TEXT: 1,
            //Z_ASCII:                1, // = Z_TEXT (deprecated)
            Z_UNKNOWN: 2,
            /* The deflate compression method */
            Z_DEFLATED: 8
            //Z_NULL:                 null // Use -1 or null inline, depending on var type
          };
        }, {}], 128: [function(require2, module2, exports2) {
          "use strict";
          function makeTable() {
            var c, table = [];
            for (var n = 0; n < 256; n++) {
              c = n;
              for (var k = 0; k < 8; k++) {
                c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;
              }
              table[n] = c;
            }
            return table;
          }
          var crcTable = makeTable();
          function crc32(crc, buf, len, pos) {
            var t = crcTable, end = pos + len;
            crc ^= -1;
            for (var i = pos; i < end; i++) {
              crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 255];
            }
            return crc ^ -1;
          }
          module2.exports = crc32;
        }, {}], 129: [function(require2, module2, exports2) {
          "use strict";
          var utils = require2("../utils/common");
          var trees = require2("./trees");
          var adler32 = require2("./adler32");
          var crc32 = require2("./crc32");
          var msg = require2("./messages");
          var Z_NO_FLUSH = 0;
          var Z_PARTIAL_FLUSH = 1;
          var Z_FULL_FLUSH = 3;
          var Z_FINISH = 4;
          var Z_BLOCK = 5;
          var Z_OK = 0;
          var Z_STREAM_END = 1;
          var Z_STREAM_ERROR = -2;
          var Z_DATA_ERROR = -3;
          var Z_BUF_ERROR = -5;
          var Z_DEFAULT_COMPRESSION = -1;
          var Z_FILTERED = 1;
          var Z_HUFFMAN_ONLY = 2;
          var Z_RLE = 3;
          var Z_FIXED = 4;
          var Z_DEFAULT_STRATEGY = 0;
          var Z_UNKNOWN = 2;
          var Z_DEFLATED = 8;
          var MAX_MEM_LEVEL = 9;
          var MAX_WBITS = 15;
          var DEF_MEM_LEVEL = 8;
          var LENGTH_CODES = 29;
          var LITERALS = 256;
          var L_CODES = LITERALS + 1 + LENGTH_CODES;
          var D_CODES = 30;
          var BL_CODES = 19;
          var HEAP_SIZE = 2 * L_CODES + 1;
          var MAX_BITS = 15;
          var MIN_MATCH = 3;
          var MAX_MATCH = 258;
          var MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;
          var PRESET_DICT = 32;
          var INIT_STATE = 42;
          var EXTRA_STATE = 69;
          var NAME_STATE = 73;
          var COMMENT_STATE = 91;
          var HCRC_STATE = 103;
          var BUSY_STATE = 113;
          var FINISH_STATE = 666;
          var BS_NEED_MORE = 1;
          var BS_BLOCK_DONE = 2;
          var BS_FINISH_STARTED = 3;
          var BS_FINISH_DONE = 4;
          var OS_CODE = 3;
          function err(strm, errorCode) {
            strm.msg = msg[errorCode];
            return errorCode;
          }
          function rank(f) {
            return (f << 1) - (f > 4 ? 9 : 0);
          }
          function zero(buf) {
            var len = buf.length;
            while (--len >= 0) {
              buf[len] = 0;
            }
          }
          function flush_pending(strm) {
            var s = strm.state;
            var len = s.pending;
            if (len > strm.avail_out) {
              len = strm.avail_out;
            }
            if (len === 0) {
              return;
            }
            utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
            strm.next_out += len;
            s.pending_out += len;
            strm.total_out += len;
            strm.avail_out -= len;
            s.pending -= len;
            if (s.pending === 0) {
              s.pending_out = 0;
            }
          }
          function flush_block_only(s, last) {
            trees._tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);
            s.block_start = s.strstart;
            flush_pending(s.strm);
          }
          function put_byte(s, b) {
            s.pending_buf[s.pending++] = b;
          }
          function putShortMSB(s, b) {
            s.pending_buf[s.pending++] = b >>> 8 & 255;
            s.pending_buf[s.pending++] = b & 255;
          }
          function read_buf(strm, buf, start, size) {
            var len = strm.avail_in;
            if (len > size) {
              len = size;
            }
            if (len === 0) {
              return 0;
            }
            strm.avail_in -= len;
            utils.arraySet(buf, strm.input, strm.next_in, len, start);
            if (strm.state.wrap === 1) {
              strm.adler = adler32(strm.adler, buf, len, start);
            } else if (strm.state.wrap === 2) {
              strm.adler = crc32(strm.adler, buf, len, start);
            }
            strm.next_in += len;
            strm.total_in += len;
            return len;
          }
          function longest_match(s, cur_match) {
            var chain_length = s.max_chain_length;
            var scan = s.strstart;
            var match;
            var len;
            var best_len = s.prev_length;
            var nice_match = s.nice_match;
            var limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0;
            var _win = s.window;
            var wmask = s.w_mask;
            var prev = s.prev;
            var strend = s.strstart + MAX_MATCH;
            var scan_end1 = _win[scan + best_len - 1];
            var scan_end = _win[scan + best_len];
            if (s.prev_length >= s.good_match) {
              chain_length >>= 2;
            }
            if (nice_match > s.lookahead) {
              nice_match = s.lookahead;
            }
            do {
              match = cur_match;
              if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {
                continue;
              }
              scan += 2;
              match++;
              do {
              } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);
              len = MAX_MATCH - (strend - scan);
              scan = strend - MAX_MATCH;
              if (len > best_len) {
                s.match_start = cur_match;
                best_len = len;
                if (len >= nice_match) {
                  break;
                }
                scan_end1 = _win[scan + best_len - 1];
                scan_end = _win[scan + best_len];
              }
            } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);
            if (best_len <= s.lookahead) {
              return best_len;
            }
            return s.lookahead;
          }
          function fill_window(s) {
            var _w_size = s.w_size;
            var p, n, m, more, str;
            do {
              more = s.window_size - s.lookahead - s.strstart;
              if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
                utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
                s.match_start -= _w_size;
                s.strstart -= _w_size;
                s.block_start -= _w_size;
                n = s.hash_size;
                p = n;
                do {
                  m = s.head[--p];
                  s.head[p] = m >= _w_size ? m - _w_size : 0;
                } while (--n);
                n = _w_size;
                p = n;
                do {
                  m = s.prev[--p];
                  s.prev[p] = m >= _w_size ? m - _w_size : 0;
                } while (--n);
                more += _w_size;
              }
              if (s.strm.avail_in === 0) {
                break;
              }
              n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
              s.lookahead += n;
              if (s.lookahead + s.insert >= MIN_MATCH) {
                str = s.strstart - s.insert;
                s.ins_h = s.window[str];
                s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + 1]) & s.hash_mask;
                while (s.insert) {
                  s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
                  s.prev[str & s.w_mask] = s.head[s.ins_h];
                  s.head[s.ins_h] = str;
                  str++;
                  s.insert--;
                  if (s.lookahead + s.insert < MIN_MATCH) {
                    break;
                  }
                }
              }
            } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);
          }
          function deflate_stored(s, flush) {
            var max_block_size = 65535;
            if (max_block_size > s.pending_buf_size - 5) {
              max_block_size = s.pending_buf_size - 5;
            }
            for (; ; ) {
              if (s.lookahead <= 1) {
                fill_window(s);
                if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
                  return BS_NEED_MORE;
                }
                if (s.lookahead === 0) {
                  break;
                }
              }
              s.strstart += s.lookahead;
              s.lookahead = 0;
              var max_start = s.block_start + max_block_size;
              if (s.strstart === 0 || s.strstart >= max_start) {
                s.lookahead = s.strstart - max_start;
                s.strstart = max_start;
                flush_block_only(s, false);
                if (s.strm.avail_out === 0) {
                  return BS_NEED_MORE;
                }
              }
              if (s.strstart - s.block_start >= s.w_size - MIN_LOOKAHEAD) {
                flush_block_only(s, false);
                if (s.strm.avail_out === 0) {
                  return BS_NEED_MORE;
                }
              }
            }
            s.insert = 0;
            if (flush === Z_FINISH) {
              flush_block_only(s, true);
              if (s.strm.avail_out === 0) {
                return BS_FINISH_STARTED;
              }
              return BS_FINISH_DONE;
            }
            if (s.strstart > s.block_start) {
              flush_block_only(s, false);
              if (s.strm.avail_out === 0) {
                return BS_NEED_MORE;
              }
            }
            return BS_NEED_MORE;
          }
          function deflate_fast(s, flush) {
            var hash_head;
            var bflush;
            for (; ; ) {
              if (s.lookahead < MIN_LOOKAHEAD) {
                fill_window(s);
                if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
                  return BS_NEED_MORE;
                }
                if (s.lookahead === 0) {
                  break;
                }
              }
              hash_head = 0;
              if (s.lookahead >= MIN_MATCH) {
                s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                s.head[s.ins_h] = s.strstart;
              }
              if (hash_head !== 0 && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
                s.match_length = longest_match(s, hash_head);
              }
              if (s.match_length >= MIN_MATCH) {
                bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);
                s.lookahead -= s.match_length;
                if (s.match_length <= s.max_lazy_match && s.lookahead >= MIN_MATCH) {
                  s.match_length--;
                  do {
                    s.strstart++;
                    s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                    hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                    s.head[s.ins_h] = s.strstart;
                  } while (--s.match_length !== 0);
                  s.strstart++;
                } else {
                  s.strstart += s.match_length;
                  s.match_length = 0;
                  s.ins_h = s.window[s.strstart];
                  s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + 1]) & s.hash_mask;
                }
              } else {
                bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
                s.lookahead--;
                s.strstart++;
              }
              if (bflush) {
                flush_block_only(s, false);
                if (s.strm.avail_out === 0) {
                  return BS_NEED_MORE;
                }
              }
            }
            s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
            if (flush === Z_FINISH) {
              flush_block_only(s, true);
              if (s.strm.avail_out === 0) {
                return BS_FINISH_STARTED;
              }
              return BS_FINISH_DONE;
            }
            if (s.last_lit) {
              flush_block_only(s, false);
              if (s.strm.avail_out === 0) {
                return BS_NEED_MORE;
              }
            }
            return BS_BLOCK_DONE;
          }
          function deflate_slow(s, flush) {
            var hash_head;
            var bflush;
            var max_insert;
            for (; ; ) {
              if (s.lookahead < MIN_LOOKAHEAD) {
                fill_window(s);
                if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
                  return BS_NEED_MORE;
                }
                if (s.lookahead === 0) {
                  break;
                }
              }
              hash_head = 0;
              if (s.lookahead >= MIN_MATCH) {
                s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                s.head[s.ins_h] = s.strstart;
              }
              s.prev_length = s.match_length;
              s.prev_match = s.match_start;
              s.match_length = MIN_MATCH - 1;
              if (hash_head !== 0 && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
                s.match_length = longest_match(s, hash_head);
                if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096)) {
                  s.match_length = MIN_MATCH - 1;
                }
              }
              if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
                max_insert = s.strstart + s.lookahead - MIN_MATCH;
                bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
                s.lookahead -= s.prev_length - 1;
                s.prev_length -= 2;
                do {
                  if (++s.strstart <= max_insert) {
                    s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                    hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                    s.head[s.ins_h] = s.strstart;
                  }
                } while (--s.prev_length !== 0);
                s.match_available = 0;
                s.match_length = MIN_MATCH - 1;
                s.strstart++;
                if (bflush) {
                  flush_block_only(s, false);
                  if (s.strm.avail_out === 0) {
                    return BS_NEED_MORE;
                  }
                }
              } else if (s.match_available) {
                bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);
                if (bflush) {
                  flush_block_only(s, false);
                }
                s.strstart++;
                s.lookahead--;
                if (s.strm.avail_out === 0) {
                  return BS_NEED_MORE;
                }
              } else {
                s.match_available = 1;
                s.strstart++;
                s.lookahead--;
              }
            }
            if (s.match_available) {
              bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);
              s.match_available = 0;
            }
            s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
            if (flush === Z_FINISH) {
              flush_block_only(s, true);
              if (s.strm.avail_out === 0) {
                return BS_FINISH_STARTED;
              }
              return BS_FINISH_DONE;
            }
            if (s.last_lit) {
              flush_block_only(s, false);
              if (s.strm.avail_out === 0) {
                return BS_NEED_MORE;
              }
            }
            return BS_BLOCK_DONE;
          }
          function deflate_rle(s, flush) {
            var bflush;
            var prev;
            var scan, strend;
            var _win = s.window;
            for (; ; ) {
              if (s.lookahead <= MAX_MATCH) {
                fill_window(s);
                if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
                  return BS_NEED_MORE;
                }
                if (s.lookahead === 0) {
                  break;
                }
              }
              s.match_length = 0;
              if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
                scan = s.strstart - 1;
                prev = _win[scan];
                if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
                  strend = s.strstart + MAX_MATCH;
                  do {
                  } while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);
                  s.match_length = MAX_MATCH - (strend - scan);
                  if (s.match_length > s.lookahead) {
                    s.match_length = s.lookahead;
                  }
                }
              }
              if (s.match_length >= MIN_MATCH) {
                bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);
                s.lookahead -= s.match_length;
                s.strstart += s.match_length;
                s.match_length = 0;
              } else {
                bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
                s.lookahead--;
                s.strstart++;
              }
              if (bflush) {
                flush_block_only(s, false);
                if (s.strm.avail_out === 0) {
                  return BS_NEED_MORE;
                }
              }
            }
            s.insert = 0;
            if (flush === Z_FINISH) {
              flush_block_only(s, true);
              if (s.strm.avail_out === 0) {
                return BS_FINISH_STARTED;
              }
              return BS_FINISH_DONE;
            }
            if (s.last_lit) {
              flush_block_only(s, false);
              if (s.strm.avail_out === 0) {
                return BS_NEED_MORE;
              }
            }
            return BS_BLOCK_DONE;
          }
          function deflate_huff(s, flush) {
            var bflush;
            for (; ; ) {
              if (s.lookahead === 0) {
                fill_window(s);
                if (s.lookahead === 0) {
                  if (flush === Z_NO_FLUSH) {
                    return BS_NEED_MORE;
                  }
                  break;
                }
              }
              s.match_length = 0;
              bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
              s.lookahead--;
              s.strstart++;
              if (bflush) {
                flush_block_only(s, false);
                if (s.strm.avail_out === 0) {
                  return BS_NEED_MORE;
                }
              }
            }
            s.insert = 0;
            if (flush === Z_FINISH) {
              flush_block_only(s, true);
              if (s.strm.avail_out === 0) {
                return BS_FINISH_STARTED;
              }
              return BS_FINISH_DONE;
            }
            if (s.last_lit) {
              flush_block_only(s, false);
              if (s.strm.avail_out === 0) {
                return BS_NEED_MORE;
              }
            }
            return BS_BLOCK_DONE;
          }
          function Config(good_length, max_lazy, nice_length, max_chain, func) {
            this.good_length = good_length;
            this.max_lazy = max_lazy;
            this.nice_length = nice_length;
            this.max_chain = max_chain;
            this.func = func;
          }
          var configuration_table;
          configuration_table = [
            /*      good lazy nice chain */
            new Config(0, 0, 0, 0, deflate_stored),
            /* 0 store only */
            new Config(4, 4, 8, 4, deflate_fast),
            /* 1 max speed, no lazy matches */
            new Config(4, 5, 16, 8, deflate_fast),
            /* 2 */
            new Config(4, 6, 32, 32, deflate_fast),
            /* 3 */
            new Config(4, 4, 16, 16, deflate_slow),
            /* 4 lazy matches */
            new Config(8, 16, 32, 32, deflate_slow),
            /* 5 */
            new Config(8, 16, 128, 128, deflate_slow),
            /* 6 */
            new Config(8, 32, 128, 256, deflate_slow),
            /* 7 */
            new Config(32, 128, 258, 1024, deflate_slow),
            /* 8 */
            new Config(32, 258, 258, 4096, deflate_slow)
            /* 9 max compression */
          ];
          function lm_init(s) {
            s.window_size = 2 * s.w_size;
            zero(s.head);
            s.max_lazy_match = configuration_table[s.level].max_lazy;
            s.good_match = configuration_table[s.level].good_length;
            s.nice_match = configuration_table[s.level].nice_length;
            s.max_chain_length = configuration_table[s.level].max_chain;
            s.strstart = 0;
            s.block_start = 0;
            s.lookahead = 0;
            s.insert = 0;
            s.match_length = s.prev_length = MIN_MATCH - 1;
            s.match_available = 0;
            s.ins_h = 0;
          }
          function DeflateState() {
            this.strm = null;
            this.status = 0;
            this.pending_buf = null;
            this.pending_buf_size = 0;
            this.pending_out = 0;
            this.pending = 0;
            this.wrap = 0;
            this.gzhead = null;
            this.gzindex = 0;
            this.method = Z_DEFLATED;
            this.last_flush = -1;
            this.w_size = 0;
            this.w_bits = 0;
            this.w_mask = 0;
            this.window = null;
            this.window_size = 0;
            this.prev = null;
            this.head = null;
            this.ins_h = 0;
            this.hash_size = 0;
            this.hash_bits = 0;
            this.hash_mask = 0;
            this.hash_shift = 0;
            this.block_start = 0;
            this.match_length = 0;
            this.prev_match = 0;
            this.match_available = 0;
            this.strstart = 0;
            this.match_start = 0;
            this.lookahead = 0;
            this.prev_length = 0;
            this.max_chain_length = 0;
            this.max_lazy_match = 0;
            this.level = 0;
            this.strategy = 0;
            this.good_match = 0;
            this.nice_match = 0;
            this.dyn_ltree = new utils.Buf16(HEAP_SIZE * 2);
            this.dyn_dtree = new utils.Buf16((2 * D_CODES + 1) * 2);
            this.bl_tree = new utils.Buf16((2 * BL_CODES + 1) * 2);
            zero(this.dyn_ltree);
            zero(this.dyn_dtree);
            zero(this.bl_tree);
            this.l_desc = null;
            this.d_desc = null;
            this.bl_desc = null;
            this.bl_count = new utils.Buf16(MAX_BITS + 1);
            this.heap = new utils.Buf16(2 * L_CODES + 1);
            zero(this.heap);
            this.heap_len = 0;
            this.heap_max = 0;
            this.depth = new utils.Buf16(2 * L_CODES + 1);
            zero(this.depth);
            this.l_buf = 0;
            this.lit_bufsize = 0;
            this.last_lit = 0;
            this.d_buf = 0;
            this.opt_len = 0;
            this.static_len = 0;
            this.matches = 0;
            this.insert = 0;
            this.bi_buf = 0;
            this.bi_valid = 0;
          }
          function deflateResetKeep(strm) {
            var s;
            if (!strm || !strm.state) {
              return err(strm, Z_STREAM_ERROR);
            }
            strm.total_in = strm.total_out = 0;
            strm.data_type = Z_UNKNOWN;
            s = strm.state;
            s.pending = 0;
            s.pending_out = 0;
            if (s.wrap < 0) {
              s.wrap = -s.wrap;
            }
            s.status = s.wrap ? INIT_STATE : BUSY_STATE;
            strm.adler = s.wrap === 2 ? 0 : 1;
            s.last_flush = Z_NO_FLUSH;
            trees._tr_init(s);
            return Z_OK;
          }
          function deflateReset(strm) {
            var ret2 = deflateResetKeep(strm);
            if (ret2 === Z_OK) {
              lm_init(strm.state);
            }
            return ret2;
          }
          function deflateSetHeader(strm, head) {
            if (!strm || !strm.state) {
              return Z_STREAM_ERROR;
            }
            if (strm.state.wrap !== 2) {
              return Z_STREAM_ERROR;
            }
            strm.state.gzhead = head;
            return Z_OK;
          }
          function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
            if (!strm) {
              return Z_STREAM_ERROR;
            }
            var wrap = 1;
            if (level === Z_DEFAULT_COMPRESSION) {
              level = 6;
            }
            if (windowBits < 0) {
              wrap = 0;
              windowBits = -windowBits;
            } else if (windowBits > 15) {
              wrap = 2;
              windowBits -= 16;
            }
            if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {
              return err(strm, Z_STREAM_ERROR);
            }
            if (windowBits === 8) {
              windowBits = 9;
            }
            var s = new DeflateState();
            strm.state = s;
            s.strm = strm;
            s.wrap = wrap;
            s.gzhead = null;
            s.w_bits = windowBits;
            s.w_size = 1 << s.w_bits;
            s.w_mask = s.w_size - 1;
            s.hash_bits = memLevel + 7;
            s.hash_size = 1 << s.hash_bits;
            s.hash_mask = s.hash_size - 1;
            s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);
            s.window = new utils.Buf8(s.w_size * 2);
            s.head = new utils.Buf16(s.hash_size);
            s.prev = new utils.Buf16(s.w_size);
            s.lit_bufsize = 1 << memLevel + 6;
            s.pending_buf_size = s.lit_bufsize * 4;
            s.pending_buf = new utils.Buf8(s.pending_buf_size);
            s.d_buf = 1 * s.lit_bufsize;
            s.l_buf = (1 + 2) * s.lit_bufsize;
            s.level = level;
            s.strategy = strategy;
            s.method = method;
            return deflateReset(strm);
          }
          function deflateInit(strm, level) {
            return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
          }
          function deflate(strm, flush) {
            var old_flush, s;
            var beg, val;
            if (!strm || !strm.state || flush > Z_BLOCK || flush < 0) {
              return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
            }
            s = strm.state;
            if (!strm.output || !strm.input && strm.avail_in !== 0 || s.status === FINISH_STATE && flush !== Z_FINISH) {
              return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR : Z_STREAM_ERROR);
            }
            s.strm = strm;
            old_flush = s.last_flush;
            s.last_flush = flush;
            if (s.status === INIT_STATE) {
              if (s.wrap === 2) {
                strm.adler = 0;
                put_byte(s, 31);
                put_byte(s, 139);
                put_byte(s, 8);
                if (!s.gzhead) {
                  put_byte(s, 0);
                  put_byte(s, 0);
                  put_byte(s, 0);
                  put_byte(s, 0);
                  put_byte(s, 0);
                  put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
                  put_byte(s, OS_CODE);
                  s.status = BUSY_STATE;
                } else {
                  put_byte(
                    s,
                    (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16)
                  );
                  put_byte(s, s.gzhead.time & 255);
                  put_byte(s, s.gzhead.time >> 8 & 255);
                  put_byte(s, s.gzhead.time >> 16 & 255);
                  put_byte(s, s.gzhead.time >> 24 & 255);
                  put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
                  put_byte(s, s.gzhead.os & 255);
                  if (s.gzhead.extra && s.gzhead.extra.length) {
                    put_byte(s, s.gzhead.extra.length & 255);
                    put_byte(s, s.gzhead.extra.length >> 8 & 255);
                  }
                  if (s.gzhead.hcrc) {
                    strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
                  }
                  s.gzindex = 0;
                  s.status = EXTRA_STATE;
                }
              } else {
                var header = Z_DEFLATED + (s.w_bits - 8 << 4) << 8;
                var level_flags = -1;
                if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
                  level_flags = 0;
                } else if (s.level < 6) {
                  level_flags = 1;
                } else if (s.level === 6) {
                  level_flags = 2;
                } else {
                  level_flags = 3;
                }
                header |= level_flags << 6;
                if (s.strstart !== 0) {
                  header |= PRESET_DICT;
                }
                header += 31 - header % 31;
                s.status = BUSY_STATE;
                putShortMSB(s, header);
                if (s.strstart !== 0) {
                  putShortMSB(s, strm.adler >>> 16);
                  putShortMSB(s, strm.adler & 65535);
                }
                strm.adler = 1;
              }
            }
            if (s.status === EXTRA_STATE) {
              if (s.gzhead.extra) {
                beg = s.pending;
                while (s.gzindex < (s.gzhead.extra.length & 65535)) {
                  if (s.pending === s.pending_buf_size) {
                    if (s.gzhead.hcrc && s.pending > beg) {
                      strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                    }
                    flush_pending(strm);
                    beg = s.pending;
                    if (s.pending === s.pending_buf_size) {
                      break;
                    }
                  }
                  put_byte(s, s.gzhead.extra[s.gzindex] & 255);
                  s.gzindex++;
                }
                if (s.gzhead.hcrc && s.pending > beg) {
                  strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                }
                if (s.gzindex === s.gzhead.extra.length) {
                  s.gzindex = 0;
                  s.status = NAME_STATE;
                }
              } else {
                s.status = NAME_STATE;
              }
            }
            if (s.status === NAME_STATE) {
              if (s.gzhead.name) {
                beg = s.pending;
                do {
                  if (s.pending === s.pending_buf_size) {
                    if (s.gzhead.hcrc && s.pending > beg) {
                      strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                    }
                    flush_pending(strm);
                    beg = s.pending;
                    if (s.pending === s.pending_buf_size) {
                      val = 1;
                      break;
                    }
                  }
                  if (s.gzindex < s.gzhead.name.length) {
                    val = s.gzhead.name.charCodeAt(s.gzindex++) & 255;
                  } else {
                    val = 0;
                  }
                  put_byte(s, val);
                } while (val !== 0);
                if (s.gzhead.hcrc && s.pending > beg) {
                  strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                }
                if (val === 0) {
                  s.gzindex = 0;
                  s.status = COMMENT_STATE;
                }
              } else {
                s.status = COMMENT_STATE;
              }
            }
            if (s.status === COMMENT_STATE) {
              if (s.gzhead.comment) {
                beg = s.pending;
                do {
                  if (s.pending === s.pending_buf_size) {
                    if (s.gzhead.hcrc && s.pending > beg) {
                      strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                    }
                    flush_pending(strm);
                    beg = s.pending;
                    if (s.pending === s.pending_buf_size) {
                      val = 1;
                      break;
                    }
                  }
                  if (s.gzindex < s.gzhead.comment.length) {
                    val = s.gzhead.comment.charCodeAt(s.gzindex++) & 255;
                  } else {
                    val = 0;
                  }
                  put_byte(s, val);
                } while (val !== 0);
                if (s.gzhead.hcrc && s.pending > beg) {
                  strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                }
                if (val === 0) {
                  s.status = HCRC_STATE;
                }
              } else {
                s.status = HCRC_STATE;
              }
            }
            if (s.status === HCRC_STATE) {
              if (s.gzhead.hcrc) {
                if (s.pending + 2 > s.pending_buf_size) {
                  flush_pending(strm);
                }
                if (s.pending + 2 <= s.pending_buf_size) {
                  put_byte(s, strm.adler & 255);
                  put_byte(s, strm.adler >> 8 & 255);
                  strm.adler = 0;
                  s.status = BUSY_STATE;
                }
              } else {
                s.status = BUSY_STATE;
              }
            }
            if (s.pending !== 0) {
              flush_pending(strm);
              if (strm.avail_out === 0) {
                s.last_flush = -1;
                return Z_OK;
              }
            } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH) {
              return err(strm, Z_BUF_ERROR);
            }
            if (s.status === FINISH_STATE && strm.avail_in !== 0) {
              return err(strm, Z_BUF_ERROR);
            }
            if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH && s.status !== FINISH_STATE) {
              var bstate = s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);
              if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
                s.status = FINISH_STATE;
              }
              if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
                if (strm.avail_out === 0) {
                  s.last_flush = -1;
                }
                return Z_OK;
              }
              if (bstate === BS_BLOCK_DONE) {
                if (flush === Z_PARTIAL_FLUSH) {
                  trees._tr_align(s);
                } else if (flush !== Z_BLOCK) {
                  trees._tr_stored_block(s, 0, 0, false);
                  if (flush === Z_FULL_FLUSH) {
                    zero(s.head);
                    if (s.lookahead === 0) {
                      s.strstart = 0;
                      s.block_start = 0;
                      s.insert = 0;
                    }
                  }
                }
                flush_pending(strm);
                if (strm.avail_out === 0) {
                  s.last_flush = -1;
                  return Z_OK;
                }
              }
            }
            if (flush !== Z_FINISH) {
              return Z_OK;
            }
            if (s.wrap <= 0) {
              return Z_STREAM_END;
            }
            if (s.wrap === 2) {
              put_byte(s, strm.adler & 255);
              put_byte(s, strm.adler >> 8 & 255);
              put_byte(s, strm.adler >> 16 & 255);
              put_byte(s, strm.adler >> 24 & 255);
              put_byte(s, strm.total_in & 255);
              put_byte(s, strm.total_in >> 8 & 255);
              put_byte(s, strm.total_in >> 16 & 255);
              put_byte(s, strm.total_in >> 24 & 255);
            } else {
              putShortMSB(s, strm.adler >>> 16);
              putShortMSB(s, strm.adler & 65535);
            }
            flush_pending(strm);
            if (s.wrap > 0) {
              s.wrap = -s.wrap;
            }
            return s.pending !== 0 ? Z_OK : Z_STREAM_END;
          }
          function deflateEnd(strm) {
            var status;
            if (!strm || !strm.state) {
              return Z_STREAM_ERROR;
            }
            status = strm.state.status;
            if (status !== INIT_STATE && status !== EXTRA_STATE && status !== NAME_STATE && status !== COMMENT_STATE && status !== HCRC_STATE && status !== BUSY_STATE && status !== FINISH_STATE) {
              return err(strm, Z_STREAM_ERROR);
            }
            strm.state = null;
            return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
          }
          function deflateSetDictionary(strm, dictionary) {
            var dictLength = dictionary.length;
            var s;
            var str, n;
            var wrap;
            var avail;
            var next;
            var input;
            var tmpDict;
            if (!strm || !strm.state) {
              return Z_STREAM_ERROR;
            }
            s = strm.state;
            wrap = s.wrap;
            if (wrap === 2 || wrap === 1 && s.status !== INIT_STATE || s.lookahead) {
              return Z_STREAM_ERROR;
            }
            if (wrap === 1) {
              strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
            }
            s.wrap = 0;
            if (dictLength >= s.w_size) {
              if (wrap === 0) {
                zero(s.head);
                s.strstart = 0;
                s.block_start = 0;
                s.insert = 0;
              }
              tmpDict = new utils.Buf8(s.w_size);
              utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
              dictionary = tmpDict;
              dictLength = s.w_size;
            }
            avail = strm.avail_in;
            next = strm.next_in;
            input = strm.input;
            strm.avail_in = dictLength;
            strm.next_in = 0;
            strm.input = dictionary;
            fill_window(s);
            while (s.lookahead >= MIN_MATCH) {
              str = s.strstart;
              n = s.lookahead - (MIN_MATCH - 1);
              do {
                s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
                s.prev[str & s.w_mask] = s.head[s.ins_h];
                s.head[s.ins_h] = str;
                str++;
              } while (--n);
              s.strstart = str;
              s.lookahead = MIN_MATCH - 1;
              fill_window(s);
            }
            s.strstart += s.lookahead;
            s.block_start = s.strstart;
            s.insert = s.lookahead;
            s.lookahead = 0;
            s.match_length = s.prev_length = MIN_MATCH - 1;
            s.match_available = 0;
            strm.next_in = next;
            strm.input = input;
            strm.avail_in = avail;
            s.wrap = wrap;
            return Z_OK;
          }
          exports2.deflateInit = deflateInit;
          exports2.deflateInit2 = deflateInit2;
          exports2.deflateReset = deflateReset;
          exports2.deflateResetKeep = deflateResetKeep;
          exports2.deflateSetHeader = deflateSetHeader;
          exports2.deflate = deflate;
          exports2.deflateEnd = deflateEnd;
          exports2.deflateSetDictionary = deflateSetDictionary;
          exports2.deflateInfo = "pako deflate (from Nodeca project)";
        }, { "../utils/common": 124, "./adler32": 126, "./crc32": 128, "./messages": 134, "./trees": 135 }], 130: [function(require2, module2, exports2) {
          "use strict";
          function GZheader() {
            this.text = 0;
            this.time = 0;
            this.xflags = 0;
            this.os = 0;
            this.extra = null;
            this.extra_len = 0;
            this.name = "";
            this.comment = "";
            this.hcrc = 0;
            this.done = false;
          }
          module2.exports = GZheader;
        }, {}], 131: [function(require2, module2, exports2) {
          "use strict";
          var BAD = 30;
          var TYPE = 12;
          module2.exports = function inflate_fast(strm, start) {
            var state;
            var _in;
            var last;
            var _out;
            var beg;
            var end;
            var dmax;
            var wsize;
            var whave;
            var wnext;
            var s_window;
            var hold;
            var bits;
            var lcode;
            var dcode;
            var lmask;
            var dmask;
            var here;
            var op;
            var len;
            var dist;
            var from;
            var from_source;
            var input, output;
            state = strm.state;
            _in = strm.next_in;
            input = strm.input;
            last = _in + (strm.avail_in - 5);
            _out = strm.next_out;
            output = strm.output;
            beg = _out - (start - strm.avail_out);
            end = _out + (strm.avail_out - 257);
            dmax = state.dmax;
            wsize = state.wsize;
            whave = state.whave;
            wnext = state.wnext;
            s_window = state.window;
            hold = state.hold;
            bits = state.bits;
            lcode = state.lencode;
            dcode = state.distcode;
            lmask = (1 << state.lenbits) - 1;
            dmask = (1 << state.distbits) - 1;
            top:
              do {
                if (bits < 15) {
                  hold += input[_in++] << bits;
                  bits += 8;
                  hold += input[_in++] << bits;
                  bits += 8;
                }
                here = lcode[hold & lmask];
                dolen:
                  for (; ; ) {
                    op = here >>> 24;
                    hold >>>= op;
                    bits -= op;
                    op = here >>> 16 & 255;
                    if (op === 0) {
                      output[_out++] = here & 65535;
                    } else if (op & 16) {
                      len = here & 65535;
                      op &= 15;
                      if (op) {
                        if (bits < op) {
                          hold += input[_in++] << bits;
                          bits += 8;
                        }
                        len += hold & (1 << op) - 1;
                        hold >>>= op;
                        bits -= op;
                      }
                      if (bits < 15) {
                        hold += input[_in++] << bits;
                        bits += 8;
                        hold += input[_in++] << bits;
                        bits += 8;
                      }
                      here = dcode[hold & dmask];
                      dodist:
                        for (; ; ) {
                          op = here >>> 24;
                          hold >>>= op;
                          bits -= op;
                          op = here >>> 16 & 255;
                          if (op & 16) {
                            dist = here & 65535;
                            op &= 15;
                            if (bits < op) {
                              hold += input[_in++] << bits;
                              bits += 8;
                              if (bits < op) {
                                hold += input[_in++] << bits;
                                bits += 8;
                              }
                            }
                            dist += hold & (1 << op) - 1;
                            if (dist > dmax) {
                              strm.msg = "invalid distance too far back";
                              state.mode = BAD;
                              break top;
                            }
                            hold >>>= op;
                            bits -= op;
                            op = _out - beg;
                            if (dist > op) {
                              op = dist - op;
                              if (op > whave) {
                                if (state.sane) {
                                  strm.msg = "invalid distance too far back";
                                  state.mode = BAD;
                                  break top;
                                }
                              }
                              from = 0;
                              from_source = s_window;
                              if (wnext === 0) {
                                from += wsize - op;
                                if (op < len) {
                                  len -= op;
                                  do {
                                    output[_out++] = s_window[from++];
                                  } while (--op);
                                  from = _out - dist;
                                  from_source = output;
                                }
                              } else if (wnext < op) {
                                from += wsize + wnext - op;
                                op -= wnext;
                                if (op < len) {
                                  len -= op;
                                  do {
                                    output[_out++] = s_window[from++];
                                  } while (--op);
                                  from = 0;
                                  if (wnext < len) {
                                    op = wnext;
                                    len -= op;
                                    do {
                                      output[_out++] = s_window[from++];
                                    } while (--op);
                                    from = _out - dist;
                                    from_source = output;
                                  }
                                }
                              } else {
                                from += wnext - op;
                                if (op < len) {
                                  len -= op;
                                  do {
                                    output[_out++] = s_window[from++];
                                  } while (--op);
                                  from = _out - dist;
                                  from_source = output;
                                }
                              }
                              while (len > 2) {
                                output[_out++] = from_source[from++];
                                output[_out++] = from_source[from++];
                                output[_out++] = from_source[from++];
                                len -= 3;
                              }
                              if (len) {
                                output[_out++] = from_source[from++];
                                if (len > 1) {
                                  output[_out++] = from_source[from++];
                                }
                              }
                            } else {
                              from = _out - dist;
                              do {
                                output[_out++] = output[from++];
                                output[_out++] = output[from++];
                                output[_out++] = output[from++];
                                len -= 3;
                              } while (len > 2);
                              if (len) {
                                output[_out++] = output[from++];
                                if (len > 1) {
                                  output[_out++] = output[from++];
                                }
                              }
                            }
                          } else if ((op & 64) === 0) {
                            here = dcode[(here & 65535) + (hold & (1 << op) - 1)];
                            continue dodist;
                          } else {
                            strm.msg = "invalid distance code";
                            state.mode = BAD;
                            break top;
                          }
                          break;
                        }
                    } else if ((op & 64) === 0) {
                      here = lcode[(here & 65535) + (hold & (1 << op) - 1)];
                      continue dolen;
                    } else if (op & 32) {
                      state.mode = TYPE;
                      break top;
                    } else {
                      strm.msg = "invalid literal/length code";
                      state.mode = BAD;
                      break top;
                    }
                    break;
                  }
              } while (_in < last && _out < end);
            len = bits >> 3;
            _in -= len;
            bits -= len << 3;
            hold &= (1 << bits) - 1;
            strm.next_in = _in;
            strm.next_out = _out;
            strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
            strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
            state.hold = hold;
            state.bits = bits;
            return;
          };
        }, {}], 132: [function(require2, module2, exports2) {
          "use strict";
          var utils = require2("../utils/common");
          var adler32 = require2("./adler32");
          var crc32 = require2("./crc32");
          var inflate_fast = require2("./inffast");
          var inflate_table = require2("./inftrees");
          var CODES = 0;
          var LENS = 1;
          var DISTS = 2;
          var Z_FINISH = 4;
          var Z_BLOCK = 5;
          var Z_TREES = 6;
          var Z_OK = 0;
          var Z_STREAM_END = 1;
          var Z_NEED_DICT = 2;
          var Z_STREAM_ERROR = -2;
          var Z_DATA_ERROR = -3;
          var Z_MEM_ERROR = -4;
          var Z_BUF_ERROR = -5;
          var Z_DEFLATED = 8;
          var HEAD = 1;
          var FLAGS = 2;
          var TIME = 3;
          var OS = 4;
          var EXLEN = 5;
          var EXTRA = 6;
          var NAME = 7;
          var COMMENT = 8;
          var HCRC = 9;
          var DICTID = 10;
          var DICT = 11;
          var TYPE = 12;
          var TYPEDO = 13;
          var STORED = 14;
          var COPY_ = 15;
          var COPY = 16;
          var TABLE = 17;
          var LENLENS = 18;
          var CODELENS = 19;
          var LEN_ = 20;
          var LEN = 21;
          var LENEXT = 22;
          var DIST = 23;
          var DISTEXT = 24;
          var MATCH = 25;
          var LIT = 26;
          var CHECK = 27;
          var LENGTH = 28;
          var DONE = 29;
          var BAD = 30;
          var MEM = 31;
          var SYNC = 32;
          var ENOUGH_LENS = 852;
          var ENOUGH_DISTS = 592;
          var MAX_WBITS = 15;
          var DEF_WBITS = MAX_WBITS;
          function zswap32(q) {
            return (q >>> 24 & 255) + (q >>> 8 & 65280) + ((q & 65280) << 8) + ((q & 255) << 24);
          }
          function InflateState() {
            this.mode = 0;
            this.last = false;
            this.wrap = 0;
            this.havedict = false;
            this.flags = 0;
            this.dmax = 0;
            this.check = 0;
            this.total = 0;
            this.head = null;
            this.wbits = 0;
            this.wsize = 0;
            this.whave = 0;
            this.wnext = 0;
            this.window = null;
            this.hold = 0;
            this.bits = 0;
            this.length = 0;
            this.offset = 0;
            this.extra = 0;
            this.lencode = null;
            this.distcode = null;
            this.lenbits = 0;
            this.distbits = 0;
            this.ncode = 0;
            this.nlen = 0;
            this.ndist = 0;
            this.have = 0;
            this.next = null;
            this.lens = new utils.Buf16(320);
            this.work = new utils.Buf16(288);
            this.lendyn = null;
            this.distdyn = null;
            this.sane = 0;
            this.back = 0;
            this.was = 0;
          }
          function inflateResetKeep(strm) {
            var state;
            if (!strm || !strm.state) {
              return Z_STREAM_ERROR;
            }
            state = strm.state;
            strm.total_in = strm.total_out = state.total = 0;
            strm.msg = "";
            if (state.wrap) {
              strm.adler = state.wrap & 1;
            }
            state.mode = HEAD;
            state.last = 0;
            state.havedict = 0;
            state.dmax = 32768;
            state.head = null;
            state.hold = 0;
            state.bits = 0;
            state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
            state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);
            state.sane = 1;
            state.back = -1;
            return Z_OK;
          }
          function inflateReset(strm) {
            var state;
            if (!strm || !strm.state) {
              return Z_STREAM_ERROR;
            }
            state = strm.state;
            state.wsize = 0;
            state.whave = 0;
            state.wnext = 0;
            return inflateResetKeep(strm);
          }
          function inflateReset2(strm, windowBits) {
            var wrap;
            var state;
            if (!strm || !strm.state) {
              return Z_STREAM_ERROR;
            }
            state = strm.state;
            if (windowBits < 0) {
              wrap = 0;
              windowBits = -windowBits;
            } else {
              wrap = (windowBits >> 4) + 1;
              if (windowBits < 48) {
                windowBits &= 15;
              }
            }
            if (windowBits && (windowBits < 8 || windowBits > 15)) {
              return Z_STREAM_ERROR;
            }
            if (state.window !== null && state.wbits !== windowBits) {
              state.window = null;
            }
            state.wrap = wrap;
            state.wbits = windowBits;
            return inflateReset(strm);
          }
          function inflateInit2(strm, windowBits) {
            var ret2;
            var state;
            if (!strm) {
              return Z_STREAM_ERROR;
            }
            state = new InflateState();
            strm.state = state;
            state.window = null;
            ret2 = inflateReset2(strm, windowBits);
            if (ret2 !== Z_OK) {
              strm.state = null;
            }
            return ret2;
          }
          function inflateInit(strm) {
            return inflateInit2(strm, DEF_WBITS);
          }
          var virgin = true;
          var lenfix, distfix;
          function fixedtables(state) {
            if (virgin) {
              var sym;
              lenfix = new utils.Buf32(512);
              distfix = new utils.Buf32(32);
              sym = 0;
              while (sym < 144) {
                state.lens[sym++] = 8;
              }
              while (sym < 256) {
                state.lens[sym++] = 9;
              }
              while (sym < 280) {
                state.lens[sym++] = 7;
              }
              while (sym < 288) {
                state.lens[sym++] = 8;
              }
              inflate_table(LENS, state.lens, 0, 288, lenfix, 0, state.work, { bits: 9 });
              sym = 0;
              while (sym < 32) {
                state.lens[sym++] = 5;
              }
              inflate_table(DISTS, state.lens, 0, 32, distfix, 0, state.work, { bits: 5 });
              virgin = false;
            }
            state.lencode = lenfix;
            state.lenbits = 9;
            state.distcode = distfix;
            state.distbits = 5;
          }
          function updatewindow(strm, src, end, copy) {
            var dist;
            var state = strm.state;
            if (state.window === null) {
              state.wsize = 1 << state.wbits;
              state.wnext = 0;
              state.whave = 0;
              state.window = new utils.Buf8(state.wsize);
            }
            if (copy >= state.wsize) {
              utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
              state.wnext = 0;
              state.whave = state.wsize;
            } else {
              dist = state.wsize - state.wnext;
              if (dist > copy) {
                dist = copy;
              }
              utils.arraySet(state.window, src, end - copy, dist, state.wnext);
              copy -= dist;
              if (copy) {
                utils.arraySet(state.window, src, end - copy, copy, 0);
                state.wnext = copy;
                state.whave = state.wsize;
              } else {
                state.wnext += dist;
                if (state.wnext === state.wsize) {
                  state.wnext = 0;
                }
                if (state.whave < state.wsize) {
                  state.whave += dist;
                }
              }
            }
            return 0;
          }
          function inflate(strm, flush) {
            var state;
            var input, output;
            var next;
            var put;
            var have, left;
            var hold;
            var bits;
            var _in, _out;
            var copy;
            var from;
            var from_source;
            var here = 0;
            var here_bits, here_op, here_val;
            var last_bits, last_op, last_val;
            var len;
            var ret2;
            var hbuf = new utils.Buf8(4);
            var opts;
            var n;
            var order = (
              /* permutation of code lengths */
              [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]
            );
            if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) {
              return Z_STREAM_ERROR;
            }
            state = strm.state;
            if (state.mode === TYPE) {
              state.mode = TYPEDO;
            }
            put = strm.next_out;
            output = strm.output;
            left = strm.avail_out;
            next = strm.next_in;
            input = strm.input;
            have = strm.avail_in;
            hold = state.hold;
            bits = state.bits;
            _in = have;
            _out = left;
            ret2 = Z_OK;
            inf_leave:
              for (; ; ) {
                switch (state.mode) {
                  case HEAD:
                    if (state.wrap === 0) {
                      state.mode = TYPEDO;
                      break;
                    }
                    while (bits < 16) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    if (state.wrap & 2 && hold === 35615) {
                      state.check = 0;
                      hbuf[0] = hold & 255;
                      hbuf[1] = hold >>> 8 & 255;
                      state.check = crc32(state.check, hbuf, 2, 0);
                      hold = 0;
                      bits = 0;
                      state.mode = FLAGS;
                      break;
                    }
                    state.flags = 0;
                    if (state.head) {
                      state.head.done = false;
                    }
                    if (!(state.wrap & 1) || /* check if zlib header allowed */
                    (((hold & 255) << 8) + (hold >> 8)) % 31) {
                      strm.msg = "incorrect header check";
                      state.mode = BAD;
                      break;
                    }
                    if ((hold & 15) !== Z_DEFLATED) {
                      strm.msg = "unknown compression method";
                      state.mode = BAD;
                      break;
                    }
                    hold >>>= 4;
                    bits -= 4;
                    len = (hold & 15) + 8;
                    if (state.wbits === 0) {
                      state.wbits = len;
                    } else if (len > state.wbits) {
                      strm.msg = "invalid window size";
                      state.mode = BAD;
                      break;
                    }
                    state.dmax = 1 << len;
                    strm.adler = state.check = 1;
                    state.mode = hold & 512 ? DICTID : TYPE;
                    hold = 0;
                    bits = 0;
                    break;
                  case FLAGS:
                    while (bits < 16) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    state.flags = hold;
                    if ((state.flags & 255) !== Z_DEFLATED) {
                      strm.msg = "unknown compression method";
                      state.mode = BAD;
                      break;
                    }
                    if (state.flags & 57344) {
                      strm.msg = "unknown header flags set";
                      state.mode = BAD;
                      break;
                    }
                    if (state.head) {
                      state.head.text = hold >> 8 & 1;
                    }
                    if (state.flags & 512) {
                      hbuf[0] = hold & 255;
                      hbuf[1] = hold >>> 8 & 255;
                      state.check = crc32(state.check, hbuf, 2, 0);
                    }
                    hold = 0;
                    bits = 0;
                    state.mode = TIME;
                  /* falls through */
                  case TIME:
                    while (bits < 32) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    if (state.head) {
                      state.head.time = hold;
                    }
                    if (state.flags & 512) {
                      hbuf[0] = hold & 255;
                      hbuf[1] = hold >>> 8 & 255;
                      hbuf[2] = hold >>> 16 & 255;
                      hbuf[3] = hold >>> 24 & 255;
                      state.check = crc32(state.check, hbuf, 4, 0);
                    }
                    hold = 0;
                    bits = 0;
                    state.mode = OS;
                  /* falls through */
                  case OS:
                    while (bits < 16) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    if (state.head) {
                      state.head.xflags = hold & 255;
                      state.head.os = hold >> 8;
                    }
                    if (state.flags & 512) {
                      hbuf[0] = hold & 255;
                      hbuf[1] = hold >>> 8 & 255;
                      state.check = crc32(state.check, hbuf, 2, 0);
                    }
                    hold = 0;
                    bits = 0;
                    state.mode = EXLEN;
                  /* falls through */
                  case EXLEN:
                    if (state.flags & 1024) {
                      while (bits < 16) {
                        if (have === 0) {
                          break inf_leave;
                        }
                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      }
                      state.length = hold;
                      if (state.head) {
                        state.head.extra_len = hold;
                      }
                      if (state.flags & 512) {
                        hbuf[0] = hold & 255;
                        hbuf[1] = hold >>> 8 & 255;
                        state.check = crc32(state.check, hbuf, 2, 0);
                      }
                      hold = 0;
                      bits = 0;
                    } else if (state.head) {
                      state.head.extra = null;
                    }
                    state.mode = EXTRA;
                  /* falls through */
                  case EXTRA:
                    if (state.flags & 1024) {
                      copy = state.length;
                      if (copy > have) {
                        copy = have;
                      }
                      if (copy) {
                        if (state.head) {
                          len = state.head.extra_len - state.length;
                          if (!state.head.extra) {
                            state.head.extra = new Array(state.head.extra_len);
                          }
                          utils.arraySet(
                            state.head.extra,
                            input,
                            next,
                            // extra field is limited to 65536 bytes
                            // - no need for additional size check
                            copy,
                            /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                            len
                          );
                        }
                        if (state.flags & 512) {
                          state.check = crc32(state.check, input, copy, next);
                        }
                        have -= copy;
                        next += copy;
                        state.length -= copy;
                      }
                      if (state.length) {
                        break inf_leave;
                      }
                    }
                    state.length = 0;
                    state.mode = NAME;
                  /* falls through */
                  case NAME:
                    if (state.flags & 2048) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      copy = 0;
                      do {
                        len = input[next + copy++];
                        if (state.head && len && state.length < 65536) {
                          state.head.name += String.fromCharCode(len);
                        }
                      } while (len && copy < have);
                      if (state.flags & 512) {
                        state.check = crc32(state.check, input, copy, next);
                      }
                      have -= copy;
                      next += copy;
                      if (len) {
                        break inf_leave;
                      }
                    } else if (state.head) {
                      state.head.name = null;
                    }
                    state.length = 0;
                    state.mode = COMMENT;
                  /* falls through */
                  case COMMENT:
                    if (state.flags & 4096) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      copy = 0;
                      do {
                        len = input[next + copy++];
                        if (state.head && len && state.length < 65536) {
                          state.head.comment += String.fromCharCode(len);
                        }
                      } while (len && copy < have);
                      if (state.flags & 512) {
                        state.check = crc32(state.check, input, copy, next);
                      }
                      have -= copy;
                      next += copy;
                      if (len) {
                        break inf_leave;
                      }
                    } else if (state.head) {
                      state.head.comment = null;
                    }
                    state.mode = HCRC;
                  /* falls through */
                  case HCRC:
                    if (state.flags & 512) {
                      while (bits < 16) {
                        if (have === 0) {
                          break inf_leave;
                        }
                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      }
                      if (hold !== (state.check & 65535)) {
                        strm.msg = "header crc mismatch";
                        state.mode = BAD;
                        break;
                      }
                      hold = 0;
                      bits = 0;
                    }
                    if (state.head) {
                      state.head.hcrc = state.flags >> 9 & 1;
                      state.head.done = true;
                    }
                    strm.adler = state.check = 0;
                    state.mode = TYPE;
                    break;
                  case DICTID:
                    while (bits < 32) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    strm.adler = state.check = zswap32(hold);
                    hold = 0;
                    bits = 0;
                    state.mode = DICT;
                  /* falls through */
                  case DICT:
                    if (state.havedict === 0) {
                      strm.next_out = put;
                      strm.avail_out = left;
                      strm.next_in = next;
                      strm.avail_in = have;
                      state.hold = hold;
                      state.bits = bits;
                      return Z_NEED_DICT;
                    }
                    strm.adler = state.check = 1;
                    state.mode = TYPE;
                  /* falls through */
                  case TYPE:
                    if (flush === Z_BLOCK || flush === Z_TREES) {
                      break inf_leave;
                    }
                  /* falls through */
                  case TYPEDO:
                    if (state.last) {
                      hold >>>= bits & 7;
                      bits -= bits & 7;
                      state.mode = CHECK;
                      break;
                    }
                    while (bits < 3) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    state.last = hold & 1;
                    hold >>>= 1;
                    bits -= 1;
                    switch (hold & 3) {
                      case 0:
                        state.mode = STORED;
                        break;
                      case 1:
                        fixedtables(state);
                        state.mode = LEN_;
                        if (flush === Z_TREES) {
                          hold >>>= 2;
                          bits -= 2;
                          break inf_leave;
                        }
                        break;
                      case 2:
                        state.mode = TABLE;
                        break;
                      case 3:
                        strm.msg = "invalid block type";
                        state.mode = BAD;
                    }
                    hold >>>= 2;
                    bits -= 2;
                    break;
                  case STORED:
                    hold >>>= bits & 7;
                    bits -= bits & 7;
                    while (bits < 32) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    if ((hold & 65535) !== (hold >>> 16 ^ 65535)) {
                      strm.msg = "invalid stored block lengths";
                      state.mode = BAD;
                      break;
                    }
                    state.length = hold & 65535;
                    hold = 0;
                    bits = 0;
                    state.mode = COPY_;
                    if (flush === Z_TREES) {
                      break inf_leave;
                    }
                  /* falls through */
                  case COPY_:
                    state.mode = COPY;
                  /* falls through */
                  case COPY:
                    copy = state.length;
                    if (copy) {
                      if (copy > have) {
                        copy = have;
                      }
                      if (copy > left) {
                        copy = left;
                      }
                      if (copy === 0) {
                        break inf_leave;
                      }
                      utils.arraySet(output, input, next, copy, put);
                      have -= copy;
                      next += copy;
                      left -= copy;
                      put += copy;
                      state.length -= copy;
                      break;
                    }
                    state.mode = TYPE;
                    break;
                  case TABLE:
                    while (bits < 14) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    state.nlen = (hold & 31) + 257;
                    hold >>>= 5;
                    bits -= 5;
                    state.ndist = (hold & 31) + 1;
                    hold >>>= 5;
                    bits -= 5;
                    state.ncode = (hold & 15) + 4;
                    hold >>>= 4;
                    bits -= 4;
                    if (state.nlen > 286 || state.ndist > 30) {
                      strm.msg = "too many length or distance symbols";
                      state.mode = BAD;
                      break;
                    }
                    state.have = 0;
                    state.mode = LENLENS;
                  /* falls through */
                  case LENLENS:
                    while (state.have < state.ncode) {
                      while (bits < 3) {
                        if (have === 0) {
                          break inf_leave;
                        }
                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      }
                      state.lens[order[state.have++]] = hold & 7;
                      hold >>>= 3;
                      bits -= 3;
                    }
                    while (state.have < 19) {
                      state.lens[order[state.have++]] = 0;
                    }
                    state.lencode = state.lendyn;
                    state.lenbits = 7;
                    opts = { bits: state.lenbits };
                    ret2 = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
                    state.lenbits = opts.bits;
                    if (ret2) {
                      strm.msg = "invalid code lengths set";
                      state.mode = BAD;
                      break;
                    }
                    state.have = 0;
                    state.mode = CODELENS;
                  /* falls through */
                  case CODELENS:
                    while (state.have < state.nlen + state.ndist) {
                      for (; ; ) {
                        here = state.lencode[hold & (1 << state.lenbits) - 1];
                        here_bits = here >>> 24;
                        here_op = here >>> 16 & 255;
                        here_val = here & 65535;
                        if (here_bits <= bits) {
                          break;
                        }
                        if (have === 0) {
                          break inf_leave;
                        }
                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      }
                      if (here_val < 16) {
                        hold >>>= here_bits;
                        bits -= here_bits;
                        state.lens[state.have++] = here_val;
                      } else {
                        if (here_val === 16) {
                          n = here_bits + 2;
                          while (bits < n) {
                            if (have === 0) {
                              break inf_leave;
                            }
                            have--;
                            hold += input[next++] << bits;
                            bits += 8;
                          }
                          hold >>>= here_bits;
                          bits -= here_bits;
                          if (state.have === 0) {
                            strm.msg = "invalid bit length repeat";
                            state.mode = BAD;
                            break;
                          }
                          len = state.lens[state.have - 1];
                          copy = 3 + (hold & 3);
                          hold >>>= 2;
                          bits -= 2;
                        } else if (here_val === 17) {
                          n = here_bits + 3;
                          while (bits < n) {
                            if (have === 0) {
                              break inf_leave;
                            }
                            have--;
                            hold += input[next++] << bits;
                            bits += 8;
                          }
                          hold >>>= here_bits;
                          bits -= here_bits;
                          len = 0;
                          copy = 3 + (hold & 7);
                          hold >>>= 3;
                          bits -= 3;
                        } else {
                          n = here_bits + 7;
                          while (bits < n) {
                            if (have === 0) {
                              break inf_leave;
                            }
                            have--;
                            hold += input[next++] << bits;
                            bits += 8;
                          }
                          hold >>>= here_bits;
                          bits -= here_bits;
                          len = 0;
                          copy = 11 + (hold & 127);
                          hold >>>= 7;
                          bits -= 7;
                        }
                        if (state.have + copy > state.nlen + state.ndist) {
                          strm.msg = "invalid bit length repeat";
                          state.mode = BAD;
                          break;
                        }
                        while (copy--) {
                          state.lens[state.have++] = len;
                        }
                      }
                    }
                    if (state.mode === BAD) {
                      break;
                    }
                    if (state.lens[256] === 0) {
                      strm.msg = "invalid code -- missing end-of-block";
                      state.mode = BAD;
                      break;
                    }
                    state.lenbits = 9;
                    opts = { bits: state.lenbits };
                    ret2 = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
                    state.lenbits = opts.bits;
                    if (ret2) {
                      strm.msg = "invalid literal/lengths set";
                      state.mode = BAD;
                      break;
                    }
                    state.distbits = 6;
                    state.distcode = state.distdyn;
                    opts = { bits: state.distbits };
                    ret2 = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
                    state.distbits = opts.bits;
                    if (ret2) {
                      strm.msg = "invalid distances set";
                      state.mode = BAD;
                      break;
                    }
                    state.mode = LEN_;
                    if (flush === Z_TREES) {
                      break inf_leave;
                    }
                  /* falls through */
                  case LEN_:
                    state.mode = LEN;
                  /* falls through */
                  case LEN:
                    if (have >= 6 && left >= 258) {
                      strm.next_out = put;
                      strm.avail_out = left;
                      strm.next_in = next;
                      strm.avail_in = have;
                      state.hold = hold;
                      state.bits = bits;
                      inflate_fast(strm, _out);
                      put = strm.next_out;
                      output = strm.output;
                      left = strm.avail_out;
                      next = strm.next_in;
                      input = strm.input;
                      have = strm.avail_in;
                      hold = state.hold;
                      bits = state.bits;
                      if (state.mode === TYPE) {
                        state.back = -1;
                      }
                      break;
                    }
                    state.back = 0;
                    for (; ; ) {
                      here = state.lencode[hold & (1 << state.lenbits) - 1];
                      here_bits = here >>> 24;
                      here_op = here >>> 16 & 255;
                      here_val = here & 65535;
                      if (here_bits <= bits) {
                        break;
                      }
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    if (here_op && (here_op & 240) === 0) {
                      last_bits = here_bits;
                      last_op = here_op;
                      last_val = here_val;
                      for (; ; ) {
                        here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                        here_bits = here >>> 24;
                        here_op = here >>> 16 & 255;
                        here_val = here & 65535;
                        if (last_bits + here_bits <= bits) {
                          break;
                        }
                        if (have === 0) {
                          break inf_leave;
                        }
                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      }
                      hold >>>= last_bits;
                      bits -= last_bits;
                      state.back += last_bits;
                    }
                    hold >>>= here_bits;
                    bits -= here_bits;
                    state.back += here_bits;
                    state.length = here_val;
                    if (here_op === 0) {
                      state.mode = LIT;
                      break;
                    }
                    if (here_op & 32) {
                      state.back = -1;
                      state.mode = TYPE;
                      break;
                    }
                    if (here_op & 64) {
                      strm.msg = "invalid literal/length code";
                      state.mode = BAD;
                      break;
                    }
                    state.extra = here_op & 15;
                    state.mode = LENEXT;
                  /* falls through */
                  case LENEXT:
                    if (state.extra) {
                      n = state.extra;
                      while (bits < n) {
                        if (have === 0) {
                          break inf_leave;
                        }
                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      }
                      state.length += hold & (1 << state.extra) - 1;
                      hold >>>= state.extra;
                      bits -= state.extra;
                      state.back += state.extra;
                    }
                    state.was = state.length;
                    state.mode = DIST;
                  /* falls through */
                  case DIST:
                    for (; ; ) {
                      here = state.distcode[hold & (1 << state.distbits) - 1];
                      here_bits = here >>> 24;
                      here_op = here >>> 16 & 255;
                      here_val = here & 65535;
                      if (here_bits <= bits) {
                        break;
                      }
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    if ((here_op & 240) === 0) {
                      last_bits = here_bits;
                      last_op = here_op;
                      last_val = here_val;
                      for (; ; ) {
                        here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                        here_bits = here >>> 24;
                        here_op = here >>> 16 & 255;
                        here_val = here & 65535;
                        if (last_bits + here_bits <= bits) {
                          break;
                        }
                        if (have === 0) {
                          break inf_leave;
                        }
                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      }
                      hold >>>= last_bits;
                      bits -= last_bits;
                      state.back += last_bits;
                    }
                    hold >>>= here_bits;
                    bits -= here_bits;
                    state.back += here_bits;
                    if (here_op & 64) {
                      strm.msg = "invalid distance code";
                      state.mode = BAD;
                      break;
                    }
                    state.offset = here_val;
                    state.extra = here_op & 15;
                    state.mode = DISTEXT;
                  /* falls through */
                  case DISTEXT:
                    if (state.extra) {
                      n = state.extra;
                      while (bits < n) {
                        if (have === 0) {
                          break inf_leave;
                        }
                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      }
                      state.offset += hold & (1 << state.extra) - 1;
                      hold >>>= state.extra;
                      bits -= state.extra;
                      state.back += state.extra;
                    }
                    if (state.offset > state.dmax) {
                      strm.msg = "invalid distance too far back";
                      state.mode = BAD;
                      break;
                    }
                    state.mode = MATCH;
                  /* falls through */
                  case MATCH:
                    if (left === 0) {
                      break inf_leave;
                    }
                    copy = _out - left;
                    if (state.offset > copy) {
                      copy = state.offset - copy;
                      if (copy > state.whave) {
                        if (state.sane) {
                          strm.msg = "invalid distance too far back";
                          state.mode = BAD;
                          break;
                        }
                      }
                      if (copy > state.wnext) {
                        copy -= state.wnext;
                        from = state.wsize - copy;
                      } else {
                        from = state.wnext - copy;
                      }
                      if (copy > state.length) {
                        copy = state.length;
                      }
                      from_source = state.window;
                    } else {
                      from_source = output;
                      from = put - state.offset;
                      copy = state.length;
                    }
                    if (copy > left) {
                      copy = left;
                    }
                    left -= copy;
                    state.length -= copy;
                    do {
                      output[put++] = from_source[from++];
                    } while (--copy);
                    if (state.length === 0) {
                      state.mode = LEN;
                    }
                    break;
                  case LIT:
                    if (left === 0) {
                      break inf_leave;
                    }
                    output[put++] = state.length;
                    left--;
                    state.mode = LEN;
                    break;
                  case CHECK:
                    if (state.wrap) {
                      while (bits < 32) {
                        if (have === 0) {
                          break inf_leave;
                        }
                        have--;
                        hold |= input[next++] << bits;
                        bits += 8;
                      }
                      _out -= left;
                      strm.total_out += _out;
                      state.total += _out;
                      if (_out) {
                        strm.adler = state.check = /*UPDATE(state.check, put - _out, _out);*/
                        state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out);
                      }
                      _out = left;
                      if ((state.flags ? hold : zswap32(hold)) !== state.check) {
                        strm.msg = "incorrect data check";
                        state.mode = BAD;
                        break;
                      }
                      hold = 0;
                      bits = 0;
                    }
                    state.mode = LENGTH;
                  /* falls through */
                  case LENGTH:
                    if (state.wrap && state.flags) {
                      while (bits < 32) {
                        if (have === 0) {
                          break inf_leave;
                        }
                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      }
                      if (hold !== (state.total & 4294967295)) {
                        strm.msg = "incorrect length check";
                        state.mode = BAD;
                        break;
                      }
                      hold = 0;
                      bits = 0;
                    }
                    state.mode = DONE;
                  /* falls through */
                  case DONE:
                    ret2 = Z_STREAM_END;
                    break inf_leave;
                  case BAD:
                    ret2 = Z_DATA_ERROR;
                    break inf_leave;
                  case MEM:
                    return Z_MEM_ERROR;
                  case SYNC:
                  /* falls through */
                  default:
                    return Z_STREAM_ERROR;
                }
              }
            strm.next_out = put;
            strm.avail_out = left;
            strm.next_in = next;
            strm.avail_in = have;
            state.hold = hold;
            state.bits = bits;
            if (state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush !== Z_FINISH)) {
              if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
                state.mode = MEM;
                return Z_MEM_ERROR;
              }
            }
            _in -= strm.avail_in;
            _out -= strm.avail_out;
            strm.total_in += _in;
            strm.total_out += _out;
            state.total += _out;
            if (state.wrap && _out) {
              strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
              state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out);
            }
            strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
            if ((_in === 0 && _out === 0 || flush === Z_FINISH) && ret2 === Z_OK) {
              ret2 = Z_BUF_ERROR;
            }
            return ret2;
          }
          function inflateEnd(strm) {
            if (!strm || !strm.state) {
              return Z_STREAM_ERROR;
            }
            var state = strm.state;
            if (state.window) {
              state.window = null;
            }
            strm.state = null;
            return Z_OK;
          }
          function inflateGetHeader(strm, head) {
            var state;
            if (!strm || !strm.state) {
              return Z_STREAM_ERROR;
            }
            state = strm.state;
            if ((state.wrap & 2) === 0) {
              return Z_STREAM_ERROR;
            }
            state.head = head;
            head.done = false;
            return Z_OK;
          }
          function inflateSetDictionary(strm, dictionary) {
            var dictLength = dictionary.length;
            var state;
            var dictid;
            var ret2;
            if (!strm || !strm.state) {
              return Z_STREAM_ERROR;
            }
            state = strm.state;
            if (state.wrap !== 0 && state.mode !== DICT) {
              return Z_STREAM_ERROR;
            }
            if (state.mode === DICT) {
              dictid = 1;
              dictid = adler32(dictid, dictionary, dictLength, 0);
              if (dictid !== state.check) {
                return Z_DATA_ERROR;
              }
            }
            ret2 = updatewindow(strm, dictionary, dictLength, dictLength);
            if (ret2) {
              state.mode = MEM;
              return Z_MEM_ERROR;
            }
            state.havedict = 1;
            return Z_OK;
          }
          exports2.inflateReset = inflateReset;
          exports2.inflateReset2 = inflateReset2;
          exports2.inflateResetKeep = inflateResetKeep;
          exports2.inflateInit = inflateInit;
          exports2.inflateInit2 = inflateInit2;
          exports2.inflate = inflate;
          exports2.inflateEnd = inflateEnd;
          exports2.inflateGetHeader = inflateGetHeader;
          exports2.inflateSetDictionary = inflateSetDictionary;
          exports2.inflateInfo = "pako inflate (from Nodeca project)";
        }, { "../utils/common": 124, "./adler32": 126, "./crc32": 128, "./inffast": 131, "./inftrees": 133 }], 133: [function(require2, module2, exports2) {
          "use strict";
          var utils = require2("../utils/common");
          var MAXBITS = 15;
          var ENOUGH_LENS = 852;
          var ENOUGH_DISTS = 592;
          var CODES = 0;
          var LENS = 1;
          var DISTS = 2;
          var lbase = [
            /* Length codes 257..285 base */
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            13,
            15,
            17,
            19,
            23,
            27,
            31,
            35,
            43,
            51,
            59,
            67,
            83,
            99,
            115,
            131,
            163,
            195,
            227,
            258,
            0,
            0
          ];
          var lext = [
            /* Length codes 257..285 extra */
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            17,
            17,
            17,
            17,
            18,
            18,
            18,
            18,
            19,
            19,
            19,
            19,
            20,
            20,
            20,
            20,
            21,
            21,
            21,
            21,
            16,
            72,
            78
          ];
          var dbase = [
            /* Distance codes 0..29 base */
            1,
            2,
            3,
            4,
            5,
            7,
            9,
            13,
            17,
            25,
            33,
            49,
            65,
            97,
            129,
            193,
            257,
            385,
            513,
            769,
            1025,
            1537,
            2049,
            3073,
            4097,
            6145,
            8193,
            12289,
            16385,
            24577,
            0,
            0
          ];
          var dext = [
            /* Distance codes 0..29 extra */
            16,
            16,
            16,
            16,
            17,
            17,
            18,
            18,
            19,
            19,
            20,
            20,
            21,
            21,
            22,
            22,
            23,
            23,
            24,
            24,
            25,
            25,
            26,
            26,
            27,
            27,
            28,
            28,
            29,
            29,
            64,
            64
          ];
          module2.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {
            var bits = opts.bits;
            var len = 0;
            var sym = 0;
            var min = 0, max = 0;
            var root = 0;
            var curr = 0;
            var drop = 0;
            var left = 0;
            var used = 0;
            var huff = 0;
            var incr;
            var fill;
            var low;
            var mask;
            var next;
            var base = null;
            var base_index = 0;
            var end;
            var count = new utils.Buf16(MAXBITS + 1);
            var offs = new utils.Buf16(MAXBITS + 1);
            var extra = null;
            var extra_index = 0;
            var here_bits, here_op, here_val;
            for (len = 0; len <= MAXBITS; len++) {
              count[len] = 0;
            }
            for (sym = 0; sym < codes; sym++) {
              count[lens[lens_index + sym]]++;
            }
            root = bits;
            for (max = MAXBITS; max >= 1; max--) {
              if (count[max] !== 0) {
                break;
              }
            }
            if (root > max) {
              root = max;
            }
            if (max === 0) {
              table[table_index++] = 1 << 24 | 64 << 16 | 0;
              table[table_index++] = 1 << 24 | 64 << 16 | 0;
              opts.bits = 1;
              return 0;
            }
            for (min = 1; min < max; min++) {
              if (count[min] !== 0) {
                break;
              }
            }
            if (root < min) {
              root = min;
            }
            left = 1;
            for (len = 1; len <= MAXBITS; len++) {
              left <<= 1;
              left -= count[len];
              if (left < 0) {
                return -1;
              }
            }
            if (left > 0 && (type === CODES || max !== 1)) {
              return -1;
            }
            offs[1] = 0;
            for (len = 1; len < MAXBITS; len++) {
              offs[len + 1] = offs[len] + count[len];
            }
            for (sym = 0; sym < codes; sym++) {
              if (lens[lens_index + sym] !== 0) {
                work[offs[lens[lens_index + sym]]++] = sym;
              }
            }
            if (type === CODES) {
              base = extra = work;
              end = 19;
            } else if (type === LENS) {
              base = lbase;
              base_index -= 257;
              extra = lext;
              extra_index -= 257;
              end = 256;
            } else {
              base = dbase;
              extra = dext;
              end = -1;
            }
            huff = 0;
            sym = 0;
            len = min;
            next = table_index;
            curr = root;
            drop = 0;
            low = -1;
            used = 1 << root;
            mask = used - 1;
            if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
              return 1;
            }
            var i = 0;
            for (; ; ) {
              i++;
              here_bits = len - drop;
              if (work[sym] < end) {
                here_op = 0;
                here_val = work[sym];
              } else if (work[sym] > end) {
                here_op = extra[extra_index + work[sym]];
                here_val = base[base_index + work[sym]];
              } else {
                here_op = 32 + 64;
                here_val = 0;
              }
              incr = 1 << len - drop;
              fill = 1 << curr;
              min = fill;
              do {
                fill -= incr;
                table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
              } while (fill !== 0);
              incr = 1 << len - 1;
              while (huff & incr) {
                incr >>= 1;
              }
              if (incr !== 0) {
                huff &= incr - 1;
                huff += incr;
              } else {
                huff = 0;
              }
              sym++;
              if (--count[len] === 0) {
                if (len === max) {
                  break;
                }
                len = lens[lens_index + work[sym]];
              }
              if (len > root && (huff & mask) !== low) {
                if (drop === 0) {
                  drop = root;
                }
                next += min;
                curr = len - drop;
                left = 1 << curr;
                while (curr + drop < max) {
                  left -= count[curr + drop];
                  if (left <= 0) {
                    break;
                  }
                  curr++;
                  left <<= 1;
                }
                used += 1 << curr;
                if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
                  return 1;
                }
                low = huff & mask;
                table[low] = root << 24 | curr << 16 | next - table_index | 0;
              }
            }
            if (huff !== 0) {
              table[next + huff] = len - drop << 24 | 64 << 16 | 0;
            }
            opts.bits = root;
            return 0;
          };
        }, { "../utils/common": 124 }], 134: [function(require2, module2, exports2) {
          "use strict";
          module2.exports = {
            2: "need dictionary",
            /* Z_NEED_DICT       2  */
            1: "stream end",
            /* Z_STREAM_END      1  */
            0: "",
            /* Z_OK              0  */
            "-1": "file error",
            /* Z_ERRNO         (-1) */
            "-2": "stream error",
            /* Z_STREAM_ERROR  (-2) */
            "-3": "data error",
            /* Z_DATA_ERROR    (-3) */
            "-4": "insufficient memory",
            /* Z_MEM_ERROR     (-4) */
            "-5": "buffer error",
            /* Z_BUF_ERROR     (-5) */
            "-6": "incompatible version"
            /* Z_VERSION_ERROR (-6) */
          };
        }, {}], 135: [function(require2, module2, exports2) {
          "use strict";
          var utils = require2("../utils/common");
          var Z_FIXED = 4;
          var Z_BINARY = 0;
          var Z_TEXT = 1;
          var Z_UNKNOWN = 2;
          function zero(buf) {
            var len = buf.length;
            while (--len >= 0) {
              buf[len] = 0;
            }
          }
          var STORED_BLOCK = 0;
          var STATIC_TREES = 1;
          var DYN_TREES = 2;
          var MIN_MATCH = 3;
          var MAX_MATCH = 258;
          var LENGTH_CODES = 29;
          var LITERALS = 256;
          var L_CODES = LITERALS + 1 + LENGTH_CODES;
          var D_CODES = 30;
          var BL_CODES = 19;
          var HEAP_SIZE = 2 * L_CODES + 1;
          var MAX_BITS = 15;
          var Buf_size = 16;
          var MAX_BL_BITS = 7;
          var END_BLOCK = 256;
          var REP_3_6 = 16;
          var REPZ_3_10 = 17;
          var REPZ_11_138 = 18;
          var extra_lbits = (
            /* extra bits for each length code */
            [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0]
          );
          var extra_dbits = (
            /* extra bits for each distance code */
            [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]
          );
          var extra_blbits = (
            /* extra bits for each bit length code */
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7]
          );
          var bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
          var DIST_CODE_LEN = 512;
          var static_ltree = new Array((L_CODES + 2) * 2);
          zero(static_ltree);
          var static_dtree = new Array(D_CODES * 2);
          zero(static_dtree);
          var _dist_code = new Array(DIST_CODE_LEN);
          zero(_dist_code);
          var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);
          zero(_length_code);
          var base_length = new Array(LENGTH_CODES);
          zero(base_length);
          var base_dist = new Array(D_CODES);
          zero(base_dist);
          function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
            this.static_tree = static_tree;
            this.extra_bits = extra_bits;
            this.extra_base = extra_base;
            this.elems = elems;
            this.max_length = max_length;
            this.has_stree = static_tree && static_tree.length;
          }
          var static_l_desc;
          var static_d_desc;
          var static_bl_desc;
          function TreeDesc(dyn_tree, stat_desc) {
            this.dyn_tree = dyn_tree;
            this.max_code = 0;
            this.stat_desc = stat_desc;
          }
          function d_code(dist) {
            return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
          }
          function put_short(s, w) {
            s.pending_buf[s.pending++] = w & 255;
            s.pending_buf[s.pending++] = w >>> 8 & 255;
          }
          function send_bits(s, value, length) {
            if (s.bi_valid > Buf_size - length) {
              s.bi_buf |= value << s.bi_valid & 65535;
              put_short(s, s.bi_buf);
              s.bi_buf = value >> Buf_size - s.bi_valid;
              s.bi_valid += length - Buf_size;
            } else {
              s.bi_buf |= value << s.bi_valid & 65535;
              s.bi_valid += length;
            }
          }
          function send_code(s, c, tree) {
            send_bits(
              s,
              tree[c * 2],
              tree[c * 2 + 1]
              /*.Len*/
            );
          }
          function bi_reverse(code, len) {
            var res = 0;
            do {
              res |= code & 1;
              code >>>= 1;
              res <<= 1;
            } while (--len > 0);
            return res >>> 1;
          }
          function bi_flush(s) {
            if (s.bi_valid === 16) {
              put_short(s, s.bi_buf);
              s.bi_buf = 0;
              s.bi_valid = 0;
            } else if (s.bi_valid >= 8) {
              s.pending_buf[s.pending++] = s.bi_buf & 255;
              s.bi_buf >>= 8;
              s.bi_valid -= 8;
            }
          }
          function gen_bitlen(s, desc) {
            var tree = desc.dyn_tree;
            var max_code = desc.max_code;
            var stree = desc.stat_desc.static_tree;
            var has_stree = desc.stat_desc.has_stree;
            var extra = desc.stat_desc.extra_bits;
            var base = desc.stat_desc.extra_base;
            var max_length = desc.stat_desc.max_length;
            var h;
            var n, m;
            var bits;
            var xbits;
            var f;
            var overflow = 0;
            for (bits = 0; bits <= MAX_BITS; bits++) {
              s.bl_count[bits] = 0;
            }
            tree[s.heap[s.heap_max] * 2 + 1] = 0;
            for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
              n = s.heap[h];
              bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;
              if (bits > max_length) {
                bits = max_length;
                overflow++;
              }
              tree[n * 2 + 1] = bits;
              if (n > max_code) {
                continue;
              }
              s.bl_count[bits]++;
              xbits = 0;
              if (n >= base) {
                xbits = extra[n - base];
              }
              f = tree[n * 2];
              s.opt_len += f * (bits + xbits);
              if (has_stree) {
                s.static_len += f * (stree[n * 2 + 1] + xbits);
              }
            }
            if (overflow === 0) {
              return;
            }
            do {
              bits = max_length - 1;
              while (s.bl_count[bits] === 0) {
                bits--;
              }
              s.bl_count[bits]--;
              s.bl_count[bits + 1] += 2;
              s.bl_count[max_length]--;
              overflow -= 2;
            } while (overflow > 0);
            for (bits = max_length; bits !== 0; bits--) {
              n = s.bl_count[bits];
              while (n !== 0) {
                m = s.heap[--h];
                if (m > max_code) {
                  continue;
                }
                if (tree[m * 2 + 1] !== bits) {
                  s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];
                  tree[m * 2 + 1] = bits;
                }
                n--;
              }
            }
          }
          function gen_codes(tree, max_code, bl_count) {
            var next_code = new Array(MAX_BITS + 1);
            var code = 0;
            var bits;
            var n;
            for (bits = 1; bits <= MAX_BITS; bits++) {
              next_code[bits] = code = code + bl_count[bits - 1] << 1;
            }
            for (n = 0; n <= max_code; n++) {
              var len = tree[n * 2 + 1];
              if (len === 0) {
                continue;
              }
              tree[n * 2] = bi_reverse(next_code[len]++, len);
            }
          }
          function tr_static_init() {
            var n;
            var bits;
            var length;
            var code;
            var dist;
            var bl_count = new Array(MAX_BITS + 1);
            length = 0;
            for (code = 0; code < LENGTH_CODES - 1; code++) {
              base_length[code] = length;
              for (n = 0; n < 1 << extra_lbits[code]; n++) {
                _length_code[length++] = code;
              }
            }
            _length_code[length - 1] = code;
            dist = 0;
            for (code = 0; code < 16; code++) {
              base_dist[code] = dist;
              for (n = 0; n < 1 << extra_dbits[code]; n++) {
                _dist_code[dist++] = code;
              }
            }
            dist >>= 7;
            for (; code < D_CODES; code++) {
              base_dist[code] = dist << 7;
              for (n = 0; n < 1 << extra_dbits[code] - 7; n++) {
                _dist_code[256 + dist++] = code;
              }
            }
            for (bits = 0; bits <= MAX_BITS; bits++) {
              bl_count[bits] = 0;
            }
            n = 0;
            while (n <= 143) {
              static_ltree[n * 2 + 1] = 8;
              n++;
              bl_count[8]++;
            }
            while (n <= 255) {
              static_ltree[n * 2 + 1] = 9;
              n++;
              bl_count[9]++;
            }
            while (n <= 279) {
              static_ltree[n * 2 + 1] = 7;
              n++;
              bl_count[7]++;
            }
            while (n <= 287) {
              static_ltree[n * 2 + 1] = 8;
              n++;
              bl_count[8]++;
            }
            gen_codes(static_ltree, L_CODES + 1, bl_count);
            for (n = 0; n < D_CODES; n++) {
              static_dtree[n * 2 + 1] = 5;
              static_dtree[n * 2] = bi_reverse(n, 5);
            }
            static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
            static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);
            static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS);
          }
          function init_block(s) {
            var n;
            for (n = 0; n < L_CODES; n++) {
              s.dyn_ltree[n * 2] = 0;
            }
            for (n = 0; n < D_CODES; n++) {
              s.dyn_dtree[n * 2] = 0;
            }
            for (n = 0; n < BL_CODES; n++) {
              s.bl_tree[n * 2] = 0;
            }
            s.dyn_ltree[END_BLOCK * 2] = 1;
            s.opt_len = s.static_len = 0;
            s.last_lit = s.matches = 0;
          }
          function bi_windup(s) {
            if (s.bi_valid > 8) {
              put_short(s, s.bi_buf);
            } else if (s.bi_valid > 0) {
              s.pending_buf[s.pending++] = s.bi_buf;
            }
            s.bi_buf = 0;
            s.bi_valid = 0;
          }
          function copy_block(s, buf, len, header) {
            bi_windup(s);
            if (header) {
              put_short(s, len);
              put_short(s, ~len);
            }
            utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
            s.pending += len;
          }
          function smaller(tree, n, m, depth) {
            var _n2 = n * 2;
            var _m2 = m * 2;
            return tree[_n2] < tree[_m2] || tree[_n2] === tree[_m2] && depth[n] <= depth[m];
          }
          function pqdownheap(s, tree, k) {
            var v = s.heap[k];
            var j = k << 1;
            while (j <= s.heap_len) {
              if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
                j++;
              }
              if (smaller(tree, v, s.heap[j], s.depth)) {
                break;
              }
              s.heap[k] = s.heap[j];
              k = j;
              j <<= 1;
            }
            s.heap[k] = v;
          }
          function compress_block(s, ltree, dtree) {
            var dist;
            var lc;
            var lx = 0;
            var code;
            var extra;
            if (s.last_lit !== 0) {
              do {
                dist = s.pending_buf[s.d_buf + lx * 2] << 8 | s.pending_buf[s.d_buf + lx * 2 + 1];
                lc = s.pending_buf[s.l_buf + lx];
                lx++;
                if (dist === 0) {
                  send_code(s, lc, ltree);
                } else {
                  code = _length_code[lc];
                  send_code(s, code + LITERALS + 1, ltree);
                  extra = extra_lbits[code];
                  if (extra !== 0) {
                    lc -= base_length[code];
                    send_bits(s, lc, extra);
                  }
                  dist--;
                  code = d_code(dist);
                  send_code(s, code, dtree);
                  extra = extra_dbits[code];
                  if (extra !== 0) {
                    dist -= base_dist[code];
                    send_bits(s, dist, extra);
                  }
                }
              } while (lx < s.last_lit);
            }
            send_code(s, END_BLOCK, ltree);
          }
          function build_tree(s, desc) {
            var tree = desc.dyn_tree;
            var stree = desc.stat_desc.static_tree;
            var has_stree = desc.stat_desc.has_stree;
            var elems = desc.stat_desc.elems;
            var n, m;
            var max_code = -1;
            var node;
            s.heap_len = 0;
            s.heap_max = HEAP_SIZE;
            for (n = 0; n < elems; n++) {
              if (tree[n * 2] !== 0) {
                s.heap[++s.heap_len] = max_code = n;
                s.depth[n] = 0;
              } else {
                tree[n * 2 + 1] = 0;
              }
            }
            while (s.heap_len < 2) {
              node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
              tree[node * 2] = 1;
              s.depth[node] = 0;
              s.opt_len--;
              if (has_stree) {
                s.static_len -= stree[node * 2 + 1];
              }
            }
            desc.max_code = max_code;
            for (n = s.heap_len >> 1; n >= 1; n--) {
              pqdownheap(s, tree, n);
            }
            node = elems;
            do {
              n = s.heap[
                1
                /*SMALLEST*/
              ];
              s.heap[
                1
                /*SMALLEST*/
              ] = s.heap[s.heap_len--];
              pqdownheap(
                s,
                tree,
                1
                /*SMALLEST*/
              );
              m = s.heap[
                1
                /*SMALLEST*/
              ];
              s.heap[--s.heap_max] = n;
              s.heap[--s.heap_max] = m;
              tree[node * 2] = tree[n * 2] + tree[m * 2];
              s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
              tree[n * 2 + 1] = tree[m * 2 + 1] = node;
              s.heap[
                1
                /*SMALLEST*/
              ] = node++;
              pqdownheap(
                s,
                tree,
                1
                /*SMALLEST*/
              );
            } while (s.heap_len >= 2);
            s.heap[--s.heap_max] = s.heap[
              1
              /*SMALLEST*/
            ];
            gen_bitlen(s, desc);
            gen_codes(tree, max_code, s.bl_count);
          }
          function scan_tree(s, tree, max_code) {
            var n;
            var prevlen = -1;
            var curlen;
            var nextlen = tree[0 * 2 + 1];
            var count = 0;
            var max_count = 7;
            var min_count = 4;
            if (nextlen === 0) {
              max_count = 138;
              min_count = 3;
            }
            tree[(max_code + 1) * 2 + 1] = 65535;
            for (n = 0; n <= max_code; n++) {
              curlen = nextlen;
              nextlen = tree[(n + 1) * 2 + 1];
              if (++count < max_count && curlen === nextlen) {
                continue;
              } else if (count < min_count) {
                s.bl_tree[curlen * 2] += count;
              } else if (curlen !== 0) {
                if (curlen !== prevlen) {
                  s.bl_tree[curlen * 2]++;
                }
                s.bl_tree[REP_3_6 * 2]++;
              } else if (count <= 10) {
                s.bl_tree[REPZ_3_10 * 2]++;
              } else {
                s.bl_tree[REPZ_11_138 * 2]++;
              }
              count = 0;
              prevlen = curlen;
              if (nextlen === 0) {
                max_count = 138;
                min_count = 3;
              } else if (curlen === nextlen) {
                max_count = 6;
                min_count = 3;
              } else {
                max_count = 7;
                min_count = 4;
              }
            }
          }
          function send_tree(s, tree, max_code) {
            var n;
            var prevlen = -1;
            var curlen;
            var nextlen = tree[0 * 2 + 1];
            var count = 0;
            var max_count = 7;
            var min_count = 4;
            if (nextlen === 0) {
              max_count = 138;
              min_count = 3;
            }
            for (n = 0; n <= max_code; n++) {
              curlen = nextlen;
              nextlen = tree[(n + 1) * 2 + 1];
              if (++count < max_count && curlen === nextlen) {
                continue;
              } else if (count < min_count) {
                do {
                  send_code(s, curlen, s.bl_tree);
                } while (--count !== 0);
              } else if (curlen !== 0) {
                if (curlen !== prevlen) {
                  send_code(s, curlen, s.bl_tree);
                  count--;
                }
                send_code(s, REP_3_6, s.bl_tree);
                send_bits(s, count - 3, 2);
              } else if (count <= 10) {
                send_code(s, REPZ_3_10, s.bl_tree);
                send_bits(s, count - 3, 3);
              } else {
                send_code(s, REPZ_11_138, s.bl_tree);
                send_bits(s, count - 11, 7);
              }
              count = 0;
              prevlen = curlen;
              if (nextlen === 0) {
                max_count = 138;
                min_count = 3;
              } else if (curlen === nextlen) {
                max_count = 6;
                min_count = 3;
              } else {
                max_count = 7;
                min_count = 4;
              }
            }
          }
          function build_bl_tree(s) {
            var max_blindex;
            scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
            scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
            build_tree(s, s.bl_desc);
            for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
              if (s.bl_tree[bl_order[max_blindex] * 2 + 1] !== 0) {
                break;
              }
            }
            s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
            return max_blindex;
          }
          function send_all_trees(s, lcodes, dcodes, blcodes) {
            var rank;
            send_bits(s, lcodes - 257, 5);
            send_bits(s, dcodes - 1, 5);
            send_bits(s, blcodes - 4, 4);
            for (rank = 0; rank < blcodes; rank++) {
              send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1], 3);
            }
            send_tree(s, s.dyn_ltree, lcodes - 1);
            send_tree(s, s.dyn_dtree, dcodes - 1);
          }
          function detect_data_type(s) {
            var black_mask = 4093624447;
            var n;
            for (n = 0; n <= 31; n++, black_mask >>>= 1) {
              if (black_mask & 1 && s.dyn_ltree[n * 2] !== 0) {
                return Z_BINARY;
              }
            }
            if (s.dyn_ltree[9 * 2] !== 0 || s.dyn_ltree[10 * 2] !== 0 || s.dyn_ltree[13 * 2] !== 0) {
              return Z_TEXT;
            }
            for (n = 32; n < LITERALS; n++) {
              if (s.dyn_ltree[n * 2] !== 0) {
                return Z_TEXT;
              }
            }
            return Z_BINARY;
          }
          var static_init_done = false;
          function _tr_init(s) {
            if (!static_init_done) {
              tr_static_init();
              static_init_done = true;
            }
            s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
            s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
            s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
            s.bi_buf = 0;
            s.bi_valid = 0;
            init_block(s);
          }
          function _tr_stored_block(s, buf, stored_len, last) {
            send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);
            copy_block(s, buf, stored_len, true);
          }
          function _tr_align(s) {
            send_bits(s, STATIC_TREES << 1, 3);
            send_code(s, END_BLOCK, static_ltree);
            bi_flush(s);
          }
          function _tr_flush_block(s, buf, stored_len, last) {
            var opt_lenb, static_lenb;
            var max_blindex = 0;
            if (s.level > 0) {
              if (s.strm.data_type === Z_UNKNOWN) {
                s.strm.data_type = detect_data_type(s);
              }
              build_tree(s, s.l_desc);
              build_tree(s, s.d_desc);
              max_blindex = build_bl_tree(s);
              opt_lenb = s.opt_len + 3 + 7 >>> 3;
              static_lenb = s.static_len + 3 + 7 >>> 3;
              if (static_lenb <= opt_lenb) {
                opt_lenb = static_lenb;
              }
            } else {
              opt_lenb = static_lenb = stored_len + 5;
            }
            if (stored_len + 4 <= opt_lenb && buf !== -1) {
              _tr_stored_block(s, buf, stored_len, last);
            } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {
              send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
              compress_block(s, static_ltree, static_dtree);
            } else {
              send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
              send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
              compress_block(s, s.dyn_ltree, s.dyn_dtree);
            }
            init_block(s);
            if (last) {
              bi_windup(s);
            }
          }
          function _tr_tally(s, dist, lc) {
            s.pending_buf[s.d_buf + s.last_lit * 2] = dist >>> 8 & 255;
            s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 255;
            s.pending_buf[s.l_buf + s.last_lit] = lc & 255;
            s.last_lit++;
            if (dist === 0) {
              s.dyn_ltree[lc * 2]++;
            } else {
              s.matches++;
              dist--;
              s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]++;
              s.dyn_dtree[d_code(dist) * 2]++;
            }
            return s.last_lit === s.lit_bufsize - 1;
          }
          exports2._tr_init = _tr_init;
          exports2._tr_stored_block = _tr_stored_block;
          exports2._tr_flush_block = _tr_flush_block;
          exports2._tr_tally = _tr_tally;
          exports2._tr_align = _tr_align;
        }, { "../utils/common": 124 }], 136: [function(require2, module2, exports2) {
          "use strict";
          function ZStream() {
            this.input = null;
            this.next_in = 0;
            this.avail_in = 0;
            this.total_in = 0;
            this.output = null;
            this.next_out = 0;
            this.avail_out = 0;
            this.total_out = 0;
            this.msg = "";
            this.state = null;
            this.data_type = 2;
            this.adler = 0;
          }
          module2.exports = ZStream;
        }, {}], 137: [function(require2, module2, exports2) {
          (function(process2) {
            function normalizeArray(parts, allowAboveRoot) {
              var up = 0;
              for (var i = parts.length - 1; i >= 0; i--) {
                var last = parts[i];
                if (last === ".") {
                  parts.splice(i, 1);
                } else if (last === "..") {
                  parts.splice(i, 1);
                  up++;
                } else if (up) {
                  parts.splice(i, 1);
                  up--;
                }
              }
              if (allowAboveRoot) {
                for (; up--; up) {
                  parts.unshift("..");
                }
              }
              return parts;
            }
            var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
            var splitPath = function(filename) {
              return splitPathRe.exec(filename).slice(1);
            };
            exports2.resolve = function() {
              var resolvedPath = "", resolvedAbsolute = false;
              for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
                var path = i >= 0 ? arguments[i] : process2.cwd();
                if (typeof path !== "string") {
                  throw new TypeError("Arguments to path.resolve must be strings");
                } else if (!path) {
                  continue;
                }
                resolvedPath = path + "/" + resolvedPath;
                resolvedAbsolute = path.charAt(0) === "/";
              }
              resolvedPath = normalizeArray(filter(resolvedPath.split("/"), function(p) {
                return !!p;
              }), !resolvedAbsolute).join("/");
              return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
            };
            exports2.normalize = function(path) {
              var isAbsolute = exports2.isAbsolute(path), trailingSlash = substr(path, -1) === "/";
              path = normalizeArray(filter(path.split("/"), function(p) {
                return !!p;
              }), !isAbsolute).join("/");
              if (!path && !isAbsolute) {
                path = ".";
              }
              if (path && trailingSlash) {
                path += "/";
              }
              return (isAbsolute ? "/" : "") + path;
            };
            exports2.isAbsolute = function(path) {
              return path.charAt(0) === "/";
            };
            exports2.join = function() {
              var paths = Array.prototype.slice.call(arguments, 0);
              return exports2.normalize(filter(paths, function(p, index) {
                if (typeof p !== "string") {
                  throw new TypeError("Arguments to path.join must be strings");
                }
                return p;
              }).join("/"));
            };
            exports2.relative = function(from, to) {
              from = exports2.resolve(from).substr(1);
              to = exports2.resolve(to).substr(1);
              function trim(arr) {
                var start = 0;
                for (; start < arr.length; start++) {
                  if (arr[start] !== "") break;
                }
                var end = arr.length - 1;
                for (; end >= 0; end--) {
                  if (arr[end] !== "") break;
                }
                if (start > end) return [];
                return arr.slice(start, end - start + 1);
              }
              var fromParts = trim(from.split("/"));
              var toParts = trim(to.split("/"));
              var length = Math.min(fromParts.length, toParts.length);
              var samePartsLength = length;
              for (var i = 0; i < length; i++) {
                if (fromParts[i] !== toParts[i]) {
                  samePartsLength = i;
                  break;
                }
              }
              var outputParts = [];
              for (var i = samePartsLength; i < fromParts.length; i++) {
                outputParts.push("..");
              }
              outputParts = outputParts.concat(toParts.slice(samePartsLength));
              return outputParts.join("/");
            };
            exports2.sep = "/";
            exports2.delimiter = ":";
            exports2.dirname = function(path) {
              var result = splitPath(path), root = result[0], dir = result[1];
              if (!root && !dir) {
                return ".";
              }
              if (dir) {
                dir = dir.substr(0, dir.length - 1);
              }
              return root + dir;
            };
            exports2.basename = function(path, ext) {
              var f = splitPath(path)[2];
              if (ext && f.substr(-1 * ext.length) === ext) {
                f = f.substr(0, f.length - ext.length);
              }
              return f;
            };
            exports2.extname = function(path) {
              return splitPath(path)[3];
            };
            function filter(xs, f) {
              if (xs.filter) return xs.filter(f);
              var res = [];
              for (var i = 0; i < xs.length; i++) {
                if (f(xs[i], i, xs)) res.push(xs[i]);
              }
              return res;
            }
            var substr = "ab".substr(-1) === "b" ? function(str, start, len) {
              return str.substr(start, len);
            } : function(str, start, len) {
              if (start < 0) start = str.length + start;
              return str.substr(start, len);
            };
          }).call(this, require2("_process"));
        }, { "_process": 139 }], 138: [function(require2, module2, exports2) {
          (function(process2) {
            "use strict";
            if (!process2.version || process2.version.indexOf("v0.") === 0 || process2.version.indexOf("v1.") === 0 && process2.version.indexOf("v1.8.") !== 0) {
              module2.exports = nextTick;
            } else {
              module2.exports = process2.nextTick;
            }
            function nextTick(fn, arg1, arg2, arg3) {
              if (typeof fn !== "function") {
                throw new TypeError('"callback" argument must be a function');
              }
              var len = arguments.length;
              var args, i;
              switch (len) {
                case 0:
                case 1:
                  return process2.nextTick(fn);
                case 2:
                  return process2.nextTick(function afterTickOne() {
                    fn.call(null, arg1);
                  });
                case 3:
                  return process2.nextTick(function afterTickTwo() {
                    fn.call(null, arg1, arg2);
                  });
                case 4:
                  return process2.nextTick(function afterTickThree() {
                    fn.call(null, arg1, arg2, arg3);
                  });
                default:
                  args = new Array(len - 1);
                  i = 0;
                  while (i < args.length) {
                    args[i++] = arguments[i];
                  }
                  return process2.nextTick(function afterTick() {
                    fn.apply(null, args);
                  });
              }
            }
          }).call(this, require2("_process"));
        }, { "_process": 139 }], 139: [function(require2, module2, exports2) {
          var process2 = module2.exports = {};
          var cachedSetTimeout;
          var cachedClearTimeout;
          function defaultSetTimout() {
            throw new Error("setTimeout has not been defined");
          }
          function defaultClearTimeout() {
            throw new Error("clearTimeout has not been defined");
          }
          (function() {
            try {
              if (typeof setTimeout === "function") {
                cachedSetTimeout = setTimeout;
              } else {
                cachedSetTimeout = defaultSetTimout;
              }
            } catch (e) {
              cachedSetTimeout = defaultSetTimout;
            }
            try {
              if (typeof clearTimeout === "function") {
                cachedClearTimeout = clearTimeout;
              } else {
                cachedClearTimeout = defaultClearTimeout;
              }
            } catch (e) {
              cachedClearTimeout = defaultClearTimeout;
            }
          })();
          function runTimeout(fun) {
            if (cachedSetTimeout === setTimeout) {
              return setTimeout(fun, 0);
            }
            if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
              cachedSetTimeout = setTimeout;
              return setTimeout(fun, 0);
            }
            try {
              return cachedSetTimeout(fun, 0);
            } catch (e) {
              try {
                return cachedSetTimeout.call(null, fun, 0);
              } catch (e2) {
                return cachedSetTimeout.call(this, fun, 0);
              }
            }
          }
          function runClearTimeout(marker) {
            if (cachedClearTimeout === clearTimeout) {
              return clearTimeout(marker);
            }
            if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
              cachedClearTimeout = clearTimeout;
              return clearTimeout(marker);
            }
            try {
              return cachedClearTimeout(marker);
            } catch (e) {
              try {
                return cachedClearTimeout.call(null, marker);
              } catch (e2) {
                return cachedClearTimeout.call(this, marker);
              }
            }
          }
          var queue = [];
          var draining = false;
          var currentQueue;
          var queueIndex = -1;
          function cleanUpNextTick() {
            if (!draining || !currentQueue) {
              return;
            }
            draining = false;
            if (currentQueue.length) {
              queue = currentQueue.concat(queue);
            } else {
              queueIndex = -1;
            }
            if (queue.length) {
              drainQueue();
            }
          }
          function drainQueue() {
            if (draining) {
              return;
            }
            var timeout = runTimeout(cleanUpNextTick);
            draining = true;
            var len = queue.length;
            while (len) {
              currentQueue = queue;
              queue = [];
              while (++queueIndex < len) {
                if (currentQueue) {
                  currentQueue[queueIndex].run();
                }
              }
              queueIndex = -1;
              len = queue.length;
            }
            currentQueue = null;
            draining = false;
            runClearTimeout(timeout);
          }
          process2.nextTick = function(fun) {
            var args = new Array(arguments.length - 1);
            if (arguments.length > 1) {
              for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
              }
            }
            queue.push(new Item(fun, args));
            if (queue.length === 1 && !draining) {
              runTimeout(drainQueue);
            }
          };
          function Item(fun, array) {
            this.fun = fun;
            this.array = array;
          }
          Item.prototype.run = function() {
            this.fun.apply(null, this.array);
          };
          process2.title = "browser";
          process2.browser = true;
          process2.env = {};
          process2.argv = [];
          process2.version = "";
          process2.versions = {};
          function noop() {
          }
          process2.on = noop;
          process2.addListener = noop;
          process2.once = noop;
          process2.off = noop;
          process2.removeListener = noop;
          process2.removeAllListeners = noop;
          process2.emit = noop;
          process2.binding = function(name) {
            throw new Error("process.binding is not supported");
          };
          process2.cwd = function() {
            return "/";
          };
          process2.chdir = function(dir) {
            throw new Error("process.chdir is not supported");
          };
          process2.umask = function() {
            return 0;
          };
        }, {}], 140: [function(require2, module2, exports2) {
          module2.exports = require2("./lib/_stream_duplex.js");
        }, { "./lib/_stream_duplex.js": 141 }], 141: [function(require2, module2, exports2) {
          "use strict";
          var objectKeys = Object.keys || function(obj2) {
            var keys2 = [];
            for (var key in obj2) {
              keys2.push(key);
            }
            return keys2;
          };
          module2.exports = Duplex;
          var processNextTick = require2("process-nextick-args");
          var util = require2("core-util-is");
          util.inherits = require2("inherits");
          var Readable = require2("./_stream_readable");
          var Writable = require2("./_stream_writable");
          util.inherits(Duplex, Readable);
          var keys = objectKeys(Writable.prototype);
          for (var v = 0; v < keys.length; v++) {
            var method = keys[v];
            if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
          }
          function Duplex(options2) {
            if (!(this instanceof Duplex)) return new Duplex(options2);
            Readable.call(this, options2);
            Writable.call(this, options2);
            if (options2 && options2.readable === false) this.readable = false;
            if (options2 && options2.writable === false) this.writable = false;
            this.allowHalfOpen = true;
            if (options2 && options2.allowHalfOpen === false) this.allowHalfOpen = false;
            this.once("end", onend);
          }
          function onend() {
            if (this.allowHalfOpen || this._writableState.ended) return;
            processNextTick(onEndNT, this);
          }
          function onEndNT(self2) {
            self2.end();
          }
          function forEach(xs, f) {
            for (var i = 0, l2 = xs.length; i < l2; i++) {
              f(xs[i], i);
            }
          }
        }, { "./_stream_readable": 143, "./_stream_writable": 145, "core-util-is": 78, "inherits": 83, "process-nextick-args": 138 }], 142: [function(require2, module2, exports2) {
          "use strict";
          module2.exports = PassThrough;
          var Transform = require2("./_stream_transform");
          var util = require2("core-util-is");
          util.inherits = require2("inherits");
          util.inherits(PassThrough, Transform);
          function PassThrough(options2) {
            if (!(this instanceof PassThrough)) return new PassThrough(options2);
            Transform.call(this, options2);
          }
          PassThrough.prototype._transform = function(chunk, encoding, cb) {
            cb(null, chunk);
          };
        }, { "./_stream_transform": 144, "core-util-is": 78, "inherits": 83 }], 143: [function(require2, module2, exports2) {
          (function(process2) {
            "use strict";
            module2.exports = Readable;
            var processNextTick = require2("process-nextick-args");
            var isArray = require2("isarray");
            var Duplex;
            Readable.ReadableState = ReadableState;
            var EE = require2("events").EventEmitter;
            var EElistenerCount = function(emitter, type) {
              return emitter.listeners(type).length;
            };
            var Stream;
            (function() {
              try {
                Stream = require2("stream");
              } catch (_) {
              } finally {
                if (!Stream) Stream = require2("events").EventEmitter;
              }
            })();
            var Buffer3 = require2("buffer").Buffer;
            var bufferShim = require2("buffer-shims");
            var util = require2("core-util-is");
            util.inherits = require2("inherits");
            var debugUtil = require2("util");
            var debug = void 0;
            if (debugUtil && debugUtil.debuglog) {
              debug = debugUtil.debuglog("stream");
            } else {
              debug = function() {
              };
            }
            var BufferList = require2("./internal/streams/BufferList");
            var StringDecoder;
            util.inherits(Readable, Stream);
            function prependListener(emitter, event, fn) {
              if (typeof emitter.prependListener === "function") {
                return emitter.prependListener(event, fn);
              } else {
                if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
                else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);
                else emitter._events[event] = [fn, emitter._events[event]];
              }
            }
            function ReadableState(options2, stream) {
              Duplex = Duplex || require2("./_stream_duplex");
              options2 = options2 || {};
              this.objectMode = !!options2.objectMode;
              if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options2.readableObjectMode;
              var hwm = options2.highWaterMark;
              var defaultHwm = this.objectMode ? 16 : 16 * 1024;
              this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
              this.highWaterMark = ~~this.highWaterMark;
              this.buffer = new BufferList();
              this.length = 0;
              this.pipes = null;
              this.pipesCount = 0;
              this.flowing = null;
              this.ended = false;
              this.endEmitted = false;
              this.reading = false;
              this.sync = true;
              this.needReadable = false;
              this.emittedReadable = false;
              this.readableListening = false;
              this.resumeScheduled = false;
              this.defaultEncoding = options2.defaultEncoding || "utf8";
              this.ranOut = false;
              this.awaitDrain = 0;
              this.readingMore = false;
              this.decoder = null;
              this.encoding = null;
              if (options2.encoding) {
                if (!StringDecoder) StringDecoder = require2("string_decoder/").StringDecoder;
                this.decoder = new StringDecoder(options2.encoding);
                this.encoding = options2.encoding;
              }
            }
            function Readable(options2) {
              Duplex = Duplex || require2("./_stream_duplex");
              if (!(this instanceof Readable)) return new Readable(options2);
              this._readableState = new ReadableState(options2, this);
              this.readable = true;
              if (options2 && typeof options2.read === "function") this._read = options2.read;
              Stream.call(this);
            }
            Readable.prototype.push = function(chunk, encoding) {
              var state = this._readableState;
              if (!state.objectMode && typeof chunk === "string") {
                encoding = encoding || state.defaultEncoding;
                if (encoding !== state.encoding) {
                  chunk = bufferShim.from(chunk, encoding);
                  encoding = "";
                }
              }
              return readableAddChunk(this, state, chunk, encoding, false);
            };
            Readable.prototype.unshift = function(chunk) {
              var state = this._readableState;
              return readableAddChunk(this, state, chunk, "", true);
            };
            Readable.prototype.isPaused = function() {
              return this._readableState.flowing === false;
            };
            function readableAddChunk(stream, state, chunk, encoding, addToFront) {
              var er = chunkInvalid(state, chunk);
              if (er) {
                stream.emit("error", er);
              } else if (chunk === null) {
                state.reading = false;
                onEofChunk(stream, state);
              } else if (state.objectMode || chunk && chunk.length > 0) {
                if (state.ended && !addToFront) {
                  var e = new Error("stream.push() after EOF");
                  stream.emit("error", e);
                } else if (state.endEmitted && addToFront) {
                  var _e = new Error("stream.unshift() after end event");
                  stream.emit("error", _e);
                } else {
                  var skipAdd;
                  if (state.decoder && !addToFront && !encoding) {
                    chunk = state.decoder.write(chunk);
                    skipAdd = !state.objectMode && chunk.length === 0;
                  }
                  if (!addToFront) state.reading = false;
                  if (!skipAdd) {
                    if (state.flowing && state.length === 0 && !state.sync) {
                      stream.emit("data", chunk);
                      stream.read(0);
                    } else {
                      state.length += state.objectMode ? 1 : chunk.length;
                      if (addToFront) state.buffer.unshift(chunk);
                      else state.buffer.push(chunk);
                      if (state.needReadable) emitReadable(stream);
                    }
                  }
                  maybeReadMore(stream, state);
                }
              } else if (!addToFront) {
                state.reading = false;
              }
              return needMoreData(state);
            }
            function needMoreData(state) {
              return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
            }
            Readable.prototype.setEncoding = function(enc) {
              if (!StringDecoder) StringDecoder = require2("string_decoder/").StringDecoder;
              this._readableState.decoder = new StringDecoder(enc);
              this._readableState.encoding = enc;
              return this;
            };
            var MAX_HWM = 8388608;
            function computeNewHighWaterMark(n) {
              if (n >= MAX_HWM) {
                n = MAX_HWM;
              } else {
                n--;
                n |= n >>> 1;
                n |= n >>> 2;
                n |= n >>> 4;
                n |= n >>> 8;
                n |= n >>> 16;
                n++;
              }
              return n;
            }
            function howMuchToRead(n, state) {
              if (n <= 0 || state.length === 0 && state.ended) return 0;
              if (state.objectMode) return 1;
              if (n !== n) {
                if (state.flowing && state.length) return state.buffer.head.data.length;
                else return state.length;
              }
              if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
              if (n <= state.length) return n;
              if (!state.ended) {
                state.needReadable = true;
                return 0;
              }
              return state.length;
            }
            Readable.prototype.read = function(n) {
              debug("read", n);
              n = parseInt(n, 10);
              var state = this._readableState;
              var nOrig = n;
              if (n !== 0) state.emittedReadable = false;
              if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
                debug("read: emitReadable", state.length, state.ended);
                if (state.length === 0 && state.ended) endReadable(this);
                else emitReadable(this);
                return null;
              }
              n = howMuchToRead(n, state);
              if (n === 0 && state.ended) {
                if (state.length === 0) endReadable(this);
                return null;
              }
              var doRead = state.needReadable;
              debug("need readable", doRead);
              if (state.length === 0 || state.length - n < state.highWaterMark) {
                doRead = true;
                debug("length less than watermark", doRead);
              }
              if (state.ended || state.reading) {
                doRead = false;
                debug("reading or ended", doRead);
              } else if (doRead) {
                debug("do read");
                state.reading = true;
                state.sync = true;
                if (state.length === 0) state.needReadable = true;
                this._read(state.highWaterMark);
                state.sync = false;
                if (!state.reading) n = howMuchToRead(nOrig, state);
              }
              var ret2;
              if (n > 0) ret2 = fromList(n, state);
              else ret2 = null;
              if (ret2 === null) {
                state.needReadable = true;
                n = 0;
              } else {
                state.length -= n;
              }
              if (state.length === 0) {
                if (!state.ended) state.needReadable = true;
                if (nOrig !== n && state.ended) endReadable(this);
              }
              if (ret2 !== null) this.emit("data", ret2);
              return ret2;
            };
            function chunkInvalid(state, chunk) {
              var er = null;
              if (!Buffer3.isBuffer(chunk) && typeof chunk !== "string" && chunk !== null && chunk !== void 0 && !state.objectMode) {
                er = new TypeError("Invalid non-string/buffer chunk");
              }
              return er;
            }
            function onEofChunk(stream, state) {
              if (state.ended) return;
              if (state.decoder) {
                var chunk = state.decoder.end();
                if (chunk && chunk.length) {
                  state.buffer.push(chunk);
                  state.length += state.objectMode ? 1 : chunk.length;
                }
              }
              state.ended = true;
              emitReadable(stream);
            }
            function emitReadable(stream) {
              var state = stream._readableState;
              state.needReadable = false;
              if (!state.emittedReadable) {
                debug("emitReadable", state.flowing);
                state.emittedReadable = true;
                if (state.sync) processNextTick(emitReadable_, stream);
                else emitReadable_(stream);
              }
            }
            function emitReadable_(stream) {
              debug("emit readable");
              stream.emit("readable");
              flow(stream);
            }
            function maybeReadMore(stream, state) {
              if (!state.readingMore) {
                state.readingMore = true;
                processNextTick(maybeReadMore_, stream, state);
              }
            }
            function maybeReadMore_(stream, state) {
              var len = state.length;
              while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
                debug("maybeReadMore read 0");
                stream.read(0);
                if (len === state.length)
                  break;
                else len = state.length;
              }
              state.readingMore = false;
            }
            Readable.prototype._read = function(n) {
              this.emit("error", new Error("_read() is not implemented"));
            };
            Readable.prototype.pipe = function(dest, pipeOpts) {
              var src = this;
              var state = this._readableState;
              switch (state.pipesCount) {
                case 0:
                  state.pipes = dest;
                  break;
                case 1:
                  state.pipes = [state.pipes, dest];
                  break;
                default:
                  state.pipes.push(dest);
                  break;
              }
              state.pipesCount += 1;
              debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
              var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process2.stdout && dest !== process2.stderr;
              var endFn = doEnd ? onend : cleanup;
              if (state.endEmitted) processNextTick(endFn);
              else src.once("end", endFn);
              dest.on("unpipe", onunpipe);
              function onunpipe(readable) {
                debug("onunpipe");
                if (readable === src) {
                  cleanup();
                }
              }
              function onend() {
                debug("onend");
                dest.end();
              }
              var ondrain = pipeOnDrain(src);
              dest.on("drain", ondrain);
              var cleanedUp = false;
              function cleanup() {
                debug("cleanup");
                dest.removeListener("close", onclose);
                dest.removeListener("finish", onfinish);
                dest.removeListener("drain", ondrain);
                dest.removeListener("error", onerror);
                dest.removeListener("unpipe", onunpipe);
                src.removeListener("end", onend);
                src.removeListener("end", cleanup);
                src.removeListener("data", ondata);
                cleanedUp = true;
                if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
              }
              var increasedAwaitDrain = false;
              src.on("data", ondata);
              function ondata(chunk) {
                debug("ondata");
                increasedAwaitDrain = false;
                var ret2 = dest.write(chunk);
                if (false === ret2 && !increasedAwaitDrain) {
                  if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                    debug("false write response, pause", src._readableState.awaitDrain);
                    src._readableState.awaitDrain++;
                    increasedAwaitDrain = true;
                  }
                  src.pause();
                }
              }
              function onerror(er) {
                debug("onerror", er);
                unpipe();
                dest.removeListener("error", onerror);
                if (EElistenerCount(dest, "error") === 0) dest.emit("error", er);
              }
              prependListener(dest, "error", onerror);
              function onclose() {
                dest.removeListener("finish", onfinish);
                unpipe();
              }
              dest.once("close", onclose);
              function onfinish() {
                debug("onfinish");
                dest.removeListener("close", onclose);
                unpipe();
              }
              dest.once("finish", onfinish);
              function unpipe() {
                debug("unpipe");
                src.unpipe(dest);
              }
              dest.emit("pipe", src);
              if (!state.flowing) {
                debug("pipe resume");
                src.resume();
              }
              return dest;
            };
            function pipeOnDrain(src) {
              return function() {
                var state = src._readableState;
                debug("pipeOnDrain", state.awaitDrain);
                if (state.awaitDrain) state.awaitDrain--;
                if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
                  state.flowing = true;
                  flow(src);
                }
              };
            }
            Readable.prototype.unpipe = function(dest) {
              var state = this._readableState;
              if (state.pipesCount === 0) return this;
              if (state.pipesCount === 1) {
                if (dest && dest !== state.pipes) return this;
                if (!dest) dest = state.pipes;
                state.pipes = null;
                state.pipesCount = 0;
                state.flowing = false;
                if (dest) dest.emit("unpipe", this);
                return this;
              }
              if (!dest) {
                var dests = state.pipes;
                var len = state.pipesCount;
                state.pipes = null;
                state.pipesCount = 0;
                state.flowing = false;
                for (var i = 0; i < len; i++) {
                  dests[i].emit("unpipe", this);
                }
                return this;
              }
              var index = indexOf(state.pipes, dest);
              if (index === -1) return this;
              state.pipes.splice(index, 1);
              state.pipesCount -= 1;
              if (state.pipesCount === 1) state.pipes = state.pipes[0];
              dest.emit("unpipe", this);
              return this;
            };
            Readable.prototype.on = function(ev, fn) {
              var res = Stream.prototype.on.call(this, ev, fn);
              if (ev === "data") {
                if (this._readableState.flowing !== false) this.resume();
              } else if (ev === "readable") {
                var state = this._readableState;
                if (!state.endEmitted && !state.readableListening) {
                  state.readableListening = state.needReadable = true;
                  state.emittedReadable = false;
                  if (!state.reading) {
                    processNextTick(nReadingNextTick, this);
                  } else if (state.length) {
                    emitReadable(this, state);
                  }
                }
              }
              return res;
            };
            Readable.prototype.addListener = Readable.prototype.on;
            function nReadingNextTick(self2) {
              debug("readable nexttick read 0");
              self2.read(0);
            }
            Readable.prototype.resume = function() {
              var state = this._readableState;
              if (!state.flowing) {
                debug("resume");
                state.flowing = true;
                resume(this, state);
              }
              return this;
            };
            function resume(stream, state) {
              if (!state.resumeScheduled) {
                state.resumeScheduled = true;
                processNextTick(resume_, stream, state);
              }
            }
            function resume_(stream, state) {
              if (!state.reading) {
                debug("resume read 0");
                stream.read(0);
              }
              state.resumeScheduled = false;
              state.awaitDrain = 0;
              stream.emit("resume");
              flow(stream);
              if (state.flowing && !state.reading) stream.read(0);
            }
            Readable.prototype.pause = function() {
              debug("call pause flowing=%j", this._readableState.flowing);
              if (false !== this._readableState.flowing) {
                debug("pause");
                this._readableState.flowing = false;
                this.emit("pause");
              }
              return this;
            };
            function flow(stream) {
              var state = stream._readableState;
              debug("flow", state.flowing);
              while (state.flowing && stream.read() !== null) {
              }
            }
            Readable.prototype.wrap = function(stream) {
              var state = this._readableState;
              var paused = false;
              var self2 = this;
              stream.on("end", function() {
                debug("wrapped end");
                if (state.decoder && !state.ended) {
                  var chunk = state.decoder.end();
                  if (chunk && chunk.length) self2.push(chunk);
                }
                self2.push(null);
              });
              stream.on("data", function(chunk) {
                debug("wrapped data");
                if (state.decoder) chunk = state.decoder.write(chunk);
                if (state.objectMode && (chunk === null || chunk === void 0)) return;
                else if (!state.objectMode && (!chunk || !chunk.length)) return;
                var ret2 = self2.push(chunk);
                if (!ret2) {
                  paused = true;
                  stream.pause();
                }
              });
              for (var i in stream) {
                if (this[i] === void 0 && typeof stream[i] === "function") {
                  this[i] = /* @__PURE__ */ function(method) {
                    return function() {
                      return stream[method].apply(stream, arguments);
                    };
                  }(i);
                }
              }
              var events = ["error", "close", "destroy", "pause", "resume"];
              forEach(events, function(ev) {
                stream.on(ev, self2.emit.bind(self2, ev));
              });
              self2._read = function(n) {
                debug("wrapped _read", n);
                if (paused) {
                  paused = false;
                  stream.resume();
                }
              };
              return self2;
            };
            Readable._fromList = fromList;
            function fromList(n, state) {
              if (state.length === 0) return null;
              var ret2;
              if (state.objectMode) ret2 = state.buffer.shift();
              else if (!n || n >= state.length) {
                if (state.decoder) ret2 = state.buffer.join("");
                else if (state.buffer.length === 1) ret2 = state.buffer.head.data;
                else ret2 = state.buffer.concat(state.length);
                state.buffer.clear();
              } else {
                ret2 = fromListPartial(n, state.buffer, state.decoder);
              }
              return ret2;
            }
            function fromListPartial(n, list, hasStrings) {
              var ret2;
              if (n < list.head.data.length) {
                ret2 = list.head.data.slice(0, n);
                list.head.data = list.head.data.slice(n);
              } else if (n === list.head.data.length) {
                ret2 = list.shift();
              } else {
                ret2 = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
              }
              return ret2;
            }
            function copyFromBufferString(n, list) {
              var p = list.head;
              var c = 1;
              var ret2 = p.data;
              n -= ret2.length;
              while (p = p.next) {
                var str = p.data;
                var nb = n > str.length ? str.length : n;
                if (nb === str.length) ret2 += str;
                else ret2 += str.slice(0, n);
                n -= nb;
                if (n === 0) {
                  if (nb === str.length) {
                    ++c;
                    if (p.next) list.head = p.next;
                    else list.head = list.tail = null;
                  } else {
                    list.head = p;
                    p.data = str.slice(nb);
                  }
                  break;
                }
                ++c;
              }
              list.length -= c;
              return ret2;
            }
            function copyFromBuffer(n, list) {
              var ret2 = bufferShim.allocUnsafe(n);
              var p = list.head;
              var c = 1;
              p.data.copy(ret2);
              n -= p.data.length;
              while (p = p.next) {
                var buf = p.data;
                var nb = n > buf.length ? buf.length : n;
                buf.copy(ret2, ret2.length - n, 0, nb);
                n -= nb;
                if (n === 0) {
                  if (nb === buf.length) {
                    ++c;
                    if (p.next) list.head = p.next;
                    else list.head = list.tail = null;
                  } else {
                    list.head = p;
                    p.data = buf.slice(nb);
                  }
                  break;
                }
                ++c;
              }
              list.length -= c;
              return ret2;
            }
            function endReadable(stream) {
              var state = stream._readableState;
              if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');
              if (!state.endEmitted) {
                state.ended = true;
                processNextTick(endReadableNT, state, stream);
              }
            }
            function endReadableNT(state, stream) {
              if (!state.endEmitted && state.length === 0) {
                state.endEmitted = true;
                stream.readable = false;
                stream.emit("end");
              }
            }
            function forEach(xs, f) {
              for (var i = 0, l2 = xs.length; i < l2; i++) {
                f(xs[i], i);
              }
            }
            function indexOf(xs, x) {
              for (var i = 0, l2 = xs.length; i < l2; i++) {
                if (xs[i] === x) return i;
              }
              return -1;
            }
          }).call(this, require2("_process"));
        }, { "./_stream_duplex": 141, "./internal/streams/BufferList": 146, "_process": 139, "buffer": 77, "buffer-shims": 76, "core-util-is": 78, "events": 81, "inherits": 83, "isarray": 85, "process-nextick-args": 138, "string_decoder/": 153, "util": 75 }], 144: [function(require2, module2, exports2) {
          "use strict";
          module2.exports = Transform;
          var Duplex = require2("./_stream_duplex");
          var util = require2("core-util-is");
          util.inherits = require2("inherits");
          util.inherits(Transform, Duplex);
          function TransformState(stream) {
            this.afterTransform = function(er, data) {
              return afterTransform(stream, er, data);
            };
            this.needTransform = false;
            this.transforming = false;
            this.writecb = null;
            this.writechunk = null;
            this.writeencoding = null;
          }
          function afterTransform(stream, er, data) {
            var ts = stream._transformState;
            ts.transforming = false;
            var cb = ts.writecb;
            if (!cb) return stream.emit("error", new Error("no writecb in Transform class"));
            ts.writechunk = null;
            ts.writecb = null;
            if (data !== null && data !== void 0) stream.push(data);
            cb(er);
            var rs = stream._readableState;
            rs.reading = false;
            if (rs.needReadable || rs.length < rs.highWaterMark) {
              stream._read(rs.highWaterMark);
            }
          }
          function Transform(options2) {
            if (!(this instanceof Transform)) return new Transform(options2);
            Duplex.call(this, options2);
            this._transformState = new TransformState(this);
            var stream = this;
            this._readableState.needReadable = true;
            this._readableState.sync = false;
            if (options2) {
              if (typeof options2.transform === "function") this._transform = options2.transform;
              if (typeof options2.flush === "function") this._flush = options2.flush;
            }
            this.once("prefinish", function() {
              if (typeof this._flush === "function") this._flush(function(er, data) {
                done(stream, er, data);
              });
              else done(stream);
            });
          }
          Transform.prototype.push = function(chunk, encoding) {
            this._transformState.needTransform = false;
            return Duplex.prototype.push.call(this, chunk, encoding);
          };
          Transform.prototype._transform = function(chunk, encoding, cb) {
            throw new Error("_transform() is not implemented");
          };
          Transform.prototype._write = function(chunk, encoding, cb) {
            var ts = this._transformState;
            ts.writecb = cb;
            ts.writechunk = chunk;
            ts.writeencoding = encoding;
            if (!ts.transforming) {
              var rs = this._readableState;
              if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
            }
          };
          Transform.prototype._read = function(n) {
            var ts = this._transformState;
            if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
              ts.transforming = true;
              this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
            } else {
              ts.needTransform = true;
            }
          };
          function done(stream, er, data) {
            if (er) return stream.emit("error", er);
            if (data !== null && data !== void 0) stream.push(data);
            var ws = stream._writableState;
            var ts = stream._transformState;
            if (ws.length) throw new Error("Calling transform done when ws.length != 0");
            if (ts.transforming) throw new Error("Calling transform done when still transforming");
            return stream.push(null);
          }
        }, { "./_stream_duplex": 141, "core-util-is": 78, "inherits": 83 }], 145: [function(require2, module2, exports2) {
          (function(process2) {
            "use strict";
            module2.exports = Writable;
            var processNextTick = require2("process-nextick-args");
            var asyncWrite = !process2.browser && ["v0.10", "v0.9."].indexOf(process2.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
            var Duplex;
            Writable.WritableState = WritableState;
            var util = require2("core-util-is");
            util.inherits = require2("inherits");
            var internalUtil = {
              deprecate: require2("util-deprecate")
            };
            var Stream;
            (function() {
              try {
                Stream = require2("stream");
              } catch (_) {
              } finally {
                if (!Stream) Stream = require2("events").EventEmitter;
              }
            })();
            var Buffer3 = require2("buffer").Buffer;
            var bufferShim = require2("buffer-shims");
            util.inherits(Writable, Stream);
            function nop() {
            }
            function WriteReq(chunk, encoding, cb) {
              this.chunk = chunk;
              this.encoding = encoding;
              this.callback = cb;
              this.next = null;
            }
            function WritableState(options2, stream) {
              Duplex = Duplex || require2("./_stream_duplex");
              options2 = options2 || {};
              this.objectMode = !!options2.objectMode;
              if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options2.writableObjectMode;
              var hwm = options2.highWaterMark;
              var defaultHwm = this.objectMode ? 16 : 16 * 1024;
              this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
              this.highWaterMark = ~~this.highWaterMark;
              this.needDrain = false;
              this.ending = false;
              this.ended = false;
              this.finished = false;
              var noDecode = options2.decodeStrings === false;
              this.decodeStrings = !noDecode;
              this.defaultEncoding = options2.defaultEncoding || "utf8";
              this.length = 0;
              this.writing = false;
              this.corked = 0;
              this.sync = true;
              this.bufferProcessing = false;
              this.onwrite = function(er) {
                onwrite(stream, er);
              };
              this.writecb = null;
              this.writelen = 0;
              this.bufferedRequest = null;
              this.lastBufferedRequest = null;
              this.pendingcb = 0;
              this.prefinished = false;
              this.errorEmitted = false;
              this.bufferedRequestCount = 0;
              this.corkedRequestsFree = new CorkedRequest(this);
            }
            WritableState.prototype.getBuffer = function getBuffer() {
              var current = this.bufferedRequest;
              var out = [];
              while (current) {
                out.push(current);
                current = current.next;
              }
              return out;
            };
            (function() {
              try {
                Object.defineProperty(WritableState.prototype, "buffer", {
                  get: internalUtil.deprecate(function() {
                    return this.getBuffer();
                  }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.")
                });
              } catch (_) {
              }
            })();
            var realHasInstance;
            if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
              realHasInstance = Function.prototype[Symbol.hasInstance];
              Object.defineProperty(Writable, Symbol.hasInstance, {
                value: function(object) {
                  if (realHasInstance.call(this, object)) return true;
                  return object && object._writableState instanceof WritableState;
                }
              });
            } else {
              realHasInstance = function(object) {
                return object instanceof this;
              };
            }
            function Writable(options2) {
              Duplex = Duplex || require2("./_stream_duplex");
              if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
                return new Writable(options2);
              }
              this._writableState = new WritableState(options2, this);
              this.writable = true;
              if (options2) {
                if (typeof options2.write === "function") this._write = options2.write;
                if (typeof options2.writev === "function") this._writev = options2.writev;
              }
              Stream.call(this);
            }
            Writable.prototype.pipe = function() {
              this.emit("error", new Error("Cannot pipe, not readable"));
            };
            function writeAfterEnd(stream, cb) {
              var er = new Error("write after end");
              stream.emit("error", er);
              processNextTick(cb, er);
            }
            function validChunk(stream, state, chunk, cb) {
              var valid = true;
              var er = false;
              if (chunk === null) {
                er = new TypeError("May not write null values to stream");
              } else if (typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
                er = new TypeError("Invalid non-string/buffer chunk");
              }
              if (er) {
                stream.emit("error", er);
                processNextTick(cb, er);
                valid = false;
              }
              return valid;
            }
            Writable.prototype.write = function(chunk, encoding, cb) {
              var state = this._writableState;
              var ret2 = false;
              var isBuf = Buffer3.isBuffer(chunk);
              if (typeof encoding === "function") {
                cb = encoding;
                encoding = null;
              }
              if (isBuf) encoding = "buffer";
              else if (!encoding) encoding = state.defaultEncoding;
              if (typeof cb !== "function") cb = nop;
              if (state.ended) writeAfterEnd(this, cb);
              else if (isBuf || validChunk(this, state, chunk, cb)) {
                state.pendingcb++;
                ret2 = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
              }
              return ret2;
            };
            Writable.prototype.cork = function() {
              var state = this._writableState;
              state.corked++;
            };
            Writable.prototype.uncork = function() {
              var state = this._writableState;
              if (state.corked) {
                state.corked--;
                if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
              }
            };
            Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
              if (typeof encoding === "string") encoding = encoding.toLowerCase();
              if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1)) throw new TypeError("Unknown encoding: " + encoding);
              this._writableState.defaultEncoding = encoding;
              return this;
            };
            function decodeChunk(state, chunk, encoding) {
              if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
                chunk = bufferShim.from(chunk, encoding);
              }
              return chunk;
            }
            function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
              if (!isBuf) {
                chunk = decodeChunk(state, chunk, encoding);
                if (Buffer3.isBuffer(chunk)) encoding = "buffer";
              }
              var len = state.objectMode ? 1 : chunk.length;
              state.length += len;
              var ret2 = state.length < state.highWaterMark;
              if (!ret2) state.needDrain = true;
              if (state.writing || state.corked) {
                var last = state.lastBufferedRequest;
                state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
                if (last) {
                  last.next = state.lastBufferedRequest;
                } else {
                  state.bufferedRequest = state.lastBufferedRequest;
                }
                state.bufferedRequestCount += 1;
              } else {
                doWrite(stream, state, false, len, chunk, encoding, cb);
              }
              return ret2;
            }
            function doWrite(stream, state, writev, len, chunk, encoding, cb) {
              state.writelen = len;
              state.writecb = cb;
              state.writing = true;
              state.sync = true;
              if (writev) stream._writev(chunk, state.onwrite);
              else stream._write(chunk, encoding, state.onwrite);
              state.sync = false;
            }
            function onwriteError(stream, state, sync, er, cb) {
              --state.pendingcb;
              if (sync) processNextTick(cb, er);
              else cb(er);
              stream._writableState.errorEmitted = true;
              stream.emit("error", er);
            }
            function onwriteStateUpdate(state) {
              state.writing = false;
              state.writecb = null;
              state.length -= state.writelen;
              state.writelen = 0;
            }
            function onwrite(stream, er) {
              var state = stream._writableState;
              var sync = state.sync;
              var cb = state.writecb;
              onwriteStateUpdate(state);
              if (er) onwriteError(stream, state, sync, er, cb);
              else {
                var finished = needFinish(state);
                if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                  clearBuffer(stream, state);
                }
                if (sync) {
                  asyncWrite(afterWrite, stream, state, finished, cb);
                } else {
                  afterWrite(stream, state, finished, cb);
                }
              }
            }
            function afterWrite(stream, state, finished, cb) {
              if (!finished) onwriteDrain(stream, state);
              state.pendingcb--;
              cb();
              finishMaybe(stream, state);
            }
            function onwriteDrain(stream, state) {
              if (state.length === 0 && state.needDrain) {
                state.needDrain = false;
                stream.emit("drain");
              }
            }
            function clearBuffer(stream, state) {
              state.bufferProcessing = true;
              var entry = state.bufferedRequest;
              if (stream._writev && entry && entry.next) {
                var l2 = state.bufferedRequestCount;
                var buffer = new Array(l2);
                var holder = state.corkedRequestsFree;
                holder.entry = entry;
                var count = 0;
                while (entry) {
                  buffer[count] = entry;
                  entry = entry.next;
                  count += 1;
                }
                doWrite(stream, state, true, state.length, buffer, "", holder.finish);
                state.pendingcb++;
                state.lastBufferedRequest = null;
                if (holder.next) {
                  state.corkedRequestsFree = holder.next;
                  holder.next = null;
                } else {
                  state.corkedRequestsFree = new CorkedRequest(state);
                }
              } else {
                while (entry) {
                  var chunk = entry.chunk;
                  var encoding = entry.encoding;
                  var cb = entry.callback;
                  var len = state.objectMode ? 1 : chunk.length;
                  doWrite(stream, state, false, len, chunk, encoding, cb);
                  entry = entry.next;
                  if (state.writing) {
                    break;
                  }
                }
                if (entry === null) state.lastBufferedRequest = null;
              }
              state.bufferedRequestCount = 0;
              state.bufferedRequest = entry;
              state.bufferProcessing = false;
            }
            Writable.prototype._write = function(chunk, encoding, cb) {
              cb(new Error("_write() is not implemented"));
            };
            Writable.prototype._writev = null;
            Writable.prototype.end = function(chunk, encoding, cb) {
              var state = this._writableState;
              if (typeof chunk === "function") {
                cb = chunk;
                chunk = null;
                encoding = null;
              } else if (typeof encoding === "function") {
                cb = encoding;
                encoding = null;
              }
              if (chunk !== null && chunk !== void 0) this.write(chunk, encoding);
              if (state.corked) {
                state.corked = 1;
                this.uncork();
              }
              if (!state.ending && !state.finished) endWritable(this, state, cb);
            };
            function needFinish(state) {
              return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
            }
            function prefinish(stream, state) {
              if (!state.prefinished) {
                state.prefinished = true;
                stream.emit("prefinish");
              }
            }
            function finishMaybe(stream, state) {
              var need = needFinish(state);
              if (need) {
                if (state.pendingcb === 0) {
                  prefinish(stream, state);
                  state.finished = true;
                  stream.emit("finish");
                } else {
                  prefinish(stream, state);
                }
              }
              return need;
            }
            function endWritable(stream, state, cb) {
              state.ending = true;
              finishMaybe(stream, state);
              if (cb) {
                if (state.finished) processNextTick(cb);
                else stream.once("finish", cb);
              }
              state.ended = true;
              stream.writable = false;
            }
            function CorkedRequest(state) {
              var _this = this;
              this.next = null;
              this.entry = null;
              this.finish = function(err) {
                var entry = _this.entry;
                _this.entry = null;
                while (entry) {
                  var cb = entry.callback;
                  state.pendingcb--;
                  cb(err);
                  entry = entry.next;
                }
                if (state.corkedRequestsFree) {
                  state.corkedRequestsFree.next = _this;
                } else {
                  state.corkedRequestsFree = _this;
                }
              };
            }
          }).call(this, require2("_process"));
        }, { "./_stream_duplex": 141, "_process": 139, "buffer": 77, "buffer-shims": 76, "core-util-is": 78, "events": 81, "inherits": 83, "process-nextick-args": 138, "util-deprecate": 155 }], 146: [function(require2, module2, exports2) {
          "use strict";
          var Buffer3 = require2("buffer").Buffer;
          var bufferShim = require2("buffer-shims");
          module2.exports = BufferList;
          function BufferList() {
            this.head = null;
            this.tail = null;
            this.length = 0;
          }
          BufferList.prototype.push = function(v) {
            var entry = { data: v, next: null };
            if (this.length > 0) this.tail.next = entry;
            else this.head = entry;
            this.tail = entry;
            ++this.length;
          };
          BufferList.prototype.unshift = function(v) {
            var entry = { data: v, next: this.head };
            if (this.length === 0) this.tail = entry;
            this.head = entry;
            ++this.length;
          };
          BufferList.prototype.shift = function() {
            if (this.length === 0) return;
            var ret2 = this.head.data;
            if (this.length === 1) this.head = this.tail = null;
            else this.head = this.head.next;
            --this.length;
            return ret2;
          };
          BufferList.prototype.clear = function() {
            this.head = this.tail = null;
            this.length = 0;
          };
          BufferList.prototype.join = function(s) {
            if (this.length === 0) return "";
            var p = this.head;
            var ret2 = "" + p.data;
            while (p = p.next) {
              ret2 += s + p.data;
            }
            return ret2;
          };
          BufferList.prototype.concat = function(n) {
            if (this.length === 0) return bufferShim.alloc(0);
            if (this.length === 1) return this.head.data;
            var ret2 = bufferShim.allocUnsafe(n >>> 0);
            var p = this.head;
            var i = 0;
            while (p) {
              p.data.copy(ret2, i);
              i += p.data.length;
              p = p.next;
            }
            return ret2;
          };
        }, { "buffer": 77, "buffer-shims": 76 }], 147: [function(require2, module2, exports2) {
          module2.exports = require2("./lib/_stream_passthrough.js");
        }, { "./lib/_stream_passthrough.js": 142 }], 148: [function(require2, module2, exports2) {
          (function(process2) {
            var Stream = function() {
              try {
                return require2("stream");
              } catch (_) {
              }
            }();
            exports2 = module2.exports = require2("./lib/_stream_readable.js");
            exports2.Stream = Stream || exports2;
            exports2.Readable = exports2;
            exports2.Writable = require2("./lib/_stream_writable.js");
            exports2.Duplex = require2("./lib/_stream_duplex.js");
            exports2.Transform = require2("./lib/_stream_transform.js");
            exports2.PassThrough = require2("./lib/_stream_passthrough.js");
            if (!process2.browser && process2.env.READABLE_STREAM === "disable" && Stream) {
              module2.exports = Stream;
            }
          }).call(this, require2("_process"));
        }, { "./lib/_stream_duplex.js": 141, "./lib/_stream_passthrough.js": 142, "./lib/_stream_readable.js": 143, "./lib/_stream_transform.js": 144, "./lib/_stream_writable.js": 145, "_process": 139 }], 149: [function(require2, module2, exports2) {
          module2.exports = require2("./lib/_stream_transform.js");
        }, { "./lib/_stream_transform.js": 144 }], 150: [function(require2, module2, exports2) {
          module2.exports = require2("./lib/_stream_writable.js");
        }, { "./lib/_stream_writable.js": 145 }], 151: [function(require2, module2, exports2) {
          (function(Buffer3) {
            ;
            (function(sax) {
              sax.parser = function(strict, opt) {
                return new SAXParser(strict, opt);
              };
              sax.SAXParser = SAXParser;
              sax.SAXStream = SAXStream;
              sax.createStream = createStream;
              sax.MAX_BUFFER_LENGTH = 64 * 1024;
              var buffers = [
                "comment",
                "sgmlDecl",
                "textNode",
                "tagName",
                "doctype",
                "procInstName",
                "procInstBody",
                "entity",
                "attribName",
                "attribValue",
                "cdata",
                "script"
              ];
              sax.EVENTS = [
                "text",
                "processinginstruction",
                "sgmldeclaration",
                "doctype",
                "comment",
                "attribute",
                "opentag",
                "closetag",
                "opencdata",
                "cdata",
                "closecdata",
                "error",
                "end",
                "ready",
                "script",
                "opennamespace",
                "closenamespace"
              ];
              function SAXParser(strict, opt) {
                if (!(this instanceof SAXParser)) {
                  return new SAXParser(strict, opt);
                }
                var parser = this;
                clearBuffers(parser);
                parser.q = parser.c = "";
                parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;
                parser.opt = opt || {};
                parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;
                parser.looseCase = parser.opt.lowercase ? "toLowerCase" : "toUpperCase";
                parser.tags = [];
                parser.closed = parser.closedRoot = parser.sawRoot = false;
                parser.tag = parser.error = null;
                parser.strict = !!strict;
                parser.noscript = !!(strict || parser.opt.noscript);
                parser.state = S.BEGIN;
                parser.strictEntities = parser.opt.strictEntities;
                parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);
                parser.attribList = [];
                if (parser.opt.xmlns) {
                  parser.ns = Object.create(rootNS);
                }
                parser.trackPosition = parser.opt.position !== false;
                if (parser.trackPosition) {
                  parser.position = parser.line = parser.column = 0;
                }
                emit(parser, "onready");
              }
              if (!Object.create) {
                Object.create = function(o) {
                  function F() {
                  }
                  F.prototype = o;
                  var newf = new F();
                  return newf;
                };
              }
              if (!Object.keys) {
                Object.keys = function(o) {
                  var a = [];
                  for (var i in o) if (o.hasOwnProperty(i)) a.push(i);
                  return a;
                };
              }
              function checkBufferLength(parser) {
                var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);
                var maxActual = 0;
                for (var i = 0, l2 = buffers.length; i < l2; i++) {
                  var len = parser[buffers[i]].length;
                  if (len > maxAllowed) {
                    switch (buffers[i]) {
                      case "textNode":
                        closeText(parser);
                        break;
                      case "cdata":
                        emitNode(parser, "oncdata", parser.cdata);
                        parser.cdata = "";
                        break;
                      case "script":
                        emitNode(parser, "onscript", parser.script);
                        parser.script = "";
                        break;
                      default:
                        error(parser, "Max buffer length exceeded: " + buffers[i]);
                    }
                  }
                  maxActual = Math.max(maxActual, len);
                }
                var m = sax.MAX_BUFFER_LENGTH - maxActual;
                parser.bufferCheckPosition = m + parser.position;
              }
              function clearBuffers(parser) {
                for (var i = 0, l2 = buffers.length; i < l2; i++) {
                  parser[buffers[i]] = "";
                }
              }
              function flushBuffers(parser) {
                closeText(parser);
                if (parser.cdata !== "") {
                  emitNode(parser, "oncdata", parser.cdata);
                  parser.cdata = "";
                }
                if (parser.script !== "") {
                  emitNode(parser, "onscript", parser.script);
                  parser.script = "";
                }
              }
              SAXParser.prototype = {
                end: function() {
                  end(this);
                },
                write,
                resume: function() {
                  this.error = null;
                  return this;
                },
                close: function() {
                  return this.write(null);
                },
                flush: function() {
                  flushBuffers(this);
                }
              };
              var Stream;
              try {
                Stream = require2("stream").Stream;
              } catch (ex) {
                Stream = function() {
                };
              }
              var streamWraps = sax.EVENTS.filter(function(ev) {
                return ev !== "error" && ev !== "end";
              });
              function createStream(strict, opt) {
                return new SAXStream(strict, opt);
              }
              function SAXStream(strict, opt) {
                if (!(this instanceof SAXStream)) {
                  return new SAXStream(strict, opt);
                }
                Stream.apply(this);
                this._parser = new SAXParser(strict, opt);
                this.writable = true;
                this.readable = true;
                var me = this;
                this._parser.onend = function() {
                  me.emit("end");
                };
                this._parser.onerror = function(er) {
                  me.emit("error", er);
                  me._parser.error = null;
                };
                this._decoder = null;
                streamWraps.forEach(function(ev) {
                  Object.defineProperty(me, "on" + ev, {
                    get: function() {
                      return me._parser["on" + ev];
                    },
                    set: function(h) {
                      if (!h) {
                        me.removeAllListeners(ev);
                        me._parser["on" + ev] = h;
                        return h;
                      }
                      me.on(ev, h);
                    },
                    enumerable: true,
                    configurable: false
                  });
                });
              }
              SAXStream.prototype = Object.create(Stream.prototype, {
                constructor: {
                  value: SAXStream
                }
              });
              SAXStream.prototype.write = function(data) {
                if (typeof Buffer3 === "function" && typeof Buffer3.isBuffer === "function" && Buffer3.isBuffer(data)) {
                  if (!this._decoder) {
                    var SD = require2("string_decoder").StringDecoder;
                    this._decoder = new SD("utf8");
                  }
                  data = this._decoder.write(data);
                }
                this._parser.write(data.toString());
                this.emit("data", data);
                return true;
              };
              SAXStream.prototype.end = function(chunk) {
                if (chunk && chunk.length) {
                  this.write(chunk);
                }
                this._parser.end();
                return true;
              };
              SAXStream.prototype.on = function(ev, handler) {
                var me = this;
                if (!me._parser["on" + ev] && streamWraps.indexOf(ev) !== -1) {
                  me._parser["on" + ev] = function() {
                    var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);
                    args.splice(0, 0, ev);
                    me.emit.apply(me, args);
                  };
                }
                return Stream.prototype.on.call(me, ev, handler);
              };
              var whitespace = "\r\n	 ";
              var number = "0124356789";
              var letter = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
              var quote = `'"`;
              var attribEnd = whitespace + ">";
              var CDATA = "[CDATA[";
              var DOCTYPE = "DOCTYPE";
              var XML_NAMESPACE = "http://www.w3.org/XML/1998/namespace";
              var XMLNS_NAMESPACE = "http://www.w3.org/2000/xmlns/";
              var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE };
              whitespace = charClass(whitespace);
              number = charClass(number);
              letter = charClass(letter);
              var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
              var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/;
              var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
              var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/;
              quote = charClass(quote);
              attribEnd = charClass(attribEnd);
              function charClass(str) {
                return str.split("").reduce(function(s2, c) {
                  s2[c] = true;
                  return s2;
                }, {});
              }
              function isRegExp(c) {
                return Object.prototype.toString.call(c) === "[object RegExp]";
              }
              function is(charclass, c) {
                return isRegExp(charclass) ? !!c.match(charclass) : charclass[c];
              }
              function not(charclass, c) {
                return !is(charclass, c);
              }
              var S = 0;
              sax.STATE = {
                BEGIN: S++,
                // leading byte order mark or whitespace
                BEGIN_WHITESPACE: S++,
                // leading whitespace
                TEXT: S++,
                // general stuff
                TEXT_ENTITY: S++,
                // &amp and such.
                OPEN_WAKA: S++,
                // <
                SGML_DECL: S++,
                // <!BLARG
                SGML_DECL_QUOTED: S++,
                // <!BLARG foo "bar
                DOCTYPE: S++,
                // <!DOCTYPE
                DOCTYPE_QUOTED: S++,
                // <!DOCTYPE "//blah
                DOCTYPE_DTD: S++,
                // <!DOCTYPE "//blah" [ ...
                DOCTYPE_DTD_QUOTED: S++,
                // <!DOCTYPE "//blah" [ "foo
                COMMENT_STARTING: S++,
                // <!-
                COMMENT: S++,
                // <!--
                COMMENT_ENDING: S++,
                // <!-- blah -
                COMMENT_ENDED: S++,
                // <!-- blah --
                CDATA: S++,
                // <![CDATA[ something
                CDATA_ENDING: S++,
                // ]
                CDATA_ENDING_2: S++,
                // ]]
                PROC_INST: S++,
                // <?hi
                PROC_INST_BODY: S++,
                // <?hi there
                PROC_INST_ENDING: S++,
                // <?hi "there" ?
                OPEN_TAG: S++,
                // <strong
                OPEN_TAG_SLASH: S++,
                // <strong /
                ATTRIB: S++,
                // <a
                ATTRIB_NAME: S++,
                // <a foo
                ATTRIB_NAME_SAW_WHITE: S++,
                // <a foo _
                ATTRIB_VALUE: S++,
                // <a foo=
                ATTRIB_VALUE_QUOTED: S++,
                // <a foo="bar
                ATTRIB_VALUE_CLOSED: S++,
                // <a foo="bar"
                ATTRIB_VALUE_UNQUOTED: S++,
                // <a foo=bar
                ATTRIB_VALUE_ENTITY_Q: S++,
                // <foo bar="&quot;"
                ATTRIB_VALUE_ENTITY_U: S++,
                // <foo bar=&quot
                CLOSE_TAG: S++,
                // </a
                CLOSE_TAG_SAW_WHITE: S++,
                // </a   >
                SCRIPT: S++,
                // <script> ...
                SCRIPT_ENDING: S++
                // <script> ... <
              };
              sax.XML_ENTITIES = {
                "amp": "&",
                "gt": ">",
                "lt": "<",
                "quot": '"',
                "apos": "'"
              };
              sax.ENTITIES = {
                "amp": "&",
                "gt": ">",
                "lt": "<",
                "quot": '"',
                "apos": "'",
                "AElig": 198,
                "Aacute": 193,
                "Acirc": 194,
                "Agrave": 192,
                "Aring": 197,
                "Atilde": 195,
                "Auml": 196,
                "Ccedil": 199,
                "ETH": 208,
                "Eacute": 201,
                "Ecirc": 202,
                "Egrave": 200,
                "Euml": 203,
                "Iacute": 205,
                "Icirc": 206,
                "Igrave": 204,
                "Iuml": 207,
                "Ntilde": 209,
                "Oacute": 211,
                "Ocirc": 212,
                "Ograve": 210,
                "Oslash": 216,
                "Otilde": 213,
                "Ouml": 214,
                "THORN": 222,
                "Uacute": 218,
                "Ucirc": 219,
                "Ugrave": 217,
                "Uuml": 220,
                "Yacute": 221,
                "aacute": 225,
                "acirc": 226,
                "aelig": 230,
                "agrave": 224,
                "aring": 229,
                "atilde": 227,
                "auml": 228,
                "ccedil": 231,
                "eacute": 233,
                "ecirc": 234,
                "egrave": 232,
                "eth": 240,
                "euml": 235,
                "iacute": 237,
                "icirc": 238,
                "igrave": 236,
                "iuml": 239,
                "ntilde": 241,
                "oacute": 243,
                "ocirc": 244,
                "ograve": 242,
                "oslash": 248,
                "otilde": 245,
                "ouml": 246,
                "szlig": 223,
                "thorn": 254,
                "uacute": 250,
                "ucirc": 251,
                "ugrave": 249,
                "uuml": 252,
                "yacute": 253,
                "yuml": 255,
                "copy": 169,
                "reg": 174,
                "nbsp": 160,
                "iexcl": 161,
                "cent": 162,
                "pound": 163,
                "curren": 164,
                "yen": 165,
                "brvbar": 166,
                "sect": 167,
                "uml": 168,
                "ordf": 170,
                "laquo": 171,
                "not": 172,
                "shy": 173,
                "macr": 175,
                "deg": 176,
                "plusmn": 177,
                "sup1": 185,
                "sup2": 178,
                "sup3": 179,
                "acute": 180,
                "micro": 181,
                "para": 182,
                "middot": 183,
                "cedil": 184,
                "ordm": 186,
                "raquo": 187,
                "frac14": 188,
                "frac12": 189,
                "frac34": 190,
                "iquest": 191,
                "times": 215,
                "divide": 247,
                "OElig": 338,
                "oelig": 339,
                "Scaron": 352,
                "scaron": 353,
                "Yuml": 376,
                "fnof": 402,
                "circ": 710,
                "tilde": 732,
                "Alpha": 913,
                "Beta": 914,
                "Gamma": 915,
                "Delta": 916,
                "Epsilon": 917,
                "Zeta": 918,
                "Eta": 919,
                "Theta": 920,
                "Iota": 921,
                "Kappa": 922,
                "Lambda": 923,
                "Mu": 924,
                "Nu": 925,
                "Xi": 926,
                "Omicron": 927,
                "Pi": 928,
                "Rho": 929,
                "Sigma": 931,
                "Tau": 932,
                "Upsilon": 933,
                "Phi": 934,
                "Chi": 935,
                "Psi": 936,
                "Omega": 937,
                "alpha": 945,
                "beta": 946,
                "gamma": 947,
                "delta": 948,
                "epsilon": 949,
                "zeta": 950,
                "eta": 951,
                "theta": 952,
                "iota": 953,
                "kappa": 954,
                "lambda": 955,
                "mu": 956,
                "nu": 957,
                "xi": 958,
                "omicron": 959,
                "pi": 960,
                "rho": 961,
                "sigmaf": 962,
                "sigma": 963,
                "tau": 964,
                "upsilon": 965,
                "phi": 966,
                "chi": 967,
                "psi": 968,
                "omega": 969,
                "thetasym": 977,
                "upsih": 978,
                "piv": 982,
                "ensp": 8194,
                "emsp": 8195,
                "thinsp": 8201,
                "zwnj": 8204,
                "zwj": 8205,
                "lrm": 8206,
                "rlm": 8207,
                "ndash": 8211,
                "mdash": 8212,
                "lsquo": 8216,
                "rsquo": 8217,
                "sbquo": 8218,
                "ldquo": 8220,
                "rdquo": 8221,
                "bdquo": 8222,
                "dagger": 8224,
                "Dagger": 8225,
                "bull": 8226,
                "hellip": 8230,
                "permil": 8240,
                "prime": 8242,
                "Prime": 8243,
                "lsaquo": 8249,
                "rsaquo": 8250,
                "oline": 8254,
                "frasl": 8260,
                "euro": 8364,
                "image": 8465,
                "weierp": 8472,
                "real": 8476,
                "trade": 8482,
                "alefsym": 8501,
                "larr": 8592,
                "uarr": 8593,
                "rarr": 8594,
                "darr": 8595,
                "harr": 8596,
                "crarr": 8629,
                "lArr": 8656,
                "uArr": 8657,
                "rArr": 8658,
                "dArr": 8659,
                "hArr": 8660,
                "forall": 8704,
                "part": 8706,
                "exist": 8707,
                "empty": 8709,
                "nabla": 8711,
                "isin": 8712,
                "notin": 8713,
                "ni": 8715,
                "prod": 8719,
                "sum": 8721,
                "minus": 8722,
                "lowast": 8727,
                "radic": 8730,
                "prop": 8733,
                "infin": 8734,
                "ang": 8736,
                "and": 8743,
                "or": 8744,
                "cap": 8745,
                "cup": 8746,
                "int": 8747,
                "there4": 8756,
                "sim": 8764,
                "cong": 8773,
                "asymp": 8776,
                "ne": 8800,
                "equiv": 8801,
                "le": 8804,
                "ge": 8805,
                "sub": 8834,
                "sup": 8835,
                "nsub": 8836,
                "sube": 8838,
                "supe": 8839,
                "oplus": 8853,
                "otimes": 8855,
                "perp": 8869,
                "sdot": 8901,
                "lceil": 8968,
                "rceil": 8969,
                "lfloor": 8970,
                "rfloor": 8971,
                "lang": 9001,
                "rang": 9002,
                "loz": 9674,
                "spades": 9824,
                "clubs": 9827,
                "hearts": 9829,
                "diams": 9830
              };
              Object.keys(sax.ENTITIES).forEach(function(key) {
                var e = sax.ENTITIES[key];
                var s2 = typeof e === "number" ? String.fromCharCode(e) : e;
                sax.ENTITIES[key] = s2;
              });
              for (var s in sax.STATE) {
                sax.STATE[sax.STATE[s]] = s;
              }
              S = sax.STATE;
              function emit(parser, event, data) {
                parser[event] && parser[event](data);
              }
              function emitNode(parser, nodeType, data) {
                if (parser.textNode) closeText(parser);
                emit(parser, nodeType, data);
              }
              function closeText(parser) {
                parser.textNode = textopts(parser.opt, parser.textNode);
                if (parser.textNode) emit(parser, "ontext", parser.textNode);
                parser.textNode = "";
              }
              function textopts(opt, text) {
                if (opt.trim) text = text.trim();
                if (opt.normalize) text = text.replace(/\s+/g, " ");
                return text;
              }
              function error(parser, er) {
                closeText(parser);
                if (parser.trackPosition) {
                  er += "\nLine: " + parser.line + "\nColumn: " + parser.column + "\nChar: " + parser.c;
                }
                er = new Error(er);
                parser.error = er;
                emit(parser, "onerror", er);
                return parser;
              }
              function end(parser) {
                if (parser.sawRoot && !parser.closedRoot) strictFail(parser, "Unclosed root tag");
                if (parser.state !== S.BEGIN && parser.state !== S.BEGIN_WHITESPACE && parser.state !== S.TEXT) {
                  error(parser, "Unexpected end");
                }
                closeText(parser);
                parser.c = "";
                parser.closed = true;
                emit(parser, "onend");
                SAXParser.call(parser, parser.strict, parser.opt);
                return parser;
              }
              function strictFail(parser, message) {
                if (typeof parser !== "object" || !(parser instanceof SAXParser)) {
                  throw new Error("bad call to strictFail");
                }
                if (parser.strict) {
                  error(parser, message);
                }
              }
              function newTag(parser) {
                if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]();
                var parent = parser.tags[parser.tags.length - 1] || parser;
                var tag = parser.tag = { name: parser.tagName, attributes: {} };
                if (parser.opt.xmlns) {
                  tag.ns = parent.ns;
                }
                parser.attribList.length = 0;
              }
              function qname(name, attribute) {
                var i = name.indexOf(":");
                var qualName = i < 0 ? ["", name] : name.split(":");
                var prefix = qualName[0];
                var local = qualName[1];
                if (attribute && name === "xmlns") {
                  prefix = "xmlns";
                  local = "";
                }
                return { prefix, local };
              }
              function attrib(parser) {
                if (!parser.strict) {
                  parser.attribName = parser.attribName[parser.looseCase]();
                }
                if (parser.attribList.indexOf(parser.attribName) !== -1 || parser.tag.attributes.hasOwnProperty(parser.attribName)) {
                  parser.attribName = parser.attribValue = "";
                  return;
                }
                if (parser.opt.xmlns) {
                  var qn = qname(parser.attribName, true);
                  var prefix = qn.prefix;
                  var local = qn.local;
                  if (prefix === "xmlns") {
                    if (local === "xml" && parser.attribValue !== XML_NAMESPACE) {
                      strictFail(
                        parser,
                        "xml: prefix must be bound to " + XML_NAMESPACE + "\nActual: " + parser.attribValue
                      );
                    } else if (local === "xmlns" && parser.attribValue !== XMLNS_NAMESPACE) {
                      strictFail(
                        parser,
                        "xmlns: prefix must be bound to " + XMLNS_NAMESPACE + "\nActual: " + parser.attribValue
                      );
                    } else {
                      var tag = parser.tag;
                      var parent = parser.tags[parser.tags.length - 1] || parser;
                      if (tag.ns === parent.ns) {
                        tag.ns = Object.create(parent.ns);
                      }
                      tag.ns[local] = parser.attribValue;
                    }
                  }
                  parser.attribList.push([parser.attribName, parser.attribValue]);
                } else {
                  parser.tag.attributes[parser.attribName] = parser.attribValue;
                  emitNode(parser, "onattribute", {
                    name: parser.attribName,
                    value: parser.attribValue
                  });
                }
                parser.attribName = parser.attribValue = "";
              }
              function openTag(parser, selfClosing) {
                if (parser.opt.xmlns) {
                  var tag = parser.tag;
                  var qn = qname(parser.tagName);
                  tag.prefix = qn.prefix;
                  tag.local = qn.local;
                  tag.uri = tag.ns[qn.prefix] || "";
                  if (tag.prefix && !tag.uri) {
                    strictFail(parser, "Unbound namespace prefix: " + JSON.stringify(parser.tagName));
                    tag.uri = qn.prefix;
                  }
                  var parent = parser.tags[parser.tags.length - 1] || parser;
                  if (tag.ns && parent.ns !== tag.ns) {
                    Object.keys(tag.ns).forEach(function(p) {
                      emitNode(parser, "onopennamespace", {
                        prefix: p,
                        uri: tag.ns[p]
                      });
                    });
                  }
                  for (var i = 0, l2 = parser.attribList.length; i < l2; i++) {
                    var nv = parser.attribList[i];
                    var name = nv[0];
                    var value = nv[1];
                    var qualName = qname(name, true);
                    var prefix = qualName.prefix;
                    var local = qualName.local;
                    var uri = prefix === "" ? "" : tag.ns[prefix] || "";
                    var a = {
                      name,
                      value,
                      prefix,
                      local,
                      uri
                    };
                    if (prefix && prefix !== "xmlns" && !uri) {
                      strictFail(parser, "Unbound namespace prefix: " + JSON.stringify(prefix));
                      a.uri = prefix;
                    }
                    parser.tag.attributes[name] = a;
                    emitNode(parser, "onattribute", a);
                  }
                  parser.attribList.length = 0;
                }
                parser.tag.isSelfClosing = !!selfClosing;
                parser.sawRoot = true;
                parser.tags.push(parser.tag);
                emitNode(parser, "onopentag", parser.tag);
                if (!selfClosing) {
                  if (!parser.noscript && parser.tagName.toLowerCase() === "script") {
                    parser.state = S.SCRIPT;
                  } else {
                    parser.state = S.TEXT;
                  }
                  parser.tag = null;
                  parser.tagName = "";
                }
                parser.attribName = parser.attribValue = "";
                parser.attribList.length = 0;
              }
              function closeTag(parser) {
                if (!parser.tagName) {
                  strictFail(parser, "Weird empty close tag.");
                  parser.textNode += "</>";
                  parser.state = S.TEXT;
                  return;
                }
                if (parser.script) {
                  if (parser.tagName !== "script") {
                    parser.script += "</" + parser.tagName + ">";
                    parser.tagName = "";
                    parser.state = S.SCRIPT;
                    return;
                  }
                  emitNode(parser, "onscript", parser.script);
                  parser.script = "";
                }
                var t = parser.tags.length;
                var tagName = parser.tagName;
                if (!parser.strict) {
                  tagName = tagName[parser.looseCase]();
                }
                var closeTo = tagName;
                while (t--) {
                  var close = parser.tags[t];
                  if (close.name !== closeTo) {
                    strictFail(parser, "Unexpected close tag");
                  } else {
                    break;
                  }
                }
                if (t < 0) {
                  strictFail(parser, "Unmatched closing tag: " + parser.tagName);
                  parser.textNode += "</" + parser.tagName + ">";
                  parser.state = S.TEXT;
                  return;
                }
                parser.tagName = tagName;
                var s2 = parser.tags.length;
                while (s2-- > t) {
                  var tag = parser.tag = parser.tags.pop();
                  parser.tagName = parser.tag.name;
                  emitNode(parser, "onclosetag", parser.tagName);
                  var x = {};
                  for (var i in tag.ns) {
                    x[i] = tag.ns[i];
                  }
                  var parent = parser.tags[parser.tags.length - 1] || parser;
                  if (parser.opt.xmlns && tag.ns !== parent.ns) {
                    Object.keys(tag.ns).forEach(function(p) {
                      var n = tag.ns[p];
                      emitNode(parser, "onclosenamespace", { prefix: p, uri: n });
                    });
                  }
                }
                if (t === 0) parser.closedRoot = true;
                parser.tagName = parser.attribValue = parser.attribName = "";
                parser.attribList.length = 0;
                parser.state = S.TEXT;
              }
              function parseEntity(parser) {
                var entity = parser.entity;
                var entityLC = entity.toLowerCase();
                var num;
                var numStr = "";
                if (parser.ENTITIES[entity]) {
                  return parser.ENTITIES[entity];
                }
                if (parser.ENTITIES[entityLC]) {
                  return parser.ENTITIES[entityLC];
                }
                entity = entityLC;
                if (entity.charAt(0) === "#") {
                  if (entity.charAt(1) === "x") {
                    entity = entity.slice(2);
                    num = parseInt(entity, 16);
                    numStr = num.toString(16);
                  } else {
                    entity = entity.slice(1);
                    num = parseInt(entity, 10);
                    numStr = num.toString(10);
                  }
                }
                entity = entity.replace(/^0+/, "");
                if (numStr.toLowerCase() !== entity) {
                  strictFail(parser, "Invalid character entity");
                  return "&" + parser.entity + ";";
                }
                return String.fromCodePoint(num);
              }
              function beginWhiteSpace(parser, c) {
                if (c === "<") {
                  parser.state = S.OPEN_WAKA;
                  parser.startTagPosition = parser.position;
                } else if (not(whitespace, c)) {
                  strictFail(parser, "Non-whitespace before first tag.");
                  parser.textNode = c;
                  parser.state = S.TEXT;
                }
              }
              function charAt(chunk, i) {
                var result = "";
                if (i < chunk.length) {
                  result = chunk.charAt(i);
                }
                return result;
              }
              function write(chunk) {
                var parser = this;
                if (this.error) {
                  throw this.error;
                }
                if (parser.closed) {
                  return error(
                    parser,
                    "Cannot write after close. Assign an onready handler."
                  );
                }
                if (chunk === null) {
                  return end(parser);
                }
                if (typeof chunk === "object") {
                  chunk = chunk.toString();
                }
                var i = 0;
                var c = "";
                while (true) {
                  c = charAt(chunk, i++);
                  parser.c = c;
                  if (!c) {
                    break;
                  }
                  if (parser.trackPosition) {
                    parser.position++;
                    if (c === "\n") {
                      parser.line++;
                      parser.column = 0;
                    } else {
                      parser.column++;
                    }
                  }
                  switch (parser.state) {
                    case S.BEGIN:
                      parser.state = S.BEGIN_WHITESPACE;
                      if (c === "\uFEFF") {
                        continue;
                      }
                      beginWhiteSpace(parser, c);
                      continue;
                    case S.BEGIN_WHITESPACE:
                      beginWhiteSpace(parser, c);
                      continue;
                    case S.TEXT:
                      if (parser.sawRoot && !parser.closedRoot) {
                        var starti = i - 1;
                        while (c && c !== "<" && c !== "&") {
                          c = charAt(chunk, i++);
                          if (c && parser.trackPosition) {
                            parser.position++;
                            if (c === "\n") {
                              parser.line++;
                              parser.column = 0;
                            } else {
                              parser.column++;
                            }
                          }
                        }
                        parser.textNode += chunk.substring(starti, i - 1);
                      }
                      if (c === "<" && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
                        parser.state = S.OPEN_WAKA;
                        parser.startTagPosition = parser.position;
                      } else {
                        if (not(whitespace, c) && (!parser.sawRoot || parser.closedRoot)) {
                          strictFail(parser, "Text data outside of root node.");
                        }
                        if (c === "&") {
                          parser.state = S.TEXT_ENTITY;
                        } else {
                          parser.textNode += c;
                        }
                      }
                      continue;
                    case S.SCRIPT:
                      if (c === "<") {
                        parser.state = S.SCRIPT_ENDING;
                      } else {
                        parser.script += c;
                      }
                      continue;
                    case S.SCRIPT_ENDING:
                      if (c === "/") {
                        parser.state = S.CLOSE_TAG;
                      } else {
                        parser.script += "<" + c;
                        parser.state = S.SCRIPT;
                      }
                      continue;
                    case S.OPEN_WAKA:
                      if (c === "!") {
                        parser.state = S.SGML_DECL;
                        parser.sgmlDecl = "";
                      } else if (is(whitespace, c)) {
                      } else if (is(nameStart, c)) {
                        parser.state = S.OPEN_TAG;
                        parser.tagName = c;
                      } else if (c === "/") {
                        parser.state = S.CLOSE_TAG;
                        parser.tagName = "";
                      } else if (c === "?") {
                        parser.state = S.PROC_INST;
                        parser.procInstName = parser.procInstBody = "";
                      } else {
                        strictFail(parser, "Unencoded <");
                        if (parser.startTagPosition + 1 < parser.position) {
                          var pad = parser.position - parser.startTagPosition;
                          c = new Array(pad).join(" ") + c;
                        }
                        parser.textNode += "<" + c;
                        parser.state = S.TEXT;
                      }
                      continue;
                    case S.SGML_DECL:
                      if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {
                        emitNode(parser, "onopencdata");
                        parser.state = S.CDATA;
                        parser.sgmlDecl = "";
                        parser.cdata = "";
                      } else if (parser.sgmlDecl + c === "--") {
                        parser.state = S.COMMENT;
                        parser.comment = "";
                        parser.sgmlDecl = "";
                      } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {
                        parser.state = S.DOCTYPE;
                        if (parser.doctype || parser.sawRoot) {
                          strictFail(
                            parser,
                            "Inappropriately located doctype declaration"
                          );
                        }
                        parser.doctype = "";
                        parser.sgmlDecl = "";
                      } else if (c === ">") {
                        emitNode(parser, "onsgmldeclaration", parser.sgmlDecl);
                        parser.sgmlDecl = "";
                        parser.state = S.TEXT;
                      } else if (is(quote, c)) {
                        parser.state = S.SGML_DECL_QUOTED;
                        parser.sgmlDecl += c;
                      } else {
                        parser.sgmlDecl += c;
                      }
                      continue;
                    case S.SGML_DECL_QUOTED:
                      if (c === parser.q) {
                        parser.state = S.SGML_DECL;
                        parser.q = "";
                      }
                      parser.sgmlDecl += c;
                      continue;
                    case S.DOCTYPE:
                      if (c === ">") {
                        parser.state = S.TEXT;
                        emitNode(parser, "ondoctype", parser.doctype);
                        parser.doctype = true;
                      } else {
                        parser.doctype += c;
                        if (c === "[") {
                          parser.state = S.DOCTYPE_DTD;
                        } else if (is(quote, c)) {
                          parser.state = S.DOCTYPE_QUOTED;
                          parser.q = c;
                        }
                      }
                      continue;
                    case S.DOCTYPE_QUOTED:
                      parser.doctype += c;
                      if (c === parser.q) {
                        parser.q = "";
                        parser.state = S.DOCTYPE;
                      }
                      continue;
                    case S.DOCTYPE_DTD:
                      parser.doctype += c;
                      if (c === "]") {
                        parser.state = S.DOCTYPE;
                      } else if (is(quote, c)) {
                        parser.state = S.DOCTYPE_DTD_QUOTED;
                        parser.q = c;
                      }
                      continue;
                    case S.DOCTYPE_DTD_QUOTED:
                      parser.doctype += c;
                      if (c === parser.q) {
                        parser.state = S.DOCTYPE_DTD;
                        parser.q = "";
                      }
                      continue;
                    case S.COMMENT:
                      if (c === "-") {
                        parser.state = S.COMMENT_ENDING;
                      } else {
                        parser.comment += c;
                      }
                      continue;
                    case S.COMMENT_ENDING:
                      if (c === "-") {
                        parser.state = S.COMMENT_ENDED;
                        parser.comment = textopts(parser.opt, parser.comment);
                        if (parser.comment) {
                          emitNode(parser, "oncomment", parser.comment);
                        }
                        parser.comment = "";
                      } else {
                        parser.comment += "-" + c;
                        parser.state = S.COMMENT;
                      }
                      continue;
                    case S.COMMENT_ENDED:
                      if (c !== ">") {
                        strictFail(parser, "Malformed comment");
                        parser.comment += "--" + c;
                        parser.state = S.COMMENT;
                      } else {
                        parser.state = S.TEXT;
                      }
                      continue;
                    case S.CDATA:
                      if (c === "]") {
                        parser.state = S.CDATA_ENDING;
                      } else {
                        parser.cdata += c;
                      }
                      continue;
                    case S.CDATA_ENDING:
                      if (c === "]") {
                        parser.state = S.CDATA_ENDING_2;
                      } else {
                        parser.cdata += "]" + c;
                        parser.state = S.CDATA;
                      }
                      continue;
                    case S.CDATA_ENDING_2:
                      if (c === ">") {
                        if (parser.cdata) {
                          emitNode(parser, "oncdata", parser.cdata);
                        }
                        emitNode(parser, "onclosecdata");
                        parser.cdata = "";
                        parser.state = S.TEXT;
                      } else if (c === "]") {
                        parser.cdata += "]";
                      } else {
                        parser.cdata += "]]" + c;
                        parser.state = S.CDATA;
                      }
                      continue;
                    case S.PROC_INST:
                      if (c === "?") {
                        parser.state = S.PROC_INST_ENDING;
                      } else if (is(whitespace, c)) {
                        parser.state = S.PROC_INST_BODY;
                      } else {
                        parser.procInstName += c;
                      }
                      continue;
                    case S.PROC_INST_BODY:
                      if (!parser.procInstBody && is(whitespace, c)) {
                        continue;
                      } else if (c === "?") {
                        parser.state = S.PROC_INST_ENDING;
                      } else {
                        parser.procInstBody += c;
                      }
                      continue;
                    case S.PROC_INST_ENDING:
                      if (c === ">") {
                        emitNode(parser, "onprocessinginstruction", {
                          name: parser.procInstName,
                          body: parser.procInstBody
                        });
                        parser.procInstName = parser.procInstBody = "";
                        parser.state = S.TEXT;
                      } else {
                        parser.procInstBody += "?" + c;
                        parser.state = S.PROC_INST_BODY;
                      }
                      continue;
                    case S.OPEN_TAG:
                      if (is(nameBody, c)) {
                        parser.tagName += c;
                      } else {
                        newTag(parser);
                        if (c === ">") {
                          openTag(parser);
                        } else if (c === "/") {
                          parser.state = S.OPEN_TAG_SLASH;
                        } else {
                          if (not(whitespace, c)) {
                            strictFail(parser, "Invalid character in tag name");
                          }
                          parser.state = S.ATTRIB;
                        }
                      }
                      continue;
                    case S.OPEN_TAG_SLASH:
                      if (c === ">") {
                        openTag(parser, true);
                        closeTag(parser);
                      } else {
                        strictFail(parser, "Forward-slash in opening tag not followed by >");
                        parser.state = S.ATTRIB;
                      }
                      continue;
                    case S.ATTRIB:
                      if (is(whitespace, c)) {
                        continue;
                      } else if (c === ">") {
                        openTag(parser);
                      } else if (c === "/") {
                        parser.state = S.OPEN_TAG_SLASH;
                      } else if (is(nameStart, c)) {
                        parser.attribName = c;
                        parser.attribValue = "";
                        parser.state = S.ATTRIB_NAME;
                      } else {
                        strictFail(parser, "Invalid attribute name");
                      }
                      continue;
                    case S.ATTRIB_NAME:
                      if (c === "=") {
                        parser.state = S.ATTRIB_VALUE;
                      } else if (c === ">") {
                        strictFail(parser, "Attribute without value");
                        parser.attribValue = parser.attribName;
                        attrib(parser);
                        openTag(parser);
                      } else if (is(whitespace, c)) {
                        parser.state = S.ATTRIB_NAME_SAW_WHITE;
                      } else if (is(nameBody, c)) {
                        parser.attribName += c;
                      } else {
                        strictFail(parser, "Invalid attribute name");
                      }
                      continue;
                    case S.ATTRIB_NAME_SAW_WHITE:
                      if (c === "=") {
                        parser.state = S.ATTRIB_VALUE;
                      } else if (is(whitespace, c)) {
                        continue;
                      } else {
                        strictFail(parser, "Attribute without value");
                        parser.tag.attributes[parser.attribName] = "";
                        parser.attribValue = "";
                        emitNode(parser, "onattribute", {
                          name: parser.attribName,
                          value: ""
                        });
                        parser.attribName = "";
                        if (c === ">") {
                          openTag(parser);
                        } else if (is(nameStart, c)) {
                          parser.attribName = c;
                          parser.state = S.ATTRIB_NAME;
                        } else {
                          strictFail(parser, "Invalid attribute name");
                          parser.state = S.ATTRIB;
                        }
                      }
                      continue;
                    case S.ATTRIB_VALUE:
                      if (is(whitespace, c)) {
                        continue;
                      } else if (is(quote, c)) {
                        parser.q = c;
                        parser.state = S.ATTRIB_VALUE_QUOTED;
                      } else {
                        strictFail(parser, "Unquoted attribute value");
                        parser.state = S.ATTRIB_VALUE_UNQUOTED;
                        parser.attribValue = c;
                      }
                      continue;
                    case S.ATTRIB_VALUE_QUOTED:
                      if (c !== parser.q) {
                        if (c === "&") {
                          parser.state = S.ATTRIB_VALUE_ENTITY_Q;
                        } else {
                          parser.attribValue += c;
                        }
                        continue;
                      }
                      attrib(parser);
                      parser.q = "";
                      parser.state = S.ATTRIB_VALUE_CLOSED;
                      continue;
                    case S.ATTRIB_VALUE_CLOSED:
                      if (is(whitespace, c)) {
                        parser.state = S.ATTRIB;
                      } else if (c === ">") {
                        openTag(parser);
                      } else if (c === "/") {
                        parser.state = S.OPEN_TAG_SLASH;
                      } else if (is(nameStart, c)) {
                        strictFail(parser, "No whitespace between attributes");
                        parser.attribName = c;
                        parser.attribValue = "";
                        parser.state = S.ATTRIB_NAME;
                      } else {
                        strictFail(parser, "Invalid attribute name");
                      }
                      continue;
                    case S.ATTRIB_VALUE_UNQUOTED:
                      if (not(attribEnd, c)) {
                        if (c === "&") {
                          parser.state = S.ATTRIB_VALUE_ENTITY_U;
                        } else {
                          parser.attribValue += c;
                        }
                        continue;
                      }
                      attrib(parser);
                      if (c === ">") {
                        openTag(parser);
                      } else {
                        parser.state = S.ATTRIB;
                      }
                      continue;
                    case S.CLOSE_TAG:
                      if (!parser.tagName) {
                        if (is(whitespace, c)) {
                          continue;
                        } else if (not(nameStart, c)) {
                          if (parser.script) {
                            parser.script += "</" + c;
                            parser.state = S.SCRIPT;
                          } else {
                            strictFail(parser, "Invalid tagname in closing tag.");
                          }
                        } else {
                          parser.tagName = c;
                        }
                      } else if (c === ">") {
                        closeTag(parser);
                      } else if (is(nameBody, c)) {
                        parser.tagName += c;
                      } else if (parser.script) {
                        parser.script += "</" + parser.tagName;
                        parser.tagName = "";
                        parser.state = S.SCRIPT;
                      } else {
                        if (not(whitespace, c)) {
                          strictFail(parser, "Invalid tagname in closing tag");
                        }
                        parser.state = S.CLOSE_TAG_SAW_WHITE;
                      }
                      continue;
                    case S.CLOSE_TAG_SAW_WHITE:
                      if (is(whitespace, c)) {
                        continue;
                      }
                      if (c === ">") {
                        closeTag(parser);
                      } else {
                        strictFail(parser, "Invalid characters in closing tag");
                      }
                      continue;
                    case S.TEXT_ENTITY:
                    case S.ATTRIB_VALUE_ENTITY_Q:
                    case S.ATTRIB_VALUE_ENTITY_U:
                      var returnState;
                      var buffer;
                      switch (parser.state) {
                        case S.TEXT_ENTITY:
                          returnState = S.TEXT;
                          buffer = "textNode";
                          break;
                        case S.ATTRIB_VALUE_ENTITY_Q:
                          returnState = S.ATTRIB_VALUE_QUOTED;
                          buffer = "attribValue";
                          break;
                        case S.ATTRIB_VALUE_ENTITY_U:
                          returnState = S.ATTRIB_VALUE_UNQUOTED;
                          buffer = "attribValue";
                          break;
                      }
                      if (c === ";") {
                        parser[buffer] += parseEntity(parser);
                        parser.entity = "";
                        parser.state = returnState;
                      } else if (is(parser.entity.length ? entityBody : entityStart, c)) {
                        parser.entity += c;
                      } else {
                        strictFail(parser, "Invalid character in entity name");
                        parser[buffer] += "&" + parser.entity + c;
                        parser.entity = "";
                        parser.state = returnState;
                      }
                      continue;
                    default:
                      throw new Error(parser, "Unknown state: " + parser.state);
                  }
                }
                if (parser.position >= parser.bufferCheckPosition) {
                  checkBufferLength(parser);
                }
                return parser;
              }
              if (!String.fromCodePoint) {
                (function() {
                  var stringFromCharCode = String.fromCharCode;
                  var floor = Math.floor;
                  var fromCodePoint = function() {
                    var MAX_SIZE = 16384;
                    var codeUnits = [];
                    var highSurrogate;
                    var lowSurrogate;
                    var index = -1;
                    var length = arguments.length;
                    if (!length) {
                      return "";
                    }
                    var result = "";
                    while (++index < length) {
                      var codePoint = Number(arguments[index]);
                      if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
                      codePoint < 0 || // not a valid Unicode code point
                      codePoint > 1114111 || // not a valid Unicode code point
                      floor(codePoint) !== codePoint) {
                        throw RangeError("Invalid code point: " + codePoint);
                      }
                      if (codePoint <= 65535) {
                        codeUnits.push(codePoint);
                      } else {
                        codePoint -= 65536;
                        highSurrogate = (codePoint >> 10) + 55296;
                        lowSurrogate = codePoint % 1024 + 56320;
                        codeUnits.push(highSurrogate, lowSurrogate);
                      }
                      if (index + 1 === length || codeUnits.length > MAX_SIZE) {
                        result += stringFromCharCode.apply(null, codeUnits);
                        codeUnits.length = 0;
                      }
                    }
                    return result;
                  };
                  if (Object.defineProperty) {
                    Object.defineProperty(String, "fromCodePoint", {
                      value: fromCodePoint,
                      configurable: true,
                      writable: true
                    });
                  } else {
                    String.fromCodePoint = fromCodePoint;
                  }
                })();
              }
            })(typeof exports2 === "undefined" ? this.sax = {} : exports2);
          }).call(this, require2("buffer").Buffer);
        }, { "buffer": 77, "stream": 152, "string_decoder": 153 }], 152: [function(require2, module2, exports2) {
          module2.exports = Stream;
          var EE = require2("events").EventEmitter;
          var inherits2 = require2("inherits");
          inherits2(Stream, EE);
          Stream.Readable = require2("readable-stream/readable.js");
          Stream.Writable = require2("readable-stream/writable.js");
          Stream.Duplex = require2("readable-stream/duplex.js");
          Stream.Transform = require2("readable-stream/transform.js");
          Stream.PassThrough = require2("readable-stream/passthrough.js");
          Stream.Stream = Stream;
          function Stream() {
            EE.call(this);
          }
          Stream.prototype.pipe = function(dest, options2) {
            var source = this;
            function ondata(chunk) {
              if (dest.writable) {
                if (false === dest.write(chunk) && source.pause) {
                  source.pause();
                }
              }
            }
            source.on("data", ondata);
            function ondrain() {
              if (source.readable && source.resume) {
                source.resume();
              }
            }
            dest.on("drain", ondrain);
            if (!dest._isStdio && (!options2 || options2.end !== false)) {
              source.on("end", onend);
              source.on("close", onclose);
            }
            var didOnEnd = false;
            function onend() {
              if (didOnEnd) return;
              didOnEnd = true;
              dest.end();
            }
            function onclose() {
              if (didOnEnd) return;
              didOnEnd = true;
              if (typeof dest.destroy === "function") dest.destroy();
            }
            function onerror(er) {
              cleanup();
              if (EE.listenerCount(this, "error") === 0) {
                throw er;
              }
            }
            source.on("error", onerror);
            dest.on("error", onerror);
            function cleanup() {
              source.removeListener("data", ondata);
              dest.removeListener("drain", ondrain);
              source.removeListener("end", onend);
              source.removeListener("close", onclose);
              source.removeListener("error", onerror);
              dest.removeListener("error", onerror);
              source.removeListener("end", cleanup);
              source.removeListener("close", cleanup);
              dest.removeListener("close", cleanup);
            }
            source.on("end", cleanup);
            source.on("close", cleanup);
            dest.on("close", cleanup);
            dest.emit("pipe", source);
            return dest;
          };
        }, { "events": 81, "inherits": 83, "readable-stream/duplex.js": 140, "readable-stream/passthrough.js": 147, "readable-stream/readable.js": 148, "readable-stream/transform.js": 149, "readable-stream/writable.js": 150 }], 153: [function(require2, module2, exports2) {
          var Buffer3 = require2("buffer").Buffer;
          var isBufferEncoding = Buffer3.isEncoding || function(encoding) {
            switch (encoding && encoding.toLowerCase()) {
              case "hex":
              case "utf8":
              case "utf-8":
              case "ascii":
              case "binary":
              case "base64":
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
              case "raw":
                return true;
              default:
                return false;
            }
          };
          function assertEncoding(encoding) {
            if (encoding && !isBufferEncoding(encoding)) {
              throw new Error("Unknown encoding: " + encoding);
            }
          }
          var StringDecoder = exports2.StringDecoder = function(encoding) {
            this.encoding = (encoding || "utf8").toLowerCase().replace(/[-_]/, "");
            assertEncoding(encoding);
            switch (this.encoding) {
              case "utf8":
                this.surrogateSize = 3;
                break;
              case "ucs2":
              case "utf16le":
                this.surrogateSize = 2;
                this.detectIncompleteChar = utf16DetectIncompleteChar;
                break;
              case "base64":
                this.surrogateSize = 3;
                this.detectIncompleteChar = base64DetectIncompleteChar;
                break;
              default:
                this.write = passThroughWrite;
                return;
            }
            this.charBuffer = new Buffer3(6);
            this.charReceived = 0;
            this.charLength = 0;
          };
          StringDecoder.prototype.write = function(buffer) {
            var charStr = "";
            while (this.charLength) {
              var available = buffer.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer.length;
              buffer.copy(this.charBuffer, this.charReceived, 0, available);
              this.charReceived += available;
              if (this.charReceived < this.charLength) {
                return "";
              }
              buffer = buffer.slice(available, buffer.length);
              charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);
              var charCode = charStr.charCodeAt(charStr.length - 1);
              if (charCode >= 55296 && charCode <= 56319) {
                this.charLength += this.surrogateSize;
                charStr = "";
                continue;
              }
              this.charReceived = this.charLength = 0;
              if (buffer.length === 0) {
                return charStr;
              }
              break;
            }
            this.detectIncompleteChar(buffer);
            var end = buffer.length;
            if (this.charLength) {
              buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
              end -= this.charReceived;
            }
            charStr += buffer.toString(this.encoding, 0, end);
            var end = charStr.length - 1;
            var charCode = charStr.charCodeAt(end);
            if (charCode >= 55296 && charCode <= 56319) {
              var size = this.surrogateSize;
              this.charLength += size;
              this.charReceived += size;
              this.charBuffer.copy(this.charBuffer, size, 0, size);
              buffer.copy(this.charBuffer, 0, 0, size);
              return charStr.substring(0, end);
            }
            return charStr;
          };
          StringDecoder.prototype.detectIncompleteChar = function(buffer) {
            var i = buffer.length >= 3 ? 3 : buffer.length;
            for (; i > 0; i--) {
              var c = buffer[buffer.length - i];
              if (i == 1 && c >> 5 == 6) {
                this.charLength = 2;
                break;
              }
              if (i <= 2 && c >> 4 == 14) {
                this.charLength = 3;
                break;
              }
              if (i <= 3 && c >> 3 == 30) {
                this.charLength = 4;
                break;
              }
            }
            this.charReceived = i;
          };
          StringDecoder.prototype.end = function(buffer) {
            var res = "";
            if (buffer && buffer.length)
              res = this.write(buffer);
            if (this.charReceived) {
              var cr = this.charReceived;
              var buf = this.charBuffer;
              var enc = this.encoding;
              res += buf.slice(0, cr).toString(enc);
            }
            return res;
          };
          function passThroughWrite(buffer) {
            return buffer.toString(this.encoding);
          }
          function utf16DetectIncompleteChar(buffer) {
            this.charReceived = buffer.length % 2;
            this.charLength = this.charReceived ? 2 : 0;
          }
          function base64DetectIncompleteChar(buffer) {
            this.charReceived = buffer.length % 3;
            this.charLength = this.charReceived ? 3 : 0;
          }
        }, { "buffer": 77 }], 154: [function(require2, module2, exports2) {
          (function(global2) {
            (function(global3, factory) {
              typeof exports2 === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define("underscore", factory) : (global3 = typeof globalThis !== "undefined" ? globalThis : global3 || self, function() {
                var current = global3._;
                var exports3 = global3._ = factory();
                exports3.noConflict = function() {
                  global3._ = current;
                  return exports3;
                };
              }());
            })(this, function() {
              var VERSION = "1.13.1";
              var root = typeof self == "object" && self.self === self && self || typeof global2 == "object" && global2.global === global2 && global2 || Function("return this")() || {};
              var ArrayProto = Array.prototype, ObjProto = Object.prototype;
              var SymbolProto = typeof Symbol !== "undefined" ? Symbol.prototype : null;
              var push = ArrayProto.push, slice = ArrayProto.slice, toString = ObjProto.toString, hasOwnProperty = ObjProto.hasOwnProperty;
              var supportsArrayBuffer = typeof ArrayBuffer !== "undefined", supportsDataView = typeof DataView !== "undefined";
              var nativeIsArray = Array.isArray, nativeKeys = Object.keys, nativeCreate = Object.create, nativeIsView = supportsArrayBuffer && ArrayBuffer.isView;
              var _isNaN = isNaN, _isFinite = isFinite;
              var hasEnumBug = !{ toString: null }.propertyIsEnumerable("toString");
              var nonEnumerableProps = [
                "valueOf",
                "isPrototypeOf",
                "toString",
                "propertyIsEnumerable",
                "hasOwnProperty",
                "toLocaleString"
              ];
              var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
              function restArguments(func, startIndex) {
                startIndex = startIndex == null ? func.length - 1 : +startIndex;
                return function() {
                  var length = Math.max(arguments.length - startIndex, 0), rest2 = Array(length), index = 0;
                  for (; index < length; index++) {
                    rest2[index] = arguments[index + startIndex];
                  }
                  switch (startIndex) {
                    case 0:
                      return func.call(this, rest2);
                    case 1:
                      return func.call(this, arguments[0], rest2);
                    case 2:
                      return func.call(this, arguments[0], arguments[1], rest2);
                  }
                  var args = Array(startIndex + 1);
                  for (index = 0; index < startIndex; index++) {
                    args[index] = arguments[index];
                  }
                  args[startIndex] = rest2;
                  return func.apply(this, args);
                };
              }
              function isObject2(obj2) {
                var type = typeof obj2;
                return type === "function" || type === "object" && !!obj2;
              }
              function isNull(obj2) {
                return obj2 === null;
              }
              function isUndefined(obj2) {
                return obj2 === void 0;
              }
              function isBoolean(obj2) {
                return obj2 === true || obj2 === false || toString.call(obj2) === "[object Boolean]";
              }
              function isElement(obj2) {
                return !!(obj2 && obj2.nodeType === 1);
              }
              function tagTester(name) {
                var tag = "[object " + name + "]";
                return function(obj2) {
                  return toString.call(obj2) === tag;
                };
              }
              var isString = tagTester("String");
              var isNumber = tagTester("Number");
              var isDate = tagTester("Date");
              var isRegExp = tagTester("RegExp");
              var isError2 = tagTester("Error");
              var isSymbol = tagTester("Symbol");
              var isArrayBuffer = tagTester("ArrayBuffer");
              var isFunction = tagTester("Function");
              var nodelist = root.document && root.document.childNodes;
              if (typeof /./ != "function" && typeof Int8Array != "object" && typeof nodelist != "function") {
                isFunction = function(obj2) {
                  return typeof obj2 == "function" || false;
                };
              }
              var isFunction$1 = isFunction;
              var hasObjectTag = tagTester("Object");
              var hasStringTagBug = supportsDataView && hasObjectTag(new DataView(new ArrayBuffer(8))), isIE11 = typeof Map !== "undefined" && hasObjectTag(/* @__PURE__ */ new Map());
              var isDataView = tagTester("DataView");
              function ie10IsDataView(obj2) {
                return obj2 != null && isFunction$1(obj2.getInt8) && isArrayBuffer(obj2.buffer);
              }
              var isDataView$1 = hasStringTagBug ? ie10IsDataView : isDataView;
              var isArray = nativeIsArray || tagTester("Array");
              function has$1(obj2, key) {
                return obj2 != null && hasOwnProperty.call(obj2, key);
              }
              var isArguments = tagTester("Arguments");
              (function() {
                if (!isArguments(arguments)) {
                  isArguments = function(obj2) {
                    return has$1(obj2, "callee");
                  };
                }
              })();
              var isArguments$1 = isArguments;
              function isFinite$1(obj2) {
                return !isSymbol(obj2) && _isFinite(obj2) && !isNaN(parseFloat(obj2));
              }
              function isNaN$1(obj2) {
                return isNumber(obj2) && _isNaN(obj2);
              }
              function constant(value) {
                return function() {
                  return value;
                };
              }
              function createSizePropertyCheck(getSizeProperty) {
                return function(collection) {
                  var sizeProperty = getSizeProperty(collection);
                  return typeof sizeProperty == "number" && sizeProperty >= 0 && sizeProperty <= MAX_ARRAY_INDEX;
                };
              }
              function shallowProperty(key) {
                return function(obj2) {
                  return obj2 == null ? void 0 : obj2[key];
                };
              }
              var getByteLength = shallowProperty("byteLength");
              var isBufferLike = createSizePropertyCheck(getByteLength);
              var typedArrayPattern = /\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/;
              function isTypedArray(obj2) {
                return nativeIsView ? nativeIsView(obj2) && !isDataView$1(obj2) : isBufferLike(obj2) && typedArrayPattern.test(toString.call(obj2));
              }
              var isTypedArray$1 = supportsArrayBuffer ? isTypedArray : constant(false);
              var getLength = shallowProperty("length");
              function emulatedSet(keys2) {
                var hash = {};
                for (var l2 = keys2.length, i = 0; i < l2; ++i) hash[keys2[i]] = true;
                return {
                  contains: function(key) {
                    return hash[key];
                  },
                  push: function(key) {
                    hash[key] = true;
                    return keys2.push(key);
                  }
                };
              }
              function collectNonEnumProps(obj2, keys2) {
                keys2 = emulatedSet(keys2);
                var nonEnumIdx = nonEnumerableProps.length;
                var constructor = obj2.constructor;
                var proto = isFunction$1(constructor) && constructor.prototype || ObjProto;
                var prop = "constructor";
                if (has$1(obj2, prop) && !keys2.contains(prop)) keys2.push(prop);
                while (nonEnumIdx--) {
                  prop = nonEnumerableProps[nonEnumIdx];
                  if (prop in obj2 && obj2[prop] !== proto[prop] && !keys2.contains(prop)) {
                    keys2.push(prop);
                  }
                }
              }
              function keys(obj2) {
                if (!isObject2(obj2)) return [];
                if (nativeKeys) return nativeKeys(obj2);
                var keys2 = [];
                for (var key in obj2) if (has$1(obj2, key)) keys2.push(key);
                if (hasEnumBug) collectNonEnumProps(obj2, keys2);
                return keys2;
              }
              function isEmpty(obj2) {
                if (obj2 == null) return true;
                var length = getLength(obj2);
                if (typeof length == "number" && (isArray(obj2) || isString(obj2) || isArguments$1(obj2))) return length === 0;
                return getLength(keys(obj2)) === 0;
              }
              function isMatch(object2, attrs) {
                var _keys = keys(attrs), length = _keys.length;
                if (object2 == null) return !length;
                var obj2 = Object(object2);
                for (var i = 0; i < length; i++) {
                  var key = _keys[i];
                  if (attrs[key] !== obj2[key] || !(key in obj2)) return false;
                }
                return true;
              }
              function _$1(obj2) {
                if (obj2 instanceof _$1) return obj2;
                if (!(this instanceof _$1)) return new _$1(obj2);
                this._wrapped = obj2;
              }
              _$1.VERSION = VERSION;
              _$1.prototype.value = function() {
                return this._wrapped;
              };
              _$1.prototype.valueOf = _$1.prototype.toJSON = _$1.prototype.value;
              _$1.prototype.toString = function() {
                return String(this._wrapped);
              };
              function toBufferView(bufferSource) {
                return new Uint8Array(
                  bufferSource.buffer || bufferSource,
                  bufferSource.byteOffset || 0,
                  getByteLength(bufferSource)
                );
              }
              var tagDataView = "[object DataView]";
              function eq(a, b, aStack, bStack) {
                if (a === b) return a !== 0 || 1 / a === 1 / b;
                if (a == null || b == null) return false;
                if (a !== a) return b !== b;
                var type = typeof a;
                if (type !== "function" && type !== "object" && typeof b != "object") return false;
                return deepEq(a, b, aStack, bStack);
              }
              function deepEq(a, b, aStack, bStack) {
                if (a instanceof _$1) a = a._wrapped;
                if (b instanceof _$1) b = b._wrapped;
                var className = toString.call(a);
                if (className !== toString.call(b)) return false;
                if (hasStringTagBug && className == "[object Object]" && isDataView$1(a)) {
                  if (!isDataView$1(b)) return false;
                  className = tagDataView;
                }
                switch (className) {
                  // These types are compared by value.
                  case "[object RegExp]":
                  // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
                  case "[object String]":
                    return "" + a === "" + b;
                  case "[object Number]":
                    if (+a !== +a) return +b !== +b;
                    return +a === 0 ? 1 / +a === 1 / b : +a === +b;
                  case "[object Date]":
                  case "[object Boolean]":
                    return +a === +b;
                  case "[object Symbol]":
                    return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
                  case "[object ArrayBuffer]":
                  case tagDataView:
                    return deepEq(toBufferView(a), toBufferView(b), aStack, bStack);
                }
                var areArrays = className === "[object Array]";
                if (!areArrays && isTypedArray$1(a)) {
                  var byteLength = getByteLength(a);
                  if (byteLength !== getByteLength(b)) return false;
                  if (a.buffer === b.buffer && a.byteOffset === b.byteOffset) return true;
                  areArrays = true;
                }
                if (!areArrays) {
                  if (typeof a != "object" || typeof b != "object") return false;
                  var aCtor = a.constructor, bCtor = b.constructor;
                  if (aCtor !== bCtor && !(isFunction$1(aCtor) && aCtor instanceof aCtor && isFunction$1(bCtor) && bCtor instanceof bCtor) && ("constructor" in a && "constructor" in b)) {
                    return false;
                  }
                }
                aStack = aStack || [];
                bStack = bStack || [];
                var length = aStack.length;
                while (length--) {
                  if (aStack[length] === a) return bStack[length] === b;
                }
                aStack.push(a);
                bStack.push(b);
                if (areArrays) {
                  length = a.length;
                  if (length !== b.length) return false;
                  while (length--) {
                    if (!eq(a[length], b[length], aStack, bStack)) return false;
                  }
                } else {
                  var _keys = keys(a), key;
                  length = _keys.length;
                  if (keys(b).length !== length) return false;
                  while (length--) {
                    key = _keys[length];
                    if (!(has$1(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
                  }
                }
                aStack.pop();
                bStack.pop();
                return true;
              }
              function isEqual(a, b) {
                return eq(a, b);
              }
              function allKeys(obj2) {
                if (!isObject2(obj2)) return [];
                var keys2 = [];
                for (var key in obj2) keys2.push(key);
                if (hasEnumBug) collectNonEnumProps(obj2, keys2);
                return keys2;
              }
              function ie11fingerprint(methods) {
                var length = getLength(methods);
                return function(obj2) {
                  if (obj2 == null) return false;
                  var keys2 = allKeys(obj2);
                  if (getLength(keys2)) return false;
                  for (var i = 0; i < length; i++) {
                    if (!isFunction$1(obj2[methods[i]])) return false;
                  }
                  return methods !== weakMapMethods || !isFunction$1(obj2[forEachName]);
                };
              }
              var forEachName = "forEach", hasName = "has", commonInit = ["clear", "delete"], mapTail = ["get", hasName, "set"];
              var mapMethods = commonInit.concat(forEachName, mapTail), weakMapMethods = commonInit.concat(mapTail), setMethods = ["add"].concat(commonInit, forEachName, hasName);
              var isMap = isIE11 ? ie11fingerprint(mapMethods) : tagTester("Map");
              var isWeakMap = isIE11 ? ie11fingerprint(weakMapMethods) : tagTester("WeakMap");
              var isSet = isIE11 ? ie11fingerprint(setMethods) : tagTester("Set");
              var isWeakSet = tagTester("WeakSet");
              function values(obj2) {
                var _keys = keys(obj2);
                var length = _keys.length;
                var values2 = Array(length);
                for (var i = 0; i < length; i++) {
                  values2[i] = obj2[_keys[i]];
                }
                return values2;
              }
              function pairs(obj2) {
                var _keys = keys(obj2);
                var length = _keys.length;
                var pairs2 = Array(length);
                for (var i = 0; i < length; i++) {
                  pairs2[i] = [_keys[i], obj2[_keys[i]]];
                }
                return pairs2;
              }
              function invert(obj2) {
                var result2 = {};
                var _keys = keys(obj2);
                for (var i = 0, length = _keys.length; i < length; i++) {
                  result2[obj2[_keys[i]]] = _keys[i];
                }
                return result2;
              }
              function functions(obj2) {
                var names = [];
                for (var key in obj2) {
                  if (isFunction$1(obj2[key])) names.push(key);
                }
                return names.sort();
              }
              function createAssigner(keysFunc, defaults2) {
                return function(obj2) {
                  var length = arguments.length;
                  if (defaults2) obj2 = Object(obj2);
                  if (length < 2 || obj2 == null) return obj2;
                  for (var index = 1; index < length; index++) {
                    var source = arguments[index], keys2 = keysFunc(source), l2 = keys2.length;
                    for (var i = 0; i < l2; i++) {
                      var key = keys2[i];
                      if (!defaults2 || obj2[key] === void 0) obj2[key] = source[key];
                    }
                  }
                  return obj2;
                };
              }
              var extend = createAssigner(allKeys);
              var extendOwn = createAssigner(keys);
              var defaults = createAssigner(allKeys, true);
              function ctor() {
                return function() {
                };
              }
              function baseCreate(prototype) {
                if (!isObject2(prototype)) return {};
                if (nativeCreate) return nativeCreate(prototype);
                var Ctor = ctor();
                Ctor.prototype = prototype;
                var result2 = new Ctor();
                Ctor.prototype = null;
                return result2;
              }
              function create(prototype, props) {
                var result2 = baseCreate(prototype);
                if (props) extendOwn(result2, props);
                return result2;
              }
              function clone(obj2) {
                if (!isObject2(obj2)) return obj2;
                return isArray(obj2) ? obj2.slice() : extend({}, obj2);
              }
              function tap(obj2, interceptor) {
                interceptor(obj2);
                return obj2;
              }
              function toPath$1(path) {
                return isArray(path) ? path : [path];
              }
              _$1.toPath = toPath$1;
              function toPath(path) {
                return _$1.toPath(path);
              }
              function deepGet(obj2, path) {
                var length = path.length;
                for (var i = 0; i < length; i++) {
                  if (obj2 == null) return void 0;
                  obj2 = obj2[path[i]];
                }
                return length ? obj2 : void 0;
              }
              function get(object2, path, defaultValue) {
                var value = deepGet(object2, toPath(path));
                return isUndefined(value) ? defaultValue : value;
              }
              function has(obj2, path) {
                path = toPath(path);
                var length = path.length;
                for (var i = 0; i < length; i++) {
                  var key = path[i];
                  if (!has$1(obj2, key)) return false;
                  obj2 = obj2[key];
                }
                return !!length;
              }
              function identity(value) {
                return value;
              }
              function matcher(attrs) {
                attrs = extendOwn({}, attrs);
                return function(obj2) {
                  return isMatch(obj2, attrs);
                };
              }
              function property(path) {
                path = toPath(path);
                return function(obj2) {
                  return deepGet(obj2, path);
                };
              }
              function optimizeCb(func, context, argCount) {
                if (context === void 0) return func;
                switch (argCount == null ? 3 : argCount) {
                  case 1:
                    return function(value) {
                      return func.call(context, value);
                    };
                  // The 2-argument case is omitted because we’re not using it.
                  case 3:
                    return function(value, index, collection) {
                      return func.call(context, value, index, collection);
                    };
                  case 4:
                    return function(accumulator, value, index, collection) {
                      return func.call(context, accumulator, value, index, collection);
                    };
                }
                return function() {
                  return func.apply(context, arguments);
                };
              }
              function baseIteratee(value, context, argCount) {
                if (value == null) return identity;
                if (isFunction$1(value)) return optimizeCb(value, context, argCount);
                if (isObject2(value) && !isArray(value)) return matcher(value);
                return property(value);
              }
              function iteratee(value, context) {
                return baseIteratee(value, context, Infinity);
              }
              _$1.iteratee = iteratee;
              function cb(value, context, argCount) {
                if (_$1.iteratee !== iteratee) return _$1.iteratee(value, context);
                return baseIteratee(value, context, argCount);
              }
              function mapObject(obj2, iteratee2, context) {
                iteratee2 = cb(iteratee2, context);
                var _keys = keys(obj2), length = _keys.length, results = {};
                for (var index = 0; index < length; index++) {
                  var currentKey = _keys[index];
                  results[currentKey] = iteratee2(obj2[currentKey], currentKey, obj2);
                }
                return results;
              }
              function noop() {
              }
              function propertyOf(obj2) {
                if (obj2 == null) return noop;
                return function(path) {
                  return get(obj2, path);
                };
              }
              function times(n, iteratee2, context) {
                var accum = Array(Math.max(0, n));
                iteratee2 = optimizeCb(iteratee2, context, 1);
                for (var i = 0; i < n; i++) accum[i] = iteratee2(i);
                return accum;
              }
              function random(min2, max2) {
                if (max2 == null) {
                  max2 = min2;
                  min2 = 0;
                }
                return min2 + Math.floor(Math.random() * (max2 - min2 + 1));
              }
              var now = Date.now || function() {
                return (/* @__PURE__ */ new Date()).getTime();
              };
              function createEscaper(map2) {
                var escaper = function(match) {
                  return map2[match];
                };
                var source = "(?:" + keys(map2).join("|") + ")";
                var testRegexp = RegExp(source);
                var replaceRegexp = RegExp(source, "g");
                return function(string) {
                  string = string == null ? "" : "" + string;
                  return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
                };
              }
              var escapeMap = {
                "&": "&amp;",
                "<": "&lt;",
                ">": "&gt;",
                '"': "&quot;",
                "'": "&#x27;",
                "`": "&#x60;"
              };
              var _escape = createEscaper(escapeMap);
              var unescapeMap = invert(escapeMap);
              var _unescape = createEscaper(unescapeMap);
              var templateSettings = _$1.templateSettings = {
                evaluate: /<%([\s\S]+?)%>/g,
                interpolate: /<%=([\s\S]+?)%>/g,
                escape: /<%-([\s\S]+?)%>/g
              };
              var noMatch = /(.)^/;
              var escapes = {
                "'": "'",
                "\\": "\\",
                "\r": "r",
                "\n": "n",
                "\u2028": "u2028",
                "\u2029": "u2029"
              };
              var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;
              function escapeChar(match) {
                return "\\" + escapes[match];
              }
              var bareIdentifier = /^\s*(\w|\$)+\s*$/;
              function template(text, settings, oldSettings) {
                if (!settings && oldSettings) settings = oldSettings;
                settings = defaults({}, settings, _$1.templateSettings);
                var matcher2 = RegExp([
                  (settings.escape || noMatch).source,
                  (settings.interpolate || noMatch).source,
                  (settings.evaluate || noMatch).source
                ].join("|") + "|$", "g");
                var index = 0;
                var source = "__p+='";
                text.replace(matcher2, function(match, escape, interpolate, evaluate, offset) {
                  source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
                  index = offset + match.length;
                  if (escape) {
                    source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
                  } else if (interpolate) {
                    source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
                  } else if (evaluate) {
                    source += "';\n" + evaluate + "\n__p+='";
                  }
                  return match;
                });
                source += "';\n";
                var argument = settings.variable;
                if (argument) {
                  if (!bareIdentifier.test(argument)) throw new Error(
                    "variable is not a bare identifier: " + argument
                  );
                } else {
                  source = "with(obj||{}){\n" + source + "}\n";
                  argument = "obj";
                }
                source = "var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n" + source + "return __p;\n";
                var render;
                try {
                  render = new Function(argument, "_", source);
                } catch (e) {
                  e.source = source;
                  throw e;
                }
                var template2 = function(data) {
                  return render.call(this, data, _$1);
                };
                template2.source = "function(" + argument + "){\n" + source + "}";
                return template2;
              }
              function result(obj2, path, fallback) {
                path = toPath(path);
                var length = path.length;
                if (!length) {
                  return isFunction$1(fallback) ? fallback.call(obj2) : fallback;
                }
                for (var i = 0; i < length; i++) {
                  var prop = obj2 == null ? void 0 : obj2[path[i]];
                  if (prop === void 0) {
                    prop = fallback;
                    i = length;
                  }
                  obj2 = isFunction$1(prop) ? prop.call(obj2) : prop;
                }
                return obj2;
              }
              var idCounter = 0;
              function uniqueId(prefix) {
                var id = ++idCounter + "";
                return prefix ? prefix + id : id;
              }
              function chain(obj2) {
                var instance = _$1(obj2);
                instance._chain = true;
                return instance;
              }
              function executeBound(sourceFunc, boundFunc, context, callingContext, args) {
                if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
                var self2 = baseCreate(sourceFunc.prototype);
                var result2 = sourceFunc.apply(self2, args);
                if (isObject2(result2)) return result2;
                return self2;
              }
              var partial = restArguments(function(func, boundArgs) {
                var placeholder = partial.placeholder;
                var bound = function() {
                  var position = 0, length = boundArgs.length;
                  var args = Array(length);
                  for (var i = 0; i < length; i++) {
                    args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
                  }
                  while (position < arguments.length) args.push(arguments[position++]);
                  return executeBound(func, bound, this, this, args);
                };
                return bound;
              });
              partial.placeholder = _$1;
              var bind = restArguments(function(func, context, args) {
                if (!isFunction$1(func)) throw new TypeError("Bind must be called on a function");
                var bound = restArguments(function(callArgs) {
                  return executeBound(func, bound, context, this, args.concat(callArgs));
                });
                return bound;
              });
              var isArrayLike = createSizePropertyCheck(getLength);
              function flatten$1(input, depth, strict, output) {
                output = output || [];
                if (!depth && depth !== 0) {
                  depth = Infinity;
                } else if (depth <= 0) {
                  return output.concat(input);
                }
                var idx = output.length;
                for (var i = 0, length = getLength(input); i < length; i++) {
                  var value = input[i];
                  if (isArrayLike(value) && (isArray(value) || isArguments$1(value))) {
                    if (depth > 1) {
                      flatten$1(value, depth - 1, strict, output);
                      idx = output.length;
                    } else {
                      var j = 0, len = value.length;
                      while (j < len) output[idx++] = value[j++];
                    }
                  } else if (!strict) {
                    output[idx++] = value;
                  }
                }
                return output;
              }
              var bindAll = restArguments(function(obj2, keys2) {
                keys2 = flatten$1(keys2, false, false);
                var index = keys2.length;
                if (index < 1) throw new Error("bindAll must be passed function names");
                while (index--) {
                  var key = keys2[index];
                  obj2[key] = bind(obj2[key], obj2);
                }
                return obj2;
              });
              function memoize(func, hasher) {
                var memoize2 = function(key) {
                  var cache = memoize2.cache;
                  var address = "" + (hasher ? hasher.apply(this, arguments) : key);
                  if (!has$1(cache, address)) cache[address] = func.apply(this, arguments);
                  return cache[address];
                };
                memoize2.cache = {};
                return memoize2;
              }
              var delay = restArguments(function(func, wait, args) {
                return setTimeout(function() {
                  return func.apply(null, args);
                }, wait);
              });
              var defer = partial(delay, _$1, 1);
              function throttle(func, wait, options2) {
                var timeout, context, args, result2;
                var previous = 0;
                if (!options2) options2 = {};
                var later = function() {
                  previous = options2.leading === false ? 0 : now();
                  timeout = null;
                  result2 = func.apply(context, args);
                  if (!timeout) context = args = null;
                };
                var throttled = function() {
                  var _now = now();
                  if (!previous && options2.leading === false) previous = _now;
                  var remaining = wait - (_now - previous);
                  context = this;
                  args = arguments;
                  if (remaining <= 0 || remaining > wait) {
                    if (timeout) {
                      clearTimeout(timeout);
                      timeout = null;
                    }
                    previous = _now;
                    result2 = func.apply(context, args);
                    if (!timeout) context = args = null;
                  } else if (!timeout && options2.trailing !== false) {
                    timeout = setTimeout(later, remaining);
                  }
                  return result2;
                };
                throttled.cancel = function() {
                  clearTimeout(timeout);
                  previous = 0;
                  timeout = context = args = null;
                };
                return throttled;
              }
              function debounce(func, wait, immediate) {
                var timeout, previous, args, result2, context;
                var later = function() {
                  var passed = now() - previous;
                  if (wait > passed) {
                    timeout = setTimeout(later, wait - passed);
                  } else {
                    timeout = null;
                    if (!immediate) result2 = func.apply(context, args);
                    if (!timeout) args = context = null;
                  }
                };
                var debounced = restArguments(function(_args) {
                  context = this;
                  args = _args;
                  previous = now();
                  if (!timeout) {
                    timeout = setTimeout(later, wait);
                    if (immediate) result2 = func.apply(context, args);
                  }
                  return result2;
                });
                debounced.cancel = function() {
                  clearTimeout(timeout);
                  timeout = args = context = null;
                };
                return debounced;
              }
              function wrap(func, wrapper) {
                return partial(wrapper, func);
              }
              function negate(predicate) {
                return function() {
                  return !predicate.apply(this, arguments);
                };
              }
              function compose() {
                var args = arguments;
                var start = args.length - 1;
                return function() {
                  var i = start;
                  var result2 = args[start].apply(this, arguments);
                  while (i--) result2 = args[i].call(this, result2);
                  return result2;
                };
              }
              function after(times2, func) {
                return function() {
                  if (--times2 < 1) {
                    return func.apply(this, arguments);
                  }
                };
              }
              function before(times2, func) {
                var memo;
                return function() {
                  if (--times2 > 0) {
                    memo = func.apply(this, arguments);
                  }
                  if (times2 <= 1) func = null;
                  return memo;
                };
              }
              var once = partial(before, 2);
              function findKey(obj2, predicate, context) {
                predicate = cb(predicate, context);
                var _keys = keys(obj2), key;
                for (var i = 0, length = _keys.length; i < length; i++) {
                  key = _keys[i];
                  if (predicate(obj2[key], key, obj2)) return key;
                }
              }
              function createPredicateIndexFinder(dir) {
                return function(array, predicate, context) {
                  predicate = cb(predicate, context);
                  var length = getLength(array);
                  var index = dir > 0 ? 0 : length - 1;
                  for (; index >= 0 && index < length; index += dir) {
                    if (predicate(array[index], index, array)) return index;
                  }
                  return -1;
                };
              }
              var findIndex = createPredicateIndexFinder(1);
              var findLastIndex = createPredicateIndexFinder(-1);
              function sortedIndex(array, obj2, iteratee2, context) {
                iteratee2 = cb(iteratee2, context, 1);
                var value = iteratee2(obj2);
                var low = 0, high = getLength(array);
                while (low < high) {
                  var mid = Math.floor((low + high) / 2);
                  if (iteratee2(array[mid]) < value) low = mid + 1;
                  else high = mid;
                }
                return low;
              }
              function createIndexFinder(dir, predicateFind, sortedIndex2) {
                return function(array, item, idx) {
                  var i = 0, length = getLength(array);
                  if (typeof idx == "number") {
                    if (dir > 0) {
                      i = idx >= 0 ? idx : Math.max(idx + length, i);
                    } else {
                      length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
                    }
                  } else if (sortedIndex2 && idx && length) {
                    idx = sortedIndex2(array, item);
                    return array[idx] === item ? idx : -1;
                  }
                  if (item !== item) {
                    idx = predicateFind(slice.call(array, i, length), isNaN$1);
                    return idx >= 0 ? idx + i : -1;
                  }
                  for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
                    if (array[idx] === item) return idx;
                  }
                  return -1;
                };
              }
              var indexOf = createIndexFinder(1, findIndex, sortedIndex);
              var lastIndexOf = createIndexFinder(-1, findLastIndex);
              function find(obj2, predicate, context) {
                var keyFinder = isArrayLike(obj2) ? findIndex : findKey;
                var key = keyFinder(obj2, predicate, context);
                if (key !== void 0 && key !== -1) return obj2[key];
              }
              function findWhere(obj2, attrs) {
                return find(obj2, matcher(attrs));
              }
              function each(obj2, iteratee2, context) {
                iteratee2 = optimizeCb(iteratee2, context);
                var i, length;
                if (isArrayLike(obj2)) {
                  for (i = 0, length = obj2.length; i < length; i++) {
                    iteratee2(obj2[i], i, obj2);
                  }
                } else {
                  var _keys = keys(obj2);
                  for (i = 0, length = _keys.length; i < length; i++) {
                    iteratee2(obj2[_keys[i]], _keys[i], obj2);
                  }
                }
                return obj2;
              }
              function map(obj2, iteratee2, context) {
                iteratee2 = cb(iteratee2, context);
                var _keys = !isArrayLike(obj2) && keys(obj2), length = (_keys || obj2).length, results = Array(length);
                for (var index = 0; index < length; index++) {
                  var currentKey = _keys ? _keys[index] : index;
                  results[index] = iteratee2(obj2[currentKey], currentKey, obj2);
                }
                return results;
              }
              function createReduce(dir) {
                var reducer = function(obj2, iteratee2, memo, initial2) {
                  var _keys = !isArrayLike(obj2) && keys(obj2), length = (_keys || obj2).length, index = dir > 0 ? 0 : length - 1;
                  if (!initial2) {
                    memo = obj2[_keys ? _keys[index] : index];
                    index += dir;
                  }
                  for (; index >= 0 && index < length; index += dir) {
                    var currentKey = _keys ? _keys[index] : index;
                    memo = iteratee2(memo, obj2[currentKey], currentKey, obj2);
                  }
                  return memo;
                };
                return function(obj2, iteratee2, memo, context) {
                  var initial2 = arguments.length >= 3;
                  return reducer(obj2, optimizeCb(iteratee2, context, 4), memo, initial2);
                };
              }
              var reduce = createReduce(1);
              var reduceRight = createReduce(-1);
              function filter(obj2, predicate, context) {
                var results = [];
                predicate = cb(predicate, context);
                each(obj2, function(value, index, list) {
                  if (predicate(value, index, list)) results.push(value);
                });
                return results;
              }
              function reject(obj2, predicate, context) {
                return filter(obj2, negate(cb(predicate)), context);
              }
              function every(obj2, predicate, context) {
                predicate = cb(predicate, context);
                var _keys = !isArrayLike(obj2) && keys(obj2), length = (_keys || obj2).length;
                for (var index = 0; index < length; index++) {
                  var currentKey = _keys ? _keys[index] : index;
                  if (!predicate(obj2[currentKey], currentKey, obj2)) return false;
                }
                return true;
              }
              function some(obj2, predicate, context) {
                predicate = cb(predicate, context);
                var _keys = !isArrayLike(obj2) && keys(obj2), length = (_keys || obj2).length;
                for (var index = 0; index < length; index++) {
                  var currentKey = _keys ? _keys[index] : index;
                  if (predicate(obj2[currentKey], currentKey, obj2)) return true;
                }
                return false;
              }
              function contains(obj2, item, fromIndex, guard) {
                if (!isArrayLike(obj2)) obj2 = values(obj2);
                if (typeof fromIndex != "number" || guard) fromIndex = 0;
                return indexOf(obj2, item, fromIndex) >= 0;
              }
              var invoke = restArguments(function(obj2, path, args) {
                var contextPath, func;
                if (isFunction$1(path)) {
                  func = path;
                } else {
                  path = toPath(path);
                  contextPath = path.slice(0, -1);
                  path = path[path.length - 1];
                }
                return map(obj2, function(context) {
                  var method = func;
                  if (!method) {
                    if (contextPath && contextPath.length) {
                      context = deepGet(context, contextPath);
                    }
                    if (context == null) return void 0;
                    method = context[path];
                  }
                  return method == null ? method : method.apply(context, args);
                });
              });
              function pluck(obj2, key) {
                return map(obj2, property(key));
              }
              function where(obj2, attrs) {
                return filter(obj2, matcher(attrs));
              }
              function max(obj2, iteratee2, context) {
                var result2 = -Infinity, lastComputed = -Infinity, value, computed;
                if (iteratee2 == null || typeof iteratee2 == "number" && typeof obj2[0] != "object" && obj2 != null) {
                  obj2 = isArrayLike(obj2) ? obj2 : values(obj2);
                  for (var i = 0, length = obj2.length; i < length; i++) {
                    value = obj2[i];
                    if (value != null && value > result2) {
                      result2 = value;
                    }
                  }
                } else {
                  iteratee2 = cb(iteratee2, context);
                  each(obj2, function(v, index, list) {
                    computed = iteratee2(v, index, list);
                    if (computed > lastComputed || computed === -Infinity && result2 === -Infinity) {
                      result2 = v;
                      lastComputed = computed;
                    }
                  });
                }
                return result2;
              }
              function min(obj2, iteratee2, context) {
                var result2 = Infinity, lastComputed = Infinity, value, computed;
                if (iteratee2 == null || typeof iteratee2 == "number" && typeof obj2[0] != "object" && obj2 != null) {
                  obj2 = isArrayLike(obj2) ? obj2 : values(obj2);
                  for (var i = 0, length = obj2.length; i < length; i++) {
                    value = obj2[i];
                    if (value != null && value < result2) {
                      result2 = value;
                    }
                  }
                } else {
                  iteratee2 = cb(iteratee2, context);
                  each(obj2, function(v, index, list) {
                    computed = iteratee2(v, index, list);
                    if (computed < lastComputed || computed === Infinity && result2 === Infinity) {
                      result2 = v;
                      lastComputed = computed;
                    }
                  });
                }
                return result2;
              }
              function sample(obj2, n, guard) {
                if (n == null || guard) {
                  if (!isArrayLike(obj2)) obj2 = values(obj2);
                  return obj2[random(obj2.length - 1)];
                }
                var sample2 = isArrayLike(obj2) ? clone(obj2) : values(obj2);
                var length = getLength(sample2);
                n = Math.max(Math.min(n, length), 0);
                var last2 = length - 1;
                for (var index = 0; index < n; index++) {
                  var rand = random(index, last2);
                  var temp = sample2[index];
                  sample2[index] = sample2[rand];
                  sample2[rand] = temp;
                }
                return sample2.slice(0, n);
              }
              function shuffle(obj2) {
                return sample(obj2, Infinity);
              }
              function sortBy(obj2, iteratee2, context) {
                var index = 0;
                iteratee2 = cb(iteratee2, context);
                return pluck(map(obj2, function(value, key, list) {
                  return {
                    value,
                    index: index++,
                    criteria: iteratee2(value, key, list)
                  };
                }).sort(function(left, right) {
                  var a = left.criteria;
                  var b = right.criteria;
                  if (a !== b) {
                    if (a > b || a === void 0) return 1;
                    if (a < b || b === void 0) return -1;
                  }
                  return left.index - right.index;
                }), "value");
              }
              function group(behavior, partition2) {
                return function(obj2, iteratee2, context) {
                  var result2 = partition2 ? [[], []] : {};
                  iteratee2 = cb(iteratee2, context);
                  each(obj2, function(value, index) {
                    var key = iteratee2(value, index, obj2);
                    behavior(result2, value, key);
                  });
                  return result2;
                };
              }
              var groupBy = group(function(result2, value, key) {
                if (has$1(result2, key)) result2[key].push(value);
                else result2[key] = [value];
              });
              var indexBy = group(function(result2, value, key) {
                result2[key] = value;
              });
              var countBy = group(function(result2, value, key) {
                if (has$1(result2, key)) result2[key]++;
                else result2[key] = 1;
              });
              var partition = group(function(result2, value, pass) {
                result2[pass ? 0 : 1].push(value);
              }, true);
              var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
              function toArray(obj2) {
                if (!obj2) return [];
                if (isArray(obj2)) return slice.call(obj2);
                if (isString(obj2)) {
                  return obj2.match(reStrSymbol);
                }
                if (isArrayLike(obj2)) return map(obj2, identity);
                return values(obj2);
              }
              function size(obj2) {
                if (obj2 == null) return 0;
                return isArrayLike(obj2) ? obj2.length : keys(obj2).length;
              }
              function keyInObj(value, key, obj2) {
                return key in obj2;
              }
              var pick = restArguments(function(obj2, keys2) {
                var result2 = {}, iteratee2 = keys2[0];
                if (obj2 == null) return result2;
                if (isFunction$1(iteratee2)) {
                  if (keys2.length > 1) iteratee2 = optimizeCb(iteratee2, keys2[1]);
                  keys2 = allKeys(obj2);
                } else {
                  iteratee2 = keyInObj;
                  keys2 = flatten$1(keys2, false, false);
                  obj2 = Object(obj2);
                }
                for (var i = 0, length = keys2.length; i < length; i++) {
                  var key = keys2[i];
                  var value = obj2[key];
                  if (iteratee2(value, key, obj2)) result2[key] = value;
                }
                return result2;
              });
              var omit = restArguments(function(obj2, keys2) {
                var iteratee2 = keys2[0], context;
                if (isFunction$1(iteratee2)) {
                  iteratee2 = negate(iteratee2);
                  if (keys2.length > 1) context = keys2[1];
                } else {
                  keys2 = map(flatten$1(keys2, false, false), String);
                  iteratee2 = function(value, key) {
                    return !contains(keys2, key);
                  };
                }
                return pick(obj2, iteratee2, context);
              });
              function initial(array, n, guard) {
                return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
              }
              function first(array, n, guard) {
                if (array == null || array.length < 1) return n == null || guard ? void 0 : [];
                if (n == null || guard) return array[0];
                return initial(array, array.length - n);
              }
              function rest(array, n, guard) {
                return slice.call(array, n == null || guard ? 1 : n);
              }
              function last(array, n, guard) {
                if (array == null || array.length < 1) return n == null || guard ? void 0 : [];
                if (n == null || guard) return array[array.length - 1];
                return rest(array, Math.max(0, array.length - n));
              }
              function compact(array) {
                return filter(array, Boolean);
              }
              function flatten(array, depth) {
                return flatten$1(array, depth, false);
              }
              var difference = restArguments(function(array, rest2) {
                rest2 = flatten$1(rest2, true, true);
                return filter(array, function(value) {
                  return !contains(rest2, value);
                });
              });
              var without = restArguments(function(array, otherArrays) {
                return difference(array, otherArrays);
              });
              function uniq(array, isSorted, iteratee2, context) {
                if (!isBoolean(isSorted)) {
                  context = iteratee2;
                  iteratee2 = isSorted;
                  isSorted = false;
                }
                if (iteratee2 != null) iteratee2 = cb(iteratee2, context);
                var result2 = [];
                var seen = [];
                for (var i = 0, length = getLength(array); i < length; i++) {
                  var value = array[i], computed = iteratee2 ? iteratee2(value, i, array) : value;
                  if (isSorted && !iteratee2) {
                    if (!i || seen !== computed) result2.push(value);
                    seen = computed;
                  } else if (iteratee2) {
                    if (!contains(seen, computed)) {
                      seen.push(computed);
                      result2.push(value);
                    }
                  } else if (!contains(result2, value)) {
                    result2.push(value);
                  }
                }
                return result2;
              }
              var union = restArguments(function(arrays) {
                return uniq(flatten$1(arrays, true, true));
              });
              function intersection(array) {
                var result2 = [];
                var argsLength = arguments.length;
                for (var i = 0, length = getLength(array); i < length; i++) {
                  var item = array[i];
                  if (contains(result2, item)) continue;
                  var j;
                  for (j = 1; j < argsLength; j++) {
                    if (!contains(arguments[j], item)) break;
                  }
                  if (j === argsLength) result2.push(item);
                }
                return result2;
              }
              function unzip(array) {
                var length = array && max(array, getLength).length || 0;
                var result2 = Array(length);
                for (var index = 0; index < length; index++) {
                  result2[index] = pluck(array, index);
                }
                return result2;
              }
              var zip = restArguments(unzip);
              function object(list, values2) {
                var result2 = {};
                for (var i = 0, length = getLength(list); i < length; i++) {
                  if (values2) {
                    result2[list[i]] = values2[i];
                  } else {
                    result2[list[i][0]] = list[i][1];
                  }
                }
                return result2;
              }
              function range(start, stop, step) {
                if (stop == null) {
                  stop = start || 0;
                  start = 0;
                }
                if (!step) {
                  step = stop < start ? -1 : 1;
                }
                var length = Math.max(Math.ceil((stop - start) / step), 0);
                var range2 = Array(length);
                for (var idx = 0; idx < length; idx++, start += step) {
                  range2[idx] = start;
                }
                return range2;
              }
              function chunk(array, count) {
                if (count == null || count < 1) return [];
                var result2 = [];
                var i = 0, length = array.length;
                while (i < length) {
                  result2.push(slice.call(array, i, i += count));
                }
                return result2;
              }
              function chainResult(instance, obj2) {
                return instance._chain ? _$1(obj2).chain() : obj2;
              }
              function mixin(obj2) {
                each(functions(obj2), function(name) {
                  var func = _$1[name] = obj2[name];
                  _$1.prototype[name] = function() {
                    var args = [this._wrapped];
                    push.apply(args, arguments);
                    return chainResult(this, func.apply(_$1, args));
                  };
                });
                return _$1;
              }
              each(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function(name) {
                var method = ArrayProto[name];
                _$1.prototype[name] = function() {
                  var obj2 = this._wrapped;
                  if (obj2 != null) {
                    method.apply(obj2, arguments);
                    if ((name === "shift" || name === "splice") && obj2.length === 0) {
                      delete obj2[0];
                    }
                  }
                  return chainResult(this, obj2);
                };
              });
              each(["concat", "join", "slice"], function(name) {
                var method = ArrayProto[name];
                _$1.prototype[name] = function() {
                  var obj2 = this._wrapped;
                  if (obj2 != null) obj2 = method.apply(obj2, arguments);
                  return chainResult(this, obj2);
                };
              });
              var allExports = {
                __proto__: null,
                VERSION,
                restArguments,
                isObject: isObject2,
                isNull,
                isUndefined,
                isBoolean,
                isElement,
                isString,
                isNumber,
                isDate,
                isRegExp,
                isError: isError2,
                isSymbol,
                isArrayBuffer,
                isDataView: isDataView$1,
                isArray,
                isFunction: isFunction$1,
                isArguments: isArguments$1,
                isFinite: isFinite$1,
                isNaN: isNaN$1,
                isTypedArray: isTypedArray$1,
                isEmpty,
                isMatch,
                isEqual,
                isMap,
                isWeakMap,
                isSet,
                isWeakSet,
                keys,
                allKeys,
                values,
                pairs,
                invert,
                functions,
                methods: functions,
                extend,
                extendOwn,
                assign: extendOwn,
                defaults,
                create,
                clone,
                tap,
                get,
                has,
                mapObject,
                identity,
                constant,
                noop,
                toPath: toPath$1,
                property,
                propertyOf,
                matcher,
                matches: matcher,
                times,
                random,
                now,
                escape: _escape,
                unescape: _unescape,
                templateSettings,
                template,
                result,
                uniqueId,
                chain,
                iteratee,
                partial,
                bind,
                bindAll,
                memoize,
                delay,
                defer,
                throttle,
                debounce,
                wrap,
                negate,
                compose,
                after,
                before,
                once,
                findKey,
                findIndex,
                findLastIndex,
                sortedIndex,
                indexOf,
                lastIndexOf,
                find,
                detect: find,
                findWhere,
                each,
                forEach: each,
                map,
                collect: map,
                reduce,
                foldl: reduce,
                inject: reduce,
                reduceRight,
                foldr: reduceRight,
                filter,
                select: filter,
                reject,
                every,
                all: every,
                some,
                any: some,
                contains,
                includes: contains,
                include: contains,
                invoke,
                pluck,
                where,
                max,
                min,
                shuffle,
                sample,
                sortBy,
                groupBy,
                indexBy,
                countBy,
                partition,
                toArray,
                size,
                pick,
                omit,
                first,
                head: first,
                take: first,
                initial,
                last,
                rest,
                tail: rest,
                drop: rest,
                compact,
                flatten,
                without,
                uniq,
                unique: uniq,
                union,
                intersection,
                difference,
                unzip,
                transpose: unzip,
                zip,
                object,
                range,
                chunk,
                mixin,
                "default": _$1
              };
              var _ = mixin(allExports);
              _._ = _;
              return _;
            });
          }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        }, {}], 155: [function(require2, module2, exports2) {
          (function(global2) {
            module2.exports = deprecate;
            function deprecate(fn, msg) {
              if (config("noDeprecation")) {
                return fn;
              }
              var warned = false;
              function deprecated() {
                if (!warned) {
                  if (config("throwDeprecation")) {
                    throw new Error(msg);
                  } else if (config("traceDeprecation")) {
                    console.trace(msg);
                  } else {
                    console.warn(msg);
                  }
                  warned = true;
                }
                return fn.apply(this, arguments);
              }
              return deprecated;
            }
            function config(name) {
              try {
                if (!global2.localStorage) return false;
              } catch (_) {
                return false;
              }
              var val = global2.localStorage[name];
              if (null == val) return false;
              return String(val).toLowerCase() === "true";
            }
          }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        }, {}], 156: [function(require2, module2, exports2) {
          arguments[4][83][0].apply(exports2, arguments);
        }, { "dup": 83 }], 157: [function(require2, module2, exports2) {
          module2.exports = function isBuffer(arg) {
            return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
          };
        }, {}], 158: [function(require2, module2, exports2) {
          (function(process2, global2) {
            var formatRegExp = /%[sdj%]/g;
            exports2.format = function(f) {
              if (!isString(f)) {
                var objects = [];
                for (var i = 0; i < arguments.length; i++) {
                  objects.push(inspect(arguments[i]));
                }
                return objects.join(" ");
              }
              var i = 1;
              var args = arguments;
              var len = args.length;
              var str = String(f).replace(formatRegExp, function(x2) {
                if (x2 === "%%") return "%";
                if (i >= len) return x2;
                switch (x2) {
                  case "%s":
                    return String(args[i++]);
                  case "%d":
                    return Number(args[i++]);
                  case "%j":
                    try {
                      return JSON.stringify(args[i++]);
                    } catch (_) {
                      return "[Circular]";
                    }
                  default:
                    return x2;
                }
              });
              for (var x = args[i]; i < len; x = args[++i]) {
                if (isNull(x) || !isObject2(x)) {
                  str += " " + x;
                } else {
                  str += " " + inspect(x);
                }
              }
              return str;
            };
            exports2.deprecate = function(fn, msg) {
              if (isUndefined(global2.process)) {
                return function() {
                  return exports2.deprecate(fn, msg).apply(this, arguments);
                };
              }
              if (process2.noDeprecation === true) {
                return fn;
              }
              var warned = false;
              function deprecated() {
                if (!warned) {
                  if (process2.throwDeprecation) {
                    throw new Error(msg);
                  } else if (process2.traceDeprecation) {
                    console.trace(msg);
                  } else {
                    console.error(msg);
                  }
                  warned = true;
                }
                return fn.apply(this, arguments);
              }
              return deprecated;
            };
            var debugs = {};
            var debugEnviron;
            exports2.debuglog = function(set) {
              if (isUndefined(debugEnviron))
                debugEnviron = process2.env.NODE_DEBUG || "";
              set = set.toUpperCase();
              if (!debugs[set]) {
                if (new RegExp("\\b" + set + "\\b", "i").test(debugEnviron)) {
                  var pid = process2.pid;
                  debugs[set] = function() {
                    var msg = exports2.format.apply(exports2, arguments);
                    console.error("%s %d: %s", set, pid, msg);
                  };
                } else {
                  debugs[set] = function() {
                  };
                }
              }
              return debugs[set];
            };
            function inspect(obj2, opts) {
              var ctx = {
                seen: [],
                stylize: stylizeNoColor
              };
              if (arguments.length >= 3) ctx.depth = arguments[2];
              if (arguments.length >= 4) ctx.colors = arguments[3];
              if (isBoolean(opts)) {
                ctx.showHidden = opts;
              } else if (opts) {
                exports2._extend(ctx, opts);
              }
              if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
              if (isUndefined(ctx.depth)) ctx.depth = 2;
              if (isUndefined(ctx.colors)) ctx.colors = false;
              if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
              if (ctx.colors) ctx.stylize = stylizeWithColor;
              return formatValue(ctx, obj2, ctx.depth);
            }
            exports2.inspect = inspect;
            inspect.colors = {
              "bold": [1, 22],
              "italic": [3, 23],
              "underline": [4, 24],
              "inverse": [7, 27],
              "white": [37, 39],
              "grey": [90, 39],
              "black": [30, 39],
              "blue": [34, 39],
              "cyan": [36, 39],
              "green": [32, 39],
              "magenta": [35, 39],
              "red": [31, 39],
              "yellow": [33, 39]
            };
            inspect.styles = {
              "special": "cyan",
              "number": "yellow",
              "boolean": "yellow",
              "undefined": "grey",
              "null": "bold",
              "string": "green",
              "date": "magenta",
              // "name": intentionally not styling
              "regexp": "red"
            };
            function stylizeWithColor(str, styleType) {
              var style = inspect.styles[styleType];
              if (style) {
                return "\x1B[" + inspect.colors[style][0] + "m" + str + "\x1B[" + inspect.colors[style][1] + "m";
              } else {
                return str;
              }
            }
            function stylizeNoColor(str, styleType) {
              return str;
            }
            function arrayToHash(array) {
              var hash = {};
              array.forEach(function(val, idx) {
                hash[val] = true;
              });
              return hash;
            }
            function formatValue(ctx, value, recurseTimes) {
              if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
              value.inspect !== exports2.inspect && // Also filter out any prototype objects using the circular check.
              !(value.constructor && value.constructor.prototype === value)) {
                var ret2 = value.inspect(recurseTimes, ctx);
                if (!isString(ret2)) {
                  ret2 = formatValue(ctx, ret2, recurseTimes);
                }
                return ret2;
              }
              var primitive = formatPrimitive(ctx, value);
              if (primitive) {
                return primitive;
              }
              var keys = Object.keys(value);
              var visibleKeys = arrayToHash(keys);
              if (ctx.showHidden) {
                keys = Object.getOwnPropertyNames(value);
              }
              if (isError2(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
                return formatError(value);
              }
              if (keys.length === 0) {
                if (isFunction(value)) {
                  var name = value.name ? ": " + value.name : "";
                  return ctx.stylize("[Function" + name + "]", "special");
                }
                if (isRegExp(value)) {
                  return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
                }
                if (isDate(value)) {
                  return ctx.stylize(Date.prototype.toString.call(value), "date");
                }
                if (isError2(value)) {
                  return formatError(value);
                }
              }
              var base = "", array = false, braces = ["{", "}"];
              if (isArray(value)) {
                array = true;
                braces = ["[", "]"];
              }
              if (isFunction(value)) {
                var n = value.name ? ": " + value.name : "";
                base = " [Function" + n + "]";
              }
              if (isRegExp(value)) {
                base = " " + RegExp.prototype.toString.call(value);
              }
              if (isDate(value)) {
                base = " " + Date.prototype.toUTCString.call(value);
              }
              if (isError2(value)) {
                base = " " + formatError(value);
              }
              if (keys.length === 0 && (!array || value.length == 0)) {
                return braces[0] + base + braces[1];
              }
              if (recurseTimes < 0) {
                if (isRegExp(value)) {
                  return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
                } else {
                  return ctx.stylize("[Object]", "special");
                }
              }
              ctx.seen.push(value);
              var output;
              if (array) {
                output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
              } else {
                output = keys.map(function(key) {
                  return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
                });
              }
              ctx.seen.pop();
              return reduceToSingleString(output, base, braces);
            }
            function formatPrimitive(ctx, value) {
              if (isUndefined(value))
                return ctx.stylize("undefined", "undefined");
              if (isString(value)) {
                var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
                return ctx.stylize(simple, "string");
              }
              if (isNumber(value))
                return ctx.stylize("" + value, "number");
              if (isBoolean(value))
                return ctx.stylize("" + value, "boolean");
              if (isNull(value))
                return ctx.stylize("null", "null");
            }
            function formatError(value) {
              return "[" + Error.prototype.toString.call(value) + "]";
            }
            function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
              var output = [];
              for (var i = 0, l2 = value.length; i < l2; ++i) {
                if (hasOwnProperty(value, String(i))) {
                  output.push(formatProperty(
                    ctx,
                    value,
                    recurseTimes,
                    visibleKeys,
                    String(i),
                    true
                  ));
                } else {
                  output.push("");
                }
              }
              keys.forEach(function(key) {
                if (!key.match(/^\d+$/)) {
                  output.push(formatProperty(
                    ctx,
                    value,
                    recurseTimes,
                    visibleKeys,
                    key,
                    true
                  ));
                }
              });
              return output;
            }
            function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
              var name, str, desc;
              desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
              if (desc.get) {
                if (desc.set) {
                  str = ctx.stylize("[Getter/Setter]", "special");
                } else {
                  str = ctx.stylize("[Getter]", "special");
                }
              } else {
                if (desc.set) {
                  str = ctx.stylize("[Setter]", "special");
                }
              }
              if (!hasOwnProperty(visibleKeys, key)) {
                name = "[" + key + "]";
              }
              if (!str) {
                if (ctx.seen.indexOf(desc.value) < 0) {
                  if (isNull(recurseTimes)) {
                    str = formatValue(ctx, desc.value, null);
                  } else {
                    str = formatValue(ctx, desc.value, recurseTimes - 1);
                  }
                  if (str.indexOf("\n") > -1) {
                    if (array) {
                      str = str.split("\n").map(function(line) {
                        return "  " + line;
                      }).join("\n").substr(2);
                    } else {
                      str = "\n" + str.split("\n").map(function(line) {
                        return "   " + line;
                      }).join("\n");
                    }
                  }
                } else {
                  str = ctx.stylize("[Circular]", "special");
                }
              }
              if (isUndefined(name)) {
                if (array && key.match(/^\d+$/)) {
                  return str;
                }
                name = JSON.stringify("" + key);
                if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                  name = name.substr(1, name.length - 2);
                  name = ctx.stylize(name, "name");
                } else {
                  name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
                  name = ctx.stylize(name, "string");
                }
              }
              return name + ": " + str;
            }
            function reduceToSingleString(output, base, braces) {
              var numLinesEst = 0;
              var length = output.reduce(function(prev, cur) {
                numLinesEst++;
                if (cur.indexOf("\n") >= 0) numLinesEst++;
                return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
              }, 0);
              if (length > 60) {
                return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
              }
              return braces[0] + base + " " + output.join(", ") + " " + braces[1];
            }
            function isArray(ar) {
              return Array.isArray(ar);
            }
            exports2.isArray = isArray;
            function isBoolean(arg) {
              return typeof arg === "boolean";
            }
            exports2.isBoolean = isBoolean;
            function isNull(arg) {
              return arg === null;
            }
            exports2.isNull = isNull;
            function isNullOrUndefined(arg) {
              return arg == null;
            }
            exports2.isNullOrUndefined = isNullOrUndefined;
            function isNumber(arg) {
              return typeof arg === "number";
            }
            exports2.isNumber = isNumber;
            function isString(arg) {
              return typeof arg === "string";
            }
            exports2.isString = isString;
            function isSymbol(arg) {
              return typeof arg === "symbol";
            }
            exports2.isSymbol = isSymbol;
            function isUndefined(arg) {
              return arg === void 0;
            }
            exports2.isUndefined = isUndefined;
            function isRegExp(re) {
              return isObject2(re) && objectToString(re) === "[object RegExp]";
            }
            exports2.isRegExp = isRegExp;
            function isObject2(arg) {
              return typeof arg === "object" && arg !== null;
            }
            exports2.isObject = isObject2;
            function isDate(d) {
              return isObject2(d) && objectToString(d) === "[object Date]";
            }
            exports2.isDate = isDate;
            function isError2(e) {
              return isObject2(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
            }
            exports2.isError = isError2;
            function isFunction(arg) {
              return typeof arg === "function";
            }
            exports2.isFunction = isFunction;
            function isPrimitive2(arg) {
              return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
              typeof arg === "undefined";
            }
            exports2.isPrimitive = isPrimitive2;
            exports2.isBuffer = require2("./support/isBuffer");
            function objectToString(o) {
              return Object.prototype.toString.call(o);
            }
            function pad(n) {
              return n < 10 ? "0" + n.toString(10) : n.toString(10);
            }
            var months = [
              "Jan",
              "Feb",
              "Mar",
              "Apr",
              "May",
              "Jun",
              "Jul",
              "Aug",
              "Sep",
              "Oct",
              "Nov",
              "Dec"
            ];
            function timestamp() {
              var d = /* @__PURE__ */ new Date();
              var time = [
                pad(d.getHours()),
                pad(d.getMinutes()),
                pad(d.getSeconds())
              ].join(":");
              return [d.getDate(), months[d.getMonth()], time].join(" ");
            }
            exports2.log = function() {
              console.log("%s - %s", timestamp(), exports2.format.apply(exports2, arguments));
            };
            exports2.inherits = require2("inherits");
            exports2._extend = function(origin, add) {
              if (!add || !isObject2(add)) return origin;
              var keys = Object.keys(add);
              var i = keys.length;
              while (i--) {
                origin[keys[i]] = add[keys[i]];
              }
              return origin;
            };
            function hasOwnProperty(obj2, prop) {
              return Object.prototype.hasOwnProperty.call(obj2, prop);
            }
          }).call(this, require2("_process"), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        }, { "./support/isBuffer": 157, "_process": 139, "inherits": 156 }], 159: [function(require2, module2, exports2) {
          (function() {
            var assign, getValue, isArray, isEmpty, isFunction, isObject2, isPlainObject, slice = [].slice, hasProp = {}.hasOwnProperty;
            assign = function() {
              var i, key, len, source, sources, target;
              target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];
              if (isFunction(Object.assign)) {
                Object.assign.apply(null, arguments);
              } else {
                for (i = 0, len = sources.length; i < len; i++) {
                  source = sources[i];
                  if (source != null) {
                    for (key in source) {
                      if (!hasProp.call(source, key)) continue;
                      target[key] = source[key];
                    }
                  }
                }
              }
              return target;
            };
            isFunction = function(val) {
              return !!val && Object.prototype.toString.call(val) === "[object Function]";
            };
            isObject2 = function(val) {
              var ref;
              return !!val && ((ref = typeof val) === "function" || ref === "object");
            };
            isArray = function(val) {
              if (isFunction(Array.isArray)) {
                return Array.isArray(val);
              } else {
                return Object.prototype.toString.call(val) === "[object Array]";
              }
            };
            isEmpty = function(val) {
              var key;
              if (isArray(val)) {
                return !val.length;
              } else {
                for (key in val) {
                  if (!hasProp.call(val, key)) continue;
                  return false;
                }
                return true;
              }
            };
            isPlainObject = function(val) {
              var ctor, proto;
              return isObject2(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && typeof ctor === "function" && ctor instanceof ctor && Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object);
            };
            getValue = function(obj2) {
              if (isFunction(obj2.valueOf)) {
                return obj2.valueOf();
              } else {
                return obj2;
              }
            };
            module2.exports.assign = assign;
            module2.exports.isFunction = isFunction;
            module2.exports.isObject = isObject2;
            module2.exports.isArray = isArray;
            module2.exports.isEmpty = isEmpty;
            module2.exports.isPlainObject = isPlainObject;
            module2.exports.getValue = getValue;
          }).call(this);
        }, {}], 160: [function(require2, module2, exports2) {
          (function() {
            var XMLAttribute;
            module2.exports = XMLAttribute = function() {
              function XMLAttribute2(parent, name, value) {
                this.options = parent.options;
                this.stringify = parent.stringify;
                this.parent = parent;
                if (name == null) {
                  throw new Error("Missing attribute name. " + this.debugInfo(name));
                }
                if (value == null) {
                  throw new Error("Missing attribute value. " + this.debugInfo(name));
                }
                this.name = this.stringify.attName(name);
                this.value = this.stringify.attValue(value);
              }
              XMLAttribute2.prototype.clone = function() {
                return Object.create(this);
              };
              XMLAttribute2.prototype.toString = function(options2) {
                return this.options.writer.set(options2).attribute(this);
              };
              XMLAttribute2.prototype.debugInfo = function(name) {
                var ref, ref1;
                name = name || this.name;
                if (name == null && !((ref = this.parent) != null ? ref.name : void 0)) {
                  return "";
                } else if (name == null) {
                  return "parent: <" + this.parent.name + ">";
                } else if (!((ref1 = this.parent) != null ? ref1.name : void 0)) {
                  return "attribute: {" + name + "}";
                } else {
                  return "attribute: {" + name + "}, parent: <" + this.parent.name + ">";
                }
              };
              return XMLAttribute2;
            }();
          }).call(this);
        }, {}], 161: [function(require2, module2, exports2) {
          (function() {
            var XMLCData, XMLNode, extend = function(child, parent) {
              for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
              }
              function ctor() {
                this.constructor = child;
              }
              ctor.prototype = parent.prototype;
              child.prototype = new ctor();
              child.__super__ = parent.prototype;
              return child;
            }, hasProp = {}.hasOwnProperty;
            XMLNode = require2("./XMLNode");
            module2.exports = XMLCData = function(superClass) {
              extend(XMLCData2, superClass);
              function XMLCData2(parent, text) {
                XMLCData2.__super__.constructor.call(this, parent);
                if (text == null) {
                  throw new Error("Missing CDATA text. " + this.debugInfo());
                }
                this.text = this.stringify.cdata(text);
              }
              XMLCData2.prototype.clone = function() {
                return Object.create(this);
              };
              XMLCData2.prototype.toString = function(options2) {
                return this.options.writer.set(options2).cdata(this);
              };
              return XMLCData2;
            }(XMLNode);
          }).call(this);
        }, { "./XMLNode": 172 }], 162: [function(require2, module2, exports2) {
          (function() {
            var XMLComment, XMLNode, extend = function(child, parent) {
              for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
              }
              function ctor() {
                this.constructor = child;
              }
              ctor.prototype = parent.prototype;
              child.prototype = new ctor();
              child.__super__ = parent.prototype;
              return child;
            }, hasProp = {}.hasOwnProperty;
            XMLNode = require2("./XMLNode");
            module2.exports = XMLComment = function(superClass) {
              extend(XMLComment2, superClass);
              function XMLComment2(parent, text) {
                XMLComment2.__super__.constructor.call(this, parent);
                if (text == null) {
                  throw new Error("Missing comment text. " + this.debugInfo());
                }
                this.text = this.stringify.comment(text);
              }
              XMLComment2.prototype.clone = function() {
                return Object.create(this);
              };
              XMLComment2.prototype.toString = function(options2) {
                return this.options.writer.set(options2).comment(this);
              };
              return XMLComment2;
            }(XMLNode);
          }).call(this);
        }, { "./XMLNode": 172 }], 163: [function(require2, module2, exports2) {
          (function() {
            var XMLDTDAttList, XMLNode, extend = function(child, parent) {
              for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
              }
              function ctor() {
                this.constructor = child;
              }
              ctor.prototype = parent.prototype;
              child.prototype = new ctor();
              child.__super__ = parent.prototype;
              return child;
            }, hasProp = {}.hasOwnProperty;
            XMLNode = require2("./XMLNode");
            module2.exports = XMLDTDAttList = function(superClass) {
              extend(XMLDTDAttList2, superClass);
              function XMLDTDAttList2(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {
                XMLDTDAttList2.__super__.constructor.call(this, parent);
                if (elementName == null) {
                  throw new Error("Missing DTD element name. " + this.debugInfo());
                }
                if (attributeName == null) {
                  throw new Error("Missing DTD attribute name. " + this.debugInfo(elementName));
                }
                if (!attributeType) {
                  throw new Error("Missing DTD attribute type. " + this.debugInfo(elementName));
                }
                if (!defaultValueType) {
                  throw new Error("Missing DTD attribute default. " + this.debugInfo(elementName));
                }
                if (defaultValueType.indexOf("#") !== 0) {
                  defaultValueType = "#" + defaultValueType;
                }
                if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {
                  throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. " + this.debugInfo(elementName));
                }
                if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {
                  throw new Error("Default value only applies to #FIXED or #DEFAULT. " + this.debugInfo(elementName));
                }
                this.elementName = this.stringify.eleName(elementName);
                this.attributeName = this.stringify.attName(attributeName);
                this.attributeType = this.stringify.dtdAttType(attributeType);
                this.defaultValue = this.stringify.dtdAttDefault(defaultValue);
                this.defaultValueType = defaultValueType;
              }
              XMLDTDAttList2.prototype.toString = function(options2) {
                return this.options.writer.set(options2).dtdAttList(this);
              };
              return XMLDTDAttList2;
            }(XMLNode);
          }).call(this);
        }, { "./XMLNode": 172 }], 164: [function(require2, module2, exports2) {
          (function() {
            var XMLDTDElement, XMLNode, extend = function(child, parent) {
              for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
              }
              function ctor() {
                this.constructor = child;
              }
              ctor.prototype = parent.prototype;
              child.prototype = new ctor();
              child.__super__ = parent.prototype;
              return child;
            }, hasProp = {}.hasOwnProperty;
            XMLNode = require2("./XMLNode");
            module2.exports = XMLDTDElement = function(superClass) {
              extend(XMLDTDElement2, superClass);
              function XMLDTDElement2(parent, name, value) {
                XMLDTDElement2.__super__.constructor.call(this, parent);
                if (name == null) {
                  throw new Error("Missing DTD element name. " + this.debugInfo());
                }
                if (!value) {
                  value = "(#PCDATA)";
                }
                if (Array.isArray(value)) {
                  value = "(" + value.join(",") + ")";
                }
                this.name = this.stringify.eleName(name);
                this.value = this.stringify.dtdElementValue(value);
              }
              XMLDTDElement2.prototype.toString = function(options2) {
                return this.options.writer.set(options2).dtdElement(this);
              };
              return XMLDTDElement2;
            }(XMLNode);
          }).call(this);
        }, { "./XMLNode": 172 }], 165: [function(require2, module2, exports2) {
          (function() {
            var XMLDTDEntity, XMLNode, isObject2, extend = function(child, parent) {
              for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
              }
              function ctor() {
                this.constructor = child;
              }
              ctor.prototype = parent.prototype;
              child.prototype = new ctor();
              child.__super__ = parent.prototype;
              return child;
            }, hasProp = {}.hasOwnProperty;
            isObject2 = require2("./Utility").isObject;
            XMLNode = require2("./XMLNode");
            module2.exports = XMLDTDEntity = function(superClass) {
              extend(XMLDTDEntity2, superClass);
              function XMLDTDEntity2(parent, pe, name, value) {
                XMLDTDEntity2.__super__.constructor.call(this, parent);
                if (name == null) {
                  throw new Error("Missing DTD entity name. " + this.debugInfo(name));
                }
                if (value == null) {
                  throw new Error("Missing DTD entity value. " + this.debugInfo(name));
                }
                this.pe = !!pe;
                this.name = this.stringify.eleName(name);
                if (!isObject2(value)) {
                  this.value = this.stringify.dtdEntityValue(value);
                } else {
                  if (!value.pubID && !value.sysID) {
                    throw new Error("Public and/or system identifiers are required for an external entity. " + this.debugInfo(name));
                  }
                  if (value.pubID && !value.sysID) {
                    throw new Error("System identifier is required for a public external entity. " + this.debugInfo(name));
                  }
                  if (value.pubID != null) {
                    this.pubID = this.stringify.dtdPubID(value.pubID);
                  }
                  if (value.sysID != null) {
                    this.sysID = this.stringify.dtdSysID(value.sysID);
                  }
                  if (value.nData != null) {
                    this.nData = this.stringify.dtdNData(value.nData);
                  }
                  if (this.pe && this.nData) {
                    throw new Error("Notation declaration is not allowed in a parameter entity. " + this.debugInfo(name));
                  }
                }
              }
              XMLDTDEntity2.prototype.toString = function(options2) {
                return this.options.writer.set(options2).dtdEntity(this);
              };
              return XMLDTDEntity2;
            }(XMLNode);
          }).call(this);
        }, { "./Utility": 159, "./XMLNode": 172 }], 166: [function(require2, module2, exports2) {
          (function() {
            var XMLDTDNotation, XMLNode, extend = function(child, parent) {
              for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
              }
              function ctor() {
                this.constructor = child;
              }
              ctor.prototype = parent.prototype;
              child.prototype = new ctor();
              child.__super__ = parent.prototype;
              return child;
            }, hasProp = {}.hasOwnProperty;
            XMLNode = require2("./XMLNode");
            module2.exports = XMLDTDNotation = function(superClass) {
              extend(XMLDTDNotation2, superClass);
              function XMLDTDNotation2(parent, name, value) {
                XMLDTDNotation2.__super__.constructor.call(this, parent);
                if (name == null) {
                  throw new Error("Missing DTD notation name. " + this.debugInfo(name));
                }
                if (!value.pubID && !value.sysID) {
                  throw new Error("Public or system identifiers are required for an external entity. " + this.debugInfo(name));
                }
                this.name = this.stringify.eleName(name);
                if (value.pubID != null) {
                  this.pubID = this.stringify.dtdPubID(value.pubID);
                }
                if (value.sysID != null) {
                  this.sysID = this.stringify.dtdSysID(value.sysID);
                }
              }
              XMLDTDNotation2.prototype.toString = function(options2) {
                return this.options.writer.set(options2).dtdNotation(this);
              };
              return XMLDTDNotation2;
            }(XMLNode);
          }).call(this);
        }, { "./XMLNode": 172 }], 167: [function(require2, module2, exports2) {
          (function() {
            var XMLDeclaration, XMLNode, isObject2, extend = function(child, parent) {
              for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
              }
              function ctor() {
                this.constructor = child;
              }
              ctor.prototype = parent.prototype;
              child.prototype = new ctor();
              child.__super__ = parent.prototype;
              return child;
            }, hasProp = {}.hasOwnProperty;
            isObject2 = require2("./Utility").isObject;
            XMLNode = require2("./XMLNode");
            module2.exports = XMLDeclaration = function(superClass) {
              extend(XMLDeclaration2, superClass);
              function XMLDeclaration2(parent, version, encoding, standalone) {
                var ref;
                XMLDeclaration2.__super__.constructor.call(this, parent);
                if (isObject2(version)) {
                  ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;
                }
                if (!version) {
                  version = "1.0";
                }
                this.version = this.stringify.xmlVersion(version);
                if (encoding != null) {
                  this.encoding = this.stringify.xmlEncoding(encoding);
                }
                if (standalone != null) {
                  this.standalone = this.stringify.xmlStandalone(standalone);
                }
              }
              XMLDeclaration2.prototype.toString = function(options2) {
                return this.options.writer.set(options2).declaration(this);
              };
              return XMLDeclaration2;
            }(XMLNode);
          }).call(this);
        }, { "./Utility": 159, "./XMLNode": 172 }], 168: [function(require2, module2, exports2) {
          (function() {
            var XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLNode, isObject2, extend = function(child, parent) {
              for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
              }
              function ctor() {
                this.constructor = child;
              }
              ctor.prototype = parent.prototype;
              child.prototype = new ctor();
              child.__super__ = parent.prototype;
              return child;
            }, hasProp = {}.hasOwnProperty;
            isObject2 = require2("./Utility").isObject;
            XMLNode = require2("./XMLNode");
            XMLDTDAttList = require2("./XMLDTDAttList");
            XMLDTDEntity = require2("./XMLDTDEntity");
            XMLDTDElement = require2("./XMLDTDElement");
            XMLDTDNotation = require2("./XMLDTDNotation");
            module2.exports = XMLDocType = function(superClass) {
              extend(XMLDocType2, superClass);
              function XMLDocType2(parent, pubID, sysID) {
                var ref, ref1;
                XMLDocType2.__super__.constructor.call(this, parent);
                this.name = "!DOCTYPE";
                this.documentObject = parent;
                if (isObject2(pubID)) {
                  ref = pubID, pubID = ref.pubID, sysID = ref.sysID;
                }
                if (sysID == null) {
                  ref1 = [pubID, sysID], sysID = ref1[0], pubID = ref1[1];
                }
                if (pubID != null) {
                  this.pubID = this.stringify.dtdPubID(pubID);
                }
                if (sysID != null) {
                  this.sysID = this.stringify.dtdSysID(sysID);
                }
              }
              XMLDocType2.prototype.element = function(name, value) {
                var child;
                child = new XMLDTDElement(this, name, value);
                this.children.push(child);
                return this;
              };
              XMLDocType2.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
                var child;
                child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
                this.children.push(child);
                return this;
              };
              XMLDocType2.prototype.entity = function(name, value) {
                var child;
                child = new XMLDTDEntity(this, false, name, value);
                this.children.push(child);
                return this;
              };
              XMLDocType2.prototype.pEntity = function(name, value) {
                var child;
                child = new XMLDTDEntity(this, true, name, value);
                this.children.push(child);
                return this;
              };
              XMLDocType2.prototype.notation = function(name, value) {
                var child;
                child = new XMLDTDNotation(this, name, value);
                this.children.push(child);
                return this;
              };
              XMLDocType2.prototype.toString = function(options2) {
                return this.options.writer.set(options2).docType(this);
              };
              XMLDocType2.prototype.ele = function(name, value) {
                return this.element(name, value);
              };
              XMLDocType2.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
                return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);
              };
              XMLDocType2.prototype.ent = function(name, value) {
                return this.entity(name, value);
              };
              XMLDocType2.prototype.pent = function(name, value) {
                return this.pEntity(name, value);
              };
              XMLDocType2.prototype.not = function(name, value) {
                return this.notation(name, value);
              };
              XMLDocType2.prototype.up = function() {
                return this.root() || this.documentObject;
              };
              return XMLDocType2;
            }(XMLNode);
          }).call(this);
        }, { "./Utility": 159, "./XMLDTDAttList": 163, "./XMLDTDElement": 164, "./XMLDTDEntity": 165, "./XMLDTDNotation": 166, "./XMLNode": 172 }], 169: [function(require2, module2, exports2) {
          (function() {
            var XMLDocument, XMLNode, XMLStringWriter, XMLStringifier, isPlainObject, extend = function(child, parent) {
              for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
              }
              function ctor() {
                this.constructor = child;
              }
              ctor.prototype = parent.prototype;
              child.prototype = new ctor();
              child.__super__ = parent.prototype;
              return child;
            }, hasProp = {}.hasOwnProperty;
            isPlainObject = require2("./Utility").isPlainObject;
            XMLNode = require2("./XMLNode");
            XMLStringifier = require2("./XMLStringifier");
            XMLStringWriter = require2("./XMLStringWriter");
            module2.exports = XMLDocument = function(superClass) {
              extend(XMLDocument2, superClass);
              function XMLDocument2(options2) {
                XMLDocument2.__super__.constructor.call(this, null);
                this.name = "?xml";
                options2 || (options2 = {});
                if (!options2.writer) {
                  options2.writer = new XMLStringWriter();
                }
                this.options = options2;
                this.stringify = new XMLStringifier(options2);
                this.isDocument = true;
              }
              XMLDocument2.prototype.end = function(writer) {
                var writerOptions;
                if (!writer) {
                  writer = this.options.writer;
                } else if (isPlainObject(writer)) {
                  writerOptions = writer;
                  writer = this.options.writer.set(writerOptions);
                }
                return writer.document(this);
              };
              XMLDocument2.prototype.toString = function(options2) {
                return this.options.writer.set(options2).document(this);
              };
              return XMLDocument2;
            }(XMLNode);
          }).call(this);
        }, { "./Utility": 159, "./XMLNode": 172, "./XMLStringWriter": 176, "./XMLStringifier": 177 }], 170: [function(require2, module2, exports2) {
          (function() {
            var XMLAttribute, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDocumentCB, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLStringifier, XMLText, getValue, isFunction, isObject2, isPlainObject, ref, hasProp = {}.hasOwnProperty;
            ref = require2("./Utility"), isObject2 = ref.isObject, isFunction = ref.isFunction, isPlainObject = ref.isPlainObject, getValue = ref.getValue;
            XMLElement = require2("./XMLElement");
            XMLCData = require2("./XMLCData");
            XMLComment = require2("./XMLComment");
            XMLRaw = require2("./XMLRaw");
            XMLText = require2("./XMLText");
            XMLProcessingInstruction = require2("./XMLProcessingInstruction");
            XMLDeclaration = require2("./XMLDeclaration");
            XMLDocType = require2("./XMLDocType");
            XMLDTDAttList = require2("./XMLDTDAttList");
            XMLDTDEntity = require2("./XMLDTDEntity");
            XMLDTDElement = require2("./XMLDTDElement");
            XMLDTDNotation = require2("./XMLDTDNotation");
            XMLAttribute = require2("./XMLAttribute");
            XMLStringifier = require2("./XMLStringifier");
            XMLStringWriter = require2("./XMLStringWriter");
            module2.exports = XMLDocumentCB = function() {
              function XMLDocumentCB2(options2, onData, onEnd) {
                var writerOptions;
                this.name = "?xml";
                options2 || (options2 = {});
                if (!options2.writer) {
                  options2.writer = new XMLStringWriter(options2);
                } else if (isPlainObject(options2.writer)) {
                  writerOptions = options2.writer;
                  options2.writer = new XMLStringWriter(writerOptions);
                }
                this.options = options2;
                this.writer = options2.writer;
                this.stringify = new XMLStringifier(options2);
                this.onDataCallback = onData || function() {
                };
                this.onEndCallback = onEnd || function() {
                };
                this.currentNode = null;
                this.currentLevel = -1;
                this.openTags = {};
                this.documentStarted = false;
                this.documentCompleted = false;
                this.root = null;
              }
              XMLDocumentCB2.prototype.node = function(name, attributes, text) {
                var ref1;
                if (name == null) {
                  throw new Error("Missing node name.");
                }
                if (this.root && this.currentLevel === -1) {
                  throw new Error("Document can only have one root node. " + this.debugInfo(name));
                }
                this.openCurrent();
                name = getValue(name);
                if (attributes == null) {
                  attributes = {};
                }
                attributes = getValue(attributes);
                if (!isObject2(attributes)) {
                  ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];
                }
                this.currentNode = new XMLElement(this, name, attributes);
                this.currentNode.children = false;
                this.currentLevel++;
                this.openTags[this.currentLevel] = this.currentNode;
                if (text != null) {
                  this.text(text);
                }
                return this;
              };
              XMLDocumentCB2.prototype.element = function(name, attributes, text) {
                if (this.currentNode && this.currentNode instanceof XMLDocType) {
                  return this.dtdElement.apply(this, arguments);
                } else {
                  return this.node(name, attributes, text);
                }
              };
              XMLDocumentCB2.prototype.attribute = function(name, value) {
                var attName, attValue;
                if (!this.currentNode || this.currentNode.children) {
                  throw new Error("att() can only be used immediately after an ele() call in callback mode. " + this.debugInfo(name));
                }
                if (name != null) {
                  name = getValue(name);
                }
                if (isObject2(name)) {
                  for (attName in name) {
                    if (!hasProp.call(name, attName)) continue;
                    attValue = name[attName];
                    this.attribute(attName, attValue);
                  }
                } else {
                  if (isFunction(value)) {
                    value = value.apply();
                  }
                  if (!this.options.skipNullAttributes || value != null) {
                    this.currentNode.attributes[name] = new XMLAttribute(this, name, value);
                  }
                }
                return this;
              };
              XMLDocumentCB2.prototype.text = function(value) {
                var node;
                this.openCurrent();
                node = new XMLText(this, value);
                this.onData(this.writer.text(node, this.currentLevel + 1), this.currentLevel + 1);
                return this;
              };
              XMLDocumentCB2.prototype.cdata = function(value) {
                var node;
                this.openCurrent();
                node = new XMLCData(this, value);
                this.onData(this.writer.cdata(node, this.currentLevel + 1), this.currentLevel + 1);
                return this;
              };
              XMLDocumentCB2.prototype.comment = function(value) {
                var node;
                this.openCurrent();
                node = new XMLComment(this, value);
                this.onData(this.writer.comment(node, this.currentLevel + 1), this.currentLevel + 1);
                return this;
              };
              XMLDocumentCB2.prototype.raw = function(value) {
                var node;
                this.openCurrent();
                node = new XMLRaw(this, value);
                this.onData(this.writer.raw(node, this.currentLevel + 1), this.currentLevel + 1);
                return this;
              };
              XMLDocumentCB2.prototype.instruction = function(target, value) {
                var i, insTarget, insValue, len, node;
                this.openCurrent();
                if (target != null) {
                  target = getValue(target);
                }
                if (value != null) {
                  value = getValue(value);
                }
                if (Array.isArray(target)) {
                  for (i = 0, len = target.length; i < len; i++) {
                    insTarget = target[i];
                    this.instruction(insTarget);
                  }
                } else if (isObject2(target)) {
                  for (insTarget in target) {
                    if (!hasProp.call(target, insTarget)) continue;
                    insValue = target[insTarget];
                    this.instruction(insTarget, insValue);
                  }
                } else {
                  if (isFunction(value)) {
                    value = value.apply();
                  }
                  node = new XMLProcessingInstruction(this, target, value);
                  this.onData(this.writer.processingInstruction(node, this.currentLevel + 1), this.currentLevel + 1);
                }
                return this;
              };
              XMLDocumentCB2.prototype.declaration = function(version, encoding, standalone) {
                var node;
                this.openCurrent();
                if (this.documentStarted) {
                  throw new Error("declaration() must be the first node.");
                }
                node = new XMLDeclaration(this, version, encoding, standalone);
                this.onData(this.writer.declaration(node, this.currentLevel + 1), this.currentLevel + 1);
                return this;
              };
              XMLDocumentCB2.prototype.doctype = function(root, pubID, sysID) {
                this.openCurrent();
                if (root == null) {
                  throw new Error("Missing root node name.");
                }
                if (this.root) {
                  throw new Error("dtd() must come before the root node.");
                }
                this.currentNode = new XMLDocType(this, pubID, sysID);
                this.currentNode.rootNodeName = root;
                this.currentNode.children = false;
                this.currentLevel++;
                this.openTags[this.currentLevel] = this.currentNode;
                return this;
              };
              XMLDocumentCB2.prototype.dtdElement = function(name, value) {
                var node;
                this.openCurrent();
                node = new XMLDTDElement(this, name, value);
                this.onData(this.writer.dtdElement(node, this.currentLevel + 1), this.currentLevel + 1);
                return this;
              };
              XMLDocumentCB2.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
                var node;
                this.openCurrent();
                node = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
                this.onData(this.writer.dtdAttList(node, this.currentLevel + 1), this.currentLevel + 1);
                return this;
              };
              XMLDocumentCB2.prototype.entity = function(name, value) {
                var node;
                this.openCurrent();
                node = new XMLDTDEntity(this, false, name, value);
                this.onData(this.writer.dtdEntity(node, this.currentLevel + 1), this.currentLevel + 1);
                return this;
              };
              XMLDocumentCB2.prototype.pEntity = function(name, value) {
                var node;
                this.openCurrent();
                node = new XMLDTDEntity(this, true, name, value);
                this.onData(this.writer.dtdEntity(node, this.currentLevel + 1), this.currentLevel + 1);
                return this;
              };
              XMLDocumentCB2.prototype.notation = function(name, value) {
                var node;
                this.openCurrent();
                node = new XMLDTDNotation(this, name, value);
                this.onData(this.writer.dtdNotation(node, this.currentLevel + 1), this.currentLevel + 1);
                return this;
              };
              XMLDocumentCB2.prototype.up = function() {
                if (this.currentLevel < 0) {
                  throw new Error("The document node has no parent.");
                }
                if (this.currentNode) {
                  if (this.currentNode.children) {
                    this.closeNode(this.currentNode);
                  } else {
                    this.openNode(this.currentNode);
                  }
                  this.currentNode = null;
                } else {
                  this.closeNode(this.openTags[this.currentLevel]);
                }
                delete this.openTags[this.currentLevel];
                this.currentLevel--;
                return this;
              };
              XMLDocumentCB2.prototype.end = function() {
                while (this.currentLevel >= 0) {
                  this.up();
                }
                return this.onEnd();
              };
              XMLDocumentCB2.prototype.openCurrent = function() {
                if (this.currentNode) {
                  this.currentNode.children = true;
                  return this.openNode(this.currentNode);
                }
              };
              XMLDocumentCB2.prototype.openNode = function(node) {
                if (!node.isOpen) {
                  if (!this.root && this.currentLevel === 0 && node instanceof XMLElement) {
                    this.root = node;
                  }
                  this.onData(this.writer.openNode(node, this.currentLevel), this.currentLevel);
                  return node.isOpen = true;
                }
              };
              XMLDocumentCB2.prototype.closeNode = function(node) {
                if (!node.isClosed) {
                  this.onData(this.writer.closeNode(node, this.currentLevel), this.currentLevel);
                  return node.isClosed = true;
                }
              };
              XMLDocumentCB2.prototype.onData = function(chunk, level) {
                this.documentStarted = true;
                return this.onDataCallback(chunk, level + 1);
              };
              XMLDocumentCB2.prototype.onEnd = function() {
                this.documentCompleted = true;
                return this.onEndCallback();
              };
              XMLDocumentCB2.prototype.debugInfo = function(name) {
                if (name == null) {
                  return "";
                } else {
                  return "node: <" + name + ">";
                }
              };
              XMLDocumentCB2.prototype.ele = function() {
                return this.element.apply(this, arguments);
              };
              XMLDocumentCB2.prototype.nod = function(name, attributes, text) {
                return this.node(name, attributes, text);
              };
              XMLDocumentCB2.prototype.txt = function(value) {
                return this.text(value);
              };
              XMLDocumentCB2.prototype.dat = function(value) {
                return this.cdata(value);
              };
              XMLDocumentCB2.prototype.com = function(value) {
                return this.comment(value);
              };
              XMLDocumentCB2.prototype.ins = function(target, value) {
                return this.instruction(target, value);
              };
              XMLDocumentCB2.prototype.dec = function(version, encoding, standalone) {
                return this.declaration(version, encoding, standalone);
              };
              XMLDocumentCB2.prototype.dtd = function(root, pubID, sysID) {
                return this.doctype(root, pubID, sysID);
              };
              XMLDocumentCB2.prototype.e = function(name, attributes, text) {
                return this.element(name, attributes, text);
              };
              XMLDocumentCB2.prototype.n = function(name, attributes, text) {
                return this.node(name, attributes, text);
              };
              XMLDocumentCB2.prototype.t = function(value) {
                return this.text(value);
              };
              XMLDocumentCB2.prototype.d = function(value) {
                return this.cdata(value);
              };
              XMLDocumentCB2.prototype.c = function(value) {
                return this.comment(value);
              };
              XMLDocumentCB2.prototype.r = function(value) {
                return this.raw(value);
              };
              XMLDocumentCB2.prototype.i = function(target, value) {
                return this.instruction(target, value);
              };
              XMLDocumentCB2.prototype.att = function() {
                if (this.currentNode && this.currentNode instanceof XMLDocType) {
                  return this.attList.apply(this, arguments);
                } else {
                  return this.attribute.apply(this, arguments);
                }
              };
              XMLDocumentCB2.prototype.a = function() {
                if (this.currentNode && this.currentNode instanceof XMLDocType) {
                  return this.attList.apply(this, arguments);
                } else {
                  return this.attribute.apply(this, arguments);
                }
              };
              XMLDocumentCB2.prototype.ent = function(name, value) {
                return this.entity(name, value);
              };
              XMLDocumentCB2.prototype.pent = function(name, value) {
                return this.pEntity(name, value);
              };
              XMLDocumentCB2.prototype.not = function(name, value) {
                return this.notation(name, value);
              };
              return XMLDocumentCB2;
            }();
          }).call(this);
        }, { "./Utility": 159, "./XMLAttribute": 160, "./XMLCData": 161, "./XMLComment": 162, "./XMLDTDAttList": 163, "./XMLDTDElement": 164, "./XMLDTDEntity": 165, "./XMLDTDNotation": 166, "./XMLDeclaration": 167, "./XMLDocType": 168, "./XMLElement": 171, "./XMLProcessingInstruction": 173, "./XMLRaw": 174, "./XMLStringWriter": 176, "./XMLStringifier": 177, "./XMLText": 178 }], 171: [function(require2, module2, exports2) {
          (function() {
            var XMLAttribute, XMLElement, XMLNode, getValue, isFunction, isObject2, ref, extend = function(child, parent) {
              for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
              }
              function ctor() {
                this.constructor = child;
              }
              ctor.prototype = parent.prototype;
              child.prototype = new ctor();
              child.__super__ = parent.prototype;
              return child;
            }, hasProp = {}.hasOwnProperty;
            ref = require2("./Utility"), isObject2 = ref.isObject, isFunction = ref.isFunction, getValue = ref.getValue;
            XMLNode = require2("./XMLNode");
            XMLAttribute = require2("./XMLAttribute");
            module2.exports = XMLElement = function(superClass) {
              extend(XMLElement2, superClass);
              function XMLElement2(parent, name, attributes) {
                XMLElement2.__super__.constructor.call(this, parent);
                if (name == null) {
                  throw new Error("Missing element name. " + this.debugInfo());
                }
                this.name = this.stringify.eleName(name);
                this.attributes = {};
                if (attributes != null) {
                  this.attribute(attributes);
                }
                if (parent.isDocument) {
                  this.isRoot = true;
                  this.documentObject = parent;
                  parent.rootObject = this;
                }
              }
              XMLElement2.prototype.clone = function() {
                var att, attName, clonedSelf, ref1;
                clonedSelf = Object.create(this);
                if (clonedSelf.isRoot) {
                  clonedSelf.documentObject = null;
                }
                clonedSelf.attributes = {};
                ref1 = this.attributes;
                for (attName in ref1) {
                  if (!hasProp.call(ref1, attName)) continue;
                  att = ref1[attName];
                  clonedSelf.attributes[attName] = att.clone();
                }
                clonedSelf.children = [];
                this.children.forEach(function(child) {
                  var clonedChild;
                  clonedChild = child.clone();
                  clonedChild.parent = clonedSelf;
                  return clonedSelf.children.push(clonedChild);
                });
                return clonedSelf;
              };
              XMLElement2.prototype.attribute = function(name, value) {
                var attName, attValue;
                if (name != null) {
                  name = getValue(name);
                }
                if (isObject2(name)) {
                  for (attName in name) {
                    if (!hasProp.call(name, attName)) continue;
                    attValue = name[attName];
                    this.attribute(attName, attValue);
                  }
                } else {
                  if (isFunction(value)) {
                    value = value.apply();
                  }
                  if (!this.options.skipNullAttributes || value != null) {
                    this.attributes[name] = new XMLAttribute(this, name, value);
                  }
                }
                return this;
              };
              XMLElement2.prototype.removeAttribute = function(name) {
                var attName, i, len;
                if (name == null) {
                  throw new Error("Missing attribute name. " + this.debugInfo());
                }
                name = getValue(name);
                if (Array.isArray(name)) {
                  for (i = 0, len = name.length; i < len; i++) {
                    attName = name[i];
                    delete this.attributes[attName];
                  }
                } else {
                  delete this.attributes[name];
                }
                return this;
              };
              XMLElement2.prototype.toString = function(options2) {
                return this.options.writer.set(options2).element(this);
              };
              XMLElement2.prototype.att = function(name, value) {
                return this.attribute(name, value);
              };
              XMLElement2.prototype.a = function(name, value) {
                return this.attribute(name, value);
              };
              return XMLElement2;
            }(XMLNode);
          }).call(this);
        }, { "./Utility": 159, "./XMLAttribute": 160, "./XMLNode": 172 }], 172: [function(require2, module2, exports2) {
          (function() {
            var XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLElement, XMLNode, XMLProcessingInstruction, XMLRaw, XMLText, getValue, isEmpty, isFunction, isObject2, ref, hasProp = {}.hasOwnProperty;
            ref = require2("./Utility"), isObject2 = ref.isObject, isFunction = ref.isFunction, isEmpty = ref.isEmpty, getValue = ref.getValue;
            XMLElement = null;
            XMLCData = null;
            XMLComment = null;
            XMLDeclaration = null;
            XMLDocType = null;
            XMLRaw = null;
            XMLText = null;
            XMLProcessingInstruction = null;
            module2.exports = XMLNode = function() {
              function XMLNode2(parent) {
                this.parent = parent;
                if (this.parent) {
                  this.options = this.parent.options;
                  this.stringify = this.parent.stringify;
                }
                this.children = [];
                if (!XMLElement) {
                  XMLElement = require2("./XMLElement");
                  XMLCData = require2("./XMLCData");
                  XMLComment = require2("./XMLComment");
                  XMLDeclaration = require2("./XMLDeclaration");
                  XMLDocType = require2("./XMLDocType");
                  XMLRaw = require2("./XMLRaw");
                  XMLText = require2("./XMLText");
                  XMLProcessingInstruction = require2("./XMLProcessingInstruction");
                }
              }
              XMLNode2.prototype.element = function(name, attributes, text) {
                var childNode, item, j, k, key, lastChild, len, len1, ref1, val;
                lastChild = null;
                if (attributes == null) {
                  attributes = {};
                }
                attributes = getValue(attributes);
                if (!isObject2(attributes)) {
                  ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];
                }
                if (name != null) {
                  name = getValue(name);
                }
                if (Array.isArray(name)) {
                  for (j = 0, len = name.length; j < len; j++) {
                    item = name[j];
                    lastChild = this.element(item);
                  }
                } else if (isFunction(name)) {
                  lastChild = this.element(name.apply());
                } else if (isObject2(name)) {
                  for (key in name) {
                    if (!hasProp.call(name, key)) continue;
                    val = name[key];
                    if (isFunction(val)) {
                      val = val.apply();
                    }
                    if (isObject2(val) && isEmpty(val)) {
                      val = null;
                    }
                    if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {
                      lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);
                    } else if (!this.options.separateArrayItems && Array.isArray(val)) {
                      for (k = 0, len1 = val.length; k < len1; k++) {
                        item = val[k];
                        childNode = {};
                        childNode[key] = item;
                        lastChild = this.element(childNode);
                      }
                    } else if (isObject2(val)) {
                      lastChild = this.element(key);
                      lastChild.element(val);
                    } else {
                      lastChild = this.element(key, val);
                    }
                  }
                } else {
                  if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {
                    lastChild = this.text(text);
                  } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {
                    lastChild = this.cdata(text);
                  } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {
                    lastChild = this.comment(text);
                  } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {
                    lastChild = this.raw(text);
                  } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && name.indexOf(this.stringify.convertPIKey) === 0) {
                    lastChild = this.instruction(name.substr(this.stringify.convertPIKey.length), text);
                  } else {
                    lastChild = this.node(name, attributes, text);
                  }
                }
                if (lastChild == null) {
                  throw new Error("Could not create any elements with: " + name + ". " + this.debugInfo());
                }
                return lastChild;
              };
              XMLNode2.prototype.insertBefore = function(name, attributes, text) {
                var child, i, removed;
                if (this.isRoot) {
                  throw new Error("Cannot insert elements at root level. " + this.debugInfo(name));
                }
                i = this.parent.children.indexOf(this);
                removed = this.parent.children.splice(i);
                child = this.parent.element(name, attributes, text);
                Array.prototype.push.apply(this.parent.children, removed);
                return child;
              };
              XMLNode2.prototype.insertAfter = function(name, attributes, text) {
                var child, i, removed;
                if (this.isRoot) {
                  throw new Error("Cannot insert elements at root level. " + this.debugInfo(name));
                }
                i = this.parent.children.indexOf(this);
                removed = this.parent.children.splice(i + 1);
                child = this.parent.element(name, attributes, text);
                Array.prototype.push.apply(this.parent.children, removed);
                return child;
              };
              XMLNode2.prototype.remove = function() {
                var i, ref1;
                if (this.isRoot) {
                  throw new Error("Cannot remove the root element. " + this.debugInfo());
                }
                i = this.parent.children.indexOf(this);
                [].splice.apply(this.parent.children, [i, i - i + 1].concat(ref1 = [])), ref1;
                return this.parent;
              };
              XMLNode2.prototype.node = function(name, attributes, text) {
                var child, ref1;
                if (name != null) {
                  name = getValue(name);
                }
                attributes || (attributes = {});
                attributes = getValue(attributes);
                if (!isObject2(attributes)) {
                  ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];
                }
                child = new XMLElement(this, name, attributes);
                if (text != null) {
                  child.text(text);
                }
                this.children.push(child);
                return child;
              };
              XMLNode2.prototype.text = function(value) {
                var child;
                child = new XMLText(this, value);
                this.children.push(child);
                return this;
              };
              XMLNode2.prototype.cdata = function(value) {
                var child;
                child = new XMLCData(this, value);
                this.children.push(child);
                return this;
              };
              XMLNode2.prototype.comment = function(value) {
                var child;
                child = new XMLComment(this, value);
                this.children.push(child);
                return this;
              };
              XMLNode2.prototype.commentBefore = function(value) {
                var child, i, removed;
                i = this.parent.children.indexOf(this);
                removed = this.parent.children.splice(i);
                child = this.parent.comment(value);
                Array.prototype.push.apply(this.parent.children, removed);
                return this;
              };
              XMLNode2.prototype.commentAfter = function(value) {
                var child, i, removed;
                i = this.parent.children.indexOf(this);
                removed = this.parent.children.splice(i + 1);
                child = this.parent.comment(value);
                Array.prototype.push.apply(this.parent.children, removed);
                return this;
              };
              XMLNode2.prototype.raw = function(value) {
                var child;
                child = new XMLRaw(this, value);
                this.children.push(child);
                return this;
              };
              XMLNode2.prototype.instruction = function(target, value) {
                var insTarget, insValue, instruction, j, len;
                if (target != null) {
                  target = getValue(target);
                }
                if (value != null) {
                  value = getValue(value);
                }
                if (Array.isArray(target)) {
                  for (j = 0, len = target.length; j < len; j++) {
                    insTarget = target[j];
                    this.instruction(insTarget);
                  }
                } else if (isObject2(target)) {
                  for (insTarget in target) {
                    if (!hasProp.call(target, insTarget)) continue;
                    insValue = target[insTarget];
                    this.instruction(insTarget, insValue);
                  }
                } else {
                  if (isFunction(value)) {
                    value = value.apply();
                  }
                  instruction = new XMLProcessingInstruction(this, target, value);
                  this.children.push(instruction);
                }
                return this;
              };
              XMLNode2.prototype.instructionBefore = function(target, value) {
                var child, i, removed;
                i = this.parent.children.indexOf(this);
                removed = this.parent.children.splice(i);
                child = this.parent.instruction(target, value);
                Array.prototype.push.apply(this.parent.children, removed);
                return this;
              };
              XMLNode2.prototype.instructionAfter = function(target, value) {
                var child, i, removed;
                i = this.parent.children.indexOf(this);
                removed = this.parent.children.splice(i + 1);
                child = this.parent.instruction(target, value);
                Array.prototype.push.apply(this.parent.children, removed);
                return this;
              };
              XMLNode2.prototype.declaration = function(version, encoding, standalone) {
                var doc, xmldec;
                doc = this.document();
                xmldec = new XMLDeclaration(doc, version, encoding, standalone);
                if (doc.children[0] instanceof XMLDeclaration) {
                  doc.children[0] = xmldec;
                } else {
                  doc.children.unshift(xmldec);
                }
                return doc.root() || doc;
              };
              XMLNode2.prototype.doctype = function(pubID, sysID) {
                var child, doc, doctype, i, j, k, len, len1, ref1, ref2;
                doc = this.document();
                doctype = new XMLDocType(doc, pubID, sysID);
                ref1 = doc.children;
                for (i = j = 0, len = ref1.length; j < len; i = ++j) {
                  child = ref1[i];
                  if (child instanceof XMLDocType) {
                    doc.children[i] = doctype;
                    return doctype;
                  }
                }
                ref2 = doc.children;
                for (i = k = 0, len1 = ref2.length; k < len1; i = ++k) {
                  child = ref2[i];
                  if (child.isRoot) {
                    doc.children.splice(i, 0, doctype);
                    return doctype;
                  }
                }
                doc.children.push(doctype);
                return doctype;
              };
              XMLNode2.prototype.up = function() {
                if (this.isRoot) {
                  throw new Error("The root node has no parent. Use doc() if you need to get the document object.");
                }
                return this.parent;
              };
              XMLNode2.prototype.root = function() {
                var node;
                node = this;
                while (node) {
                  if (node.isDocument) {
                    return node.rootObject;
                  } else if (node.isRoot) {
                    return node;
                  } else {
                    node = node.parent;
                  }
                }
              };
              XMLNode2.prototype.document = function() {
                var node;
                node = this;
                while (node) {
                  if (node.isDocument) {
                    return node;
                  } else {
                    node = node.parent;
                  }
                }
              };
              XMLNode2.prototype.end = function(options2) {
                return this.document().end(options2);
              };
              XMLNode2.prototype.prev = function() {
                var i;
                i = this.parent.children.indexOf(this);
                if (i < 1) {
                  throw new Error("Already at the first node. " + this.debugInfo());
                }
                return this.parent.children[i - 1];
              };
              XMLNode2.prototype.next = function() {
                var i;
                i = this.parent.children.indexOf(this);
                if (i === -1 || i === this.parent.children.length - 1) {
                  throw new Error("Already at the last node. " + this.debugInfo());
                }
                return this.parent.children[i + 1];
              };
              XMLNode2.prototype.importDocument = function(doc) {
                var clonedRoot;
                clonedRoot = doc.root().clone();
                clonedRoot.parent = this;
                clonedRoot.isRoot = false;
                this.children.push(clonedRoot);
                return this;
              };
              XMLNode2.prototype.debugInfo = function(name) {
                var ref1, ref2;
                name = name || this.name;
                if (name == null && !((ref1 = this.parent) != null ? ref1.name : void 0)) {
                  return "";
                } else if (name == null) {
                  return "parent: <" + this.parent.name + ">";
                } else if (!((ref2 = this.parent) != null ? ref2.name : void 0)) {
                  return "node: <" + name + ">";
                } else {
                  return "node: <" + name + ">, parent: <" + this.parent.name + ">";
                }
              };
              XMLNode2.prototype.ele = function(name, attributes, text) {
                return this.element(name, attributes, text);
              };
              XMLNode2.prototype.nod = function(name, attributes, text) {
                return this.node(name, attributes, text);
              };
              XMLNode2.prototype.txt = function(value) {
                return this.text(value);
              };
              XMLNode2.prototype.dat = function(value) {
                return this.cdata(value);
              };
              XMLNode2.prototype.com = function(value) {
                return this.comment(value);
              };
              XMLNode2.prototype.ins = function(target, value) {
                return this.instruction(target, value);
              };
              XMLNode2.prototype.doc = function() {
                return this.document();
              };
              XMLNode2.prototype.dec = function(version, encoding, standalone) {
                return this.declaration(version, encoding, standalone);
              };
              XMLNode2.prototype.dtd = function(pubID, sysID) {
                return this.doctype(pubID, sysID);
              };
              XMLNode2.prototype.e = function(name, attributes, text) {
                return this.element(name, attributes, text);
              };
              XMLNode2.prototype.n = function(name, attributes, text) {
                return this.node(name, attributes, text);
              };
              XMLNode2.prototype.t = function(value) {
                return this.text(value);
              };
              XMLNode2.prototype.d = function(value) {
                return this.cdata(value);
              };
              XMLNode2.prototype.c = function(value) {
                return this.comment(value);
              };
              XMLNode2.prototype.r = function(value) {
                return this.raw(value);
              };
              XMLNode2.prototype.i = function(target, value) {
                return this.instruction(target, value);
              };
              XMLNode2.prototype.u = function() {
                return this.up();
              };
              XMLNode2.prototype.importXMLBuilder = function(doc) {
                return this.importDocument(doc);
              };
              return XMLNode2;
            }();
          }).call(this);
        }, { "./Utility": 159, "./XMLCData": 161, "./XMLComment": 162, "./XMLDeclaration": 167, "./XMLDocType": 168, "./XMLElement": 171, "./XMLProcessingInstruction": 173, "./XMLRaw": 174, "./XMLText": 178 }], 173: [function(require2, module2, exports2) {
          (function() {
            var XMLNode, XMLProcessingInstruction, extend = function(child, parent) {
              for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
              }
              function ctor() {
                this.constructor = child;
              }
              ctor.prototype = parent.prototype;
              child.prototype = new ctor();
              child.__super__ = parent.prototype;
              return child;
            }, hasProp = {}.hasOwnProperty;
            XMLNode = require2("./XMLNode");
            module2.exports = XMLProcessingInstruction = function(superClass) {
              extend(XMLProcessingInstruction2, superClass);
              function XMLProcessingInstruction2(parent, target, value) {
                XMLProcessingInstruction2.__super__.constructor.call(this, parent);
                if (target == null) {
                  throw new Error("Missing instruction target. " + this.debugInfo());
                }
                this.target = this.stringify.insTarget(target);
                if (value) {
                  this.value = this.stringify.insValue(value);
                }
              }
              XMLProcessingInstruction2.prototype.clone = function() {
                return Object.create(this);
              };
              XMLProcessingInstruction2.prototype.toString = function(options2) {
                return this.options.writer.set(options2).processingInstruction(this);
              };
              return XMLProcessingInstruction2;
            }(XMLNode);
          }).call(this);
        }, { "./XMLNode": 172 }], 174: [function(require2, module2, exports2) {
          (function() {
            var XMLNode, XMLRaw, extend = function(child, parent) {
              for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
              }
              function ctor() {
                this.constructor = child;
              }
              ctor.prototype = parent.prototype;
              child.prototype = new ctor();
              child.__super__ = parent.prototype;
              return child;
            }, hasProp = {}.hasOwnProperty;
            XMLNode = require2("./XMLNode");
            module2.exports = XMLRaw = function(superClass) {
              extend(XMLRaw2, superClass);
              function XMLRaw2(parent, text) {
                XMLRaw2.__super__.constructor.call(this, parent);
                if (text == null) {
                  throw new Error("Missing raw text. " + this.debugInfo());
                }
                this.value = this.stringify.raw(text);
              }
              XMLRaw2.prototype.clone = function() {
                return Object.create(this);
              };
              XMLRaw2.prototype.toString = function(options2) {
                return this.options.writer.set(options2).raw(this);
              };
              return XMLRaw2;
            }(XMLNode);
          }).call(this);
        }, { "./XMLNode": 172 }], 175: [function(require2, module2, exports2) {
          (function() {
            var XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStreamWriter, XMLText, XMLWriterBase, extend = function(child, parent) {
              for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
              }
              function ctor() {
                this.constructor = child;
              }
              ctor.prototype = parent.prototype;
              child.prototype = new ctor();
              child.__super__ = parent.prototype;
              return child;
            }, hasProp = {}.hasOwnProperty;
            XMLDeclaration = require2("./XMLDeclaration");
            XMLDocType = require2("./XMLDocType");
            XMLCData = require2("./XMLCData");
            XMLComment = require2("./XMLComment");
            XMLElement = require2("./XMLElement");
            XMLRaw = require2("./XMLRaw");
            XMLText = require2("./XMLText");
            XMLProcessingInstruction = require2("./XMLProcessingInstruction");
            XMLDTDAttList = require2("./XMLDTDAttList");
            XMLDTDElement = require2("./XMLDTDElement");
            XMLDTDEntity = require2("./XMLDTDEntity");
            XMLDTDNotation = require2("./XMLDTDNotation");
            XMLWriterBase = require2("./XMLWriterBase");
            module2.exports = XMLStreamWriter = function(superClass) {
              extend(XMLStreamWriter2, superClass);
              function XMLStreamWriter2(stream, options2) {
                XMLStreamWriter2.__super__.constructor.call(this, options2);
                this.stream = stream;
              }
              XMLStreamWriter2.prototype.document = function(doc) {
                var child, i, j, len, len1, ref, ref1, results;
                ref = doc.children;
                for (i = 0, len = ref.length; i < len; i++) {
                  child = ref[i];
                  child.isLastRootNode = false;
                }
                doc.children[doc.children.length - 1].isLastRootNode = true;
                ref1 = doc.children;
                results = [];
                for (j = 0, len1 = ref1.length; j < len1; j++) {
                  child = ref1[j];
                  switch (false) {
                    case !(child instanceof XMLDeclaration):
                      results.push(this.declaration(child));
                      break;
                    case !(child instanceof XMLDocType):
                      results.push(this.docType(child));
                      break;
                    case !(child instanceof XMLComment):
                      results.push(this.comment(child));
                      break;
                    case !(child instanceof XMLProcessingInstruction):
                      results.push(this.processingInstruction(child));
                      break;
                    default:
                      results.push(this.element(child));
                  }
                }
                return results;
              };
              XMLStreamWriter2.prototype.attribute = function(att) {
                return this.stream.write(" " + att.name + '="' + att.value + '"');
              };
              XMLStreamWriter2.prototype.cdata = function(node, level) {
                return this.stream.write(this.space(level) + "<![CDATA[" + node.text + "]]>" + this.endline(node));
              };
              XMLStreamWriter2.prototype.comment = function(node, level) {
                return this.stream.write(this.space(level) + "<!-- " + node.text + " -->" + this.endline(node));
              };
              XMLStreamWriter2.prototype.declaration = function(node, level) {
                this.stream.write(this.space(level));
                this.stream.write('<?xml version="' + node.version + '"');
                if (node.encoding != null) {
                  this.stream.write(' encoding="' + node.encoding + '"');
                }
                if (node.standalone != null) {
                  this.stream.write(' standalone="' + node.standalone + '"');
                }
                this.stream.write(this.spacebeforeslash + "?>");
                return this.stream.write(this.endline(node));
              };
              XMLStreamWriter2.prototype.docType = function(node, level) {
                var child, i, len, ref;
                level || (level = 0);
                this.stream.write(this.space(level));
                this.stream.write("<!DOCTYPE " + node.root().name);
                if (node.pubID && node.sysID) {
                  this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
                } else if (node.sysID) {
                  this.stream.write(' SYSTEM "' + node.sysID + '"');
                }
                if (node.children.length > 0) {
                  this.stream.write(" [");
                  this.stream.write(this.endline(node));
                  ref = node.children;
                  for (i = 0, len = ref.length; i < len; i++) {
                    child = ref[i];
                    switch (false) {
                      case !(child instanceof XMLDTDAttList):
                        this.dtdAttList(child, level + 1);
                        break;
                      case !(child instanceof XMLDTDElement):
                        this.dtdElement(child, level + 1);
                        break;
                      case !(child instanceof XMLDTDEntity):
                        this.dtdEntity(child, level + 1);
                        break;
                      case !(child instanceof XMLDTDNotation):
                        this.dtdNotation(child, level + 1);
                        break;
                      case !(child instanceof XMLCData):
                        this.cdata(child, level + 1);
                        break;
                      case !(child instanceof XMLComment):
                        this.comment(child, level + 1);
                        break;
                      case !(child instanceof XMLProcessingInstruction):
                        this.processingInstruction(child, level + 1);
                        break;
                      default:
                        throw new Error("Unknown DTD node type: " + child.constructor.name);
                    }
                  }
                  this.stream.write("]");
                }
                this.stream.write(this.spacebeforeslash + ">");
                return this.stream.write(this.endline(node));
              };
              XMLStreamWriter2.prototype.element = function(node, level) {
                var att, child, i, len, name, ref, ref1, space;
                level || (level = 0);
                space = this.space(level);
                this.stream.write(space + "<" + node.name);
                ref = node.attributes;
                for (name in ref) {
                  if (!hasProp.call(ref, name)) continue;
                  att = ref[name];
                  this.attribute(att);
                }
                if (node.children.length === 0 || node.children.every(function(e) {
                  return e.value === "";
                })) {
                  if (this.allowEmpty) {
                    this.stream.write("></" + node.name + ">");
                  } else {
                    this.stream.write(this.spacebeforeslash + "/>");
                  }
                } else if (this.pretty && node.children.length === 1 && node.children[0].value != null) {
                  this.stream.write(">");
                  this.stream.write(node.children[0].value);
                  this.stream.write("</" + node.name + ">");
                } else {
                  this.stream.write(">" + this.newline);
                  ref1 = node.children;
                  for (i = 0, len = ref1.length; i < len; i++) {
                    child = ref1[i];
                    switch (false) {
                      case !(child instanceof XMLCData):
                        this.cdata(child, level + 1);
                        break;
                      case !(child instanceof XMLComment):
                        this.comment(child, level + 1);
                        break;
                      case !(child instanceof XMLElement):
                        this.element(child, level + 1);
                        break;
                      case !(child instanceof XMLRaw):
                        this.raw(child, level + 1);
                        break;
                      case !(child instanceof XMLText):
                        this.text(child, level + 1);
                        break;
                      case !(child instanceof XMLProcessingInstruction):
                        this.processingInstruction(child, level + 1);
                        break;
                      default:
                        throw new Error("Unknown XML node type: " + child.constructor.name);
                    }
                  }
                  this.stream.write(space + "</" + node.name + ">");
                }
                return this.stream.write(this.endline(node));
              };
              XMLStreamWriter2.prototype.processingInstruction = function(node, level) {
                this.stream.write(this.space(level) + "<?" + node.target);
                if (node.value) {
                  this.stream.write(" " + node.value);
                }
                return this.stream.write(this.spacebeforeslash + "?>" + this.endline(node));
              };
              XMLStreamWriter2.prototype.raw = function(node, level) {
                return this.stream.write(this.space(level) + node.value + this.endline(node));
              };
              XMLStreamWriter2.prototype.text = function(node, level) {
                return this.stream.write(this.space(level) + node.value + this.endline(node));
              };
              XMLStreamWriter2.prototype.dtdAttList = function(node, level) {
                this.stream.write(this.space(level) + "<!ATTLIST " + node.elementName + " " + node.attributeName + " " + node.attributeType);
                if (node.defaultValueType !== "#DEFAULT") {
                  this.stream.write(" " + node.defaultValueType);
                }
                if (node.defaultValue) {
                  this.stream.write(' "' + node.defaultValue + '"');
                }
                return this.stream.write(this.spacebeforeslash + ">" + this.endline(node));
              };
              XMLStreamWriter2.prototype.dtdElement = function(node, level) {
                this.stream.write(this.space(level) + "<!ELEMENT " + node.name + " " + node.value);
                return this.stream.write(this.spacebeforeslash + ">" + this.endline(node));
              };
              XMLStreamWriter2.prototype.dtdEntity = function(node, level) {
                this.stream.write(this.space(level) + "<!ENTITY");
                if (node.pe) {
                  this.stream.write(" %");
                }
                this.stream.write(" " + node.name);
                if (node.value) {
                  this.stream.write(' "' + node.value + '"');
                } else {
                  if (node.pubID && node.sysID) {
                    this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
                  } else if (node.sysID) {
                    this.stream.write(' SYSTEM "' + node.sysID + '"');
                  }
                  if (node.nData) {
                    this.stream.write(" NDATA " + node.nData);
                  }
                }
                return this.stream.write(this.spacebeforeslash + ">" + this.endline(node));
              };
              XMLStreamWriter2.prototype.dtdNotation = function(node, level) {
                this.stream.write(this.space(level) + "<!NOTATION " + node.name);
                if (node.pubID && node.sysID) {
                  this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
                } else if (node.pubID) {
                  this.stream.write(' PUBLIC "' + node.pubID + '"');
                } else if (node.sysID) {
                  this.stream.write(' SYSTEM "' + node.sysID + '"');
                }
                return this.stream.write(this.spacebeforeslash + ">" + this.endline(node));
              };
              XMLStreamWriter2.prototype.endline = function(node) {
                if (!node.isLastRootNode) {
                  return this.newline;
                } else {
                  return "";
                }
              };
              return XMLStreamWriter2;
            }(XMLWriterBase);
          }).call(this);
        }, { "./XMLCData": 161, "./XMLComment": 162, "./XMLDTDAttList": 163, "./XMLDTDElement": 164, "./XMLDTDEntity": 165, "./XMLDTDNotation": 166, "./XMLDeclaration": 167, "./XMLDocType": 168, "./XMLElement": 171, "./XMLProcessingInstruction": 173, "./XMLRaw": 174, "./XMLText": 178, "./XMLWriterBase": 179 }], 176: [function(require2, module2, exports2) {
          (function() {
            var XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLText, XMLWriterBase, extend = function(child, parent) {
              for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
              }
              function ctor() {
                this.constructor = child;
              }
              ctor.prototype = parent.prototype;
              child.prototype = new ctor();
              child.__super__ = parent.prototype;
              return child;
            }, hasProp = {}.hasOwnProperty;
            XMLDeclaration = require2("./XMLDeclaration");
            XMLDocType = require2("./XMLDocType");
            XMLCData = require2("./XMLCData");
            XMLComment = require2("./XMLComment");
            XMLElement = require2("./XMLElement");
            XMLRaw = require2("./XMLRaw");
            XMLText = require2("./XMLText");
            XMLProcessingInstruction = require2("./XMLProcessingInstruction");
            XMLDTDAttList = require2("./XMLDTDAttList");
            XMLDTDElement = require2("./XMLDTDElement");
            XMLDTDEntity = require2("./XMLDTDEntity");
            XMLDTDNotation = require2("./XMLDTDNotation");
            XMLWriterBase = require2("./XMLWriterBase");
            module2.exports = XMLStringWriter = function(superClass) {
              extend(XMLStringWriter2, superClass);
              function XMLStringWriter2(options2) {
                XMLStringWriter2.__super__.constructor.call(this, options2);
              }
              XMLStringWriter2.prototype.document = function(doc) {
                var child, i, len, r, ref;
                this.textispresent = false;
                r = "";
                ref = doc.children;
                for (i = 0, len = ref.length; i < len; i++) {
                  child = ref[i];
                  r += function() {
                    switch (false) {
                      case !(child instanceof XMLDeclaration):
                        return this.declaration(child);
                      case !(child instanceof XMLDocType):
                        return this.docType(child);
                      case !(child instanceof XMLComment):
                        return this.comment(child);
                      case !(child instanceof XMLProcessingInstruction):
                        return this.processingInstruction(child);
                      default:
                        return this.element(child, 0);
                    }
                  }.call(this);
                }
                if (this.pretty && r.slice(-this.newline.length) === this.newline) {
                  r = r.slice(0, -this.newline.length);
                }
                return r;
              };
              XMLStringWriter2.prototype.attribute = function(att) {
                return " " + att.name + '="' + att.value + '"';
              };
              XMLStringWriter2.prototype.cdata = function(node, level) {
                return this.space(level) + "<![CDATA[" + node.text + "]]>" + this.newline;
              };
              XMLStringWriter2.prototype.comment = function(node, level) {
                return this.space(level) + "<!-- " + node.text + " -->" + this.newline;
              };
              XMLStringWriter2.prototype.declaration = function(node, level) {
                var r;
                r = this.space(level);
                r += '<?xml version="' + node.version + '"';
                if (node.encoding != null) {
                  r += ' encoding="' + node.encoding + '"';
                }
                if (node.standalone != null) {
                  r += ' standalone="' + node.standalone + '"';
                }
                r += this.spacebeforeslash + "?>";
                r += this.newline;
                return r;
              };
              XMLStringWriter2.prototype.docType = function(node, level) {
                var child, i, len, r, ref;
                level || (level = 0);
                r = this.space(level);
                r += "<!DOCTYPE " + node.root().name;
                if (node.pubID && node.sysID) {
                  r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
                } else if (node.sysID) {
                  r += ' SYSTEM "' + node.sysID + '"';
                }
                if (node.children.length > 0) {
                  r += " [";
                  r += this.newline;
                  ref = node.children;
                  for (i = 0, len = ref.length; i < len; i++) {
                    child = ref[i];
                    r += function() {
                      switch (false) {
                        case !(child instanceof XMLDTDAttList):
                          return this.dtdAttList(child, level + 1);
                        case !(child instanceof XMLDTDElement):
                          return this.dtdElement(child, level + 1);
                        case !(child instanceof XMLDTDEntity):
                          return this.dtdEntity(child, level + 1);
                        case !(child instanceof XMLDTDNotation):
                          return this.dtdNotation(child, level + 1);
                        case !(child instanceof XMLCData):
                          return this.cdata(child, level + 1);
                        case !(child instanceof XMLComment):
                          return this.comment(child, level + 1);
                        case !(child instanceof XMLProcessingInstruction):
                          return this.processingInstruction(child, level + 1);
                        default:
                          throw new Error("Unknown DTD node type: " + child.constructor.name);
                      }
                    }.call(this);
                  }
                  r += "]";
                }
                r += this.spacebeforeslash + ">";
                r += this.newline;
                return r;
              };
              XMLStringWriter2.prototype.element = function(node, level) {
                var att, child, i, j, len, len1, name, r, ref, ref1, ref2, space, textispresentwasset;
                level || (level = 0);
                textispresentwasset = false;
                if (this.textispresent) {
                  this.newline = "";
                  this.pretty = false;
                } else {
                  this.newline = this.newlinedefault;
                  this.pretty = this.prettydefault;
                }
                space = this.space(level);
                r = "";
                r += space + "<" + node.name;
                ref = node.attributes;
                for (name in ref) {
                  if (!hasProp.call(ref, name)) continue;
                  att = ref[name];
                  r += this.attribute(att);
                }
                if (node.children.length === 0 || node.children.every(function(e) {
                  return e.value === "";
                })) {
                  if (this.allowEmpty) {
                    r += "></" + node.name + ">" + this.newline;
                  } else {
                    r += this.spacebeforeslash + "/>" + this.newline;
                  }
                } else if (this.pretty && node.children.length === 1 && node.children[0].value != null) {
                  r += ">";
                  r += node.children[0].value;
                  r += "</" + node.name + ">" + this.newline;
                } else {
                  if (this.dontprettytextnodes) {
                    ref1 = node.children;
                    for (i = 0, len = ref1.length; i < len; i++) {
                      child = ref1[i];
                      if (child.value != null) {
                        this.textispresent++;
                        textispresentwasset = true;
                        break;
                      }
                    }
                  }
                  if (this.textispresent) {
                    this.newline = "";
                    this.pretty = false;
                    space = this.space(level);
                  }
                  r += ">" + this.newline;
                  ref2 = node.children;
                  for (j = 0, len1 = ref2.length; j < len1; j++) {
                    child = ref2[j];
                    r += function() {
                      switch (false) {
                        case !(child instanceof XMLCData):
                          return this.cdata(child, level + 1);
                        case !(child instanceof XMLComment):
                          return this.comment(child, level + 1);
                        case !(child instanceof XMLElement):
                          return this.element(child, level + 1);
                        case !(child instanceof XMLRaw):
                          return this.raw(child, level + 1);
                        case !(child instanceof XMLText):
                          return this.text(child, level + 1);
                        case !(child instanceof XMLProcessingInstruction):
                          return this.processingInstruction(child, level + 1);
                        default:
                          throw new Error("Unknown XML node type: " + child.constructor.name);
                      }
                    }.call(this);
                  }
                  if (textispresentwasset) {
                    this.textispresent--;
                  }
                  if (!this.textispresent) {
                    this.newline = this.newlinedefault;
                    this.pretty = this.prettydefault;
                  }
                  r += space + "</" + node.name + ">" + this.newline;
                }
                return r;
              };
              XMLStringWriter2.prototype.processingInstruction = function(node, level) {
                var r;
                r = this.space(level) + "<?" + node.target;
                if (node.value) {
                  r += " " + node.value;
                }
                r += this.spacebeforeslash + "?>" + this.newline;
                return r;
              };
              XMLStringWriter2.prototype.raw = function(node, level) {
                return this.space(level) + node.value + this.newline;
              };
              XMLStringWriter2.prototype.text = function(node, level) {
                return this.space(level) + node.value + this.newline;
              };
              XMLStringWriter2.prototype.dtdAttList = function(node, level) {
                var r;
                r = this.space(level) + "<!ATTLIST " + node.elementName + " " + node.attributeName + " " + node.attributeType;
                if (node.defaultValueType !== "#DEFAULT") {
                  r += " " + node.defaultValueType;
                }
                if (node.defaultValue) {
                  r += ' "' + node.defaultValue + '"';
                }
                r += this.spacebeforeslash + ">" + this.newline;
                return r;
              };
              XMLStringWriter2.prototype.dtdElement = function(node, level) {
                return this.space(level) + "<!ELEMENT " + node.name + " " + node.value + this.spacebeforeslash + ">" + this.newline;
              };
              XMLStringWriter2.prototype.dtdEntity = function(node, level) {
                var r;
                r = this.space(level) + "<!ENTITY";
                if (node.pe) {
                  r += " %";
                }
                r += " " + node.name;
                if (node.value) {
                  r += ' "' + node.value + '"';
                } else {
                  if (node.pubID && node.sysID) {
                    r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
                  } else if (node.sysID) {
                    r += ' SYSTEM "' + node.sysID + '"';
                  }
                  if (node.nData) {
                    r += " NDATA " + node.nData;
                  }
                }
                r += this.spacebeforeslash + ">" + this.newline;
                return r;
              };
              XMLStringWriter2.prototype.dtdNotation = function(node, level) {
                var r;
                r = this.space(level) + "<!NOTATION " + node.name;
                if (node.pubID && node.sysID) {
                  r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
                } else if (node.pubID) {
                  r += ' PUBLIC "' + node.pubID + '"';
                } else if (node.sysID) {
                  r += ' SYSTEM "' + node.sysID + '"';
                }
                r += this.spacebeforeslash + ">" + this.newline;
                return r;
              };
              XMLStringWriter2.prototype.openNode = function(node, level) {
                var att, name, r, ref;
                level || (level = 0);
                if (node instanceof XMLElement) {
                  r = this.space(level) + "<" + node.name;
                  ref = node.attributes;
                  for (name in ref) {
                    if (!hasProp.call(ref, name)) continue;
                    att = ref[name];
                    r += this.attribute(att);
                  }
                  r += (node.children ? ">" : "/>") + this.newline;
                  return r;
                } else {
                  r = this.space(level) + "<!DOCTYPE " + node.rootNodeName;
                  if (node.pubID && node.sysID) {
                    r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
                  } else if (node.sysID) {
                    r += ' SYSTEM "' + node.sysID + '"';
                  }
                  r += (node.children ? " [" : ">") + this.newline;
                  return r;
                }
              };
              XMLStringWriter2.prototype.closeNode = function(node, level) {
                level || (level = 0);
                switch (false) {
                  case !(node instanceof XMLElement):
                    return this.space(level) + "</" + node.name + ">" + this.newline;
                  case !(node instanceof XMLDocType):
                    return this.space(level) + "]>" + this.newline;
                }
              };
              return XMLStringWriter2;
            }(XMLWriterBase);
          }).call(this);
        }, { "./XMLCData": 161, "./XMLComment": 162, "./XMLDTDAttList": 163, "./XMLDTDElement": 164, "./XMLDTDEntity": 165, "./XMLDTDNotation": 166, "./XMLDeclaration": 167, "./XMLDocType": 168, "./XMLElement": 171, "./XMLProcessingInstruction": 173, "./XMLRaw": 174, "./XMLText": 178, "./XMLWriterBase": 179 }], 177: [function(require2, module2, exports2) {
          (function() {
            var XMLStringifier, bind = function(fn, me) {
              return function() {
                return fn.apply(me, arguments);
              };
            }, hasProp = {}.hasOwnProperty;
            module2.exports = XMLStringifier = function() {
              function XMLStringifier2(options2) {
                this.assertLegalChar = bind(this.assertLegalChar, this);
                var key, ref, value;
                options2 || (options2 = {});
                this.noDoubleEncoding = options2.noDoubleEncoding;
                ref = options2.stringify || {};
                for (key in ref) {
                  if (!hasProp.call(ref, key)) continue;
                  value = ref[key];
                  this[key] = value;
                }
              }
              XMLStringifier2.prototype.eleName = function(val) {
                val = "" + val || "";
                return this.assertLegalChar(val);
              };
              XMLStringifier2.prototype.eleText = function(val) {
                val = "" + val || "";
                return this.assertLegalChar(this.elEscape(val));
              };
              XMLStringifier2.prototype.cdata = function(val) {
                val = "" + val || "";
                val = val.replace("]]>", "]]]]><![CDATA[>");
                return this.assertLegalChar(val);
              };
              XMLStringifier2.prototype.comment = function(val) {
                val = "" + val || "";
                if (val.match(/--/)) {
                  throw new Error("Comment text cannot contain double-hypen: " + val);
                }
                return this.assertLegalChar(val);
              };
              XMLStringifier2.prototype.raw = function(val) {
                return "" + val || "";
              };
              XMLStringifier2.prototype.attName = function(val) {
                return val = "" + val || "";
              };
              XMLStringifier2.prototype.attValue = function(val) {
                val = "" + val || "";
                return this.attEscape(val);
              };
              XMLStringifier2.prototype.insTarget = function(val) {
                return "" + val || "";
              };
              XMLStringifier2.prototype.insValue = function(val) {
                val = "" + val || "";
                if (val.match(/\?>/)) {
                  throw new Error("Invalid processing instruction value: " + val);
                }
                return val;
              };
              XMLStringifier2.prototype.xmlVersion = function(val) {
                val = "" + val || "";
                if (!val.match(/1\.[0-9]+/)) {
                  throw new Error("Invalid version number: " + val);
                }
                return val;
              };
              XMLStringifier2.prototype.xmlEncoding = function(val) {
                val = "" + val || "";
                if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {
                  throw new Error("Invalid encoding: " + val);
                }
                return val;
              };
              XMLStringifier2.prototype.xmlStandalone = function(val) {
                if (val) {
                  return "yes";
                } else {
                  return "no";
                }
              };
              XMLStringifier2.prototype.dtdPubID = function(val) {
                return "" + val || "";
              };
              XMLStringifier2.prototype.dtdSysID = function(val) {
                return "" + val || "";
              };
              XMLStringifier2.prototype.dtdElementValue = function(val) {
                return "" + val || "";
              };
              XMLStringifier2.prototype.dtdAttType = function(val) {
                return "" + val || "";
              };
              XMLStringifier2.prototype.dtdAttDefault = function(val) {
                if (val != null) {
                  return "" + val || "";
                } else {
                  return val;
                }
              };
              XMLStringifier2.prototype.dtdEntityValue = function(val) {
                return "" + val || "";
              };
              XMLStringifier2.prototype.dtdNData = function(val) {
                return "" + val || "";
              };
              XMLStringifier2.prototype.convertAttKey = "@";
              XMLStringifier2.prototype.convertPIKey = "?";
              XMLStringifier2.prototype.convertTextKey = "#text";
              XMLStringifier2.prototype.convertCDataKey = "#cdata";
              XMLStringifier2.prototype.convertCommentKey = "#comment";
              XMLStringifier2.prototype.convertRawKey = "#raw";
              XMLStringifier2.prototype.assertLegalChar = function(str) {
                var res;
                res = str.match(/[\0\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/);
                if (res) {
                  throw new Error("Invalid character in string: " + str + " at index " + res.index);
                }
                return str;
              };
              XMLStringifier2.prototype.elEscape = function(str) {
                var ampregex;
                ampregex = this.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
                return str.replace(ampregex, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\r/g, "&#xD;");
              };
              XMLStringifier2.prototype.attEscape = function(str) {
                var ampregex;
                ampregex = this.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
                return str.replace(ampregex, "&amp;").replace(/</g, "&lt;").replace(/"/g, "&quot;").replace(/\t/g, "&#x9;").replace(/\n/g, "&#xA;").replace(/\r/g, "&#xD;");
              };
              return XMLStringifier2;
            }();
          }).call(this);
        }, {}], 178: [function(require2, module2, exports2) {
          (function() {
            var XMLNode, XMLText, extend = function(child, parent) {
              for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
              }
              function ctor() {
                this.constructor = child;
              }
              ctor.prototype = parent.prototype;
              child.prototype = new ctor();
              child.__super__ = parent.prototype;
              return child;
            }, hasProp = {}.hasOwnProperty;
            XMLNode = require2("./XMLNode");
            module2.exports = XMLText = function(superClass) {
              extend(XMLText2, superClass);
              function XMLText2(parent, text) {
                XMLText2.__super__.constructor.call(this, parent);
                if (text == null) {
                  throw new Error("Missing element text. " + this.debugInfo());
                }
                this.value = this.stringify.eleText(text);
              }
              XMLText2.prototype.clone = function() {
                return Object.create(this);
              };
              XMLText2.prototype.toString = function(options2) {
                return this.options.writer.set(options2).text(this);
              };
              return XMLText2;
            }(XMLNode);
          }).call(this);
        }, { "./XMLNode": 172 }], 179: [function(require2, module2, exports2) {
          (function() {
            var XMLWriterBase, hasProp = {}.hasOwnProperty;
            module2.exports = XMLWriterBase = function() {
              function XMLWriterBase2(options2) {
                var key, ref, ref1, ref2, ref3, ref4, ref5, ref6, value;
                options2 || (options2 = {});
                this.pretty = options2.pretty || false;
                this.allowEmpty = (ref = options2.allowEmpty) != null ? ref : false;
                if (this.pretty) {
                  this.indent = (ref1 = options2.indent) != null ? ref1 : "  ";
                  this.newline = (ref2 = options2.newline) != null ? ref2 : "\n";
                  this.offset = (ref3 = options2.offset) != null ? ref3 : 0;
                  this.dontprettytextnodes = (ref4 = options2.dontprettytextnodes) != null ? ref4 : 0;
                } else {
                  this.indent = "";
                  this.newline = "";
                  this.offset = 0;
                  this.dontprettytextnodes = 0;
                }
                this.spacebeforeslash = (ref5 = options2.spacebeforeslash) != null ? ref5 : "";
                if (this.spacebeforeslash === true) {
                  this.spacebeforeslash = " ";
                }
                this.newlinedefault = this.newline;
                this.prettydefault = this.pretty;
                ref6 = options2.writer || {};
                for (key in ref6) {
                  if (!hasProp.call(ref6, key)) continue;
                  value = ref6[key];
                  this[key] = value;
                }
              }
              XMLWriterBase2.prototype.set = function(options2) {
                var key, ref, value;
                options2 || (options2 = {});
                if ("pretty" in options2) {
                  this.pretty = options2.pretty;
                }
                if ("allowEmpty" in options2) {
                  this.allowEmpty = options2.allowEmpty;
                }
                if (this.pretty) {
                  this.indent = "indent" in options2 ? options2.indent : "  ";
                  this.newline = "newline" in options2 ? options2.newline : "\n";
                  this.offset = "offset" in options2 ? options2.offset : 0;
                  this.dontprettytextnodes = "dontprettytextnodes" in options2 ? options2.dontprettytextnodes : 0;
                } else {
                  this.indent = "";
                  this.newline = "";
                  this.offset = 0;
                  this.dontprettytextnodes = 0;
                }
                this.spacebeforeslash = "spacebeforeslash" in options2 ? options2.spacebeforeslash : "";
                if (this.spacebeforeslash === true) {
                  this.spacebeforeslash = " ";
                }
                this.newlinedefault = this.newline;
                this.prettydefault = this.pretty;
                ref = options2.writer || {};
                for (key in ref) {
                  if (!hasProp.call(ref, key)) continue;
                  value = ref[key];
                  this[key] = value;
                }
                return this;
              };
              XMLWriterBase2.prototype.space = function(level) {
                var indent;
                if (this.pretty) {
                  indent = (level || 0) + this.offset + 1;
                  if (indent > 0) {
                    return new Array(indent).join(this.indent);
                  } else {
                    return "";
                  }
                } else {
                  return "";
                }
              };
              return XMLWriterBase2;
            }();
          }).call(this);
        }, {}], 180: [function(require2, module2, exports2) {
          (function() {
            var XMLDocument, XMLDocumentCB, XMLStreamWriter, XMLStringWriter, assign, isFunction, ref;
            ref = require2("./Utility"), assign = ref.assign, isFunction = ref.isFunction;
            XMLDocument = require2("./XMLDocument");
            XMLDocumentCB = require2("./XMLDocumentCB");
            XMLStringWriter = require2("./XMLStringWriter");
            XMLStreamWriter = require2("./XMLStreamWriter");
            module2.exports.create = function(name, xmldec, doctype, options2) {
              var doc, root;
              if (name == null) {
                throw new Error("Root element needs a name.");
              }
              options2 = assign({}, xmldec, doctype, options2);
              doc = new XMLDocument(options2);
              root = doc.element(name);
              if (!options2.headless) {
                doc.declaration(options2);
                if (options2.pubID != null || options2.sysID != null) {
                  doc.doctype(options2);
                }
              }
              return root;
            };
            module2.exports.begin = function(options2, onData, onEnd) {
              var ref1;
              if (isFunction(options2)) {
                ref1 = [options2, onData], onData = ref1[0], onEnd = ref1[1];
                options2 = {};
              }
              if (onData) {
                return new XMLDocumentCB(options2, onData, onEnd);
              } else {
                return new XMLDocument(options2);
              }
            };
            module2.exports.stringWriter = function(options2) {
              return new XMLStringWriter(options2);
            };
            module2.exports.streamWriter = function(stream, options2) {
              return new XMLStreamWriter(stream, options2);
            };
          }).call(this);
        }, { "./Utility": 159, "./XMLDocument": 169, "./XMLDocumentCB": 170, "./XMLStreamWriter": 175, "./XMLStringWriter": 176 }] }, {}, [21])(21);
      });
    }
  });

  // index.js
  var index_exports = {};
  __export(index_exports, {
    toDocx: () => toDocx,
    toHtml: () => toHtml
  });

  // html2docx.js
  var import_docx = __toESM(require_build());
  var import_buffer = __toESM(require_buffer());
  async function file_from_url(url, name, defaultType = "image/jpeg") {
    try {
      console.log("file_from_url", url);
      const response = await fetch(url);
      const data = await response.blob();
      return new File([data], name, {
        type: data.type || defaultType
      });
    } catch (error) {
      console.log(error);
      return new File([""], "empty.txt", {
        type: "text/plain"
      });
    }
  }
  async function array_buffer_from_url(url) {
    let file = await file_from_url(url);
    return await file.arrayBuffer();
  }
  async function buffer_from_url(url) {
    let array_buffer = await array_buffer_from_url(url);
    return import_buffer.Buffer.from(array_buffer);
  }
  async function get_intrinsic_image_size(url) {
    return new Promise((resolve) => {
      const img = new Image();
      img.onload = () => resolve({ width: img.naturalWidth, height: img.naturalHeight });
      img.onerror = () => resolve({ width: 0, height: 0 });
      img.crossOrigin = "anonymous";
      img.src = url;
    });
  }
  function scale_down(size, max_width = 600) {
    if (size.width <= max_width) {
      return size;
    } else {
      let scale = max_width / size.width;
      return { width: size.width * scale, height: size.height * scale };
    }
  }
  function wrap_lines_in_p(html) {
    const lines = html.replaceAll("<br>", "\n").replaceAll("<br/>", "\n").replaceAll("<br />", "\n").split("\n").map((line) => line.trim()).filter((line) => line);
    return lines.map((line) => `<p>${line}</p>`).join("\n");
  }
  async function canvas_to_image(canvas) {
    const blob = await new Promise((resolve) => canvas.toBlob(resolve, "image/png"));
    const url = URL.createObjectURL(blob);
    const img = new Image();
    await new Promise((resolve) => {
      img.onload = resolve;
      img.src = url;
    });
    return img;
  }
  var COLORS = {
    "black": "000000",
    "silver": "c0c0c0",
    "gray": "808080",
    "white": "ffffff",
    "maroon": "800000",
    "red": "ff0000",
    "purple": "800080",
    "fuchsia": "ff00ff",
    "green": "008000",
    "lime": "00ff00",
    "olive": "808000",
    "yellow": "ffff00",
    "navy": "000080",
    "blue": "0000ff",
    "teal": "008080",
    "aqua": "00ffff",
    "aliceblue": "f0f8ff",
    "antiquewhite": "faebd7",
    "aquamarine": "7fffd4",
    "azure": "f0ffff",
    "beige": "f5f5dc",
    "bisque": "ffe4c4",
    "blanchedalmond": "ffebcd",
    "blueviolet": "8a2be2",
    "brown": "a52a2a",
    "burlywood": "deb887",
    "cadetblue": "5f9ea0",
    "chartreuse": "7fff00",
    "chocolate": "d2691e",
    "coral": "ff7f50",
    "cornflowerblue": "6495ed",
    "cornsilk": "fff8dc",
    "crimson": "dc143c",
    "cyan": "00ffff",
    "darkblue": "00008b",
    "darkcyan": "008b8b",
    "darkgoldenrod": "b8860b",
    "darkgray": "a9a9a9",
    "darkgreen": "006400",
    "darkgrey": "a9a9a9",
    "darkkhaki": "bdb76b",
    "darkmagenta": "8b008b",
    "darkolivegreen": "556b2f",
    "darkorange": "ff8c00",
    "darkorchid": "9932cc",
    "darkred": "8b0000",
    "darksalmon": "e9967a",
    "darkseagreen": "8fbc8f",
    "darkslateblue": "483d8b",
    "darkslategray": "2f4f4f",
    "darkslategrey": "2f4f4f",
    "darkturquoise": "00ced1",
    "darkviolet": "9400d3",
    "deeppink": "ff1493",
    "deepskyblue": "00bfff",
    "dimgray": "696969",
    "dimgrey": "696969",
    "dodgerblue": "1e90ff",
    "firebrick": "b22222",
    "floralwhite": "fffaf0",
    "forestgreen": "228b22",
    "gainsboro": "dcdcdc",
    "ghostwhite": "f8f8ff",
    "gold": "ffd700",
    "goldenrod": "daa520",
    "greenyellow": "adff2f",
    "grey": "808080",
    "honeydew": "f0fff0",
    "hotpink": "ff69b4",
    "indianred": "cd5c5c",
    "indigo": "4b0082",
    "ivory": "fffff0",
    "khaki": "f0e68c",
    "lavender": "e6e6fa",
    "lavenderblush": "fff0f5",
    "lawngreen": "7cfc00",
    "lemonchiffon": "fffacd",
    "lightblue": "add8e6",
    "lightcoral": "f08080",
    "lightcyan": "e0ffff",
    "lightgoldenrodyellow": "fafad2",
    "lightgray": "d3d3d3",
    "lightgreen": "90ee90",
    "lightgrey": "d3d3d3",
    "lightpink": "ffb6c1",
    "lightsalmon": "ffa07a",
    "lightseagreen": "20b2aa",
    "lightskyblue": "87cefa",
    "lightslategray": "778899",
    "lightslategrey": "778899",
    "lightsteelblue": "b0c4de",
    "lightyellow": "ffffe0",
    "limegreen": "32cd32",
    "linen": "faf0e6",
    "magenta": "ff00ff",
    "mediumaquamarine": "66cdaa",
    "mediumblue": "0000cd",
    "mediumorchid": "ba55d3",
    "mediumpurple": "9370db",
    "mediumseagreen": "3cb371",
    "mediumslateblue": "7b68ee",
    "mediumspringgreen": "00fa9a",
    "mediumturquoise": "48d1cc",
    "mediumvioletred": "c71585",
    "midnightblue": "191970",
    "mintcream": "f5fffa",
    "mistyrose": "ffe4e1",
    "moccasin": "ffe4b5",
    "navajowhite": "ffdead",
    "oldlace": "fdf5e6",
    "olivedrab": "6b8e23",
    "orange": "ffa500",
    "orangered": "ff4500",
    "orchid": "da70d6",
    "palegoldenrod": "eee8aa",
    "palegreen": "98fb98",
    "paleturquoise": "afeeee",
    "palevioletred": "db7093",
    "papayawhip": "ffefd5",
    "peachpuff": "ffdab9",
    "peru": "cd853f",
    "pink": "ffc0cb",
    "plum": "dda0dd",
    "powderblue": "b0e0e6",
    "rosybrown": "bc8f8f",
    "royalblue": "4169e1",
    "saddlebrown": "8b4513",
    "salmon": "fa8072",
    "sandybrown": "f4a460",
    "seagreen": "2e8b57",
    "seashell": "fff5ee",
    "sienna": "a0522d",
    "skyblue": "87ceeb",
    "slateblue": "6a5acd",
    "slategray": "708090",
    "slategrey": "708090",
    "snow": "fffafa",
    "springgreen": "00ff7f",
    "steelblue": "4682b4",
    "tan": "d2b48c",
    "thistle": "d8bfd8",
    "tomato": "ff6347",
    "turquoise": "40e0d0",
    "violet": "ee82ee",
    "wheat": "f5deb3",
    "whitesmoke": "f5f5f5",
    "yellowgreen": "9acd32"
  };
  async function html2docx(html, strict = false) {
    let document2 = typeof html === "string" ? new DOMParser().parseFromString(html, "text/html") : html;
    document2.querySelectorAll("figure").forEach((figure) => {
      const caption = figure.querySelector("figcaption");
      if (caption) {
        figure.after(caption);
      }
    });
    if (!strict) {
      group_orphaned_elements(document2.body);
    }
    console.log(document2.body);
    let docx_elements = [];
    let nodes = Array.from(document2.querySelectorAll("p,pre,table,h1,h2,h3,h4,h5,h6,ul,ol,div,figure,figcaption"));
    nodes = nodes.filter((node) => {
      return !nodes.filter((el) => el != node).some((el) => el.contains(node));
    });
    if (nodes.length == 0) {
      document2 = new DOMParser().parseFromString(wrap_lines_in_p(document2.body.innerHTML), "text/html");
      nodes = Array.from(document2.querySelectorAll("p"));
    }
    for (let node of nodes) {
      let instance = nodes.indexOf(node);
      if (["P", "PRE", "DIV", "FIGURE", "FIGCAPTION"].includes(node.nodeName)) {
        docx_elements.push(await build_paragraph(node));
      } else if (node.nodeName == "TABLE") {
        docx_elements.push(await build_table(node));
      } else if (["H1", "H2", "H3", "H4", "H5", "H6"].includes(node.nodeName)) {
        docx_elements.push(await build_heading(node));
      } else if (node.nodeName == "UL") {
        docx_elements.push(...await build_ul(node, instance));
      } else if (node.nodeName == "OL") {
        docx_elements.push(...await build_ol(node, instance));
      }
    }
    let docx = new import_docx.Document({
      sections: [{
        children: docx_elements
      }],
      numbering: {
        config: [{
          reference: "arabic",
          levels: [
            {
              level: 0,
              format: "decimal",
              text: "%1",
              alignment: import_docx.AlignmentType.START,
              style: {
                paragraph: {
                  indent: { left: 300, hanging: 200 }
                }
              }
            },
            {
              level: 1,
              format: "decimal",
              text: "%1.%2",
              alignment: import_docx.AlignmentType.START,
              style: {
                paragraph: {
                  indent: { left: 600, hanging: 200 }
                }
              }
            }
          ]
        }]
      }
    });
    let blob = await import_docx.Packer.toBlob(docx);
    return blob;
  }
  async function build_paragraph(node) {
    let style = parse_style(node);
    if (style.size == null) style.size = 24;
    if (style.font == null && node.nodeName == "PRE") style.font = "Courier New";
    let children = await build_child_nodes(node, style);
    let alignment = get_align(node);
    let border = parse_border(node);
    if (node.parentElement.nodeName == "BLOCKQUOTE") {
      if (border.left == null) {
        border.left = { color: "cbd5e1", size: 16, space: 1, style: "single" };
      }
      if (style.indent == null || style.indent.left == 0) {
        style.indent = { left: 80 };
      }
    }
    let paragraph = new import_docx.Paragraph({
      alignment,
      indent: style.indent,
      children,
      border
    });
    return paragraph;
  }
  async function build_table(node) {
    let rows = [];
    for (let row of node.querySelectorAll("tr")) {
      let cells = [];
      for (let cell of row.querySelectorAll("th, td")) {
        cells.push(new import_docx.TableCell({
          children: [new import_docx.Paragraph({ children: await build_child_nodes(cell) })]
        }));
      }
      rows.push(new import_docx.TableRow({
        children: cells
      }));
    }
    let number_of_columns = node.querySelector("tr").querySelectorAll("th, td").length;
    let table = new import_docx.Table({
      rows,
      width: 0,
      columnWidths: Array(number_of_columns).fill(Math.floor(9638 / number_of_columns), 0, number_of_columns)
    });
    return table;
  }
  async function build_heading(node) {
    let style = parse_style(node);
    let children = await build_child_nodes(node, style);
    let alignment = get_align(node);
    let heading;
    switch (node.nodeName) {
      case "H1":
        heading = import_docx.HeadingLevel.HEADING_1;
        break;
      case "H2":
        heading = import_docx.HeadingLevel.HEADING_2;
        break;
      case "H3":
        heading = import_docx.HeadingLevel.HEADING_3;
        break;
      case "H4":
        heading = import_docx.HeadingLevel.HEADING_4;
        break;
      case "H5":
        heading = import_docx.HeadingLevel.HEADING_5;
        break;
      case "H6":
        heading = import_docx.HeadingLevel.HEADING_6;
        break;
      default:
        break;
    }
    let border = parse_border(node);
    let paragraph = new import_docx.Paragraph({
      alignment,
      children,
      indent: style.indent,
      heading,
      border
    });
    return paragraph;
  }
  async function build_ul(node, instance) {
    let list = [];
    for (let li of node.querySelectorAll(":scope > li")) {
      list.push(new import_docx.Paragraph({
        children: await build_child_nodes(li),
        bullet: { level: 0, instance }
      }));
      if (li.querySelectorAll == null) continue;
      for (let sub_li of li.querySelectorAll("ul li")) {
        list.push(new import_docx.Paragraph({
          children: await build_child_nodes(sub_li),
          bullet: { level: 1, instance }
        }));
      }
    }
    return list;
  }
  async function build_ol(node, instance) {
    let list = [];
    for (let li of node.querySelectorAll(":scope > li")) {
      list.push(new import_docx.Paragraph({
        children: await build_child_nodes(li),
        numbering: { reference: "arabic", instance, level: 0 }
      }));
      if (li.querySelectorAll == null) continue;
      for (let sub_li of li.querySelectorAll("ol li")) {
        list.push(new import_docx.Paragraph({
          children: await build_child_nodes(sub_li),
          numbering: { reference: "arabic", instance, level: 1 }
        }));
      }
    }
    return list;
  }
  async function build_child_nodes(node, inherit_attr) {
    if (inherit_attr == null) inherit_attr = {};
    let values = [];
    let children = node.childNodes;
    for (let child of children) {
      if (child.nodeName == "#text") {
        let text_run = new import_docx.TextRun({
          text: child.nodeValue,
          bold: inherit_attr.bold,
          italics: inherit_attr.italics,
          subScript: inherit_attr.subScript,
          superScript: inherit_attr.superScript,
          strike: inherit_attr.strike,
          underline: inherit_attr.underline ? {} : null,
          color: inherit_attr.color,
          shading: inherit_attr.shading,
          size: inherit_attr.size,
          allCaps: inherit_attr.allCaps,
          font: inherit_attr.font,
          style: inherit_attr.style
        });
        values = [...values, text_run];
      } else if (child.nodeName == "A" && child.getAttribute("href")) {
        let link = new import_docx.ExternalHyperlink({
          children: await build_child_nodes(child, { style: "Hyperlink" }),
          link: child.getAttribute("href")
        });
        values = [...values, link];
      } else if (child.nodeName == "IMG") {
        let buffer = await buffer_from_url(child.src);
        let floating = parse_image_floating(child);
        let size = { width: child.width, height: child.height };
        let intrinsic_size = await get_intrinsic_image_size(child.src);
        if (size.width == 0 && size.height == 0) {
          size = intrinsic_size;
        } else if (size.width == 0) {
          let factor = intrinsic_size.width / intrinsic_size.height;
          size.width = size.height * factor;
        } else if (size.height == 0) {
          let factor = intrinsic_size.height / intrinsic_size.width;
          size.height = size.width * factor;
        }
        let image_run = new import_docx.ImageRun({
          data: buffer,
          transformation: scale_down(size),
          floating
        });
        values = [...values, image_run];
      } else if (child.nodeName == "CANVAS") {
        let image = await canvas_to_image(child);
        let buffer = await buffer_from_url(image.src);
        let floating = parse_image_floating(image);
        let size = { width: image.width, height: image.height };
        let intrinsic_size = await get_intrinsic_image_size(image.src);
        if (size.width == 0 || size.width == null) {
          size = intrinsic_size;
        }
        let image_run = new import_docx.ImageRun({
          data: buffer,
          transformation: scale_down(size),
          floating
        });
        values = [...values, image_run];
      } else if (node.childNodes.length > 0 && !["UL", "OL"].includes(node.nodeName)) {
        let passed_down_style = { ...inherit_attr, ...parse_style(child) };
        if (child.nodeName == "STRONG") passed_down_style.bold = true;
        if (child.nodeName == "EM") passed_down_style.italics = true;
        if (child.nodeName == "SUB") passed_down_style.subScript = true;
        if (child.nodeName == "SUP") passed_down_style.superScript = true;
        if (child.nodeName == "S") passed_down_style.strike = true;
        if (child.nodeName == "U") passed_down_style.underline = true;
        if (child.nodeName == "A") {
          passed_down_style.anchor = child.getAttribute("href");
          passed_down_style.underline = true;
        }
        values = [...values, ...await build_child_nodes(child, passed_down_style)];
      }
    }
    return values;
  }
  function parse_style(node) {
    let style = {};
    let raw_style = (node.getAttribute("style") || "").split(";");
    for (let el of raw_style) {
      let values = el.trim().split(":");
      if (values.length == 2) {
        style[values[0].trim()] = values[1].trim();
      }
    }
    let fill = to_hex(style["background-color"]);
    if (fill) {
      style["shading"] = { fill };
    }
    style["color"] = to_hex(style["color"]);
    if (style["font-family"]) {
      style["font"] = style["font-family"].split(",")[0];
      if (style["font"]) {
        style["font"] = style["font"].split("'").join("");
      }
    }
    style["size"] = to_halfpoint(style["font-size"]);
    let indent_left = to_halfpoint(style["padding-left"]);
    if (!isNaN(indent_left)) {
      style["indent"] = { left: indent_left * 10 };
    }
    if (style["text-transform"] == "uppercase") {
      style["allCaps"] = true;
    }
    if (style["text-transform"] == "capitalize") {
      style["smallCaps"] = true;
    }
    if (style["text-decoration"] == "line-through") {
      style["strike"] = true;
    }
    if (style["text-decoration"] == "underline") {
      style["underline"] = true;
    }
    if (style["font-style"] == "italic") {
      style["italics"] = true;
    }
    if (style["font-weight"] == "bold" || parseInt(style["font-weight"]) >= 700) {
      style["bold"] = true;
    }
    let allow_attrs = ["color", "shading", "size", "indent", "allCaps", "allCaps", "strike", "font", "italics", "underline", "bold"];
    for (let key of Object.keys(style)) {
      if (!allow_attrs.includes(key) || style[key] == null) {
        delete style[key];
      }
    }
    return style;
  }
  function to_halfpoint(str) {
    if (str == null || str == "") return null;
    str = str.trim();
    let unit;
    if (str.endsWith("pt")) {
      unit = "pt";
    } else if (str.endsWith("px")) {
      unit = "px";
    }
    if (unit) {
      let value = parseInt(str.split(unit).join(""));
      if (isNaN(value)) return null;
      if (unit == "px") {
        value = 2 * Math.ceil(72 * value / 96);
      } else if (unit == "pt") {
        value = 2 * value;
      }
      return value;
    } else {
      return null;
    }
  }
  function to_hex(str) {
    if (str == null || str == "") return null;
    str = str.trim();
    if (COLORS[str] != null) return COLORS[str];
    let color;
    if (str.includes("rgb")) {
      color = rgb_to_hex(str);
    } else {
      color = str.split("#").join("").trim();
    }
    if (color.length == 3) {
      color = color + color;
    }
    if (color == null || !/^[0-9A-F]{6}$/i.test(color)) {
      color == null;
    }
    return color;
  }
  function rgb_to_hex(rgb) {
    let sep = rgb.indexOf(",") > -1 ? "," : " ";
    rgb = rgb.substr(4).split(")")[0].split(sep);
    let r = (+rgb[0]).toString(16), g = (+rgb[1]).toString(16), b = (+rgb[2]).toString(16);
    if (r.length == 1)
      r = "0" + r;
    if (g.length == 1)
      g = "0" + g;
    if (b.length == 1)
      b = "0" + b;
    return r + g + b;
  }
  function parse_border(node) {
    let style = {};
    let raw_style = (node.getAttribute("style") || "").split(";");
    for (let el of raw_style) {
      let values = el.trim().split(":");
      if (values.length == 2) {
        style[values[0].trim()] = values[1].trim();
      }
    }
    let top, right, bottom, left;
    if (style["border"] != null) {
      let [size, border_style, ...color] = style["border"].split(" ");
      color = to_hex(color.join("").trim());
      size = to_halfpoint(size) * 4;
      top = { color, size, space: 1, style: "single" };
      right = { color, size, space: 1, style: "single" };
      bottom = { color, size, space: 1, style: "single" };
      left = { color, size, space: 1, style: "single" };
    }
    if (style["border-left"] != null) {
      let [size, border_style, ...color] = style["border-left"].split(" ");
      color = to_hex(color.join("").trim());
      size = to_halfpoint(size) * 4;
      left = { color, size, space: 1, style: "single" };
    }
    if (style["border-right"] != null) {
      let [size, border_style, ...color] = style["border-right"].split(" ");
      color = to_hex(color.join("").trim());
      size = to_halfpoint(size) * 4;
      right = { color, size, space: 1, style: "single" };
    }
    if (style["border-top"] != null) {
      let [size, border_style, ...color] = style["border-top"].split(" ");
      color = to_hex(color.join("").trim());
      size = to_halfpoint(size) * 4;
      top = { color, size, space: 1, style: "single" };
    }
    if (style["border-bottom"] != null) {
      let [size, border_style, ...color] = style["border-bottom"].split(" ");
      color = to_hex(color.join("").trim());
      size = to_halfpoint(size) * 4;
      bottom = { color, size, space: 1, style: "single" };
    }
    return { top, right, bottom, left };
  }
  function parse_image_floating(node) {
    let style = {};
    let raw_style = (node.getAttribute("style") || "").split(";");
    for (let el of raw_style) {
      let values = el.trim().split(":");
      if (values.length == 2) {
        style[values[0].trim()] = values[1].trim();
      }
    }
    let verticalPosition = {
      relative: import_docx.VerticalPositionRelativeFrom.TOP_MARGIN,
      align: import_docx.VerticalPositionAlign.TOP
    };
    let margin = {
      top: 36e4,
      right: 36e4,
      bottom: 36e4,
      left: 36e4
    };
    if (style["margin-left"] == "auto" && style["margin-right"] == "auto") {
      return {
        horizontalPosition: {
          relative: import_docx.HorizontalPositionRelativeFrom.COLUMN,
          align: import_docx.HorizontalPositionAlign.CENTER
        },
        verticalPosition,
        margin,
        wrap: { type: import_docx.TextWrappingType.TOP_AND_BOTTOM, side: import_docx.TextWrappingSide.BOTH_SIDES }
      };
    }
    if (style["float"] == "left") {
      return {
        horizontalPosition: {
          relative: import_docx.HorizontalPositionRelativeFrom.COLUMN,
          align: import_docx.HorizontalPositionAlign.LEFT
        },
        verticalPosition,
        margin,
        wrap: { type: import_docx.TextWrappingType.SQUARE, side: import_docx.TextWrappingSide.RIGHT }
      };
    }
    if (style["float"] == "right") {
      return {
        horizontalPosition: {
          relative: import_docx.HorizontalPositionRelativeFrom.COLUMN,
          align: import_docx.HorizontalPositionAlign.RIGHT
        },
        verticalPosition,
        margin,
        wrap: { type: import_docx.TextWrappingType.SQUARE, side: import_docx.TextWrappingSide.LEFT }
      };
    }
    return null;
  }
  function get_align(node) {
    let raw_style = node.getAttribute("style");
    if (raw_style == null) return import_docx.AlignmentType.LEFT;
    let style = {};
    for (let pair of raw_style.split(";")) {
      if (pair.split(":").length != 2) continue;
      let key = pair.split(":")[0].trim();
      let value = pair.split(":")[1].trim();
      style[key] = value;
    }
    switch (style["text-align"]) {
      case "left":
        return import_docx.AlignmentType.LEFT;
      case "center":
        return import_docx.AlignmentType.CENTER;
      case "justify":
        return import_docx.AlignmentType.JUSTIFIED;
      case "right":
        return import_docx.AlignmentType.RIGHT;
      default:
        return import_docx.AlignmentType.LEFT;
    }
  }
  function group_orphaned_elements(container) {
    const validParents = /* @__PURE__ */ new Set(["p", "pre", "div", "table", "h1", "h2", "h3", "h4", "h5", "h6", "ul", "ol", "figure", "figcaption"]);
    function isOrphaned(element) {
      let current = element.parentElement;
      while (current && current !== container) {
        if (validParents.has(current.tagName.toLowerCase())) {
          return false;
        }
        current = current.parentElement;
      }
      return true;
    }
    function isInlineElement(element) {
      if (element.nodeType === Node.TEXT_NODE) {
        return true;
      }
      if (element.nodeType !== Node.ELEMENT_NODE) {
        return false;
      }
      const tagName = element.tagName.toLowerCase();
      const inlineElements = /* @__PURE__ */ new Set([
        "a",
        "abbr",
        "acronym",
        "b",
        "bdo",
        "big",
        "br",
        "button",
        "cite",
        "code",
        "dfn",
        "em",
        "i",
        "img",
        "input",
        "kbd",
        "label",
        "map",
        "object",
        "q",
        "samp",
        "script",
        "select",
        "small",
        "span",
        "strong",
        "sub",
        "sup",
        "textarea",
        "time",
        "tt",
        "var"
      ]);
      return inlineElements.has(tagName) || window.getComputedStyle(element).display.includes("inline");
    }
    function isWhitespaceOnly(textNode) {
      return /^\s*$/.test(textNode.textContent);
    }
    function processChildren(parent) {
      const children = Array.from(parent.childNodes);
      let i = 0;
      while (i < children.length) {
        const child = children[i];
        if (!parent.contains(child)) {
          i++;
          continue;
        }
        if (child.nodeType === Node.ELEMENT_NODE && !isInlineElement(child)) {
          processChildren(child);
          i++;
          continue;
        }
        const isChildOrphaned = isOrphaned(child);
        const isChildInline = isInlineElement(child);
        const isSignificantText = child.nodeType === Node.TEXT_NODE && !isWhitespaceOnly(child);
        if (isChildOrphaned && (isChildInline || isSignificantText)) {
          const orphanedGroup = [];
          let j = i;
          while (j < children.length) {
            const currentChild = children[j];
            if (!parent.contains(currentChild)) {
              j++;
              continue;
            }
            const isCurrentOrphaned = isOrphaned(currentChild);
            const isCurrentInline = isInlineElement(currentChild);
            const isCurrentSignificantText = currentChild.nodeType === Node.TEXT_NODE && !isWhitespaceOnly(currentChild);
            if (currentChild.nodeType === Node.ELEMENT_NODE && currentChild.tagName.toLowerCase() === "br" && isCurrentOrphaned) {
              orphanedGroup.push(currentChild);
              j++;
              break;
            }
            if (currentChild.nodeType === Node.ELEMENT_NODE && currentChild.tagName.toLowerCase() === "img" && isCurrentOrphaned) {
              const imgDisplay = window.getComputedStyle(currentChild).display;
              if (imgDisplay === "block" || imgDisplay === "block-inline") {
                if (orphanedGroup.length > 0 && orphanedGroup.some((node) => node.nodeType === Node.ELEMENT_NODE || node.nodeType === Node.TEXT_NODE && !isWhitespaceOnly(node))) {
                  break;
                }
                const imgP = document.createElement("p");
                parent.insertBefore(imgP, currentChild);
                imgP.appendChild(currentChild);
                const newChildren = Array.from(parent.childNodes);
                const imgPIndex = newChildren.indexOf(imgP);
                i = imgPIndex + 1;
                children.length = 0;
                children.push(...newChildren);
                break;
              } else {
                orphanedGroup.push(currentChild);
                j++;
              }
            } else if (isCurrentOrphaned && (isCurrentInline || isCurrentSignificantText)) {
              orphanedGroup.push(currentChild);
              j++;
            } else if (currentChild.nodeType === Node.TEXT_NODE && isWhitespaceOnly(currentChild)) {
              orphanedGroup.push(currentChild);
              j++;
            } else {
              break;
            }
          }
          const hasSignificantContent = orphanedGroup.some(
            (node) => node.nodeType === Node.ELEMENT_NODE || node.nodeType === Node.TEXT_NODE && !isWhitespaceOnly(node)
          );
          if (hasSignificantContent && orphanedGroup.length > 0) {
            const p = document.createElement("p");
            parent.insertBefore(p, orphanedGroup[0]);
            orphanedGroup.forEach((node) => {
              if (parent.contains(node)) {
                p.appendChild(node);
              }
            });
            const newChildren = Array.from(parent.childNodes);
            const pIndex = newChildren.indexOf(p);
            i = pIndex + 1;
            children.length = 0;
            children.push(...newChildren);
            if (j < children.length) {
              continue;
            }
          } else {
            i = j;
          }
        } else {
          i++;
        }
      }
    }
    processChildren(container);
  }

  // docx2html.js
  var import_mammoth = __toESM(require_mammoth_browser());
  var monospaceFonts = ["consolas", "courier", "courier new"];
  var options = {
    transformDocument: import_mammoth.default.transforms.paragraph(transformParagraph),
    preserveColors: true,
    preserveFonts: true,
    styleMap: [
      "p[style-name='Title'] => h1:fresh",
      "p[style-name='Heading 1'] => h1:fresh",
      "p[style-name='Heading 2'] => h2:fresh",
      "p[style-name='Heading 3'] => h3:fresh",
      "p[style-name='Heading 4'] => h4:fresh",
      "p[style-name='Heading 5'] => h5:fresh",
      "p[style-name='Heading 6'] => h6:fresh"
    ],
    convertImage: import_mammoth.default.images.imgElement(function(image) {
      return image.read().then(function(buffer) {
        let file = new File([buffer], { type: image.contentType });
        let url = URL.createObjectURL(file);
        return {
          src: url,
          width: image.width,
          height: image.height,
          style: image.style
        };
      });
    })
  };
  async function docx2html(blob) {
    try {
      let arrayBuffer = await blob.arrayBuffer();
      let result = await import_mammoth.default.convertToHtml({ arrayBuffer }, options);
      return result.value;
    } catch (error) {
      console.log(error);
      return "";
    }
  }
  function transformParagraph(paragraph) {
    var runs = import_mammoth.default.transforms.getDescendantsOfType(paragraph, "run");
    var isMatch = runs.length > 0 && runs.every(function(run) {
      return run.font && monospaceFonts.indexOf(run.font.toLowerCase()) !== -1;
    });
    if (isMatch) {
      return {
        ...paragraph,
        styleId: "code",
        styleName: "Code"
      };
    } else {
      return paragraph;
    }
  }

  // index.js
  var toDocx = html2docx;
  var toHtml = docx2html;
  return __toCommonJS(index_exports);
})();
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/*! http://mths.be/fromcodepoint v0.1.0 by @mathias */
/*! Bundled license information:

docx/build/index.js:
  (*! For license information please see index.js.LICENSE.txt *)

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)
*/
